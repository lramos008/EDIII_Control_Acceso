
EDIII_Control_Acceso.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011144  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b4c  080112e8  080112e8  000122e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011e34  08011e34  000131f0  2**0
                  CONTENTS
  4 .ARM          00000008  08011e34  08011e34  00012e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011e3c  08011e3c  000131f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011e3c  08011e3c  00012e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011e40  08011e40  00012e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  08011e44  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006530  200001f0  08012034  000131f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006720  08012034  00013720  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021395  00000000  00000000  00013220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004f75  00000000  00000000  000345b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ef0  00000000  00000000  00039530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001818  00000000  00000000  0003b420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001eb06  00000000  00000000  0003cc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029de2  00000000  00000000  0005b73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1408  00000000  00000000  00085520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00136928  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000977c  00000000  00000000  0013696c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  001400e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080112cc 	.word	0x080112cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	080112cc 	.word	0x080112cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4a07      	ldr	r2, [pc, #28]	@ (8001020 <vApplicationGetIdleTaskMemory+0x2c>)
 8001004:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	4a06      	ldr	r2, [pc, #24]	@ (8001024 <vApplicationGetIdleTaskMemory+0x30>)
 800100a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2280      	movs	r2, #128	@ 0x80
 8001010:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001012:	bf00      	nop
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	2000020c 	.word	0x2000020c
 8001024:	20000260 	.word	0x20000260

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102e:	f001 fcb3 	bl	8002998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001032:	f000 f845 	bl	80010c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001036:	f000 fa09 	bl	800144c <MX_GPIO_Init>
  MX_DMA_Init();
 800103a:	f000 f9e7 	bl	800140c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800103e:	f000 f9bb 	bl	80013b8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001042:	f000 f8fb 	bl	800123c <MX_I2C1_Init>
  MX_SPI3_Init();
 8001046:	f000 f981 	bl	800134c <MX_SPI3_Init>
  MX_FATFS_Init();
 800104a:	f005 f8ed 	bl	8006228 <MX_FATFS_Init>
  MX_RTC_Init();
 800104e:	f000 f923 	bl	8001298 <MX_RTC_Init>
  MX_ADC1_Init();
 8001052:	f000 f8a1 	bl	8001198 <MX_ADC1_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  display_queue = xQueueCreate(1, sizeof(display_state_t));
 8001056:	2200      	movs	r2, #0
 8001058:	2101      	movs	r1, #1
 800105a:	2001      	movs	r0, #1
 800105c:	f009 fbbb 	bl	800a7d6 <xQueueGenericCreate>
 8001060:	4603      	mov	r3, r0
 8001062:	4a11      	ldr	r2, [pc, #68]	@ (80010a8 <main+0x80>)
 8001064:	6013      	str	r3, [r2, #0]
  sequence_queue = xQueueCreate(6, sizeof(char));
 8001066:	2200      	movs	r2, #0
 8001068:	2101      	movs	r1, #1
 800106a:	2006      	movs	r0, #6
 800106c:	f009 fbb3 	bl	800a7d6 <xQueueGenericCreate>
 8001070:	4603      	mov	r3, r0
 8001072:	4a0e      	ldr	r2, [pc, #56]	@ (80010ac <main+0x84>)
 8001074:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  //xTaskCreate(display_manager, "Tarea 05", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 4, NULL);
  //xTaskCreate(LockControl, "Tarea 04", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL);
  //xTaskCreate(VoiceProcessing, "Tarea 03", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  //xTaskCreate(user_check_task, "Tarea 02", 10 * configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  xTaskCreate(test_task, "Tarea 02", 5 * configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
 8001076:	2300      	movs	r3, #0
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	2302      	movs	r3, #2
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2300      	movs	r3, #0
 8001080:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8001084:	490a      	ldr	r1, [pc, #40]	@ (80010b0 <main+0x88>)
 8001086:	480b      	ldr	r0, [pc, #44]	@ (80010b4 <main+0x8c>)
 8001088:	f00a f8fa 	bl	800b280 <xTaskCreate>
  //xTaskCreate(input_sequence_scan, "Tarea 01", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
  xTaskCreate(idle_task, "Tarea Idle", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 800108c:	2300      	movs	r3, #0
 800108e:	9301      	str	r3, [sp, #4]
 8001090:	2300      	movs	r3, #0
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	2300      	movs	r3, #0
 8001096:	2280      	movs	r2, #128	@ 0x80
 8001098:	4907      	ldr	r1, [pc, #28]	@ (80010b8 <main+0x90>)
 800109a:	4808      	ldr	r0, [pc, #32]	@ (80010bc <main+0x94>)
 800109c:	f00a f8f0 	bl	800b280 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 80010a0:	f00a fa26 	bl	800b4f0 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <main+0x7c>
 80010a8:	20000620 	.word	0x20000620
 80010ac:	2000061c 	.word	0x2000061c
 80010b0:	080112e8 	.word	0x080112e8
 80010b4:	08002905 	.word	0x08002905
 80010b8:	080112f4 	.word	0x080112f4
 80010bc:	080015b1 	.word	0x080015b1

080010c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b094      	sub	sp, #80	@ 0x50
 80010c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c6:	f107 0320 	add.w	r3, r7, #32
 80010ca:	2230      	movs	r2, #48	@ 0x30
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f00d fb47 	bl	800e762 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e4:	2300      	movs	r3, #0
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	4b29      	ldr	r3, [pc, #164]	@ (8001190 <SystemClock_Config+0xd0>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ec:	4a28      	ldr	r2, [pc, #160]	@ (8001190 <SystemClock_Config+0xd0>)
 80010ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f4:	4b26      	ldr	r3, [pc, #152]	@ (8001190 <SystemClock_Config+0xd0>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	4b23      	ldr	r3, [pc, #140]	@ (8001194 <SystemClock_Config+0xd4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800110c:	4a21      	ldr	r2, [pc, #132]	@ (8001194 <SystemClock_Config+0xd4>)
 800110e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b1f      	ldr	r3, [pc, #124]	@ (8001194 <SystemClock_Config+0xd4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001120:	2309      	movs	r3, #9
 8001122:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001124:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001128:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800112a:	2301      	movs	r3, #1
 800112c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112e:	2302      	movs	r3, #2
 8001130:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001132:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001136:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001138:	2304      	movs	r3, #4
 800113a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 800113c:	2340      	movs	r3, #64	@ 0x40
 800113e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001140:	2302      	movs	r3, #2
 8001142:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001144:	2307      	movs	r3, #7
 8001146:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001148:	f107 0320 	add.w	r3, r7, #32
 800114c:	4618      	mov	r0, r3
 800114e:	f002 fd99 	bl	8003c84 <HAL_RCC_OscConfig>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001158:	f000 fa3f 	bl	80015da <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800115c:	230f      	movs	r3, #15
 800115e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001160:	2302      	movs	r3, #2
 8001162:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001168:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800116c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001172:	f107 030c 	add.w	r3, r7, #12
 8001176:	2102      	movs	r1, #2
 8001178:	4618      	mov	r0, r3
 800117a:	f002 fffb 	bl	8004174 <HAL_RCC_ClockConfig>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001184:	f000 fa29 	bl	80015da <Error_Handler>
  }
}
 8001188:	bf00      	nop
 800118a:	3750      	adds	r7, #80	@ 0x50
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40023800 	.word	0x40023800
 8001194:	40007000 	.word	0x40007000

08001198 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800119e:	463b      	mov	r3, r7
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011aa:	4b21      	ldr	r3, [pc, #132]	@ (8001230 <MX_ADC1_Init+0x98>)
 80011ac:	4a21      	ldr	r2, [pc, #132]	@ (8001234 <MX_ADC1_Init+0x9c>)
 80011ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80011b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001230 <MX_ADC1_Init+0x98>)
 80011b2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80011b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001230 <MX_ADC1_Init+0x98>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011be:	4b1c      	ldr	r3, [pc, #112]	@ (8001230 <MX_ADC1_Init+0x98>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <MX_ADC1_Init+0x98>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011ca:	4b19      	ldr	r3, [pc, #100]	@ (8001230 <MX_ADC1_Init+0x98>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011d2:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <MX_ADC1_Init+0x98>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011d8:	4b15      	ldr	r3, [pc, #84]	@ (8001230 <MX_ADC1_Init+0x98>)
 80011da:	4a17      	ldr	r2, [pc, #92]	@ (8001238 <MX_ADC1_Init+0xa0>)
 80011dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <MX_ADC1_Init+0x98>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <MX_ADC1_Init+0x98>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MX_ADC1_Init+0x98>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <MX_ADC1_Init+0x98>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011f8:	480d      	ldr	r0, [pc, #52]	@ (8001230 <MX_ADC1_Init+0x98>)
 80011fa:	f001 fc33 	bl	8002a64 <HAL_ADC_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001204:	f000 f9e9 	bl	80015da <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001208:	2308      	movs	r3, #8
 800120a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800120c:	2301      	movs	r3, #1
 800120e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001210:	2307      	movs	r3, #7
 8001212:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001214:	463b      	mov	r3, r7
 8001216:	4619      	mov	r1, r3
 8001218:	4805      	ldr	r0, [pc, #20]	@ (8001230 <MX_ADC1_Init+0x98>)
 800121a:	f001 fc67 	bl	8002aec <HAL_ADC_ConfigChannel>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001224:	f000 f9d9 	bl	80015da <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001228:	bf00      	nop
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000460 	.word	0x20000460
 8001234:	40012000 	.word	0x40012000
 8001238:	0f000001 	.word	0x0f000001

0800123c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001240:	4b12      	ldr	r3, [pc, #72]	@ (800128c <MX_I2C1_Init+0x50>)
 8001242:	4a13      	ldr	r2, [pc, #76]	@ (8001290 <MX_I2C1_Init+0x54>)
 8001244:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001246:	4b11      	ldr	r3, [pc, #68]	@ (800128c <MX_I2C1_Init+0x50>)
 8001248:	4a12      	ldr	r2, [pc, #72]	@ (8001294 <MX_I2C1_Init+0x58>)
 800124a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800124c:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <MX_I2C1_Init+0x50>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001252:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <MX_I2C1_Init+0x50>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001258:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <MX_I2C1_Init+0x50>)
 800125a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800125e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001260:	4b0a      	ldr	r3, [pc, #40]	@ (800128c <MX_I2C1_Init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001266:	4b09      	ldr	r3, [pc, #36]	@ (800128c <MX_I2C1_Init+0x50>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800126c:	4b07      	ldr	r3, [pc, #28]	@ (800128c <MX_I2C1_Init+0x50>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001272:	4b06      	ldr	r3, [pc, #24]	@ (800128c <MX_I2C1_Init+0x50>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001278:	4804      	ldr	r0, [pc, #16]	@ (800128c <MX_I2C1_Init+0x50>)
 800127a:	f002 fbbf 	bl	80039fc <HAL_I2C_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001284:	f000 f9a9 	bl	80015da <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000508 	.word	0x20000508
 8001290:	40005400 	.word	0x40005400
 8001294:	00061a80 	.word	0x00061a80

08001298 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b086      	sub	sp, #24
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2200      	movs	r2, #0
 80012a2:	601a      	str	r2, [r3, #0]
 80012a4:	605a      	str	r2, [r3, #4]
 80012a6:	609a      	str	r2, [r3, #8]
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80012ac:	2300      	movs	r3, #0
 80012ae:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012b0:	4b24      	ldr	r3, [pc, #144]	@ (8001344 <MX_RTC_Init+0xac>)
 80012b2:	4a25      	ldr	r2, [pc, #148]	@ (8001348 <MX_RTC_Init+0xb0>)
 80012b4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80012b6:	4b23      	ldr	r3, [pc, #140]	@ (8001344 <MX_RTC_Init+0xac>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80012bc:	4b21      	ldr	r3, [pc, #132]	@ (8001344 <MX_RTC_Init+0xac>)
 80012be:	227f      	movs	r2, #127	@ 0x7f
 80012c0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80012c2:	4b20      	ldr	r3, [pc, #128]	@ (8001344 <MX_RTC_Init+0xac>)
 80012c4:	22ff      	movs	r2, #255	@ 0xff
 80012c6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001344 <MX_RTC_Init+0xac>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001344 <MX_RTC_Init+0xac>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <MX_RTC_Init+0xac>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012da:	481a      	ldr	r0, [pc, #104]	@ (8001344 <MX_RTC_Init+0xac>)
 80012dc:	f003 fa8a 	bl	80047f4 <HAL_RTC_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80012e6:	f000 f978 	bl	80015da <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 80012ea:	230f      	movs	r3, #15
 80012ec:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	2200      	movs	r2, #0
 8001302:	4619      	mov	r1, r3
 8001304:	480f      	ldr	r0, [pc, #60]	@ (8001344 <MX_RTC_Init+0xac>)
 8001306:	f003 faf8 	bl	80048fa <HAL_RTC_SetTime>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001310:	f000 f963 	bl	80015da <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8001314:	2306      	movs	r3, #6
 8001316:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 8001318:	2307      	movs	r3, #7
 800131a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 6;
 800131c:	2306      	movs	r3, #6
 800131e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 8001320:	2318      	movs	r3, #24
 8001322:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001324:	463b      	mov	r3, r7
 8001326:	2200      	movs	r2, #0
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	@ (8001344 <MX_RTC_Init+0xac>)
 800132c:	f003 fb7f 	bl	8004a2e <HAL_RTC_SetDate>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001336:	f000 f950 	bl	80015da <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	2000055c 	.word	0x2000055c
 8001348:	40002800 	.word	0x40002800

0800134c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001350:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <MX_SPI3_Init+0x64>)
 8001352:	4a18      	ldr	r2, [pc, #96]	@ (80013b4 <MX_SPI3_Init+0x68>)
 8001354:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001356:	4b16      	ldr	r3, [pc, #88]	@ (80013b0 <MX_SPI3_Init+0x64>)
 8001358:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800135c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800135e:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <MX_SPI3_Init+0x64>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001364:	4b12      	ldr	r3, [pc, #72]	@ (80013b0 <MX_SPI3_Init+0x64>)
 8001366:	2200      	movs	r2, #0
 8001368:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800136a:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <MX_SPI3_Init+0x64>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001370:	4b0f      	ldr	r3, [pc, #60]	@ (80013b0 <MX_SPI3_Init+0x64>)
 8001372:	2200      	movs	r2, #0
 8001374:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <MX_SPI3_Init+0x64>)
 8001378:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800137c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800137e:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <MX_SPI3_Init+0x64>)
 8001380:	2210      	movs	r2, #16
 8001382:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001384:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <MX_SPI3_Init+0x64>)
 8001386:	2200      	movs	r2, #0
 8001388:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800138a:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <MX_SPI3_Init+0x64>)
 800138c:	2200      	movs	r2, #0
 800138e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001390:	4b07      	ldr	r3, [pc, #28]	@ (80013b0 <MX_SPI3_Init+0x64>)
 8001392:	2200      	movs	r2, #0
 8001394:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <MX_SPI3_Init+0x64>)
 8001398:	220a      	movs	r2, #10
 800139a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800139c:	4804      	ldr	r0, [pc, #16]	@ (80013b0 <MX_SPI3_Init+0x64>)
 800139e:	f003 fc6b 	bl	8004c78 <HAL_SPI_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80013a8:	f000 f917 	bl	80015da <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	2000057c 	.word	0x2000057c
 80013b4:	40003c00 	.word	0x40003c00

080013b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013bc:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013be:	4a12      	ldr	r2, [pc, #72]	@ (8001408 <MX_USART2_UART_Init+0x50>)
 80013c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013c2:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013dc:	4b09      	ldr	r3, [pc, #36]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013de:	220c      	movs	r2, #12
 80013e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e2:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e8:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ee:	4805      	ldr	r0, [pc, #20]	@ (8001404 <MX_USART2_UART_Init+0x4c>)
 80013f0:	f004 fb0e 	bl	8005a10 <HAL_UART_Init>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013fa:	f000 f8ee 	bl	80015da <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	200005d4 	.word	0x200005d4
 8001408:	40004400 	.word	0x40004400

0800140c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <MX_DMA_Init+0x3c>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a0b      	ldr	r2, [pc, #44]	@ (8001448 <MX_DMA_Init+0x3c>)
 800141c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <MX_DMA_Init+0x3c>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2105      	movs	r1, #5
 8001432:	2038      	movs	r0, #56	@ 0x38
 8001434:	f001 fe30 	bl	8003098 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001438:	2038      	movs	r0, #56	@ 0x38
 800143a:	f001 fe49 	bl	80030d0 <HAL_NVIC_EnableIRQ>

}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800

0800144c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	@ 0x28
 8001450:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
 8001460:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	4b4e      	ldr	r3, [pc, #312]	@ (80015a0 <MX_GPIO_Init+0x154>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	4a4d      	ldr	r2, [pc, #308]	@ (80015a0 <MX_GPIO_Init+0x154>)
 800146c:	f043 0304 	orr.w	r3, r3, #4
 8001470:	6313      	str	r3, [r2, #48]	@ 0x30
 8001472:	4b4b      	ldr	r3, [pc, #300]	@ (80015a0 <MX_GPIO_Init+0x154>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b47      	ldr	r3, [pc, #284]	@ (80015a0 <MX_GPIO_Init+0x154>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4a46      	ldr	r2, [pc, #280]	@ (80015a0 <MX_GPIO_Init+0x154>)
 8001488:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800148c:	6313      	str	r3, [r2, #48]	@ 0x30
 800148e:	4b44      	ldr	r3, [pc, #272]	@ (80015a0 <MX_GPIO_Init+0x154>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b40      	ldr	r3, [pc, #256]	@ (80015a0 <MX_GPIO_Init+0x154>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a3f      	ldr	r2, [pc, #252]	@ (80015a0 <MX_GPIO_Init+0x154>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014aa:	4b3d      	ldr	r3, [pc, #244]	@ (80015a0 <MX_GPIO_Init+0x154>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	4b39      	ldr	r3, [pc, #228]	@ (80015a0 <MX_GPIO_Init+0x154>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	4a38      	ldr	r2, [pc, #224]	@ (80015a0 <MX_GPIO_Init+0x154>)
 80014c0:	f043 0302 	orr.w	r3, r3, #2
 80014c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c6:	4b36      	ldr	r3, [pc, #216]	@ (80015a0 <MX_GPIO_Init+0x154>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	4b32      	ldr	r3, [pc, #200]	@ (80015a0 <MX_GPIO_Init+0x154>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	4a31      	ldr	r2, [pc, #196]	@ (80015a0 <MX_GPIO_Init+0x154>)
 80014dc:	f043 0308 	orr.w	r3, r3, #8
 80014e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e2:	4b2f      	ldr	r3, [pc, #188]	@ (80015a0 <MX_GPIO_Init+0x154>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2120      	movs	r1, #32
 80014f2:	482c      	ldr	r0, [pc, #176]	@ (80015a4 <MX_GPIO_Init+0x158>)
 80014f4:	f002 fa68 	bl	80039c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80014f8:	2200      	movs	r2, #0
 80014fa:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 80014fe:	482a      	ldr	r0, [pc, #168]	@ (80015a8 <MX_GPIO_Init+0x15c>)
 8001500:	f002 fa62 	bl	80039c8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_RESET);
 8001504:	2200      	movs	r2, #0
 8001506:	2104      	movs	r1, #4
 8001508:	4828      	ldr	r0, [pc, #160]	@ (80015ac <MX_GPIO_Init+0x160>)
 800150a:	f002 fa5d 	bl	80039c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800150e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001514:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001518:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 0314 	add.w	r3, r7, #20
 8001522:	4619      	mov	r1, r3
 8001524:	4820      	ldr	r0, [pc, #128]	@ (80015a8 <MX_GPIO_Init+0x15c>)
 8001526:	f002 f8cb 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800152a:	230f      	movs	r3, #15
 800152c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001532:	2302      	movs	r3, #2
 8001534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4619      	mov	r1, r3
 800153c:	481a      	ldr	r0, [pc, #104]	@ (80015a8 <MX_GPIO_Init+0x15c>)
 800153e:	f002 f8bf 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001542:	2320      	movs	r3, #32
 8001544:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001546:	2301      	movs	r3, #1
 8001548:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	4619      	mov	r1, r3
 8001558:	4812      	ldr	r0, [pc, #72]	@ (80015a4 <MX_GPIO_Init+0x158>)
 800155a:	f002 f8b1 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lock_Pin PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800155e:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8001562:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001564:	2301      	movs	r3, #1
 8001566:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156c:	2300      	movs	r3, #0
 800156e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001570:	f107 0314 	add.w	r3, r7, #20
 8001574:	4619      	mov	r1, r3
 8001576:	480c      	ldr	r0, [pc, #48]	@ (80015a8 <MX_GPIO_Init+0x15c>)
 8001578:	f002 f8a2 	bl	80036c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SD_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin;
 800157c:	2304      	movs	r3, #4
 800157e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_SD_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	4806      	ldr	r0, [pc, #24]	@ (80015ac <MX_GPIO_Init+0x160>)
 8001594:	f002 f894 	bl	80036c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001598:	bf00      	nop
 800159a:	3728      	adds	r7, #40	@ 0x28
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020000 	.word	0x40020000
 80015a8:	40020800 	.word	0x40020800
 80015ac:	40020c00 	.word	0x40020c00

080015b0 <idle_task>:

/* USER CODE BEGIN 4 */
void idle_task(void *pvParameters){
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	while(1);
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <idle_task+0x8>

080015bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015cc:	d101      	bne.n	80015d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015ce:	f001 fa05 	bl	80029dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015de:	b672      	cpsid	i
}
 80015e0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e2:	bf00      	nop
 80015e4:	e7fd      	b.n	80015e2 <Error_Handler+0x8>
	...

080015e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
 80015f2:	4b12      	ldr	r3, [pc, #72]	@ (800163c <HAL_MspInit+0x54>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f6:	4a11      	ldr	r2, [pc, #68]	@ (800163c <HAL_MspInit+0x54>)
 80015f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015fe:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <HAL_MspInit+0x54>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001602:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	603b      	str	r3, [r7, #0]
 800160e:	4b0b      	ldr	r3, [pc, #44]	@ (800163c <HAL_MspInit+0x54>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	4a0a      	ldr	r2, [pc, #40]	@ (800163c <HAL_MspInit+0x54>)
 8001614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001618:	6413      	str	r3, [r2, #64]	@ 0x40
 800161a:	4b08      	ldr	r3, [pc, #32]	@ (800163c <HAL_MspInit+0x54>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001622:	603b      	str	r3, [r7, #0]
 8001624:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	210f      	movs	r1, #15
 800162a:	f06f 0001 	mvn.w	r0, #1
 800162e:	f001 fd33 	bl	8003098 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800

08001640 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b08a      	sub	sp, #40	@ 0x28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	605a      	str	r2, [r3, #4]
 8001652:	609a      	str	r2, [r3, #8]
 8001654:	60da      	str	r2, [r3, #12]
 8001656:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a2e      	ldr	r2, [pc, #184]	@ (8001718 <HAL_ADC_MspInit+0xd8>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d156      	bne.n	8001710 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	4b2d      	ldr	r3, [pc, #180]	@ (800171c <HAL_ADC_MspInit+0xdc>)
 8001668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166a:	4a2c      	ldr	r2, [pc, #176]	@ (800171c <HAL_ADC_MspInit+0xdc>)
 800166c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001670:	6453      	str	r3, [r2, #68]	@ 0x44
 8001672:	4b2a      	ldr	r3, [pc, #168]	@ (800171c <HAL_ADC_MspInit+0xdc>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800167a:	613b      	str	r3, [r7, #16]
 800167c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	4b26      	ldr	r3, [pc, #152]	@ (800171c <HAL_ADC_MspInit+0xdc>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	4a25      	ldr	r2, [pc, #148]	@ (800171c <HAL_ADC_MspInit+0xdc>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6313      	str	r3, [r2, #48]	@ 0x30
 800168e:	4b23      	ldr	r3, [pc, #140]	@ (800171c <HAL_ADC_MspInit+0xdc>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800169a:	2301      	movs	r3, #1
 800169c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800169e:	2303      	movs	r3, #3
 80016a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	481c      	ldr	r0, [pc, #112]	@ (8001720 <HAL_ADC_MspInit+0xe0>)
 80016ae:	f002 f807 	bl	80036c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80016b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001724 <HAL_ADC_MspInit+0xe4>)
 80016b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001728 <HAL_ADC_MspInit+0xe8>)
 80016b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001724 <HAL_ADC_MspInit+0xe4>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016be:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <HAL_ADC_MspInit+0xe4>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c4:	4b17      	ldr	r3, [pc, #92]	@ (8001724 <HAL_ADC_MspInit+0xe4>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016ca:	4b16      	ldr	r3, [pc, #88]	@ (8001724 <HAL_ADC_MspInit+0xe4>)
 80016cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016d2:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <HAL_ADC_MspInit+0xe4>)
 80016d4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80016d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016da:	4b12      	ldr	r3, [pc, #72]	@ (8001724 <HAL_ADC_MspInit+0xe4>)
 80016dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80016e2:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <HAL_ADC_MspInit+0xe4>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <HAL_ADC_MspInit+0xe4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001724 <HAL_ADC_MspInit+0xe4>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016f4:	480b      	ldr	r0, [pc, #44]	@ (8001724 <HAL_ADC_MspInit+0xe4>)
 80016f6:	f001 fcf9 	bl	80030ec <HAL_DMA_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001700:	f7ff ff6b 	bl	80015da <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	4a07      	ldr	r2, [pc, #28]	@ (8001724 <HAL_ADC_MspInit+0xe4>)
 8001708:	639a      	str	r2, [r3, #56]	@ 0x38
 800170a:	4a06      	ldr	r2, [pc, #24]	@ (8001724 <HAL_ADC_MspInit+0xe4>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001710:	bf00      	nop
 8001712:	3728      	adds	r7, #40	@ 0x28
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40012000 	.word	0x40012000
 800171c:	40023800 	.word	0x40023800
 8001720:	40020400 	.word	0x40020400
 8001724:	200004a8 	.word	0x200004a8
 8001728:	40026410 	.word	0x40026410

0800172c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08a      	sub	sp, #40	@ 0x28
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001734:	f107 0314 	add.w	r3, r7, #20
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a19      	ldr	r2, [pc, #100]	@ (80017b0 <HAL_I2C_MspInit+0x84>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d12b      	bne.n	80017a6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
 8001752:	4b18      	ldr	r3, [pc, #96]	@ (80017b4 <HAL_I2C_MspInit+0x88>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	4a17      	ldr	r2, [pc, #92]	@ (80017b4 <HAL_I2C_MspInit+0x88>)
 8001758:	f043 0302 	orr.w	r3, r3, #2
 800175c:	6313      	str	r3, [r2, #48]	@ 0x30
 800175e:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <HAL_I2C_MspInit+0x88>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	f003 0302 	and.w	r3, r3, #2
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800176a:	23c0      	movs	r3, #192	@ 0xc0
 800176c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176e:	2312      	movs	r3, #18
 8001770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800177a:	2304      	movs	r3, #4
 800177c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	480c      	ldr	r0, [pc, #48]	@ (80017b8 <HAL_I2C_MspInit+0x8c>)
 8001786:	f001 ff9b 	bl	80036c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <HAL_I2C_MspInit+0x88>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	4a08      	ldr	r2, [pc, #32]	@ (80017b4 <HAL_I2C_MspInit+0x88>)
 8001794:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001798:	6413      	str	r3, [r2, #64]	@ 0x40
 800179a:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <HAL_I2C_MspInit+0x88>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017a6:	bf00      	nop
 80017a8:	3728      	adds	r7, #40	@ 0x28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40005400 	.word	0x40005400
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40020400 	.word	0x40020400

080017bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017c4:	f107 030c 	add.w	r3, r7, #12
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a0c      	ldr	r2, [pc, #48]	@ (800180c <HAL_RTC_MspInit+0x50>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d111      	bne.n	8001802 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017de:	2302      	movs	r3, #2
 80017e0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80017e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017e6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	4618      	mov	r0, r3
 80017ee:	f002 ff13 	bl	8004618 <HAL_RCCEx_PeriphCLKConfig>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80017f8:	f7ff feef 	bl	80015da <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017fc:	4b04      	ldr	r3, [pc, #16]	@ (8001810 <HAL_RTC_MspInit+0x54>)
 80017fe:	2201      	movs	r2, #1
 8001800:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001802:	bf00      	nop
 8001804:	3720      	adds	r7, #32
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40002800 	.word	0x40002800
 8001810:	42470e3c 	.word	0x42470e3c

08001814 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	@ 0x28
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a19      	ldr	r2, [pc, #100]	@ (8001898 <HAL_SPI_MspInit+0x84>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d12c      	bne.n	8001890 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	4b18      	ldr	r3, [pc, #96]	@ (800189c <HAL_SPI_MspInit+0x88>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	4a17      	ldr	r2, [pc, #92]	@ (800189c <HAL_SPI_MspInit+0x88>)
 8001840:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001844:	6413      	str	r3, [r2, #64]	@ 0x40
 8001846:	4b15      	ldr	r3, [pc, #84]	@ (800189c <HAL_SPI_MspInit+0x88>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800184e:	613b      	str	r3, [r7, #16]
 8001850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b11      	ldr	r3, [pc, #68]	@ (800189c <HAL_SPI_MspInit+0x88>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	4a10      	ldr	r2, [pc, #64]	@ (800189c <HAL_SPI_MspInit+0x88>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	6313      	str	r3, [r2, #48]	@ 0x30
 8001862:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <HAL_SPI_MspInit+0x88>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800186e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001872:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001880:	2306      	movs	r3, #6
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	4805      	ldr	r0, [pc, #20]	@ (80018a0 <HAL_SPI_MspInit+0x8c>)
 800188c:	f001 ff18 	bl	80036c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001890:	bf00      	nop
 8001892:	3728      	adds	r7, #40	@ 0x28
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40003c00 	.word	0x40003c00
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020800 	.word	0x40020800

080018a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	@ 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a19      	ldr	r2, [pc, #100]	@ (8001928 <HAL_UART_MspInit+0x84>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d12b      	bne.n	800191e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	4b18      	ldr	r3, [pc, #96]	@ (800192c <HAL_UART_MspInit+0x88>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	4a17      	ldr	r2, [pc, #92]	@ (800192c <HAL_UART_MspInit+0x88>)
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d6:	4b15      	ldr	r3, [pc, #84]	@ (800192c <HAL_UART_MspInit+0x88>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b11      	ldr	r3, [pc, #68]	@ (800192c <HAL_UART_MspInit+0x88>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	4a10      	ldr	r2, [pc, #64]	@ (800192c <HAL_UART_MspInit+0x88>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f2:	4b0e      	ldr	r3, [pc, #56]	@ (800192c <HAL_UART_MspInit+0x88>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018fe:	230c      	movs	r3, #12
 8001900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800190e:	2307      	movs	r3, #7
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	@ (8001930 <HAL_UART_MspInit+0x8c>)
 800191a:	f001 fed1 	bl	80036c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800191e:	bf00      	nop
 8001920:	3728      	adds	r7, #40	@ 0x28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40004400 	.word	0x40004400
 800192c:	40023800 	.word	0x40023800
 8001930:	40020000 	.word	0x40020000

08001934 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08e      	sub	sp, #56	@ 0x38
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	4b34      	ldr	r3, [pc, #208]	@ (8001a1c <HAL_InitTick+0xe8>)
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	4a33      	ldr	r2, [pc, #204]	@ (8001a1c <HAL_InitTick+0xe8>)
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	6413      	str	r3, [r2, #64]	@ 0x40
 8001954:	4b31      	ldr	r3, [pc, #196]	@ (8001a1c <HAL_InitTick+0xe8>)
 8001956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001960:	f107 0210 	add.w	r2, r7, #16
 8001964:	f107 0314 	add.w	r3, r7, #20
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f002 fe22 	bl	80045b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001976:	2b00      	cmp	r3, #0
 8001978:	d103      	bne.n	8001982 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800197a:	f002 fdf3 	bl	8004564 <HAL_RCC_GetPCLK1Freq>
 800197e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001980:	e004      	b.n	800198c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001982:	f002 fdef 	bl	8004564 <HAL_RCC_GetPCLK1Freq>
 8001986:	4603      	mov	r3, r0
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800198c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800198e:	4a24      	ldr	r2, [pc, #144]	@ (8001a20 <HAL_InitTick+0xec>)
 8001990:	fba2 2303 	umull	r2, r3, r2, r3
 8001994:	0c9b      	lsrs	r3, r3, #18
 8001996:	3b01      	subs	r3, #1
 8001998:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800199a:	4b22      	ldr	r3, [pc, #136]	@ (8001a24 <HAL_InitTick+0xf0>)
 800199c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80019a2:	4b20      	ldr	r3, [pc, #128]	@ (8001a24 <HAL_InitTick+0xf0>)
 80019a4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80019a8:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80019aa:	4a1e      	ldr	r2, [pc, #120]	@ (8001a24 <HAL_InitTick+0xf0>)
 80019ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ae:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80019b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a24 <HAL_InitTick+0xf0>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a24 <HAL_InitTick+0xf0>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019bc:	4b19      	ldr	r3, [pc, #100]	@ (8001a24 <HAL_InitTick+0xf0>)
 80019be:	2200      	movs	r2, #0
 80019c0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80019c2:	4818      	ldr	r0, [pc, #96]	@ (8001a24 <HAL_InitTick+0xf0>)
 80019c4:	f003 fdb0 	bl	8005528 <HAL_TIM_Base_Init>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80019ce:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d11b      	bne.n	8001a0e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 80019d6:	4813      	ldr	r0, [pc, #76]	@ (8001a24 <HAL_InitTick+0xf0>)
 80019d8:	f003 fe00 	bl	80055dc <HAL_TIM_Base_Start_IT>
 80019dc:	4603      	mov	r3, r0
 80019de:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80019e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d111      	bne.n	8001a0e <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019ea:	201c      	movs	r0, #28
 80019ec:	f001 fb70 	bl	80030d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b0f      	cmp	r3, #15
 80019f4:	d808      	bhi.n	8001a08 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80019f6:	2200      	movs	r2, #0
 80019f8:	6879      	ldr	r1, [r7, #4]
 80019fa:	201c      	movs	r0, #28
 80019fc:	f001 fb4c 	bl	8003098 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a00:	4a09      	ldr	r2, [pc, #36]	@ (8001a28 <HAL_InitTick+0xf4>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e002      	b.n	8001a0e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001a0e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3738      	adds	r7, #56	@ 0x38
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	431bde83 	.word	0x431bde83
 8001a24:	20000624 	.word	0x20000624
 8001a28:	20000008 	.word	0x20000008

08001a2c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001a30:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <SDTimer_Handler+0x40>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d006      	beq.n	8001a48 <SDTimer_Handler+0x1c>
    Timer1--;
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a6c <SDTimer_Handler+0x40>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <SDTimer_Handler+0x40>)
 8001a46:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001a48:	4b09      	ldr	r3, [pc, #36]	@ (8001a70 <SDTimer_Handler+0x44>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d006      	beq.n	8001a60 <SDTimer_Handler+0x34>
    Timer2--;
 8001a52:	4b07      	ldr	r3, [pc, #28]	@ (8001a70 <SDTimer_Handler+0x44>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	4b04      	ldr	r3, [pc, #16]	@ (8001a70 <SDTimer_Handler+0x44>)
 8001a5e:	701a      	strb	r2, [r3, #0]
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	2000066d 	.word	0x2000066d
 8001a70:	2000066e 	.word	0x2000066e

08001a74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a78:	bf00      	nop
 8001a7a:	e7fd      	b.n	8001a78 <NMI_Handler+0x4>

08001a7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a80:	bf00      	nop
 8001a82:	e7fd      	b.n	8001a80 <HardFault_Handler+0x4>

08001a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a88:	bf00      	nop
 8001a8a:	e7fd      	b.n	8001a88 <MemManage_Handler+0x4>

08001a8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <BusFault_Handler+0x4>

08001a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <UsageFault_Handler+0x4>

08001a9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001aa0:	bf00      	nop
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  FatFsCnt++;
 8001ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8001adc <TIM2_IRQHandler+0x30>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <TIM2_IRQHandler+0x30>)
 8001abc:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10){
 8001abe:	4b07      	ldr	r3, [pc, #28]	@ (8001adc <TIM2_IRQHandler+0x30>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b09      	cmp	r3, #9
 8001ac6:	d904      	bls.n	8001ad2 <TIM2_IRQHandler+0x26>
	  FatFsCnt = 0;
 8001ac8:	4b04      	ldr	r3, [pc, #16]	@ (8001adc <TIM2_IRQHandler+0x30>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 8001ace:	f7ff ffad 	bl	8001a2c <SDTimer_Handler>
  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ad2:	4803      	ldr	r0, [pc, #12]	@ (8001ae0 <TIM2_IRQHandler+0x34>)
 8001ad4:	f003 fde4 	bl	80056a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	2000066c 	.word	0x2000066c
 8001ae0:	20000624 	.word	0x20000624

08001ae4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ae8:	4802      	ldr	r0, [pc, #8]	@ (8001af4 <DMA2_Stream0_IRQHandler+0x10>)
 8001aea:	f001 fbad 	bl	8003248 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200004a8 	.word	0x200004a8

08001af8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  return 1;
 8001afc:	2301      	movs	r3, #1
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <_kill>:

int _kill(int pid, int sig)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b12:	f00c fe8b 	bl	800e82c <__errno>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2216      	movs	r2, #22
 8001b1a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <_exit>:

void _exit (int status)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b30:	f04f 31ff 	mov.w	r1, #4294967295
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f7ff ffe7 	bl	8001b08 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b3a:	bf00      	nop
 8001b3c:	e7fd      	b.n	8001b3a <_exit+0x12>

08001b3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	e00a      	b.n	8001b66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b50:	f3af 8000 	nop.w
 8001b54:	4601      	mov	r1, r0
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	1c5a      	adds	r2, r3, #1
 8001b5a:	60ba      	str	r2, [r7, #8]
 8001b5c:	b2ca      	uxtb	r2, r1
 8001b5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	3301      	adds	r3, #1
 8001b64:	617b      	str	r3, [r7, #20]
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	dbf0      	blt.n	8001b50 <_read+0x12>
  }

  return len;
 8001b6e:	687b      	ldr	r3, [r7, #4]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	e009      	b.n	8001b9e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	1c5a      	adds	r2, r3, #1
 8001b8e:	60ba      	str	r2, [r7, #8]
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	dbf1      	blt.n	8001b8a <_write+0x12>
  }
  return len;
 8001ba6:	687b      	ldr	r3, [r7, #4]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <_close>:

int _close(int file)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bd8:	605a      	str	r2, [r3, #4]
  return 0;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <_isatty>:

int _isatty(int file)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bf0:	2301      	movs	r3, #1
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b085      	sub	sp, #20
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c20:	4a14      	ldr	r2, [pc, #80]	@ (8001c74 <_sbrk+0x5c>)
 8001c22:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <_sbrk+0x60>)
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c2c:	4b13      	ldr	r3, [pc, #76]	@ (8001c7c <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c34:	4b11      	ldr	r3, [pc, #68]	@ (8001c7c <_sbrk+0x64>)
 8001c36:	4a12      	ldr	r2, [pc, #72]	@ (8001c80 <_sbrk+0x68>)
 8001c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3a:	4b10      	ldr	r3, [pc, #64]	@ (8001c7c <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d207      	bcs.n	8001c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c48:	f00c fdf0 	bl	800e82c <__errno>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	220c      	movs	r2, #12
 8001c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295
 8001c56:	e009      	b.n	8001c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c58:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5e:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <_sbrk+0x64>)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4413      	add	r3, r2
 8001c66:	4a05      	ldr	r2, [pc, #20]	@ (8001c7c <_sbrk+0x64>)
 8001c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3718      	adds	r7, #24
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20018000 	.word	0x20018000
 8001c78:	00000400 	.word	0x00000400
 8001c7c:	20000670 	.word	0x20000670
 8001c80:	20006720 	.word	0x20006720

08001c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c88:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <SystemInit+0x20>)
 8001c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ca4 <SystemInit+0x20>)
 8001c90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ca8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ce0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001cac:	f7ff ffea 	bl	8001c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cb0:	480c      	ldr	r0, [pc, #48]	@ (8001ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cb2:	490d      	ldr	r1, [pc, #52]	@ (8001ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb8:	e002      	b.n	8001cc0 <LoopCopyDataInit>

08001cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cbe:	3304      	adds	r3, #4

08001cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc4:	d3f9      	bcc.n	8001cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8001cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ccc:	e001      	b.n	8001cd2 <LoopFillZerobss>

08001cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd0:	3204      	adds	r2, #4

08001cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd4:	d3fb      	bcc.n	8001cce <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001cd6:	f00c fdaf 	bl	800e838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cda:	f7ff f9a5 	bl	8001028 <main>
  bx  lr    
 8001cde:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ce0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001cec:	08011e44 	.word	0x08011e44
  ldr r2, =_sbss
 8001cf0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001cf4:	20006720 	.word	0x20006720

08001cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf8:	e7fe      	b.n	8001cf8 <ADC_IRQHandler>
	...

08001cfc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001d00:	2200      	movs	r2, #0
 8001d02:	2104      	movs	r1, #4
 8001d04:	4803      	ldr	r0, [pc, #12]	@ (8001d14 <SELECT+0x18>)
 8001d06:	f001 fe5f 	bl	80039c8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001d0a:	2001      	movs	r0, #1
 8001d0c:	f000 fe86 	bl	8002a1c <HAL_Delay>
}
 8001d10:	bf00      	nop
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40020c00 	.word	0x40020c00

08001d18 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	2104      	movs	r1, #4
 8001d20:	4803      	ldr	r0, [pc, #12]	@ (8001d30 <DESELECT+0x18>)
 8001d22:	f001 fe51 	bl	80039c8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001d26:	2001      	movs	r0, #1
 8001d28:	f000 fe78 	bl	8002a1c <HAL_Delay>
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40020c00 	.word	0x40020c00

08001d34 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d3e:	bf00      	nop
 8001d40:	4b08      	ldr	r3, [pc, #32]	@ (8001d64 <SPI_TxByte+0x30>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d1f8      	bne.n	8001d40 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001d4e:	1df9      	adds	r1, r7, #7
 8001d50:	2364      	movs	r3, #100	@ 0x64
 8001d52:	2201      	movs	r2, #1
 8001d54:	4803      	ldr	r0, [pc, #12]	@ (8001d64 <SPI_TxByte+0x30>)
 8001d56:	f003 f818 	bl	8004d8a <HAL_SPI_Transmit>
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	2000057c 	.word	0x2000057c

08001d68 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001d74:	bf00      	nop
 8001d76:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <SPI_TxBuffer+0x30>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d1f8      	bne.n	8001d76 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001d84:	887a      	ldrh	r2, [r7, #2]
 8001d86:	2364      	movs	r3, #100	@ 0x64
 8001d88:	6879      	ldr	r1, [r7, #4]
 8001d8a:	4803      	ldr	r0, [pc, #12]	@ (8001d98 <SPI_TxBuffer+0x30>)
 8001d8c:	f002 fffd 	bl	8004d8a <HAL_SPI_Transmit>
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	2000057c 	.word	0x2000057c

08001d9c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001da2:	23ff      	movs	r3, #255	@ 0xff
 8001da4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001da6:	bf00      	nop
 8001da8:	4b09      	ldr	r3, [pc, #36]	@ (8001dd0 <SPI_RxByte+0x34>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d1f8      	bne.n	8001da8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001db6:	1dba      	adds	r2, r7, #6
 8001db8:	1df9      	adds	r1, r7, #7
 8001dba:	2364      	movs	r3, #100	@ 0x64
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	4803      	ldr	r0, [pc, #12]	@ (8001dd0 <SPI_RxByte+0x34>)
 8001dc2:	f003 f925 	bl	8005010 <HAL_SPI_TransmitReceive>

	return data;
 8001dc6:	79bb      	ldrb	r3, [r7, #6]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	2000057c 	.word	0x2000057c

08001dd4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001ddc:	f7ff ffde 	bl	8001d9c <SPI_RxByte>
 8001de0:	4603      	mov	r3, r0
 8001de2:	461a      	mov	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	701a      	strb	r2, [r3, #0]
}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8001df6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e20 <SD_ReadyWait+0x30>)
 8001df8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001dfc:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8001dfe:	f7ff ffcd 	bl	8001d9c <SPI_RxByte>
 8001e02:	4603      	mov	r3, r0
 8001e04:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	2bff      	cmp	r3, #255	@ 0xff
 8001e0a:	d004      	beq.n	8001e16 <SD_ReadyWait+0x26>
 8001e0c:	4b04      	ldr	r3, [pc, #16]	@ (8001e20 <SD_ReadyWait+0x30>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f3      	bne.n	8001dfe <SD_ReadyWait+0xe>

	return res;
 8001e16:	79fb      	ldrb	r3, [r7, #7]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	2000066e 	.word	0x2000066e

08001e24 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001e2a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8001e2e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8001e30:	f7ff ff72 	bl	8001d18 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001e34:	2300      	movs	r3, #0
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	e005      	b.n	8001e46 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001e3a:	20ff      	movs	r0, #255	@ 0xff
 8001e3c:	f7ff ff7a 	bl	8001d34 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	3301      	adds	r3, #1
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	2b09      	cmp	r3, #9
 8001e4a:	ddf6      	ble.n	8001e3a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001e4c:	f7ff ff56 	bl	8001cfc <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001e50:	2340      	movs	r3, #64	@ 0x40
 8001e52:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001e64:	2395      	movs	r3, #149	@ 0x95
 8001e66:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001e68:	463b      	mov	r3, r7
 8001e6a:	2106      	movs	r1, #6
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff7b 	bl	8001d68 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001e72:	e002      	b.n	8001e7a <SD_PowerOn+0x56>
	{
		cnt--;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001e7a:	f7ff ff8f 	bl	8001d9c <SPI_RxByte>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d002      	beq.n	8001e8a <SD_PowerOn+0x66>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f4      	bne.n	8001e74 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001e8a:	f7ff ff45 	bl	8001d18 <DESELECT>
	SPI_TxByte(0XFF);
 8001e8e:	20ff      	movs	r0, #255	@ 0xff
 8001e90:	f7ff ff50 	bl	8001d34 <SPI_TxByte>

	PowerFlag = 1;
 8001e94:	4b03      	ldr	r3, [pc, #12]	@ (8001ea4 <SD_PowerOn+0x80>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	701a      	strb	r2, [r3, #0]
}
 8001e9a:	bf00      	nop
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000675 	.word	0x20000675

08001ea8 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001eac:	4b03      	ldr	r3, [pc, #12]	@ (8001ebc <SD_PowerOff+0x14>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	701a      	strb	r2, [r3, #0]
}
 8001eb2:	bf00      	nop
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	20000675 	.word	0x20000675

08001ec0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001ec4:	4b03      	ldr	r3, [pc, #12]	@ (8001ed4 <SD_CheckPower+0x14>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000675 	.word	0x20000675

08001ed8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001ee2:	4b14      	ldr	r3, [pc, #80]	@ (8001f34 <SD_RxDataBlock+0x5c>)
 8001ee4:	22c8      	movs	r2, #200	@ 0xc8
 8001ee6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001ee8:	f7ff ff58 	bl	8001d9c <SPI_RxByte>
 8001eec:	4603      	mov	r3, r0
 8001eee:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	2bff      	cmp	r3, #255	@ 0xff
 8001ef4:	d104      	bne.n	8001f00 <SD_RxDataBlock+0x28>
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f34 <SD_RxDataBlock+0x5c>)
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	b29b      	uxth	r3, r3
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f3      	bne.n	8001ee8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	2bfe      	cmp	r3, #254	@ 0xfe
 8001f04:	d001      	beq.n	8001f0a <SD_RxDataBlock+0x32>
 8001f06:	2300      	movs	r3, #0
 8001f08:	e00f      	b.n	8001f2a <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	607a      	str	r2, [r7, #4]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff5f 	bl	8001dd4 <SPI_RxBytePtr>
	} while(len--);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	1e5a      	subs	r2, r3, #1
 8001f1a:	603a      	str	r2, [r7, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d1f4      	bne.n	8001f0a <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8001f20:	f7ff ff3c 	bl	8001d9c <SPI_RxByte>
	SPI_RxByte();
 8001f24:	f7ff ff3a 	bl	8001d9c <SPI_RxByte>

	return TRUE;
 8001f28:	2301      	movs	r3, #1
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	2000066d 	.word	0x2000066d

08001f38 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001f48:	f7ff ff52 	bl	8001df0 <SD_ReadyWait>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2bff      	cmp	r3, #255	@ 0xff
 8001f50:	d001      	beq.n	8001f56 <SD_TxDataBlock+0x1e>
 8001f52:	2300      	movs	r3, #0
 8001f54:	e02f      	b.n	8001fb6 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001f56:	78fb      	ldrb	r3, [r7, #3]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff feeb 	bl	8001d34 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	2bfd      	cmp	r3, #253	@ 0xfd
 8001f62:	d020      	beq.n	8001fa6 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001f64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff fefd 	bl	8001d68 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001f6e:	f7ff ff15 	bl	8001d9c <SPI_RxByte>
		SPI_RxByte();
 8001f72:	f7ff ff13 	bl	8001d9c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001f76:	e00b      	b.n	8001f90 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001f78:	f7ff ff10 	bl	8001d9c <SPI_RxByte>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001f80:	7bfb      	ldrb	r3, [r7, #15]
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	2b05      	cmp	r3, #5
 8001f88:	d006      	beq.n	8001f98 <SD_TxDataBlock+0x60>
			i++;
 8001f8a:	7bbb      	ldrb	r3, [r7, #14]
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001f90:	7bbb      	ldrb	r3, [r7, #14]
 8001f92:	2b40      	cmp	r3, #64	@ 0x40
 8001f94:	d9f0      	bls.n	8001f78 <SD_TxDataBlock+0x40>
 8001f96:	e000      	b.n	8001f9a <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001f98:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001f9a:	bf00      	nop
 8001f9c:	f7ff fefe 	bl	8001d9c <SPI_RxByte>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0fa      	beq.n	8001f9c <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001fa6:	7bfb      	ldrb	r3, [r7, #15]
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	2b05      	cmp	r3, #5
 8001fae:	d101      	bne.n	8001fb4 <SD_TxDataBlock+0x7c>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <SD_TxDataBlock+0x7e>

	return FALSE;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b084      	sub	sp, #16
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	6039      	str	r1, [r7, #0]
 8001fc8:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001fca:	f7ff ff11 	bl	8001df0 <SD_ReadyWait>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2bff      	cmp	r3, #255	@ 0xff
 8001fd2:	d001      	beq.n	8001fd8 <SD_SendCmd+0x1a>
 8001fd4:	23ff      	movs	r3, #255	@ 0xff
 8001fd6:	e042      	b.n	800205e <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff feaa 	bl	8001d34 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	0e1b      	lsrs	r3, r3, #24
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fea4 	bl	8001d34 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	0c1b      	lsrs	r3, r3, #16
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fe9e 	bl	8001d34 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff fe98 	bl	8001d34 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	b2db      	uxtb	r3, r3
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fe93 	bl	8001d34 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	2b40      	cmp	r3, #64	@ 0x40
 8002012:	d102      	bne.n	800201a <SD_SendCmd+0x5c>
 8002014:	2395      	movs	r3, #149	@ 0x95
 8002016:	73fb      	strb	r3, [r7, #15]
 8002018:	e007      	b.n	800202a <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	2b48      	cmp	r3, #72	@ 0x48
 800201e:	d102      	bne.n	8002026 <SD_SendCmd+0x68>
 8002020:	2387      	movs	r3, #135	@ 0x87
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	e001      	b.n	800202a <SD_SendCmd+0x6c>
	else crc = 1;
 8002026:	2301      	movs	r3, #1
 8002028:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	4618      	mov	r0, r3
 800202e:	f7ff fe81 	bl	8001d34 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	2b4c      	cmp	r3, #76	@ 0x4c
 8002036:	d101      	bne.n	800203c <SD_SendCmd+0x7e>
 8002038:	f7ff feb0 	bl	8001d9c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 800203c:	230a      	movs	r3, #10
 800203e:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8002040:	f7ff feac 	bl	8001d9c <SPI_RxByte>
 8002044:	4603      	mov	r3, r0
 8002046:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8002048:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800204c:	2b00      	cmp	r3, #0
 800204e:	da05      	bge.n	800205c <SD_SendCmd+0x9e>
 8002050:	7bbb      	ldrb	r3, [r7, #14]
 8002052:	3b01      	subs	r3, #1
 8002054:	73bb      	strb	r3, [r7, #14]
 8002056:	7bbb      	ldrb	r3, [r7, #14]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1f1      	bne.n	8002040 <SD_SendCmd+0x82>

	return res;
 800205c:	7b7b      	ldrb	r3, [r7, #13]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8002068:	b590      	push	{r4, r7, lr}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8002072:	79fb      	ldrb	r3, [r7, #7]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <SD_disk_initialize+0x14>
 8002078:	2301      	movs	r3, #1
 800207a:	e0d6      	b.n	800222a <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 800207c:	4b6d      	ldr	r3, [pc, #436]	@ (8002234 <SD_disk_initialize+0x1cc>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <SD_disk_initialize+0x2a>
 800208a:	4b6a      	ldr	r3, [pc, #424]	@ (8002234 <SD_disk_initialize+0x1cc>)
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	b2db      	uxtb	r3, r3
 8002090:	e0cb      	b.n	800222a <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8002092:	f7ff fec7 	bl	8001e24 <SD_PowerOn>

	/* slave select */
	SELECT();
 8002096:	f7ff fe31 	bl	8001cfc <SELECT>

	/* check disk type */
	type = 0;
 800209a:	2300      	movs	r3, #0
 800209c:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800209e:	2100      	movs	r1, #0
 80020a0:	2040      	movs	r0, #64	@ 0x40
 80020a2:	f7ff ff8c 	bl	8001fbe <SD_SendCmd>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	f040 80a6 	bne.w	80021fa <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80020ae:	4b62      	ldr	r3, [pc, #392]	@ (8002238 <SD_disk_initialize+0x1d0>)
 80020b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80020b4:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80020b6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80020ba:	2048      	movs	r0, #72	@ 0x48
 80020bc:	f7ff ff7f 	bl	8001fbe <SD_SendCmd>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d158      	bne.n	8002178 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80020c6:	2300      	movs	r3, #0
 80020c8:	73fb      	strb	r3, [r7, #15]
 80020ca:	e00c      	b.n	80020e6 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80020cc:	7bfc      	ldrb	r4, [r7, #15]
 80020ce:	f7ff fe65 	bl	8001d9c <SPI_RxByte>
 80020d2:	4603      	mov	r3, r0
 80020d4:	461a      	mov	r2, r3
 80020d6:	f104 0310 	add.w	r3, r4, #16
 80020da:	443b      	add	r3, r7
 80020dc:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	3301      	adds	r3, #1
 80020e4:	73fb      	strb	r3, [r7, #15]
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d9ef      	bls.n	80020cc <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80020ec:	7abb      	ldrb	r3, [r7, #10]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	f040 8083 	bne.w	80021fa <SD_disk_initialize+0x192>
 80020f4:	7afb      	ldrb	r3, [r7, #11]
 80020f6:	2baa      	cmp	r3, #170	@ 0xaa
 80020f8:	d17f      	bne.n	80021fa <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80020fa:	2100      	movs	r1, #0
 80020fc:	2077      	movs	r0, #119	@ 0x77
 80020fe:	f7ff ff5e 	bl	8001fbe <SD_SendCmd>
 8002102:	4603      	mov	r3, r0
 8002104:	2b01      	cmp	r3, #1
 8002106:	d807      	bhi.n	8002118 <SD_disk_initialize+0xb0>
 8002108:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800210c:	2069      	movs	r0, #105	@ 0x69
 800210e:	f7ff ff56 	bl	8001fbe <SD_SendCmd>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8002118:	4b47      	ldr	r3, [pc, #284]	@ (8002238 <SD_disk_initialize+0x1d0>)
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	b29b      	uxth	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1eb      	bne.n	80020fa <SD_disk_initialize+0x92>
 8002122:	e000      	b.n	8002126 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8002124:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8002126:	4b44      	ldr	r3, [pc, #272]	@ (8002238 <SD_disk_initialize+0x1d0>)
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	b29b      	uxth	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d064      	beq.n	80021fa <SD_disk_initialize+0x192>
 8002130:	2100      	movs	r1, #0
 8002132:	207a      	movs	r0, #122	@ 0x7a
 8002134:	f7ff ff43 	bl	8001fbe <SD_SendCmd>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d15d      	bne.n	80021fa <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
 8002142:	e00c      	b.n	800215e <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8002144:	7bfc      	ldrb	r4, [r7, #15]
 8002146:	f7ff fe29 	bl	8001d9c <SPI_RxByte>
 800214a:	4603      	mov	r3, r0
 800214c:	461a      	mov	r2, r3
 800214e:	f104 0310 	add.w	r3, r4, #16
 8002152:	443b      	add	r3, r7
 8002154:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	3301      	adds	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	2b03      	cmp	r3, #3
 8002162:	d9ef      	bls.n	8002144 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8002164:	7a3b      	ldrb	r3, [r7, #8]
 8002166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <SD_disk_initialize+0x10a>
 800216e:	230c      	movs	r3, #12
 8002170:	e000      	b.n	8002174 <SD_disk_initialize+0x10c>
 8002172:	2304      	movs	r3, #4
 8002174:	73bb      	strb	r3, [r7, #14]
 8002176:	e040      	b.n	80021fa <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8002178:	2100      	movs	r1, #0
 800217a:	2077      	movs	r0, #119	@ 0x77
 800217c:	f7ff ff1f 	bl	8001fbe <SD_SendCmd>
 8002180:	4603      	mov	r3, r0
 8002182:	2b01      	cmp	r3, #1
 8002184:	d808      	bhi.n	8002198 <SD_disk_initialize+0x130>
 8002186:	2100      	movs	r1, #0
 8002188:	2069      	movs	r0, #105	@ 0x69
 800218a:	f7ff ff18 	bl	8001fbe <SD_SendCmd>
 800218e:	4603      	mov	r3, r0
 8002190:	2b01      	cmp	r3, #1
 8002192:	d801      	bhi.n	8002198 <SD_disk_initialize+0x130>
 8002194:	2302      	movs	r3, #2
 8002196:	e000      	b.n	800219a <SD_disk_initialize+0x132>
 8002198:	2301      	movs	r3, #1
 800219a:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 800219c:	7bbb      	ldrb	r3, [r7, #14]
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d10e      	bne.n	80021c0 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80021a2:	2100      	movs	r1, #0
 80021a4:	2077      	movs	r0, #119	@ 0x77
 80021a6:	f7ff ff0a 	bl	8001fbe <SD_SendCmd>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d80e      	bhi.n	80021ce <SD_disk_initialize+0x166>
 80021b0:	2100      	movs	r1, #0
 80021b2:	2069      	movs	r0, #105	@ 0x69
 80021b4:	f7ff ff03 	bl	8001fbe <SD_SendCmd>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d107      	bne.n	80021ce <SD_disk_initialize+0x166>
 80021be:	e00d      	b.n	80021dc <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80021c0:	2100      	movs	r1, #0
 80021c2:	2041      	movs	r0, #65	@ 0x41
 80021c4:	f7ff fefb 	bl	8001fbe <SD_SendCmd>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80021ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002238 <SD_disk_initialize+0x1d0>)
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1e1      	bne.n	800219c <SD_disk_initialize+0x134>
 80021d8:	e000      	b.n	80021dc <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80021da:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80021dc:	4b16      	ldr	r3, [pc, #88]	@ (8002238 <SD_disk_initialize+0x1d0>)
 80021de:	881b      	ldrh	r3, [r3, #0]
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d007      	beq.n	80021f6 <SD_disk_initialize+0x18e>
 80021e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021ea:	2050      	movs	r0, #80	@ 0x50
 80021ec:	f7ff fee7 	bl	8001fbe <SD_SendCmd>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <SD_disk_initialize+0x192>
 80021f6:	2300      	movs	r3, #0
 80021f8:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80021fa:	4a10      	ldr	r2, [pc, #64]	@ (800223c <SD_disk_initialize+0x1d4>)
 80021fc:	7bbb      	ldrb	r3, [r7, #14]
 80021fe:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8002200:	f7ff fd8a 	bl	8001d18 <DESELECT>
	SPI_RxByte();
 8002204:	f7ff fdca 	bl	8001d9c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8002208:	7bbb      	ldrb	r3, [r7, #14]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d008      	beq.n	8002220 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 800220e:	4b09      	ldr	r3, [pc, #36]	@ (8002234 <SD_disk_initialize+0x1cc>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	b2db      	uxtb	r3, r3
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <SD_disk_initialize+0x1cc>)
 800221c:	701a      	strb	r2, [r3, #0]
 800221e:	e001      	b.n	8002224 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8002220:	f7ff fe42 	bl	8001ea8 <SD_PowerOff>
	}

	return Stat;
 8002224:	4b03      	ldr	r3, [pc, #12]	@ (8002234 <SD_disk_initialize+0x1cc>)
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b2db      	uxtb	r3, r3
}
 800222a:	4618      	mov	r0, r3
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	bd90      	pop	{r4, r7, pc}
 8002232:	bf00      	nop
 8002234:	20000004 	.word	0x20000004
 8002238:	2000066d 	.word	0x2000066d
 800223c:	20000674 	.word	0x20000674

08002240 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <SD_disk_status+0x14>
 8002250:	2301      	movs	r3, #1
 8002252:	e002      	b.n	800225a <SD_disk_status+0x1a>
	return Stat;
 8002254:	4b04      	ldr	r3, [pc, #16]	@ (8002268 <SD_disk_status+0x28>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	b2db      	uxtb	r3, r3
}
 800225a:	4618      	mov	r0, r3
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000004 	.word	0x20000004

0800226c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	60b9      	str	r1, [r7, #8]
 8002274:	607a      	str	r2, [r7, #4]
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	4603      	mov	r3, r0
 800227a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800227c:	7bfb      	ldrb	r3, [r7, #15]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <SD_disk_read+0x1c>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <SD_disk_read+0x20>
 8002288:	2304      	movs	r3, #4
 800228a:	e051      	b.n	8002330 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 800228c:	4b2a      	ldr	r3, [pc, #168]	@ (8002338 <SD_disk_read+0xcc>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	b2db      	uxtb	r3, r3
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <SD_disk_read+0x32>
 800229a:	2303      	movs	r3, #3
 800229c:	e048      	b.n	8002330 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 800229e:	4b27      	ldr	r3, [pc, #156]	@ (800233c <SD_disk_read+0xd0>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	f003 0304 	and.w	r3, r3, #4
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d102      	bne.n	80022b0 <SD_disk_read+0x44>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	025b      	lsls	r3, r3, #9
 80022ae:	607b      	str	r3, [r7, #4]

	SELECT();
 80022b0:	f7ff fd24 	bl	8001cfc <SELECT>

	if (count == 1)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d111      	bne.n	80022de <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	2051      	movs	r0, #81	@ 0x51
 80022be:	f7ff fe7e 	bl	8001fbe <SD_SendCmd>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d129      	bne.n	800231c <SD_disk_read+0xb0>
 80022c8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022cc:	68b8      	ldr	r0, [r7, #8]
 80022ce:	f7ff fe03 	bl	8001ed8 <SD_RxDataBlock>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d021      	beq.n	800231c <SD_disk_read+0xb0>
 80022d8:	2300      	movs	r3, #0
 80022da:	603b      	str	r3, [r7, #0]
 80022dc:	e01e      	b.n	800231c <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	2052      	movs	r0, #82	@ 0x52
 80022e2:	f7ff fe6c 	bl	8001fbe <SD_SendCmd>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d117      	bne.n	800231c <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80022ec:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022f0:	68b8      	ldr	r0, [r7, #8]
 80022f2:	f7ff fdf1 	bl	8001ed8 <SD_RxDataBlock>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <SD_disk_read+0xa6>
				buff += 512;
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002302:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	3b01      	subs	r3, #1
 8002308:	603b      	str	r3, [r7, #0]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1ed      	bne.n	80022ec <SD_disk_read+0x80>
 8002310:	e000      	b.n	8002314 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8002312:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8002314:	2100      	movs	r1, #0
 8002316:	204c      	movs	r0, #76	@ 0x4c
 8002318:	f7ff fe51 	bl	8001fbe <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 800231c:	f7ff fcfc 	bl	8001d18 <DESELECT>
	SPI_RxByte();
 8002320:	f7ff fd3c 	bl	8001d9c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	bf14      	ite	ne
 800232a:	2301      	movne	r3, #1
 800232c:	2300      	moveq	r3, #0
 800232e:	b2db      	uxtb	r3, r3
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000004 	.word	0x20000004
 800233c:	20000674 	.word	0x20000674

08002340 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	603b      	str	r3, [r7, #0]
 800234c:	4603      	mov	r3, r0
 800234e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8002350:	7bfb      	ldrb	r3, [r7, #15]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d102      	bne.n	800235c <SD_disk_write+0x1c>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <SD_disk_write+0x20>
 800235c:	2304      	movs	r3, #4
 800235e:	e06b      	b.n	8002438 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002360:	4b37      	ldr	r3, [pc, #220]	@ (8002440 <SD_disk_write+0x100>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <SD_disk_write+0x32>
 800236e:	2303      	movs	r3, #3
 8002370:	e062      	b.n	8002438 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8002372:	4b33      	ldr	r3, [pc, #204]	@ (8002440 <SD_disk_write+0x100>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <SD_disk_write+0x44>
 8002380:	2302      	movs	r3, #2
 8002382:	e059      	b.n	8002438 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8002384:	4b2f      	ldr	r3, [pc, #188]	@ (8002444 <SD_disk_write+0x104>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d102      	bne.n	8002396 <SD_disk_write+0x56>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	025b      	lsls	r3, r3, #9
 8002394:	607b      	str	r3, [r7, #4]

	SELECT();
 8002396:	f7ff fcb1 	bl	8001cfc <SELECT>

	if (count == 1)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d110      	bne.n	80023c2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	2058      	movs	r0, #88	@ 0x58
 80023a4:	f7ff fe0b 	bl	8001fbe <SD_SendCmd>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d13a      	bne.n	8002424 <SD_disk_write+0xe4>
 80023ae:	21fe      	movs	r1, #254	@ 0xfe
 80023b0:	68b8      	ldr	r0, [r7, #8]
 80023b2:	f7ff fdc1 	bl	8001f38 <SD_TxDataBlock>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d033      	beq.n	8002424 <SD_disk_write+0xe4>
			count = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	e030      	b.n	8002424 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 80023c2:	4b20      	ldr	r3, [pc, #128]	@ (8002444 <SD_disk_write+0x104>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d007      	beq.n	80023de <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 80023ce:	2100      	movs	r1, #0
 80023d0:	2077      	movs	r0, #119	@ 0x77
 80023d2:	f7ff fdf4 	bl	8001fbe <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80023d6:	6839      	ldr	r1, [r7, #0]
 80023d8:	2057      	movs	r0, #87	@ 0x57
 80023da:	f7ff fdf0 	bl	8001fbe <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	2059      	movs	r0, #89	@ 0x59
 80023e2:	f7ff fdec 	bl	8001fbe <SD_SendCmd>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d11b      	bne.n	8002424 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80023ec:	21fc      	movs	r1, #252	@ 0xfc
 80023ee:	68b8      	ldr	r0, [r7, #8]
 80023f0:	f7ff fda2 	bl	8001f38 <SD_TxDataBlock>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <SD_disk_write+0xd0>
				buff += 512;
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002400:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	3b01      	subs	r3, #1
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1ee      	bne.n	80023ec <SD_disk_write+0xac>
 800240e:	e000      	b.n	8002412 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8002410:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8002412:	21fd      	movs	r1, #253	@ 0xfd
 8002414:	2000      	movs	r0, #0
 8002416:	f7ff fd8f 	bl	8001f38 <SD_TxDataBlock>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <SD_disk_write+0xe4>
			{
				count = 1;
 8002420:	2301      	movs	r3, #1
 8002422:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8002424:	f7ff fc78 	bl	8001d18 <DESELECT>
	SPI_RxByte();
 8002428:	f7ff fcb8 	bl	8001d9c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	bf14      	ite	ne
 8002432:	2301      	movne	r3, #1
 8002434:	2300      	moveq	r3, #0
 8002436:	b2db      	uxtb	r3, r3
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000004 	.word	0x20000004
 8002444:	20000674 	.word	0x20000674

08002448 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b08b      	sub	sp, #44	@ 0x2c
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	603a      	str	r2, [r7, #0]
 8002452:	71fb      	strb	r3, [r7, #7]
 8002454:	460b      	mov	r3, r1
 8002456:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <SD_disk_ioctl+0x1e>
 8002462:	2304      	movs	r3, #4
 8002464:	e113      	b.n	800268e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 800246c:	79bb      	ldrb	r3, [r7, #6]
 800246e:	2b05      	cmp	r3, #5
 8002470:	d124      	bne.n	80024bc <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8002472:	6a3b      	ldr	r3, [r7, #32]
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d012      	beq.n	80024a0 <SD_disk_ioctl+0x58>
 800247a:	2b02      	cmp	r3, #2
 800247c:	dc1a      	bgt.n	80024b4 <SD_disk_ioctl+0x6c>
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <SD_disk_ioctl+0x40>
 8002482:	2b01      	cmp	r3, #1
 8002484:	d006      	beq.n	8002494 <SD_disk_ioctl+0x4c>
 8002486:	e015      	b.n	80024b4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8002488:	f7ff fd0e 	bl	8001ea8 <SD_PowerOff>
			res = RES_OK;
 800248c:	2300      	movs	r3, #0
 800248e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002492:	e0fa      	b.n	800268a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8002494:	f7ff fcc6 	bl	8001e24 <SD_PowerOn>
			res = RES_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800249e:	e0f4      	b.n	800268a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	1c5c      	adds	r4, r3, #1
 80024a4:	f7ff fd0c 	bl	8001ec0 <SD_CheckPower>
 80024a8:	4603      	mov	r3, r0
 80024aa:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80024ac:	2300      	movs	r3, #0
 80024ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80024b2:	e0ea      	b.n	800268a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80024b4:	2304      	movs	r3, #4
 80024b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80024ba:	e0e6      	b.n	800268a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80024bc:	4b76      	ldr	r3, [pc, #472]	@ (8002698 <SD_disk_ioctl+0x250>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <SD_disk_ioctl+0x86>
 80024ca:	2303      	movs	r3, #3
 80024cc:	e0df      	b.n	800268e <SD_disk_ioctl+0x246>

		SELECT();
 80024ce:	f7ff fc15 	bl	8001cfc <SELECT>

		switch (ctrl)
 80024d2:	79bb      	ldrb	r3, [r7, #6]
 80024d4:	2b0d      	cmp	r3, #13
 80024d6:	f200 80c9 	bhi.w	800266c <SD_disk_ioctl+0x224>
 80024da:	a201      	add	r2, pc, #4	@ (adr r2, 80024e0 <SD_disk_ioctl+0x98>)
 80024dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e0:	080025d7 	.word	0x080025d7
 80024e4:	08002519 	.word	0x08002519
 80024e8:	080025c7 	.word	0x080025c7
 80024ec:	0800266d 	.word	0x0800266d
 80024f0:	0800266d 	.word	0x0800266d
 80024f4:	0800266d 	.word	0x0800266d
 80024f8:	0800266d 	.word	0x0800266d
 80024fc:	0800266d 	.word	0x0800266d
 8002500:	0800266d 	.word	0x0800266d
 8002504:	0800266d 	.word	0x0800266d
 8002508:	0800266d 	.word	0x0800266d
 800250c:	080025e9 	.word	0x080025e9
 8002510:	0800260d 	.word	0x0800260d
 8002514:	08002631 	.word	0x08002631
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8002518:	2100      	movs	r1, #0
 800251a:	2049      	movs	r0, #73	@ 0x49
 800251c:	f7ff fd4f 	bl	8001fbe <SD_SendCmd>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	f040 80a6 	bne.w	8002674 <SD_disk_ioctl+0x22c>
 8002528:	f107 030c 	add.w	r3, r7, #12
 800252c:	2110      	movs	r1, #16
 800252e:	4618      	mov	r0, r3
 8002530:	f7ff fcd2 	bl	8001ed8 <SD_RxDataBlock>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 809c 	beq.w	8002674 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 800253c:	7b3b      	ldrb	r3, [r7, #12]
 800253e:	099b      	lsrs	r3, r3, #6
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b01      	cmp	r3, #1
 8002544:	d10d      	bne.n	8002562 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002546:	7d7b      	ldrb	r3, [r7, #21]
 8002548:	461a      	mov	r2, r3
 800254a:	7d3b      	ldrb	r3, [r7, #20]
 800254c:	021b      	lsls	r3, r3, #8
 800254e:	b29b      	uxth	r3, r3
 8002550:	4413      	add	r3, r2
 8002552:	b29b      	uxth	r3, r3
 8002554:	3301      	adds	r3, #1
 8002556:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8002558:	8bfb      	ldrh	r3, [r7, #30]
 800255a:	029a      	lsls	r2, r3, #10
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	e02d      	b.n	80025be <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002562:	7c7b      	ldrb	r3, [r7, #17]
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	b2da      	uxtb	r2, r3
 800256a:	7dbb      	ldrb	r3, [r7, #22]
 800256c:	09db      	lsrs	r3, r3, #7
 800256e:	b2db      	uxtb	r3, r3
 8002570:	4413      	add	r3, r2
 8002572:	b2da      	uxtb	r2, r3
 8002574:	7d7b      	ldrb	r3, [r7, #21]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	b2db      	uxtb	r3, r3
 800257a:	f003 0306 	and.w	r3, r3, #6
 800257e:	b2db      	uxtb	r3, r3
 8002580:	4413      	add	r3, r2
 8002582:	b2db      	uxtb	r3, r3
 8002584:	3302      	adds	r3, #2
 8002586:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800258a:	7d3b      	ldrb	r3, [r7, #20]
 800258c:	099b      	lsrs	r3, r3, #6
 800258e:	b2db      	uxtb	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	7cfb      	ldrb	r3, [r7, #19]
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	b29b      	uxth	r3, r3
 8002598:	4413      	add	r3, r2
 800259a:	b29a      	uxth	r2, r3
 800259c:	7cbb      	ldrb	r3, [r7, #18]
 800259e:	029b      	lsls	r3, r3, #10
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	4413      	add	r3, r2
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	3301      	adds	r3, #1
 80025ae:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80025b0:	8bfa      	ldrh	r2, [r7, #30]
 80025b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80025b6:	3b09      	subs	r3, #9
 80025b8:	409a      	lsls	r2, r3
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80025be:	2300      	movs	r3, #0
 80025c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 80025c4:	e056      	b.n	8002674 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025cc:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80025ce:	2300      	movs	r3, #0
 80025d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80025d4:	e055      	b.n	8002682 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80025d6:	f7ff fc0b 	bl	8001df0 <SD_ReadyWait>
 80025da:	4603      	mov	r3, r0
 80025dc:	2bff      	cmp	r3, #255	@ 0xff
 80025de:	d14b      	bne.n	8002678 <SD_disk_ioctl+0x230>
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80025e6:	e047      	b.n	8002678 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80025e8:	2100      	movs	r1, #0
 80025ea:	2049      	movs	r0, #73	@ 0x49
 80025ec:	f7ff fce7 	bl	8001fbe <SD_SendCmd>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d142      	bne.n	800267c <SD_disk_ioctl+0x234>
 80025f6:	2110      	movs	r1, #16
 80025f8:	6a38      	ldr	r0, [r7, #32]
 80025fa:	f7ff fc6d 	bl	8001ed8 <SD_RxDataBlock>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d03b      	beq.n	800267c <SD_disk_ioctl+0x234>
 8002604:	2300      	movs	r3, #0
 8002606:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800260a:	e037      	b.n	800267c <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800260c:	2100      	movs	r1, #0
 800260e:	204a      	movs	r0, #74	@ 0x4a
 8002610:	f7ff fcd5 	bl	8001fbe <SD_SendCmd>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d132      	bne.n	8002680 <SD_disk_ioctl+0x238>
 800261a:	2110      	movs	r1, #16
 800261c:	6a38      	ldr	r0, [r7, #32]
 800261e:	f7ff fc5b 	bl	8001ed8 <SD_RxDataBlock>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d02b      	beq.n	8002680 <SD_disk_ioctl+0x238>
 8002628:	2300      	movs	r3, #0
 800262a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800262e:	e027      	b.n	8002680 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8002630:	2100      	movs	r1, #0
 8002632:	207a      	movs	r0, #122	@ 0x7a
 8002634:	f7ff fcc3 	bl	8001fbe <SD_SendCmd>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d116      	bne.n	800266c <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 800263e:	2300      	movs	r3, #0
 8002640:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002644:	e00b      	b.n	800265e <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8002646:	6a3c      	ldr	r4, [r7, #32]
 8002648:	1c63      	adds	r3, r4, #1
 800264a:	623b      	str	r3, [r7, #32]
 800264c:	f7ff fba6 	bl	8001d9c <SPI_RxByte>
 8002650:	4603      	mov	r3, r0
 8002652:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002654:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002658:	3301      	adds	r3, #1
 800265a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800265e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002662:	2b03      	cmp	r3, #3
 8002664:	d9ef      	bls.n	8002646 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8002666:	2300      	movs	r3, #0
 8002668:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 800266c:	2304      	movs	r3, #4
 800266e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002672:	e006      	b.n	8002682 <SD_disk_ioctl+0x23a>
			break;
 8002674:	bf00      	nop
 8002676:	e004      	b.n	8002682 <SD_disk_ioctl+0x23a>
			break;
 8002678:	bf00      	nop
 800267a:	e002      	b.n	8002682 <SD_disk_ioctl+0x23a>
			break;
 800267c:	bf00      	nop
 800267e:	e000      	b.n	8002682 <SD_disk_ioctl+0x23a>
			break;
 8002680:	bf00      	nop
		}

		DESELECT();
 8002682:	f7ff fb49 	bl	8001d18 <DESELECT>
		SPI_RxByte();
 8002686:	f7ff fb89 	bl	8001d9c <SPI_RxByte>
	}

	return res;
 800268a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800268e:	4618      	mov	r0, r3
 8002690:	372c      	adds	r7, #44	@ 0x2c
 8002692:	46bd      	mov	sp, r7
 8002694:	bd90      	pop	{r4, r7, pc}
 8002696:	bf00      	nop
 8002698:	20000004 	.word	0x20000004

0800269c <send_uart>:
uint32_t total, free_space;

extern UART_HandleTypeDef huart2;
extern RTC_HandleTypeDef hrtc;			//Handler del RTC

void send_uart(char *string){
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7fd fdeb 	bl	8000280 <strlen>
 80026aa:	4603      	mov	r3, r0
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4803      	ldr	r0, [pc, #12]	@ (80026c4 <send_uart+0x28>)
 80026b6:	f003 f9fb 	bl	8005ab0 <HAL_UART_Transmit>
	return;
 80026ba:	bf00      	nop
}
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	200005d4 	.word	0x200005d4

080026c8 <mount_sd>:

void mount_sd(const char* path){
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80026d0:	2201      	movs	r2, #1
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	4809      	ldr	r0, [pc, #36]	@ (80026fc <mount_sd+0x34>)
 80026d6:	f006 fa67 	bl	8008ba8 <f_mount>
 80026da:	4603      	mov	r3, r0
 80026dc:	461a      	mov	r2, r3
 80026de:	4b08      	ldr	r3, [pc, #32]	@ (8002700 <mount_sd+0x38>)
 80026e0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK){
 80026e2:	4b07      	ldr	r3, [pc, #28]	@ (8002700 <mount_sd+0x38>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d004      	beq.n	80026f4 <mount_sd+0x2c>
		send_uart("Error al montar la tarjeta SD!!!\n\n");
 80026ea:	4806      	ldr	r0, [pc, #24]	@ (8002704 <mount_sd+0x3c>)
 80026ec:	f7ff ffd6 	bl	800269c <send_uart>
		while(1);
 80026f0:	bf00      	nop
 80026f2:	e7fd      	b.n	80026f0 <mount_sd+0x28>
	}
	return;
 80026f4:	bf00      	nop
}
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000678 	.word	0x20000678
 8002700:	200027fc 	.word	0x200027fc
 8002704:	08011300 	.word	0x08011300

08002708 <get_line_from_file>:
		while(1);
	}
	return fresult;
}

char *get_line_from_file(char *buffer, int buffer_length){
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
	return f_gets(buffer, buffer_length, &fil);
 8002712:	4a05      	ldr	r2, [pc, #20]	@ (8002728 <get_line_from_file+0x20>)
 8002714:	6839      	ldr	r1, [r7, #0]
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f007 fc21 	bl	8009f5e <f_gets>
 800271c:	4603      	mov	r3, r0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	200016b4 	.word	0x200016b4

0800272c <write_chunk>:

void write_chunk(char *filename, void *buffer, size_t data_type_size, size_t chunk_size){
 800272c:	b580      	push	{r7, lr}
 800272e:	b08c      	sub	sp, #48	@ 0x30
 8002730:	af02      	add	r7, sp, #8
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
 8002738:	603b      	str	r3, [r7, #0]
	/*Defino punteros obtenidos del casteo de buffer*/
	float32_t *f_buffer = (float32_t *)buffer;
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	623b      	str	r3, [r7, #32]
	uint16_t *ui_buffer = (uint16_t *) buffer;
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	61fb      	str	r3, [r7, #28]
	char str[10];
	/*Abro el archivo*/
	fresult = f_stat(filename, &fno);
 8002742:	492c      	ldr	r1, [pc, #176]	@ (80027f4 <write_chunk+0xc8>)
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f007 faee 	bl	8009d26 <f_stat>
 800274a:	4603      	mov	r3, r0
 800274c:	461a      	mov	r2, r3
 800274e:	4b2a      	ldr	r3, [pc, #168]	@ (80027f8 <write_chunk+0xcc>)
 8002750:	701a      	strb	r2, [r3, #0]
	fresult = f_open(&fil, filename, FA_OPEN_APPEND | FA_WRITE);
 8002752:	2232      	movs	r2, #50	@ 0x32
 8002754:	68f9      	ldr	r1, [r7, #12]
 8002756:	4829      	ldr	r0, [pc, #164]	@ (80027fc <write_chunk+0xd0>)
 8002758:	f006 fa8a 	bl	8008c70 <f_open>
 800275c:	4603      	mov	r3, r0
 800275e:	461a      	mov	r2, r3
 8002760:	4b25      	ldr	r3, [pc, #148]	@ (80027f8 <write_chunk+0xcc>)
 8002762:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < chunk_size; i++){
 8002764:	2300      	movs	r3, #0
 8002766:	627b      	str	r3, [r7, #36]	@ 0x24
 8002768:	e035      	b.n	80027d6 <write_chunk+0xaa>
		if(data_type_size == sizeof(float32_t)){
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b04      	cmp	r3, #4
 800276e:	d111      	bne.n	8002794 <write_chunk+0x68>
			snprintf(str, 10, "%.6f\n", f_buffer[i]);
 8002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	6a3a      	ldr	r2, [r7, #32]
 8002776:	4413      	add	r3, r2
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7fd feec 	bl	8000558 <__aeabi_f2d>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	f107 0010 	add.w	r0, r7, #16
 8002788:	e9cd 2300 	strd	r2, r3, [sp]
 800278c:	4a1c      	ldr	r2, [pc, #112]	@ (8002800 <write_chunk+0xd4>)
 800278e:	210a      	movs	r1, #10
 8002790:	f00b ff36 	bl	800e600 <sniprintf>
		}
		if(data_type_size == sizeof(uint16_t)){
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d10a      	bne.n	80027b0 <write_chunk+0x84>
			snprintf(str, 10, "%u\n", ui_buffer[i]);
 800279a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	4413      	add	r3, r2
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	f107 0010 	add.w	r0, r7, #16
 80027a8:	4a16      	ldr	r2, [pc, #88]	@ (8002804 <write_chunk+0xd8>)
 80027aa:	210a      	movs	r1, #10
 80027ac:	f00b ff28 	bl	800e600 <sniprintf>
		}
		fresult = f_write(&fil, str, strlen(str), NULL);
 80027b0:	f107 0310 	add.w	r3, r7, #16
 80027b4:	4618      	mov	r0, r3
 80027b6:	f7fd fd63 	bl	8000280 <strlen>
 80027ba:	4602      	mov	r2, r0
 80027bc:	f107 0110 	add.w	r1, r7, #16
 80027c0:	2300      	movs	r3, #0
 80027c2:	480e      	ldr	r0, [pc, #56]	@ (80027fc <write_chunk+0xd0>)
 80027c4:	f006 fdc6 	bl	8009354 <f_write>
 80027c8:	4603      	mov	r3, r0
 80027ca:	461a      	mov	r2, r3
 80027cc:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <write_chunk+0xcc>)
 80027ce:	701a      	strb	r2, [r3, #0]
	for(size_t i = 0; i < chunk_size; i++){
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	3301      	adds	r3, #1
 80027d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d3c5      	bcc.n	800276a <write_chunk+0x3e>
	}
	fresult = f_close(&fil);
 80027de:	4807      	ldr	r0, [pc, #28]	@ (80027fc <write_chunk+0xd0>)
 80027e0:	f007 f804 	bl	80097ec <f_close>
 80027e4:	4603      	mov	r3, r0
 80027e6:	461a      	mov	r2, r3
 80027e8:	4b03      	ldr	r3, [pc, #12]	@ (80027f8 <write_chunk+0xcc>)
 80027ea:	701a      	strb	r2, [r3, #0]
	return;
 80027ec:	bf00      	nop
}
 80027ee:	3728      	adds	r7, #40	@ 0x28
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	200026e4 	.word	0x200026e4
 80027f8:	200027fc 	.word	0x200027fc
 80027fc:	200016b4 	.word	0x200016b4
 8002800:	08011440 	.word	0x08011440
 8002804:	08011448 	.word	0x08011448

08002808 <read_chunk>:

uint32_t read_chunk(char *filename, uint32_t current_pos, void *buffer, size_t data_type_size, size_t chunk_size){
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b08d      	sub	sp, #52	@ 0x34
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	603b      	str	r3, [r7, #0]
	/*Defino variable para guardar la posicion de la proxima lectura en bloque*/
	uint32_t next_pos;
	/*Defino punteros obtenidos del casteo de buffer*/
	float32_t *f_buffer = (float32_t *)buffer;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t *ui_buffer = (uint16_t *) buffer;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	623b      	str	r3, [r7, #32]
	/*Defino string donde se guardaran las lineas del archivo*/
	char str[10];
	/*Abro el archivo*/
	fresult = f_stat(filename, &fno);
 800281e:	4930      	ldr	r1, [pc, #192]	@ (80028e0 <read_chunk+0xd8>)
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f007 fa80 	bl	8009d26 <f_stat>
 8002826:	4603      	mov	r3, r0
 8002828:	461a      	mov	r2, r3
 800282a:	4b2e      	ldr	r3, [pc, #184]	@ (80028e4 <read_chunk+0xdc>)
 800282c:	701a      	strb	r2, [r3, #0]
	fresult = f_open(&fil, filename, FA_READ);
 800282e:	2201      	movs	r2, #1
 8002830:	68f9      	ldr	r1, [r7, #12]
 8002832:	482d      	ldr	r0, [pc, #180]	@ (80028e8 <read_chunk+0xe0>)
 8002834:	f006 fa1c 	bl	8008c70 <f_open>
 8002838:	4603      	mov	r3, r0
 800283a:	461a      	mov	r2, r3
 800283c:	4b29      	ldr	r3, [pc, #164]	@ (80028e4 <read_chunk+0xdc>)
 800283e:	701a      	strb	r2, [r3, #0]
	/*Seteo la posición en el archivo*/
	f_lseek(&fil, current_pos);
 8002840:	68b9      	ldr	r1, [r7, #8]
 8002842:	4829      	ldr	r0, [pc, #164]	@ (80028e8 <read_chunk+0xe0>)
 8002844:	f007 f801 	bl	800984a <f_lseek>
	next_pos = f_tell(&fil);
 8002848:	4b27      	ldr	r3, [pc, #156]	@ (80028e8 <read_chunk+0xe0>)
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	/*Leo linea por linea y convierto al tipo de numero que corresponda. Luego guardo en el buffer*/
	for(size_t i = 0; i < chunk_size; i++){
 800284e:	2300      	movs	r3, #0
 8002850:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002852:	e034      	b.n	80028be <read_chunk+0xb6>
		if(get_line_from_file(str, 10) != 0){
 8002854:	f107 0314 	add.w	r3, r7, #20
 8002858:	210a      	movs	r1, #10
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff ff54 	bl	8002708 <get_line_from_file>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d025      	beq.n	80028b2 <read_chunk+0xaa>
			/*Chequea tipo de variable que debe leer desde el archivo*/
			if(data_type_size == sizeof(float32_t)){
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	2b04      	cmp	r3, #4
 800286a:	d10d      	bne.n	8002888 <read_chunk+0x80>
				/*Guardo numero leido desde SD en buffer*/
				f_buffer[i] = (float32_t)strtof(str, NULL);
 800286c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002872:	18d4      	adds	r4, r2, r3
 8002874:	f107 0314 	add.w	r3, r7, #20
 8002878:	2100      	movs	r1, #0
 800287a:	4618      	mov	r0, r3
 800287c:	f00a feb6 	bl	800d5ec <strtof>
 8002880:	eef0 7a40 	vmov.f32	s15, s0
 8002884:	edc4 7a00 	vstr	s15, [r4]
			}
			if(data_type_size == sizeof(uint16_t)){
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d10d      	bne.n	80028aa <read_chunk+0xa2>
				ui_buffer[i] = strtoul(str, NULL, 10);
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	220a      	movs	r2, #10
 8002894:	2100      	movs	r1, #0
 8002896:	4618      	mov	r0, r3
 8002898:	f00a ff7a 	bl	800d790 <strtoul>
 800289c:	4601      	mov	r1, r0
 800289e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	6a3a      	ldr	r2, [r7, #32]
 80028a4:	4413      	add	r3, r2
 80028a6:	b28a      	uxth	r2, r1
 80028a8:	801a      	strh	r2, [r3, #0]
			}
			next_pos = f_tell(&fil);
 80028aa:	4b0f      	ldr	r3, [pc, #60]	@ (80028e8 <read_chunk+0xe0>)
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028b0:	e002      	b.n	80028b8 <read_chunk+0xb0>
		}
		else{
			/*Si se llega al final del archivo, se lo cierra y se reinicia la posicion*/
			next_pos = 0;
 80028b2:	2300      	movs	r3, #0
 80028b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			break;
 80028b6:	e006      	b.n	80028c6 <read_chunk+0xbe>
	for(size_t i = 0; i < chunk_size; i++){
 80028b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ba:	3301      	adds	r3, #1
 80028bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80028c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d3c6      	bcc.n	8002854 <read_chunk+0x4c>
		}
	}
	/*Si se copio el bloque y no se llego al final del archivo*/
	/*Cierro el archivo y devuelvo la ultima posicion en el archivo*/
	fresult = f_close(&fil);
 80028c6:	4808      	ldr	r0, [pc, #32]	@ (80028e8 <read_chunk+0xe0>)
 80028c8:	f006 ff90 	bl	80097ec <f_close>
 80028cc:	4603      	mov	r3, r0
 80028ce:	461a      	mov	r2, r3
 80028d0:	4b04      	ldr	r3, [pc, #16]	@ (80028e4 <read_chunk+0xdc>)
 80028d2:	701a      	strb	r2, [r3, #0]
	return next_pos;
 80028d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3734      	adds	r7, #52	@ 0x34
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd90      	pop	{r4, r7, pc}
 80028de:	bf00      	nop
 80028e0:	200026e4 	.word	0x200026e4
 80028e4:	200027fc 	.word	0x200027fc
 80028e8:	200016b4 	.word	0x200016b4

080028ec <remove_file>:

FRESULT remove_file(char *filename){
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
	return f_unlink(filename);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f007 fa6b 	bl	8009dd0 <f_unlink>
 80028fa:	4603      	mov	r3, r0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <test_task>:
		vPortFree(user_name);
	}

}

void test_task(void *pvParameters){
 8002904:	b590      	push	{r4, r7, lr}
 8002906:	b08d      	sub	sp, #52	@ 0x34
 8002908:	af02      	add	r7, sp, #8
 800290a:	6078      	str	r0, [r7, #4]
	uint32_t current_pos = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t hardcode_buffer[] = {5, 4, 3 ,5, 8, 9, 10, 11};
 8002910:	4b1e      	ldr	r3, [pc, #120]	@ (800298c <test_task+0x88>)
 8002912:	f107 0410 	add.w	r4, r7, #16
 8002916:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002918:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint16_t test_buffer[4];
	mount_sd("/");
 800291c:	481c      	ldr	r0, [pc, #112]	@ (8002990 <test_task+0x8c>)
 800291e:	f7ff fed3 	bl	80026c8 <mount_sd>
	while(1){
		for(uint8_t i = 0; i < 2; i++){
 8002922:	2300      	movs	r3, #0
 8002924:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002928:	e00f      	b.n	800294a <test_task+0x46>
			write_chunk("hola.txt", hardcode_buffer + (i * 4), sizeof(uint16_t), 4);
 800292a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	f107 0210 	add.w	r2, r7, #16
 8002934:	18d1      	adds	r1, r2, r3
 8002936:	2304      	movs	r3, #4
 8002938:	2202      	movs	r2, #2
 800293a:	4816      	ldr	r0, [pc, #88]	@ (8002994 <test_task+0x90>)
 800293c:	f7ff fef6 	bl	800272c <write_chunk>
		for(uint8_t i = 0; i < 2; i++){
 8002940:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002944:	3301      	adds	r3, #1
 8002946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800294a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800294e:	2b01      	cmp	r3, #1
 8002950:	d9eb      	bls.n	800292a <test_task+0x26>
		}

		current_pos = read_chunk("hola.txt", current_pos, test_buffer, sizeof(uint16_t), 4);
 8002952:	f107 0208 	add.w	r2, r7, #8
 8002956:	2304      	movs	r3, #4
 8002958:	9300      	str	r3, [sp, #0]
 800295a:	2302      	movs	r3, #2
 800295c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800295e:	480d      	ldr	r0, [pc, #52]	@ (8002994 <test_task+0x90>)
 8002960:	f7ff ff52 	bl	8002808 <read_chunk>
 8002964:	6278      	str	r0, [r7, #36]	@ 0x24
		current_pos = read_chunk("hola.txt", current_pos, test_buffer, sizeof(uint16_t), 4);
 8002966:	f107 0208 	add.w	r2, r7, #8
 800296a:	2304      	movs	r3, #4
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	2302      	movs	r3, #2
 8002970:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002972:	4808      	ldr	r0, [pc, #32]	@ (8002994 <test_task+0x90>)
 8002974:	f7ff ff48 	bl	8002808 <read_chunk>
 8002978:	6278      	str	r0, [r7, #36]	@ 0x24
		remove_file("hola.txt");
 800297a:	4806      	ldr	r0, [pc, #24]	@ (8002994 <test_task+0x90>)
 800297c:	f7ff ffb6 	bl	80028ec <remove_file>
		if(current_pos == 0){
 8002980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1cd      	bne.n	8002922 <test_task+0x1e>
			current_pos = 1;
 8002986:	2301      	movs	r3, #1
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
		for(uint8_t i = 0; i < 2; i++){
 800298a:	e7ca      	b.n	8002922 <test_task+0x1e>
 800298c:	0801154c 	.word	0x0801154c
 8002990:	0801150c 	.word	0x0801150c
 8002994:	08011540 	.word	0x08011540

08002998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800299c:	4b0e      	ldr	r3, [pc, #56]	@ (80029d8 <HAL_Init+0x40>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a0d      	ldr	r2, [pc, #52]	@ (80029d8 <HAL_Init+0x40>)
 80029a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029a8:	4b0b      	ldr	r3, [pc, #44]	@ (80029d8 <HAL_Init+0x40>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0a      	ldr	r2, [pc, #40]	@ (80029d8 <HAL_Init+0x40>)
 80029ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029b4:	4b08      	ldr	r3, [pc, #32]	@ (80029d8 <HAL_Init+0x40>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a07      	ldr	r2, [pc, #28]	@ (80029d8 <HAL_Init+0x40>)
 80029ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029c0:	2003      	movs	r0, #3
 80029c2:	f000 fb5e 	bl	8003082 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029c6:	200f      	movs	r0, #15
 80029c8:	f7fe ffb4 	bl	8001934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029cc:	f7fe fe0c 	bl	80015e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40023c00 	.word	0x40023c00

080029dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029e0:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_IncTick+0x20>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	461a      	mov	r2, r3
 80029e6:	4b06      	ldr	r3, [pc, #24]	@ (8002a00 <HAL_IncTick+0x24>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4413      	add	r3, r2
 80029ec:	4a04      	ldr	r2, [pc, #16]	@ (8002a00 <HAL_IncTick+0x24>)
 80029ee:	6013      	str	r3, [r2, #0]
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	2000000c 	.word	0x2000000c
 8002a00:	20002800 	.word	0x20002800

08002a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return uwTick;
 8002a08:	4b03      	ldr	r3, [pc, #12]	@ (8002a18 <HAL_GetTick+0x14>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
}
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	20002800 	.word	0x20002800

08002a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a24:	f7ff ffee 	bl	8002a04 <HAL_GetTick>
 8002a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a34:	d005      	beq.n	8002a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a36:	4b0a      	ldr	r3, [pc, #40]	@ (8002a60 <HAL_Delay+0x44>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4413      	add	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a42:	bf00      	nop
 8002a44:	f7ff ffde 	bl	8002a04 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d8f7      	bhi.n	8002a44 <HAL_Delay+0x28>
  {
  }
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	2000000c 	.word	0x2000000c

08002a64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e033      	b.n	8002ae2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d109      	bne.n	8002a96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fe fddc 	bl	8001640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	f003 0310 	and.w	r3, r3, #16
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d118      	bne.n	8002ad4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002aaa:	f023 0302 	bic.w	r3, r3, #2
 8002aae:	f043 0202 	orr.w	r2, r3, #2
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f93a 	bl	8002d30 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	f023 0303 	bic.w	r3, r3, #3
 8002aca:	f043 0201 	orr.w	r2, r3, #1
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ad2:	e001      	b.n	8002ad8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
	...

08002aec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d101      	bne.n	8002b08 <HAL_ADC_ConfigChannel+0x1c>
 8002b04:	2302      	movs	r3, #2
 8002b06:	e105      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x228>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b09      	cmp	r3, #9
 8002b16:	d925      	bls.n	8002b64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68d9      	ldr	r1, [r3, #12]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	461a      	mov	r2, r3
 8002b26:	4613      	mov	r3, r2
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3b1e      	subs	r3, #30
 8002b2e:	2207      	movs	r2, #7
 8002b30:	fa02 f303 	lsl.w	r3, r2, r3
 8002b34:	43da      	mvns	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	400a      	ands	r2, r1
 8002b3c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68d9      	ldr	r1, [r3, #12]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	4618      	mov	r0, r3
 8002b50:	4603      	mov	r3, r0
 8002b52:	005b      	lsls	r3, r3, #1
 8002b54:	4403      	add	r3, r0
 8002b56:	3b1e      	subs	r3, #30
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	60da      	str	r2, [r3, #12]
 8002b62:	e022      	b.n	8002baa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6919      	ldr	r1, [r3, #16]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	4613      	mov	r3, r2
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	4413      	add	r3, r2
 8002b78:	2207      	movs	r2, #7
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43da      	mvns	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	400a      	ands	r2, r1
 8002b86:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6919      	ldr	r1, [r3, #16]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	4618      	mov	r0, r3
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	4403      	add	r3, r0
 8002ba0:	409a      	lsls	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b06      	cmp	r3, #6
 8002bb0:	d824      	bhi.n	8002bfc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685a      	ldr	r2, [r3, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3b05      	subs	r3, #5
 8002bc4:	221f      	movs	r2, #31
 8002bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bca:	43da      	mvns	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	400a      	ands	r2, r1
 8002bd2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	4618      	mov	r0, r3
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	3b05      	subs	r3, #5
 8002bee:	fa00 f203 	lsl.w	r2, r0, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002bfa:	e04c      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b0c      	cmp	r3, #12
 8002c02:	d824      	bhi.n	8002c4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	3b23      	subs	r3, #35	@ 0x23
 8002c16:	221f      	movs	r2, #31
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43da      	mvns	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	400a      	ands	r2, r1
 8002c24:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	4618      	mov	r0, r3
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	3b23      	subs	r3, #35	@ 0x23
 8002c40:	fa00 f203 	lsl.w	r2, r0, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002c4c:	e023      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3b41      	subs	r3, #65	@ 0x41
 8002c60:	221f      	movs	r2, #31
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43da      	mvns	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	400a      	ands	r2, r1
 8002c6e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4413      	add	r3, r2
 8002c88:	3b41      	subs	r3, #65	@ 0x41
 8002c8a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c96:	4b22      	ldr	r3, [pc, #136]	@ (8002d20 <HAL_ADC_ConfigChannel+0x234>)
 8002c98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a21      	ldr	r2, [pc, #132]	@ (8002d24 <HAL_ADC_ConfigChannel+0x238>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d109      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x1cc>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2b12      	cmp	r3, #18
 8002caa:	d105      	bne.n	8002cb8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a19      	ldr	r2, [pc, #100]	@ (8002d24 <HAL_ADC_ConfigChannel+0x238>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d123      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x21e>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b10      	cmp	r3, #16
 8002cc8:	d003      	beq.n	8002cd2 <HAL_ADC_ConfigChannel+0x1e6>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b11      	cmp	r3, #17
 8002cd0:	d11b      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b10      	cmp	r3, #16
 8002ce4:	d111      	bne.n	8002d0a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ce6:	4b10      	ldr	r3, [pc, #64]	@ (8002d28 <HAL_ADC_ConfigChannel+0x23c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a10      	ldr	r2, [pc, #64]	@ (8002d2c <HAL_ADC_ConfigChannel+0x240>)
 8002cec:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf0:	0c9a      	lsrs	r2, r3, #18
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002cfc:	e002      	b.n	8002d04 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	3b01      	subs	r3, #1
 8002d02:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f9      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	40012300 	.word	0x40012300
 8002d24:	40012000 	.word	0x40012000
 8002d28:	20000000 	.word	0x20000000
 8002d2c:	431bde83 	.word	0x431bde83

08002d30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d38:	4b79      	ldr	r3, [pc, #484]	@ (8002f20 <ADC_Init+0x1f0>)
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	685a      	ldr	r2, [r3, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	431a      	orrs	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685a      	ldr	r2, [r3, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6859      	ldr	r1, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	021a      	lsls	r2, r3, #8
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002d88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6859      	ldr	r1, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002daa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6899      	ldr	r1, [r3, #8]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc2:	4a58      	ldr	r2, [pc, #352]	@ (8002f24 <ADC_Init+0x1f4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d022      	beq.n	8002e0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002dd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	6899      	ldr	r1, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	430a      	orrs	r2, r1
 8002de8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002df8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6899      	ldr	r1, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	609a      	str	r2, [r3, #8]
 8002e0c:	e00f      	b.n	8002e2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e2c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0202 	bic.w	r2, r2, #2
 8002e3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6899      	ldr	r1, [r3, #8]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	7e1b      	ldrb	r3, [r3, #24]
 8002e48:	005a      	lsls	r2, r3, #1
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d01b      	beq.n	8002e94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e6a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002e7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6859      	ldr	r1, [r3, #4]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e86:	3b01      	subs	r3, #1
 8002e88:	035a      	lsls	r2, r3, #13
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	605a      	str	r2, [r3, #4]
 8002e92:	e007      	b.n	8002ea4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ea2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	051a      	lsls	r2, r3, #20
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ed8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6899      	ldr	r1, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ee6:	025a      	lsls	r2, r3, #9
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689a      	ldr	r2, [r3, #8]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002efe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6899      	ldr	r1, [r3, #8]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	029a      	lsls	r2, r3, #10
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	609a      	str	r2, [r3, #8]
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	40012300 	.word	0x40012300
 8002f24:	0f000001 	.word	0x0f000001

08002f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f38:	4b0c      	ldr	r3, [pc, #48]	@ (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f44:	4013      	ands	r3, r2
 8002f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f5a:	4a04      	ldr	r2, [pc, #16]	@ (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	60d3      	str	r3, [r2, #12]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f74:	4b04      	ldr	r3, [pc, #16]	@ (8002f88 <__NVIC_GetPriorityGrouping+0x18>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	f003 0307 	and.w	r3, r3, #7
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	db0b      	blt.n	8002fb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	f003 021f 	and.w	r2, r3, #31
 8002fa4:	4907      	ldr	r1, [pc, #28]	@ (8002fc4 <__NVIC_EnableIRQ+0x38>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	2001      	movs	r0, #1
 8002fae:	fa00 f202 	lsl.w	r2, r0, r2
 8002fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	e000e100 	.word	0xe000e100

08002fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	6039      	str	r1, [r7, #0]
 8002fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	db0a      	blt.n	8002ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	490c      	ldr	r1, [pc, #48]	@ (8003014 <__NVIC_SetPriority+0x4c>)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	0112      	lsls	r2, r2, #4
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	440b      	add	r3, r1
 8002fec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ff0:	e00a      	b.n	8003008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	4908      	ldr	r1, [pc, #32]	@ (8003018 <__NVIC_SetPriority+0x50>)
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	3b04      	subs	r3, #4
 8003000:	0112      	lsls	r2, r2, #4
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	440b      	add	r3, r1
 8003006:	761a      	strb	r2, [r3, #24]
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000e100 	.word	0xe000e100
 8003018:	e000ed00 	.word	0xe000ed00

0800301c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800301c:	b480      	push	{r7}
 800301e:	b089      	sub	sp, #36	@ 0x24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f1c3 0307 	rsb	r3, r3, #7
 8003036:	2b04      	cmp	r3, #4
 8003038:	bf28      	it	cs
 800303a:	2304      	movcs	r3, #4
 800303c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3304      	adds	r3, #4
 8003042:	2b06      	cmp	r3, #6
 8003044:	d902      	bls.n	800304c <NVIC_EncodePriority+0x30>
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3b03      	subs	r3, #3
 800304a:	e000      	b.n	800304e <NVIC_EncodePriority+0x32>
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003050:	f04f 32ff 	mov.w	r2, #4294967295
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43da      	mvns	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	401a      	ands	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003064:	f04f 31ff 	mov.w	r1, #4294967295
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	fa01 f303 	lsl.w	r3, r1, r3
 800306e:	43d9      	mvns	r1, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003074:	4313      	orrs	r3, r2
         );
}
 8003076:	4618      	mov	r0, r3
 8003078:	3724      	adds	r7, #36	@ 0x24
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff ff4c 	bl	8002f28 <__NVIC_SetPriorityGrouping>
}
 8003090:	bf00      	nop
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
 80030a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030aa:	f7ff ff61 	bl	8002f70 <__NVIC_GetPriorityGrouping>
 80030ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	68b9      	ldr	r1, [r7, #8]
 80030b4:	6978      	ldr	r0, [r7, #20]
 80030b6:	f7ff ffb1 	bl	800301c <NVIC_EncodePriority>
 80030ba:	4602      	mov	r2, r0
 80030bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c0:	4611      	mov	r1, r2
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff ff80 	bl	8002fc8 <__NVIC_SetPriority>
}
 80030c8:	bf00      	nop
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff ff54 	bl	8002f8c <__NVIC_EnableIRQ>
}
 80030e4:	bf00      	nop
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80030f8:	f7ff fc84 	bl	8002a04 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e099      	b.n	800323c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 0201 	bic.w	r2, r2, #1
 8003126:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003128:	e00f      	b.n	800314a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800312a:	f7ff fc6b 	bl	8002a04 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	2b05      	cmp	r3, #5
 8003136:	d908      	bls.n	800314a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2220      	movs	r2, #32
 800313c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2203      	movs	r2, #3
 8003142:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e078      	b.n	800323c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1e8      	bne.n	800312a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	4b38      	ldr	r3, [pc, #224]	@ (8003244 <HAL_DMA_Init+0x158>)
 8003164:	4013      	ands	r3, r2
 8003166:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003176:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003182:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800318e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	4313      	orrs	r3, r2
 800319a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d107      	bne.n	80031b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ac:	4313      	orrs	r3, r2
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f023 0307 	bic.w	r3, r3, #7
 80031ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d117      	bne.n	800320e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00e      	beq.n	800320e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f9e9 	bl	80035c8 <DMA_CheckFifoParam>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d008      	beq.n	800320e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2240      	movs	r2, #64	@ 0x40
 8003200:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800320a:	2301      	movs	r3, #1
 800320c:	e016      	b.n	800323c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f9a0 	bl	800355c <DMA_CalcBaseAndBitshift>
 800321c:	4603      	mov	r3, r0
 800321e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003224:	223f      	movs	r2, #63	@ 0x3f
 8003226:	409a      	lsls	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	f010803f 	.word	0xf010803f

08003248 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003254:	4b8e      	ldr	r3, [pc, #568]	@ (8003490 <HAL_DMA_IRQHandler+0x248>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a8e      	ldr	r2, [pc, #568]	@ (8003494 <HAL_DMA_IRQHandler+0x24c>)
 800325a:	fba2 2303 	umull	r2, r3, r2, r3
 800325e:	0a9b      	lsrs	r3, r3, #10
 8003260:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003266:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003272:	2208      	movs	r2, #8
 8003274:	409a      	lsls	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4013      	ands	r3, r2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d01a      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d013      	beq.n	80032b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0204 	bic.w	r2, r2, #4
 800329a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a0:	2208      	movs	r2, #8
 80032a2:	409a      	lsls	r2, r3
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ac:	f043 0201 	orr.w	r2, r3, #1
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b8:	2201      	movs	r2, #1
 80032ba:	409a      	lsls	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4013      	ands	r3, r2
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d012      	beq.n	80032ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00b      	beq.n	80032ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d6:	2201      	movs	r2, #1
 80032d8:	409a      	lsls	r2, r3
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e2:	f043 0202 	orr.w	r2, r3, #2
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ee:	2204      	movs	r2, #4
 80032f0:	409a      	lsls	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d012      	beq.n	8003320 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00b      	beq.n	8003320 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800330c:	2204      	movs	r2, #4
 800330e:	409a      	lsls	r2, r3
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003318:	f043 0204 	orr.w	r2, r3, #4
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003324:	2210      	movs	r2, #16
 8003326:	409a      	lsls	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4013      	ands	r3, r2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d043      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0308 	and.w	r3, r3, #8
 800333a:	2b00      	cmp	r3, #0
 800333c:	d03c      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003342:	2210      	movs	r2, #16
 8003344:	409a      	lsls	r2, r3
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d018      	beq.n	800338a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d108      	bne.n	8003378 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	2b00      	cmp	r3, #0
 800336c:	d024      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	4798      	blx	r3
 8003376:	e01f      	b.n	80033b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800337c:	2b00      	cmp	r3, #0
 800337e:	d01b      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	4798      	blx	r3
 8003388:	e016      	b.n	80033b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003394:	2b00      	cmp	r3, #0
 8003396:	d107      	bne.n	80033a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0208 	bic.w	r2, r2, #8
 80033a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033bc:	2220      	movs	r2, #32
 80033be:	409a      	lsls	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 808f 	beq.w	80034e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0310 	and.w	r3, r3, #16
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 8087 	beq.w	80034e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033de:	2220      	movs	r2, #32
 80033e0:	409a      	lsls	r2, r3
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b05      	cmp	r3, #5
 80033f0:	d136      	bne.n	8003460 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0216 	bic.w	r2, r2, #22
 8003400:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695a      	ldr	r2, [r3, #20]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003410:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d103      	bne.n	8003422 <HAL_DMA_IRQHandler+0x1da>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800341e:	2b00      	cmp	r3, #0
 8003420:	d007      	beq.n	8003432 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f022 0208 	bic.w	r2, r2, #8
 8003430:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003436:	223f      	movs	r2, #63	@ 0x3f
 8003438:	409a      	lsls	r2, r3
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003452:	2b00      	cmp	r3, #0
 8003454:	d07e      	beq.n	8003554 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	4798      	blx	r3
        }
        return;
 800345e:	e079      	b.n	8003554 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d01d      	beq.n	80034aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10d      	bne.n	8003498 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003480:	2b00      	cmp	r3, #0
 8003482:	d031      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	4798      	blx	r3
 800348c:	e02c      	b.n	80034e8 <HAL_DMA_IRQHandler+0x2a0>
 800348e:	bf00      	nop
 8003490:	20000000 	.word	0x20000000
 8003494:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349c:	2b00      	cmp	r3, #0
 800349e:	d023      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	4798      	blx	r3
 80034a8:	e01e      	b.n	80034e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10f      	bne.n	80034d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0210 	bic.w	r2, r2, #16
 80034c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d032      	beq.n	8003556 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d022      	beq.n	8003542 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2205      	movs	r2, #5
 8003500:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0201 	bic.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	3301      	adds	r3, #1
 8003518:	60bb      	str	r3, [r7, #8]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	429a      	cmp	r2, r3
 800351e:	d307      	bcc.n	8003530 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d1f2      	bne.n	8003514 <HAL_DMA_IRQHandler+0x2cc>
 800352e:	e000      	b.n	8003532 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003530:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003546:	2b00      	cmp	r3, #0
 8003548:	d005      	beq.n	8003556 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	4798      	blx	r3
 8003552:	e000      	b.n	8003556 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003554:	bf00      	nop
    }
  }
}
 8003556:	3718      	adds	r7, #24
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	b2db      	uxtb	r3, r3
 800356a:	3b10      	subs	r3, #16
 800356c:	4a14      	ldr	r2, [pc, #80]	@ (80035c0 <DMA_CalcBaseAndBitshift+0x64>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	091b      	lsrs	r3, r3, #4
 8003574:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003576:	4a13      	ldr	r2, [pc, #76]	@ (80035c4 <DMA_CalcBaseAndBitshift+0x68>)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4413      	add	r3, r2
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	461a      	mov	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b03      	cmp	r3, #3
 8003588:	d909      	bls.n	800359e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003592:	f023 0303 	bic.w	r3, r3, #3
 8003596:	1d1a      	adds	r2, r3, #4
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	659a      	str	r2, [r3, #88]	@ 0x58
 800359c:	e007      	b.n	80035ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80035a6:	f023 0303 	bic.w	r3, r3, #3
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	aaaaaaab 	.word	0xaaaaaaab
 80035c4:	080115c4 	.word	0x080115c4

080035c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d11f      	bne.n	8003622 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2b03      	cmp	r3, #3
 80035e6:	d856      	bhi.n	8003696 <DMA_CheckFifoParam+0xce>
 80035e8:	a201      	add	r2, pc, #4	@ (adr r2, 80035f0 <DMA_CheckFifoParam+0x28>)
 80035ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ee:	bf00      	nop
 80035f0:	08003601 	.word	0x08003601
 80035f4:	08003613 	.word	0x08003613
 80035f8:	08003601 	.word	0x08003601
 80035fc:	08003697 	.word	0x08003697
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003604:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d046      	beq.n	800369a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003610:	e043      	b.n	800369a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003616:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800361a:	d140      	bne.n	800369e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003620:	e03d      	b.n	800369e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800362a:	d121      	bne.n	8003670 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	2b03      	cmp	r3, #3
 8003630:	d837      	bhi.n	80036a2 <DMA_CheckFifoParam+0xda>
 8003632:	a201      	add	r2, pc, #4	@ (adr r2, 8003638 <DMA_CheckFifoParam+0x70>)
 8003634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003638:	08003649 	.word	0x08003649
 800363c:	0800364f 	.word	0x0800364f
 8003640:	08003649 	.word	0x08003649
 8003644:	08003661 	.word	0x08003661
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
      break;
 800364c:	e030      	b.n	80036b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003652:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d025      	beq.n	80036a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800365e:	e022      	b.n	80036a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003664:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003668:	d11f      	bne.n	80036aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800366e:	e01c      	b.n	80036aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b02      	cmp	r3, #2
 8003674:	d903      	bls.n	800367e <DMA_CheckFifoParam+0xb6>
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	2b03      	cmp	r3, #3
 800367a:	d003      	beq.n	8003684 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800367c:	e018      	b.n	80036b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	73fb      	strb	r3, [r7, #15]
      break;
 8003682:	e015      	b.n	80036b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003688:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00e      	beq.n	80036ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	73fb      	strb	r3, [r7, #15]
      break;
 8003694:	e00b      	b.n	80036ae <DMA_CheckFifoParam+0xe6>
      break;
 8003696:	bf00      	nop
 8003698:	e00a      	b.n	80036b0 <DMA_CheckFifoParam+0xe8>
      break;
 800369a:	bf00      	nop
 800369c:	e008      	b.n	80036b0 <DMA_CheckFifoParam+0xe8>
      break;
 800369e:	bf00      	nop
 80036a0:	e006      	b.n	80036b0 <DMA_CheckFifoParam+0xe8>
      break;
 80036a2:	bf00      	nop
 80036a4:	e004      	b.n	80036b0 <DMA_CheckFifoParam+0xe8>
      break;
 80036a6:	bf00      	nop
 80036a8:	e002      	b.n	80036b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80036aa:	bf00      	nop
 80036ac:	e000      	b.n	80036b0 <DMA_CheckFifoParam+0xe8>
      break;
 80036ae:	bf00      	nop
    }
  } 
  
  return status; 
 80036b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3714      	adds	r7, #20
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop

080036c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b089      	sub	sp, #36	@ 0x24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ca:	2300      	movs	r3, #0
 80036cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	e159      	b.n	8003990 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036dc:	2201      	movs	r2, #1
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	fa02 f303 	lsl.w	r3, r2, r3
 80036e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4013      	ands	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	f040 8148 	bne.w	800398a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f003 0303 	and.w	r3, r3, #3
 8003702:	2b01      	cmp	r3, #1
 8003704:	d005      	beq.n	8003712 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800370e:	2b02      	cmp	r3, #2
 8003710:	d130      	bne.n	8003774 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	2203      	movs	r2, #3
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43db      	mvns	r3, r3
 8003724:	69ba      	ldr	r2, [r7, #24]
 8003726:	4013      	ands	r3, r2
 8003728:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	005b      	lsls	r3, r3, #1
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	69ba      	ldr	r2, [r7, #24]
 8003738:	4313      	orrs	r3, r2
 800373a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003748:	2201      	movs	r2, #1
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	43db      	mvns	r3, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4013      	ands	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	091b      	lsrs	r3, r3, #4
 800375e:	f003 0201 	and.w	r2, r3, #1
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 0303 	and.w	r3, r3, #3
 800377c:	2b03      	cmp	r3, #3
 800377e:	d017      	beq.n	80037b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	2203      	movs	r2, #3
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f003 0303 	and.w	r3, r3, #3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d123      	bne.n	8003804 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	08da      	lsrs	r2, r3, #3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3208      	adds	r2, #8
 80037c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	f003 0307 	and.w	r3, r3, #7
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	220f      	movs	r2, #15
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	08da      	lsrs	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	3208      	adds	r2, #8
 80037fe:	69b9      	ldr	r1, [r7, #24]
 8003800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	2203      	movs	r2, #3
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	43db      	mvns	r3, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4013      	ands	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	f003 0203 	and.w	r2, r3, #3
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4313      	orrs	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 80a2 	beq.w	800398a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	4b57      	ldr	r3, [pc, #348]	@ (80039a8 <HAL_GPIO_Init+0x2e8>)
 800384c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384e:	4a56      	ldr	r2, [pc, #344]	@ (80039a8 <HAL_GPIO_Init+0x2e8>)
 8003850:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003854:	6453      	str	r3, [r2, #68]	@ 0x44
 8003856:	4b54      	ldr	r3, [pc, #336]	@ (80039a8 <HAL_GPIO_Init+0x2e8>)
 8003858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003862:	4a52      	ldr	r2, [pc, #328]	@ (80039ac <HAL_GPIO_Init+0x2ec>)
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	089b      	lsrs	r3, r3, #2
 8003868:	3302      	adds	r3, #2
 800386a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800386e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	220f      	movs	r2, #15
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43db      	mvns	r3, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4013      	ands	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a49      	ldr	r2, [pc, #292]	@ (80039b0 <HAL_GPIO_Init+0x2f0>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d019      	beq.n	80038c2 <HAL_GPIO_Init+0x202>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a48      	ldr	r2, [pc, #288]	@ (80039b4 <HAL_GPIO_Init+0x2f4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d013      	beq.n	80038be <HAL_GPIO_Init+0x1fe>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a47      	ldr	r2, [pc, #284]	@ (80039b8 <HAL_GPIO_Init+0x2f8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00d      	beq.n	80038ba <HAL_GPIO_Init+0x1fa>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a46      	ldr	r2, [pc, #280]	@ (80039bc <HAL_GPIO_Init+0x2fc>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d007      	beq.n	80038b6 <HAL_GPIO_Init+0x1f6>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a45      	ldr	r2, [pc, #276]	@ (80039c0 <HAL_GPIO_Init+0x300>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d101      	bne.n	80038b2 <HAL_GPIO_Init+0x1f2>
 80038ae:	2304      	movs	r3, #4
 80038b0:	e008      	b.n	80038c4 <HAL_GPIO_Init+0x204>
 80038b2:	2307      	movs	r3, #7
 80038b4:	e006      	b.n	80038c4 <HAL_GPIO_Init+0x204>
 80038b6:	2303      	movs	r3, #3
 80038b8:	e004      	b.n	80038c4 <HAL_GPIO_Init+0x204>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e002      	b.n	80038c4 <HAL_GPIO_Init+0x204>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <HAL_GPIO_Init+0x204>
 80038c2:	2300      	movs	r3, #0
 80038c4:	69fa      	ldr	r2, [r7, #28]
 80038c6:	f002 0203 	and.w	r2, r2, #3
 80038ca:	0092      	lsls	r2, r2, #2
 80038cc:	4093      	lsls	r3, r2
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038d4:	4935      	ldr	r1, [pc, #212]	@ (80039ac <HAL_GPIO_Init+0x2ec>)
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	089b      	lsrs	r3, r3, #2
 80038da:	3302      	adds	r3, #2
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038e2:	4b38      	ldr	r3, [pc, #224]	@ (80039c4 <HAL_GPIO_Init+0x304>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	43db      	mvns	r3, r3
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	4013      	ands	r3, r2
 80038f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003906:	4a2f      	ldr	r2, [pc, #188]	@ (80039c4 <HAL_GPIO_Init+0x304>)
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800390c:	4b2d      	ldr	r3, [pc, #180]	@ (80039c4 <HAL_GPIO_Init+0x304>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	43db      	mvns	r3, r3
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4013      	ands	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d003      	beq.n	8003930 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003928:	69ba      	ldr	r2, [r7, #24]
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	4313      	orrs	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003930:	4a24      	ldr	r2, [pc, #144]	@ (80039c4 <HAL_GPIO_Init+0x304>)
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003936:	4b23      	ldr	r3, [pc, #140]	@ (80039c4 <HAL_GPIO_Init+0x304>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	43db      	mvns	r3, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4013      	ands	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800395a:	4a1a      	ldr	r2, [pc, #104]	@ (80039c4 <HAL_GPIO_Init+0x304>)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003960:	4b18      	ldr	r3, [pc, #96]	@ (80039c4 <HAL_GPIO_Init+0x304>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	43db      	mvns	r3, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4013      	ands	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003984:	4a0f      	ldr	r2, [pc, #60]	@ (80039c4 <HAL_GPIO_Init+0x304>)
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	3301      	adds	r3, #1
 800398e:	61fb      	str	r3, [r7, #28]
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	2b0f      	cmp	r3, #15
 8003994:	f67f aea2 	bls.w	80036dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003998:	bf00      	nop
 800399a:	bf00      	nop
 800399c:	3724      	adds	r7, #36	@ 0x24
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40023800 	.word	0x40023800
 80039ac:	40013800 	.word	0x40013800
 80039b0:	40020000 	.word	0x40020000
 80039b4:	40020400 	.word	0x40020400
 80039b8:	40020800 	.word	0x40020800
 80039bc:	40020c00 	.word	0x40020c00
 80039c0:	40021000 	.word	0x40021000
 80039c4:	40013c00 	.word	0x40013c00

080039c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	807b      	strh	r3, [r7, #2]
 80039d4:	4613      	mov	r3, r2
 80039d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039d8:	787b      	ldrb	r3, [r7, #1]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039de:	887a      	ldrh	r2, [r7, #2]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039e4:	e003      	b.n	80039ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039e6:	887b      	ldrh	r3, [r7, #2]
 80039e8:	041a      	lsls	r2, r3, #16
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	619a      	str	r2, [r3, #24]
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
	...

080039fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e12b      	b.n	8003c66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fd fe82 	bl	800172c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2224      	movs	r2, #36	@ 0x24
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0201 	bic.w	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a60:	f000 fd80 	bl	8004564 <HAL_RCC_GetPCLK1Freq>
 8003a64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	4a81      	ldr	r2, [pc, #516]	@ (8003c70 <HAL_I2C_Init+0x274>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d807      	bhi.n	8003a80 <HAL_I2C_Init+0x84>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4a80      	ldr	r2, [pc, #512]	@ (8003c74 <HAL_I2C_Init+0x278>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	bf94      	ite	ls
 8003a78:	2301      	movls	r3, #1
 8003a7a:	2300      	movhi	r3, #0
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	e006      	b.n	8003a8e <HAL_I2C_Init+0x92>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4a7d      	ldr	r2, [pc, #500]	@ (8003c78 <HAL_I2C_Init+0x27c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	bf94      	ite	ls
 8003a88:	2301      	movls	r3, #1
 8003a8a:	2300      	movhi	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e0e7      	b.n	8003c66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4a78      	ldr	r2, [pc, #480]	@ (8003c7c <HAL_I2C_Init+0x280>)
 8003a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9e:	0c9b      	lsrs	r3, r3, #18
 8003aa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	4a6a      	ldr	r2, [pc, #424]	@ (8003c70 <HAL_I2C_Init+0x274>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d802      	bhi.n	8003ad0 <HAL_I2C_Init+0xd4>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	3301      	adds	r3, #1
 8003ace:	e009      	b.n	8003ae4 <HAL_I2C_Init+0xe8>
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003ad6:	fb02 f303 	mul.w	r3, r2, r3
 8003ada:	4a69      	ldr	r2, [pc, #420]	@ (8003c80 <HAL_I2C_Init+0x284>)
 8003adc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae0:	099b      	lsrs	r3, r3, #6
 8003ae2:	3301      	adds	r3, #1
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6812      	ldr	r2, [r2, #0]
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003af6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	495c      	ldr	r1, [pc, #368]	@ (8003c70 <HAL_I2C_Init+0x274>)
 8003b00:	428b      	cmp	r3, r1
 8003b02:	d819      	bhi.n	8003b38 <HAL_I2C_Init+0x13c>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	1e59      	subs	r1, r3, #1
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b12:	1c59      	adds	r1, r3, #1
 8003b14:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b18:	400b      	ands	r3, r1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00a      	beq.n	8003b34 <HAL_I2C_Init+0x138>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	1e59      	subs	r1, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b32:	e051      	b.n	8003bd8 <HAL_I2C_Init+0x1dc>
 8003b34:	2304      	movs	r3, #4
 8003b36:	e04f      	b.n	8003bd8 <HAL_I2C_Init+0x1dc>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d111      	bne.n	8003b64 <HAL_I2C_Init+0x168>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	1e58      	subs	r0, r3, #1
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6859      	ldr	r1, [r3, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	005b      	lsls	r3, r3, #1
 8003b4c:	440b      	add	r3, r1
 8003b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b52:	3301      	adds	r3, #1
 8003b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	bf0c      	ite	eq
 8003b5c:	2301      	moveq	r3, #1
 8003b5e:	2300      	movne	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	e012      	b.n	8003b8a <HAL_I2C_Init+0x18e>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	1e58      	subs	r0, r3, #1
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6859      	ldr	r1, [r3, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	0099      	lsls	r1, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	bf0c      	ite	eq
 8003b84:	2301      	moveq	r3, #1
 8003b86:	2300      	movne	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_I2C_Init+0x196>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e022      	b.n	8003bd8 <HAL_I2C_Init+0x1dc>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10e      	bne.n	8003bb8 <HAL_I2C_Init+0x1bc>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	1e58      	subs	r0, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6859      	ldr	r1, [r3, #4]
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	440b      	add	r3, r1
 8003ba8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bac:	3301      	adds	r3, #1
 8003bae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bb6:	e00f      	b.n	8003bd8 <HAL_I2C_Init+0x1dc>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	1e58      	subs	r0, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6859      	ldr	r1, [r3, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	0099      	lsls	r1, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bce:	3301      	adds	r3, #1
 8003bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	6809      	ldr	r1, [r1, #0]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69da      	ldr	r2, [r3, #28]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	6911      	ldr	r1, [r2, #16]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	68d2      	ldr	r2, [r2, #12]
 8003c12:	4311      	orrs	r1, r2
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	430b      	orrs	r3, r1
 8003c1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695a      	ldr	r2, [r3, #20]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	000186a0 	.word	0x000186a0
 8003c74:	001e847f 	.word	0x001e847f
 8003c78:	003d08ff 	.word	0x003d08ff
 8003c7c:	431bde83 	.word	0x431bde83
 8003c80:	10624dd3 	.word	0x10624dd3

08003c84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e267      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d075      	beq.n	8003d8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ca2:	4b88      	ldr	r3, [pc, #544]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d00c      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cae:	4b85      	ldr	r3, [pc, #532]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d112      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cba:	4b82      	ldr	r3, [pc, #520]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cc6:	d10b      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc8:	4b7e      	ldr	r3, [pc, #504]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d05b      	beq.n	8003d8c <HAL_RCC_OscConfig+0x108>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d157      	bne.n	8003d8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e242      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ce8:	d106      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x74>
 8003cea:	4b76      	ldr	r3, [pc, #472]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a75      	ldr	r2, [pc, #468]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	e01d      	b.n	8003d34 <HAL_RCC_OscConfig+0xb0>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d00:	d10c      	bne.n	8003d1c <HAL_RCC_OscConfig+0x98>
 8003d02:	4b70      	ldr	r3, [pc, #448]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a6f      	ldr	r2, [pc, #444]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a6c      	ldr	r2, [pc, #432]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	e00b      	b.n	8003d34 <HAL_RCC_OscConfig+0xb0>
 8003d1c:	4b69      	ldr	r3, [pc, #420]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a68      	ldr	r2, [pc, #416]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	4b66      	ldr	r3, [pc, #408]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a65      	ldr	r2, [pc, #404]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d013      	beq.n	8003d64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d3c:	f7fe fe62 	bl	8002a04 <HAL_GetTick>
 8003d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d42:	e008      	b.n	8003d56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d44:	f7fe fe5e 	bl	8002a04 <HAL_GetTick>
 8003d48:	4602      	mov	r2, r0
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	1ad3      	subs	r3, r2, r3
 8003d4e:	2b64      	cmp	r3, #100	@ 0x64
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e207      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d56:	4b5b      	ldr	r3, [pc, #364]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0f0      	beq.n	8003d44 <HAL_RCC_OscConfig+0xc0>
 8003d62:	e014      	b.n	8003d8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d64:	f7fe fe4e 	bl	8002a04 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d6c:	f7fe fe4a 	bl	8002a04 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	@ 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e1f3      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d7e:	4b51      	ldr	r3, [pc, #324]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f0      	bne.n	8003d6c <HAL_RCC_OscConfig+0xe8>
 8003d8a:	e000      	b.n	8003d8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d063      	beq.n	8003e62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 030c 	and.w	r3, r3, #12
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00b      	beq.n	8003dbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003da6:	4b47      	ldr	r3, [pc, #284]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dae:	2b08      	cmp	r3, #8
 8003db0:	d11c      	bne.n	8003dec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003db2:	4b44      	ldr	r3, [pc, #272]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d116      	bne.n	8003dec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dbe:	4b41      	ldr	r3, [pc, #260]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d005      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x152>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d001      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e1c7      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4937      	ldr	r1, [pc, #220]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dea:	e03a      	b.n	8003e62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d020      	beq.n	8003e36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003df4:	4b34      	ldr	r3, [pc, #208]	@ (8003ec8 <HAL_RCC_OscConfig+0x244>)
 8003df6:	2201      	movs	r2, #1
 8003df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfa:	f7fe fe03 	bl	8002a04 <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e02:	f7fe fdff 	bl	8002a04 <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e1a8      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e14:	4b2b      	ldr	r3, [pc, #172]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e20:	4b28      	ldr	r3, [pc, #160]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	4925      	ldr	r1, [pc, #148]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	600b      	str	r3, [r1, #0]
 8003e34:	e015      	b.n	8003e62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e36:	4b24      	ldr	r3, [pc, #144]	@ (8003ec8 <HAL_RCC_OscConfig+0x244>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fe fde2 	bl	8002a04 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e44:	f7fe fdde 	bl	8002a04 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e187      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e56:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d036      	beq.n	8003edc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d016      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e76:	4b15      	ldr	r3, [pc, #84]	@ (8003ecc <HAL_RCC_OscConfig+0x248>)
 8003e78:	2201      	movs	r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e7c:	f7fe fdc2 	bl	8002a04 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e84:	f7fe fdbe 	bl	8002a04 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e167      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e96:	4b0b      	ldr	r3, [pc, #44]	@ (8003ec4 <HAL_RCC_OscConfig+0x240>)
 8003e98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0x200>
 8003ea2:	e01b      	b.n	8003edc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ea4:	4b09      	ldr	r3, [pc, #36]	@ (8003ecc <HAL_RCC_OscConfig+0x248>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eaa:	f7fe fdab 	bl	8002a04 <HAL_GetTick>
 8003eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eb0:	e00e      	b.n	8003ed0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eb2:	f7fe fda7 	bl	8002a04 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d907      	bls.n	8003ed0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	e150      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	42470000 	.word	0x42470000
 8003ecc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed0:	4b88      	ldr	r3, [pc, #544]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1ea      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 8097 	beq.w	8004018 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eea:	2300      	movs	r3, #0
 8003eec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eee:	4b81      	ldr	r3, [pc, #516]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d10f      	bne.n	8003f1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003efa:	2300      	movs	r3, #0
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	4b7d      	ldr	r3, [pc, #500]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f02:	4a7c      	ldr	r2, [pc, #496]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f0a:	4b7a      	ldr	r3, [pc, #488]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f12:	60bb      	str	r3, [r7, #8]
 8003f14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f16:	2301      	movs	r3, #1
 8003f18:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1a:	4b77      	ldr	r3, [pc, #476]	@ (80040f8 <HAL_RCC_OscConfig+0x474>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d118      	bne.n	8003f58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f26:	4b74      	ldr	r3, [pc, #464]	@ (80040f8 <HAL_RCC_OscConfig+0x474>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a73      	ldr	r2, [pc, #460]	@ (80040f8 <HAL_RCC_OscConfig+0x474>)
 8003f2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f32:	f7fe fd67 	bl	8002a04 <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3a:	f7fe fd63 	bl	8002a04 <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e10c      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f4c:	4b6a      	ldr	r3, [pc, #424]	@ (80040f8 <HAL_RCC_OscConfig+0x474>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0f0      	beq.n	8003f3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d106      	bne.n	8003f6e <HAL_RCC_OscConfig+0x2ea>
 8003f60:	4b64      	ldr	r3, [pc, #400]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f64:	4a63      	ldr	r2, [pc, #396]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f6c:	e01c      	b.n	8003fa8 <HAL_RCC_OscConfig+0x324>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b05      	cmp	r3, #5
 8003f74:	d10c      	bne.n	8003f90 <HAL_RCC_OscConfig+0x30c>
 8003f76:	4b5f      	ldr	r3, [pc, #380]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7a:	4a5e      	ldr	r2, [pc, #376]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f7c:	f043 0304 	orr.w	r3, r3, #4
 8003f80:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f82:	4b5c      	ldr	r3, [pc, #368]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f86:	4a5b      	ldr	r2, [pc, #364]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f8e:	e00b      	b.n	8003fa8 <HAL_RCC_OscConfig+0x324>
 8003f90:	4b58      	ldr	r3, [pc, #352]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f94:	4a57      	ldr	r2, [pc, #348]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f96:	f023 0301 	bic.w	r3, r3, #1
 8003f9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f9c:	4b55      	ldr	r3, [pc, #340]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa0:	4a54      	ldr	r2, [pc, #336]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	f023 0304 	bic.w	r3, r3, #4
 8003fa6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d015      	beq.n	8003fdc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb0:	f7fe fd28 	bl	8002a04 <HAL_GetTick>
 8003fb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb6:	e00a      	b.n	8003fce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb8:	f7fe fd24 	bl	8002a04 <HAL_GetTick>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e0cb      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fce:	4b49      	ldr	r3, [pc, #292]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0ee      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x334>
 8003fda:	e014      	b.n	8004006 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fdc:	f7fe fd12 	bl	8002a04 <HAL_GetTick>
 8003fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fe2:	e00a      	b.n	8003ffa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe4:	f7fe fd0e 	bl	8002a04 <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1ad3      	subs	r3, r2, r3
 8003fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e0b5      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1ee      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004006:	7dfb      	ldrb	r3, [r7, #23]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d105      	bne.n	8004018 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800400c:	4b39      	ldr	r3, [pc, #228]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 800400e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004010:	4a38      	ldr	r2, [pc, #224]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8004012:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004016:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 80a1 	beq.w	8004164 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004022:	4b34      	ldr	r3, [pc, #208]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 030c 	and.w	r3, r3, #12
 800402a:	2b08      	cmp	r3, #8
 800402c:	d05c      	beq.n	80040e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	2b02      	cmp	r3, #2
 8004034:	d141      	bne.n	80040ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004036:	4b31      	ldr	r3, [pc, #196]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800403c:	f7fe fce2 	bl	8002a04 <HAL_GetTick>
 8004040:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004042:	e008      	b.n	8004056 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004044:	f7fe fcde 	bl	8002a04 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d901      	bls.n	8004056 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e087      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004056:	4b27      	ldr	r3, [pc, #156]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f0      	bne.n	8004044 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69da      	ldr	r2, [r3, #28]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004070:	019b      	lsls	r3, r3, #6
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004078:	085b      	lsrs	r3, r3, #1
 800407a:	3b01      	subs	r3, #1
 800407c:	041b      	lsls	r3, r3, #16
 800407e:	431a      	orrs	r2, r3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004084:	061b      	lsls	r3, r3, #24
 8004086:	491b      	ldr	r1, [pc, #108]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 8004088:	4313      	orrs	r3, r2
 800408a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800408c:	4b1b      	ldr	r3, [pc, #108]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 800408e:	2201      	movs	r2, #1
 8004090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004092:	f7fe fcb7 	bl	8002a04 <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800409a:	f7fe fcb3 	bl	8002a04 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e05c      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ac:	4b11      	ldr	r3, [pc, #68]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x416>
 80040b8:	e054      	b.n	8004164 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ba:	4b10      	ldr	r3, [pc, #64]	@ (80040fc <HAL_RCC_OscConfig+0x478>)
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c0:	f7fe fca0 	bl	8002a04 <HAL_GetTick>
 80040c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040c8:	f7fe fc9c 	bl	8002a04 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d901      	bls.n	80040da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e045      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040da:	4b06      	ldr	r3, [pc, #24]	@ (80040f4 <HAL_RCC_OscConfig+0x470>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1f0      	bne.n	80040c8 <HAL_RCC_OscConfig+0x444>
 80040e6:	e03d      	b.n	8004164 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d107      	bne.n	8004100 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e038      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
 80040f4:	40023800 	.word	0x40023800
 80040f8:	40007000 	.word	0x40007000
 80040fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004100:	4b1b      	ldr	r3, [pc, #108]	@ (8004170 <HAL_RCC_OscConfig+0x4ec>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d028      	beq.n	8004160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004118:	429a      	cmp	r2, r3
 800411a:	d121      	bne.n	8004160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004126:	429a      	cmp	r2, r3
 8004128:	d11a      	bne.n	8004160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004130:	4013      	ands	r3, r2
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004136:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004138:	4293      	cmp	r3, r2
 800413a:	d111      	bne.n	8004160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004146:	085b      	lsrs	r3, r3, #1
 8004148:	3b01      	subs	r3, #1
 800414a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800414c:	429a      	cmp	r2, r3
 800414e:	d107      	bne.n	8004160 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800415c:	429a      	cmp	r2, r3
 800415e:	d001      	beq.n	8004164 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e000      	b.n	8004166 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3718      	adds	r7, #24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	40023800 	.word	0x40023800

08004174 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e0cc      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004188:	4b68      	ldr	r3, [pc, #416]	@ (800432c <HAL_RCC_ClockConfig+0x1b8>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d90c      	bls.n	80041b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004196:	4b65      	ldr	r3, [pc, #404]	@ (800432c <HAL_RCC_ClockConfig+0x1b8>)
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	b2d2      	uxtb	r2, r2
 800419c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800419e:	4b63      	ldr	r3, [pc, #396]	@ (800432c <HAL_RCC_ClockConfig+0x1b8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d001      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e0b8      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d020      	beq.n	80041fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0304 	and.w	r3, r3, #4
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041c8:	4b59      	ldr	r3, [pc, #356]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	4a58      	ldr	r2, [pc, #352]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0308 	and.w	r3, r3, #8
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041e0:	4b53      	ldr	r3, [pc, #332]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	4a52      	ldr	r2, [pc, #328]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041ec:	4b50      	ldr	r3, [pc, #320]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	494d      	ldr	r1, [pc, #308]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d044      	beq.n	8004294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d107      	bne.n	8004222 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004212:	4b47      	ldr	r3, [pc, #284]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d119      	bne.n	8004252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e07f      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d003      	beq.n	8004232 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800422e:	2b03      	cmp	r3, #3
 8004230:	d107      	bne.n	8004242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004232:	4b3f      	ldr	r3, [pc, #252]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d109      	bne.n	8004252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e06f      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004242:	4b3b      	ldr	r3, [pc, #236]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0302 	and.w	r3, r3, #2
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e067      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004252:	4b37      	ldr	r3, [pc, #220]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f023 0203 	bic.w	r2, r3, #3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	4934      	ldr	r1, [pc, #208]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004260:	4313      	orrs	r3, r2
 8004262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004264:	f7fe fbce 	bl	8002a04 <HAL_GetTick>
 8004268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426a:	e00a      	b.n	8004282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800426c:	f7fe fbca 	bl	8002a04 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800427a:	4293      	cmp	r3, r2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e04f      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004282:	4b2b      	ldr	r3, [pc, #172]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 020c 	and.w	r2, r3, #12
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	429a      	cmp	r2, r3
 8004292:	d1eb      	bne.n	800426c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004294:	4b25      	ldr	r3, [pc, #148]	@ (800432c <HAL_RCC_ClockConfig+0x1b8>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0307 	and.w	r3, r3, #7
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	429a      	cmp	r2, r3
 80042a0:	d20c      	bcs.n	80042bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a2:	4b22      	ldr	r3, [pc, #136]	@ (800432c <HAL_RCC_ClockConfig+0x1b8>)
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042aa:	4b20      	ldr	r3, [pc, #128]	@ (800432c <HAL_RCC_ClockConfig+0x1b8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d001      	beq.n	80042bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e032      	b.n	8004322 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d008      	beq.n	80042da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042c8:	4b19      	ldr	r3, [pc, #100]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	4916      	ldr	r1, [pc, #88]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d009      	beq.n	80042fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042e6:	4b12      	ldr	r3, [pc, #72]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	490e      	ldr	r1, [pc, #56]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042fa:	f000 f821 	bl	8004340 <HAL_RCC_GetSysClockFreq>
 80042fe:	4602      	mov	r2, r0
 8004300:	4b0b      	ldr	r3, [pc, #44]	@ (8004330 <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	091b      	lsrs	r3, r3, #4
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	490a      	ldr	r1, [pc, #40]	@ (8004334 <HAL_RCC_ClockConfig+0x1c0>)
 800430c:	5ccb      	ldrb	r3, [r1, r3]
 800430e:	fa22 f303 	lsr.w	r3, r2, r3
 8004312:	4a09      	ldr	r2, [pc, #36]	@ (8004338 <HAL_RCC_ClockConfig+0x1c4>)
 8004314:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004316:	4b09      	ldr	r3, [pc, #36]	@ (800433c <HAL_RCC_ClockConfig+0x1c8>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f7fd fb0a 	bl	8001934 <HAL_InitTick>

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3710      	adds	r7, #16
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	40023c00 	.word	0x40023c00
 8004330:	40023800 	.word	0x40023800
 8004334:	080115ac 	.word	0x080115ac
 8004338:	20000000 	.word	0x20000000
 800433c:	20000008 	.word	0x20000008

08004340 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004344:	b094      	sub	sp, #80	@ 0x50
 8004346:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	647b      	str	r3, [r7, #68]	@ 0x44
 800434c:	2300      	movs	r3, #0
 800434e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004350:	2300      	movs	r3, #0
 8004352:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004354:	2300      	movs	r3, #0
 8004356:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004358:	4b79      	ldr	r3, [pc, #484]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x200>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f003 030c 	and.w	r3, r3, #12
 8004360:	2b08      	cmp	r3, #8
 8004362:	d00d      	beq.n	8004380 <HAL_RCC_GetSysClockFreq+0x40>
 8004364:	2b08      	cmp	r3, #8
 8004366:	f200 80e1 	bhi.w	800452c <HAL_RCC_GetSysClockFreq+0x1ec>
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <HAL_RCC_GetSysClockFreq+0x34>
 800436e:	2b04      	cmp	r3, #4
 8004370:	d003      	beq.n	800437a <HAL_RCC_GetSysClockFreq+0x3a>
 8004372:	e0db      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004374:	4b73      	ldr	r3, [pc, #460]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x204>)
 8004376:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004378:	e0db      	b.n	8004532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800437a:	4b73      	ldr	r3, [pc, #460]	@ (8004548 <HAL_RCC_GetSysClockFreq+0x208>)
 800437c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800437e:	e0d8      	b.n	8004532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004380:	4b6f      	ldr	r3, [pc, #444]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x200>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004388:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800438a:	4b6d      	ldr	r3, [pc, #436]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x200>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d063      	beq.n	800445e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004396:	4b6a      	ldr	r3, [pc, #424]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x200>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	099b      	lsrs	r3, r3, #6
 800439c:	2200      	movs	r2, #0
 800439e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80043a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80043aa:	2300      	movs	r3, #0
 80043ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80043ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043b2:	4622      	mov	r2, r4
 80043b4:	462b      	mov	r3, r5
 80043b6:	f04f 0000 	mov.w	r0, #0
 80043ba:	f04f 0100 	mov.w	r1, #0
 80043be:	0159      	lsls	r1, r3, #5
 80043c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043c4:	0150      	lsls	r0, r2, #5
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4621      	mov	r1, r4
 80043cc:	1a51      	subs	r1, r2, r1
 80043ce:	6139      	str	r1, [r7, #16]
 80043d0:	4629      	mov	r1, r5
 80043d2:	eb63 0301 	sbc.w	r3, r3, r1
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043e4:	4659      	mov	r1, fp
 80043e6:	018b      	lsls	r3, r1, #6
 80043e8:	4651      	mov	r1, sl
 80043ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043ee:	4651      	mov	r1, sl
 80043f0:	018a      	lsls	r2, r1, #6
 80043f2:	4651      	mov	r1, sl
 80043f4:	ebb2 0801 	subs.w	r8, r2, r1
 80043f8:	4659      	mov	r1, fp
 80043fa:	eb63 0901 	sbc.w	r9, r3, r1
 80043fe:	f04f 0200 	mov.w	r2, #0
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800440a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800440e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004412:	4690      	mov	r8, r2
 8004414:	4699      	mov	r9, r3
 8004416:	4623      	mov	r3, r4
 8004418:	eb18 0303 	adds.w	r3, r8, r3
 800441c:	60bb      	str	r3, [r7, #8]
 800441e:	462b      	mov	r3, r5
 8004420:	eb49 0303 	adc.w	r3, r9, r3
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	f04f 0200 	mov.w	r2, #0
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004432:	4629      	mov	r1, r5
 8004434:	024b      	lsls	r3, r1, #9
 8004436:	4621      	mov	r1, r4
 8004438:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800443c:	4621      	mov	r1, r4
 800443e:	024a      	lsls	r2, r1, #9
 8004440:	4610      	mov	r0, r2
 8004442:	4619      	mov	r1, r3
 8004444:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004446:	2200      	movs	r2, #0
 8004448:	62bb      	str	r3, [r7, #40]	@ 0x28
 800444a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800444c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004450:	f7fc fc22 	bl	8000c98 <__aeabi_uldivmod>
 8004454:	4602      	mov	r2, r0
 8004456:	460b      	mov	r3, r1
 8004458:	4613      	mov	r3, r2
 800445a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800445c:	e058      	b.n	8004510 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800445e:	4b38      	ldr	r3, [pc, #224]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x200>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	099b      	lsrs	r3, r3, #6
 8004464:	2200      	movs	r2, #0
 8004466:	4618      	mov	r0, r3
 8004468:	4611      	mov	r1, r2
 800446a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800446e:	623b      	str	r3, [r7, #32]
 8004470:	2300      	movs	r3, #0
 8004472:	627b      	str	r3, [r7, #36]	@ 0x24
 8004474:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004478:	4642      	mov	r2, r8
 800447a:	464b      	mov	r3, r9
 800447c:	f04f 0000 	mov.w	r0, #0
 8004480:	f04f 0100 	mov.w	r1, #0
 8004484:	0159      	lsls	r1, r3, #5
 8004486:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800448a:	0150      	lsls	r0, r2, #5
 800448c:	4602      	mov	r2, r0
 800448e:	460b      	mov	r3, r1
 8004490:	4641      	mov	r1, r8
 8004492:	ebb2 0a01 	subs.w	sl, r2, r1
 8004496:	4649      	mov	r1, r9
 8004498:	eb63 0b01 	sbc.w	fp, r3, r1
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044b0:	ebb2 040a 	subs.w	r4, r2, sl
 80044b4:	eb63 050b 	sbc.w	r5, r3, fp
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	00eb      	lsls	r3, r5, #3
 80044c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044c6:	00e2      	lsls	r2, r4, #3
 80044c8:	4614      	mov	r4, r2
 80044ca:	461d      	mov	r5, r3
 80044cc:	4643      	mov	r3, r8
 80044ce:	18e3      	adds	r3, r4, r3
 80044d0:	603b      	str	r3, [r7, #0]
 80044d2:	464b      	mov	r3, r9
 80044d4:	eb45 0303 	adc.w	r3, r5, r3
 80044d8:	607b      	str	r3, [r7, #4]
 80044da:	f04f 0200 	mov.w	r2, #0
 80044de:	f04f 0300 	mov.w	r3, #0
 80044e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044e6:	4629      	mov	r1, r5
 80044e8:	028b      	lsls	r3, r1, #10
 80044ea:	4621      	mov	r1, r4
 80044ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044f0:	4621      	mov	r1, r4
 80044f2:	028a      	lsls	r2, r1, #10
 80044f4:	4610      	mov	r0, r2
 80044f6:	4619      	mov	r1, r3
 80044f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044fa:	2200      	movs	r2, #0
 80044fc:	61bb      	str	r3, [r7, #24]
 80044fe:	61fa      	str	r2, [r7, #28]
 8004500:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004504:	f7fc fbc8 	bl	8000c98 <__aeabi_uldivmod>
 8004508:	4602      	mov	r2, r0
 800450a:	460b      	mov	r3, r1
 800450c:	4613      	mov	r3, r2
 800450e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004510:	4b0b      	ldr	r3, [pc, #44]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x200>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	0c1b      	lsrs	r3, r3, #16
 8004516:	f003 0303 	and.w	r3, r3, #3
 800451a:	3301      	adds	r3, #1
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004520:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004524:	fbb2 f3f3 	udiv	r3, r2, r3
 8004528:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800452a:	e002      	b.n	8004532 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800452c:	4b05      	ldr	r3, [pc, #20]	@ (8004544 <HAL_RCC_GetSysClockFreq+0x204>)
 800452e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004530:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004534:	4618      	mov	r0, r3
 8004536:	3750      	adds	r7, #80	@ 0x50
 8004538:	46bd      	mov	sp, r7
 800453a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800453e:	bf00      	nop
 8004540:	40023800 	.word	0x40023800
 8004544:	00f42400 	.word	0x00f42400
 8004548:	007a1200 	.word	0x007a1200

0800454c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004550:	4b03      	ldr	r3, [pc, #12]	@ (8004560 <HAL_RCC_GetHCLKFreq+0x14>)
 8004552:	681b      	ldr	r3, [r3, #0]
}
 8004554:	4618      	mov	r0, r3
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	20000000 	.word	0x20000000

08004564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004568:	f7ff fff0 	bl	800454c <HAL_RCC_GetHCLKFreq>
 800456c:	4602      	mov	r2, r0
 800456e:	4b05      	ldr	r3, [pc, #20]	@ (8004584 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	0a9b      	lsrs	r3, r3, #10
 8004574:	f003 0307 	and.w	r3, r3, #7
 8004578:	4903      	ldr	r1, [pc, #12]	@ (8004588 <HAL_RCC_GetPCLK1Freq+0x24>)
 800457a:	5ccb      	ldrb	r3, [r1, r3]
 800457c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004580:	4618      	mov	r0, r3
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40023800 	.word	0x40023800
 8004588:	080115bc 	.word	0x080115bc

0800458c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004590:	f7ff ffdc 	bl	800454c <HAL_RCC_GetHCLKFreq>
 8004594:	4602      	mov	r2, r0
 8004596:	4b05      	ldr	r3, [pc, #20]	@ (80045ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	0b5b      	lsrs	r3, r3, #13
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	4903      	ldr	r1, [pc, #12]	@ (80045b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045a2:	5ccb      	ldrb	r3, [r1, r3]
 80045a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40023800 	.word	0x40023800
 80045b0:	080115bc 	.word	0x080115bc

080045b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	220f      	movs	r2, #15
 80045c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80045c4:	4b12      	ldr	r3, [pc, #72]	@ (8004610 <HAL_RCC_GetClockConfig+0x5c>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f003 0203 	and.w	r2, r3, #3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80045d0:	4b0f      	ldr	r3, [pc, #60]	@ (8004610 <HAL_RCC_GetClockConfig+0x5c>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80045dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004610 <HAL_RCC_GetClockConfig+0x5c>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80045e8:	4b09      	ldr	r3, [pc, #36]	@ (8004610 <HAL_RCC_GetClockConfig+0x5c>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	08db      	lsrs	r3, r3, #3
 80045ee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045f6:	4b07      	ldr	r3, [pc, #28]	@ (8004614 <HAL_RCC_GetClockConfig+0x60>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0207 	and.w	r2, r3, #7
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	601a      	str	r2, [r3, #0]
}
 8004602:	bf00      	nop
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
 800460e:	bf00      	nop
 8004610:	40023800 	.word	0x40023800
 8004614:	40023c00 	.word	0x40023c00

08004618 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004620:	2300      	movs	r3, #0
 8004622:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d105      	bne.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800463c:	2b00      	cmp	r3, #0
 800463e:	d035      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004640:	4b67      	ldr	r3, [pc, #412]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004646:	f7fe f9dd 	bl	8002a04 <HAL_GetTick>
 800464a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800464c:	e008      	b.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800464e:	f7fe f9d9 	bl	8002a04 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e0ba      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004660:	4b60      	ldr	r3, [pc, #384]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f0      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	019a      	lsls	r2, r3, #6
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	071b      	lsls	r3, r3, #28
 8004678:	495a      	ldr	r1, [pc, #360]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004680:	4b57      	ldr	r3, [pc, #348]	@ (80047e0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004682:	2201      	movs	r2, #1
 8004684:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004686:	f7fe f9bd 	bl	8002a04 <HAL_GetTick>
 800468a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800468c:	e008      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800468e:	f7fe f9b9 	bl	8002a04 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	2b02      	cmp	r3, #2
 800469a:	d901      	bls.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e09a      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046a0:	4b50      	ldr	r3, [pc, #320]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d0f0      	beq.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0302 	and.w	r3, r3, #2
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 8083 	beq.w	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	4b49      	ldr	r3, [pc, #292]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80046c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c2:	4a48      	ldr	r2, [pc, #288]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80046c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80046ca:	4b46      	ldr	r3, [pc, #280]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80046d6:	4b44      	ldr	r3, [pc, #272]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a43      	ldr	r2, [pc, #268]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80046e2:	f7fe f98f 	bl	8002a04 <HAL_GetTick>
 80046e6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046e8:	e008      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80046ea:	f7fe f98b 	bl	8002a04 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d901      	bls.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80046f8:	2303      	movs	r3, #3
 80046fa:	e06c      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80046fc:	4b3a      	ldr	r3, [pc, #232]	@ (80047e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004704:	2b00      	cmp	r3, #0
 8004706:	d0f0      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004708:	4b36      	ldr	r3, [pc, #216]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800470a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004710:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d02f      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	429a      	cmp	r2, r3
 8004724:	d028      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004726:	4b2f      	ldr	r3, [pc, #188]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800472a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800472e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004730:	4b2e      	ldr	r3, [pc, #184]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004736:	4b2d      	ldr	r3, [pc, #180]	@ (80047ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004738:	2200      	movs	r2, #0
 800473a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800473c:	4a29      	ldr	r2, [pc, #164]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004742:	4b28      	ldr	r3, [pc, #160]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	2b01      	cmp	r3, #1
 800474c:	d114      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800474e:	f7fe f959 	bl	8002a04 <HAL_GetTick>
 8004752:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004754:	e00a      	b.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004756:	f7fe f955 	bl	8002a04 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e034      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800476c:	4b1d      	ldr	r3, [pc, #116]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800476e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d0ee      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004780:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004784:	d10d      	bne.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004786:	4b17      	ldr	r3, [pc, #92]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004796:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800479a:	4912      	ldr	r1, [pc, #72]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800479c:	4313      	orrs	r3, r2
 800479e:	608b      	str	r3, [r1, #8]
 80047a0:	e005      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 80047a2:	4b10      	ldr	r3, [pc, #64]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	4a0f      	ldr	r2, [pc, #60]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047a8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80047ac:	6093      	str	r3, [r2, #8]
 80047ae:	4b0d      	ldr	r3, [pc, #52]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047b0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047ba:	490a      	ldr	r1, [pc, #40]	@ (80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	7c1a      	ldrb	r2, [r3, #16]
 80047d0:	4b07      	ldr	r3, [pc, #28]	@ (80047f0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80047d2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	42470068 	.word	0x42470068
 80047e4:	40023800 	.word	0x40023800
 80047e8:	40007000 	.word	0x40007000
 80047ec:	42470e40 	.word	0x42470e40
 80047f0:	424711e0 	.word	0x424711e0

080047f4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d101      	bne.n	800480a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e073      	b.n	80048f2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	7f5b      	ldrb	r3, [r3, #29]
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	d105      	bne.n	8004820 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fc ffce 	bl	80017bc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f003 0310 	and.w	r3, r3, #16
 8004830:	2b10      	cmp	r3, #16
 8004832:	d055      	beq.n	80048e0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	22ca      	movs	r2, #202	@ 0xca
 800483a:	625a      	str	r2, [r3, #36]	@ 0x24
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2253      	movs	r2, #83	@ 0x53
 8004842:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f99d 	bl	8004b84 <RTC_EnterInitMode>
 800484a:	4603      	mov	r3, r0
 800484c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800484e:	7bfb      	ldrb	r3, [r7, #15]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d12c      	bne.n	80048ae <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	6812      	ldr	r2, [r2, #0]
 800485e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004862:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004866:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6899      	ldr	r1, [r3, #8]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	431a      	orrs	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	68d2      	ldr	r2, [r2, #12]
 800488e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6919      	ldr	r1, [r3, #16]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	041a      	lsls	r2, r3, #16
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f000 f9a4 	bl	8004bf2 <RTC_ExitInitMode>
 80048aa:	4603      	mov	r3, r0
 80048ac:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d110      	bne.n	80048d6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80048c2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	699a      	ldr	r2, [r3, #24]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	430a      	orrs	r2, r1
 80048d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	22ff      	movs	r2, #255	@ 0xff
 80048dc:	625a      	str	r2, [r3, #36]	@ 0x24
 80048de:	e001      	b.n	80048e4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d102      	bne.n	80048f0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80048fa:	b590      	push	{r4, r7, lr}
 80048fc:	b087      	sub	sp, #28
 80048fe:	af00      	add	r7, sp, #0
 8004900:	60f8      	str	r0, [r7, #12]
 8004902:	60b9      	str	r1, [r7, #8]
 8004904:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004906:	2300      	movs	r3, #0
 8004908:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	7f1b      	ldrb	r3, [r3, #28]
 800490e:	2b01      	cmp	r3, #1
 8004910:	d101      	bne.n	8004916 <HAL_RTC_SetTime+0x1c>
 8004912:	2302      	movs	r3, #2
 8004914:	e087      	b.n	8004a26 <HAL_RTC_SetTime+0x12c>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2201      	movs	r2, #1
 800491a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2202      	movs	r2, #2
 8004920:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d126      	bne.n	8004976 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004932:	2b00      	cmp	r3, #0
 8004934:	d102      	bne.n	800493c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2200      	movs	r2, #0
 800493a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	4618      	mov	r0, r3
 8004942:	f000 f97b 	bl	8004c3c <RTC_ByteToBcd2>
 8004946:	4603      	mov	r3, r0
 8004948:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	785b      	ldrb	r3, [r3, #1]
 800494e:	4618      	mov	r0, r3
 8004950:	f000 f974 	bl	8004c3c <RTC_ByteToBcd2>
 8004954:	4603      	mov	r3, r0
 8004956:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004958:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	789b      	ldrb	r3, [r3, #2]
 800495e:	4618      	mov	r0, r3
 8004960:	f000 f96c 	bl	8004c3c <RTC_ByteToBcd2>
 8004964:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004966:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	78db      	ldrb	r3, [r3, #3]
 800496e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	e018      	b.n	80049a8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004980:	2b00      	cmp	r3, #0
 8004982:	d102      	bne.n	800498a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2200      	movs	r2, #0
 8004988:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	785b      	ldrb	r3, [r3, #1]
 8004994:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004996:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800499c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	78db      	ldrb	r3, [r3, #3]
 80049a2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80049a4:	4313      	orrs	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	22ca      	movs	r2, #202	@ 0xca
 80049ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2253      	movs	r2, #83	@ 0x53
 80049b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f8e3 	bl	8004b84 <RTC_EnterInitMode>
 80049be:	4603      	mov	r3, r0
 80049c0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80049c2:	7cfb      	ldrb	r3, [r7, #19]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d120      	bne.n	8004a0a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80049d2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80049d6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689a      	ldr	r2, [r3, #8]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80049e6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6899      	ldr	r1, [r3, #8]
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	68da      	ldr	r2, [r3, #12]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	431a      	orrs	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 f8f6 	bl	8004bf2 <RTC_ExitInitMode>
 8004a06:	4603      	mov	r3, r0
 8004a08:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004a0a:	7cfb      	ldrb	r3, [r7, #19]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d102      	bne.n	8004a16 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2201      	movs	r2, #1
 8004a14:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	22ff      	movs	r2, #255	@ 0xff
 8004a1c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	771a      	strb	r2, [r3, #28]

  return status;
 8004a24:	7cfb      	ldrb	r3, [r7, #19]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	371c      	adds	r7, #28
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd90      	pop	{r4, r7, pc}

08004a2e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004a2e:	b590      	push	{r4, r7, lr}
 8004a30:	b087      	sub	sp, #28
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	60f8      	str	r0, [r7, #12]
 8004a36:	60b9      	str	r1, [r7, #8]
 8004a38:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	7f1b      	ldrb	r3, [r3, #28]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d101      	bne.n	8004a4a <HAL_RTC_SetDate+0x1c>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e071      	b.n	8004b2e <HAL_RTC_SetDate+0x100>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2202      	movs	r2, #2
 8004a54:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d10e      	bne.n	8004a7a <HAL_RTC_SetDate+0x4c>
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	785b      	ldrb	r3, [r3, #1]
 8004a60:	f003 0310 	and.w	r3, r3, #16
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d008      	beq.n	8004a7a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	785b      	ldrb	r3, [r3, #1]
 8004a6c:	f023 0310 	bic.w	r3, r3, #16
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	330a      	adds	r3, #10
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d11c      	bne.n	8004aba <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	78db      	ldrb	r3, [r3, #3]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 f8d9 	bl	8004c3c <RTC_ByteToBcd2>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	785b      	ldrb	r3, [r3, #1]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 f8d2 	bl	8004c3c <RTC_ByteToBcd2>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004a9c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	789b      	ldrb	r3, [r3, #2]
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 f8ca 	bl	8004c3c <RTC_ByteToBcd2>
 8004aa8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004aaa:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	e00e      	b.n	8004ad8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	78db      	ldrb	r3, [r3, #3]
 8004abe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	785b      	ldrb	r3, [r3, #1]
 8004ac4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004ac6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004acc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	22ca      	movs	r2, #202	@ 0xca
 8004ade:	625a      	str	r2, [r3, #36]	@ 0x24
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2253      	movs	r2, #83	@ 0x53
 8004ae6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f000 f84b 	bl	8004b84 <RTC_EnterInitMode>
 8004aee:	4603      	mov	r3, r0
 8004af0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004af2:	7cfb      	ldrb	r3, [r7, #19]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10c      	bne.n	8004b12 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004b02:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004b06:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 f872 	bl	8004bf2 <RTC_ExitInitMode>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004b12:	7cfb      	ldrb	r3, [r7, #19]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d102      	bne.n	8004b1e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	22ff      	movs	r2, #255	@ 0xff
 8004b24:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	771a      	strb	r2, [r3, #28]

  return status;
 8004b2c:	7cfb      	ldrb	r3, [r7, #19]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	371c      	adds	r7, #28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd90      	pop	{r4, r7, pc}
	...

08004b38 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a0d      	ldr	r2, [pc, #52]	@ (8004b80 <HAL_RTC_WaitForSynchro+0x48>)
 8004b4a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b4c:	f7fd ff5a 	bl	8002a04 <HAL_GetTick>
 8004b50:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b52:	e009      	b.n	8004b68 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004b54:	f7fd ff56 	bl	8002a04 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004b62:	d901      	bls.n	8004b68 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e007      	b.n	8004b78 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0320 	and.w	r3, r3, #32
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d0ee      	beq.n	8004b54 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004b76:	2300      	movs	r3, #0
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	00013f5f 	.word	0x00013f5f

08004b84 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004b90:	2300      	movs	r3, #0
 8004b92:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d122      	bne.n	8004be8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68da      	ldr	r2, [r3, #12]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004bb0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bb2:	f7fd ff27 	bl	8002a04 <HAL_GetTick>
 8004bb6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004bb8:	e00c      	b.n	8004bd4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004bba:	f7fd ff23 	bl	8002a04 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004bc8:	d904      	bls.n	8004bd4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2204      	movs	r2, #4
 8004bce:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d102      	bne.n	8004be8 <RTC_EnterInitMode+0x64>
 8004be2:	7bfb      	ldrb	r3, [r7, #15]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d1e8      	bne.n	8004bba <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b084      	sub	sp, #16
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004c0c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10a      	bne.n	8004c32 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f7ff ff8b 	bl	8004b38 <HAL_RTC_WaitForSynchro>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d004      	beq.n	8004c32 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2204      	movs	r2, #4
 8004c2c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004c4a:	e005      	b.n	8004c58 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004c52:	79fb      	ldrb	r3, [r7, #7]
 8004c54:	3b0a      	subs	r3, #10
 8004c56:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004c58:	79fb      	ldrb	r3, [r7, #7]
 8004c5a:	2b09      	cmp	r3, #9
 8004c5c:	d8f6      	bhi.n	8004c4c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	79fb      	ldrb	r3, [r7, #7]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	b2db      	uxtb	r3, r3
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e07b      	b.n	8004d82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d108      	bne.n	8004ca4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c9a:	d009      	beq.n	8004cb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	61da      	str	r2, [r3, #28]
 8004ca2:	e005      	b.n	8004cb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d106      	bne.n	8004cd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7fc fda2 	bl	8001814 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ce6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004cf8:	431a      	orrs	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f003 0302 	and.w	r3, r3, #2
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	f003 0301 	and.w	r3, r3, #1
 8004d16:	431a      	orrs	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d20:	431a      	orrs	r2, r3
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d34:	ea42 0103 	orr.w	r1, r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d3c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	0c1b      	lsrs	r3, r3, #16
 8004d4e:	f003 0104 	and.w	r1, r3, #4
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d56:	f003 0210 	and.w	r2, r3, #16
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3708      	adds	r7, #8
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b088      	sub	sp, #32
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	603b      	str	r3, [r7, #0]
 8004d96:	4613      	mov	r3, r2
 8004d98:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d101      	bne.n	8004dac <HAL_SPI_Transmit+0x22>
 8004da8:	2302      	movs	r3, #2
 8004daa:	e12d      	b.n	8005008 <HAL_SPI_Transmit+0x27e>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004db4:	f7fd fe26 	bl	8002a04 <HAL_GetTick>
 8004db8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004dba:	88fb      	ldrh	r3, [r7, #6]
 8004dbc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d002      	beq.n	8004dd0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004dca:	2302      	movs	r3, #2
 8004dcc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dce:	e116      	b.n	8004ffe <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d002      	beq.n	8004ddc <HAL_SPI_Transmit+0x52>
 8004dd6:	88fb      	ldrh	r3, [r7, #6]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d102      	bne.n	8004de2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004de0:	e10d      	b.n	8004ffe <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2203      	movs	r2, #3
 8004de6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	88fa      	ldrh	r2, [r7, #6]
 8004dfa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	88fa      	ldrh	r2, [r7, #6]
 8004e00:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e28:	d10f      	bne.n	8004e4a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e38:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e48:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e54:	2b40      	cmp	r3, #64	@ 0x40
 8004e56:	d007      	beq.n	8004e68 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e70:	d14f      	bne.n	8004f12 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <HAL_SPI_Transmit+0xf6>
 8004e7a:	8afb      	ldrh	r3, [r7, #22]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d142      	bne.n	8004f06 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e84:	881a      	ldrh	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e90:	1c9a      	adds	r2, r3, #2
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ea4:	e02f      	b.n	8004f06 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d112      	bne.n	8004eda <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb8:	881a      	ldrh	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec4:	1c9a      	adds	r2, r3, #2
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004ed8:	e015      	b.n	8004f06 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eda:	f7fd fd93 	bl	8002a04 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d803      	bhi.n	8004ef2 <HAL_SPI_Transmit+0x168>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef0:	d102      	bne.n	8004ef8 <HAL_SPI_Transmit+0x16e>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d106      	bne.n	8004f06 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004f04:	e07b      	b.n	8004ffe <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d1ca      	bne.n	8004ea6 <HAL_SPI_Transmit+0x11c>
 8004f10:	e050      	b.n	8004fb4 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <HAL_SPI_Transmit+0x196>
 8004f1a:	8afb      	ldrh	r3, [r7, #22]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d144      	bne.n	8004faa <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	330c      	adds	r3, #12
 8004f2a:	7812      	ldrb	r2, [r2, #0]
 8004f2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f32:	1c5a      	adds	r2, r3, #1
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f46:	e030      	b.n	8004faa <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d113      	bne.n	8004f7e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	330c      	adds	r3, #12
 8004f60:	7812      	ldrb	r2, [r2, #0]
 8004f62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	3b01      	subs	r3, #1
 8004f76:	b29a      	uxth	r2, r3
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004f7c:	e015      	b.n	8004faa <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f7e:	f7fd fd41 	bl	8002a04 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d803      	bhi.n	8004f96 <HAL_SPI_Transmit+0x20c>
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f94:	d102      	bne.n	8004f9c <HAL_SPI_Transmit+0x212>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d106      	bne.n	8004faa <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004fa8:	e029      	b.n	8004ffe <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1c9      	bne.n	8004f48 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	6839      	ldr	r1, [r7, #0]
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 fa61 	bl	8005480 <SPI_EndRxTxTransaction>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d10a      	bne.n	8004fe8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	613b      	str	r3, [r7, #16]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	613b      	str	r3, [r7, #16]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	613b      	str	r3, [r7, #16]
 8004fe6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	77fb      	strb	r3, [r7, #31]
 8004ff4:	e003      	b.n	8004ffe <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005006:	7ffb      	ldrb	r3, [r7, #31]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3720      	adds	r7, #32
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b08c      	sub	sp, #48	@ 0x30
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
 800501c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800501e:	2301      	movs	r3, #1
 8005020:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005022:	2300      	movs	r3, #0
 8005024:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800502e:	2b01      	cmp	r3, #1
 8005030:	d101      	bne.n	8005036 <HAL_SPI_TransmitReceive+0x26>
 8005032:	2302      	movs	r3, #2
 8005034:	e198      	b.n	8005368 <HAL_SPI_TransmitReceive+0x358>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800503e:	f7fd fce1 	bl	8002a04 <HAL_GetTick>
 8005042:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800504a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005054:	887b      	ldrh	r3, [r7, #2]
 8005056:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005058:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800505c:	2b01      	cmp	r3, #1
 800505e:	d00f      	beq.n	8005080 <HAL_SPI_TransmitReceive+0x70>
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005066:	d107      	bne.n	8005078 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d103      	bne.n	8005078 <HAL_SPI_TransmitReceive+0x68>
 8005070:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005074:	2b04      	cmp	r3, #4
 8005076:	d003      	beq.n	8005080 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005078:	2302      	movs	r3, #2
 800507a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800507e:	e16d      	b.n	800535c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d005      	beq.n	8005092 <HAL_SPI_TransmitReceive+0x82>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <HAL_SPI_TransmitReceive+0x82>
 800508c:	887b      	ldrh	r3, [r7, #2]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d103      	bne.n	800509a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005098:	e160      	b.n	800535c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d003      	beq.n	80050ae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2205      	movs	r2, #5
 80050aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	887a      	ldrh	r2, [r7, #2]
 80050be:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	887a      	ldrh	r2, [r7, #2]
 80050c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	887a      	ldrh	r2, [r7, #2]
 80050d0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	887a      	ldrh	r2, [r7, #2]
 80050d6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ee:	2b40      	cmp	r3, #64	@ 0x40
 80050f0:	d007      	beq.n	8005102 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005100:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800510a:	d17c      	bne.n	8005206 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <HAL_SPI_TransmitReceive+0x10a>
 8005114:	8b7b      	ldrh	r3, [r7, #26]
 8005116:	2b01      	cmp	r3, #1
 8005118:	d16a      	bne.n	80051f0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511e:	881a      	ldrh	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512a:	1c9a      	adds	r2, r3, #2
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005134:	b29b      	uxth	r3, r3
 8005136:	3b01      	subs	r3, #1
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800513e:	e057      	b.n	80051f0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b02      	cmp	r3, #2
 800514c:	d11b      	bne.n	8005186 <HAL_SPI_TransmitReceive+0x176>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d016      	beq.n	8005186 <HAL_SPI_TransmitReceive+0x176>
 8005158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800515a:	2b01      	cmp	r3, #1
 800515c:	d113      	bne.n	8005186 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005162:	881a      	ldrh	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800516e:	1c9a      	adds	r2, r3, #2
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005178:	b29b      	uxth	r3, r3
 800517a:	3b01      	subs	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b01      	cmp	r3, #1
 8005192:	d119      	bne.n	80051c8 <HAL_SPI_TransmitReceive+0x1b8>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d014      	beq.n	80051c8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a8:	b292      	uxth	r2, r2
 80051aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b0:	1c9a      	adds	r2, r3, #2
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80051c4:	2301      	movs	r3, #1
 80051c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80051c8:	f7fd fc1c 	bl	8002a04 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d80b      	bhi.n	80051f0 <HAL_SPI_TransmitReceive+0x1e0>
 80051d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051de:	d007      	beq.n	80051f0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80051ee:	e0b5      	b.n	800535c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d1a2      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x130>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80051fe:	b29b      	uxth	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d19d      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x130>
 8005204:	e080      	b.n	8005308 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <HAL_SPI_TransmitReceive+0x204>
 800520e:	8b7b      	ldrh	r3, [r7, #26]
 8005210:	2b01      	cmp	r3, #1
 8005212:	d16f      	bne.n	80052f4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	330c      	adds	r3, #12
 800521e:	7812      	ldrb	r2, [r2, #0]
 8005220:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005230:	b29b      	uxth	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800523a:	e05b      	b.n	80052f4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b02      	cmp	r3, #2
 8005248:	d11c      	bne.n	8005284 <HAL_SPI_TransmitReceive+0x274>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800524e:	b29b      	uxth	r3, r3
 8005250:	2b00      	cmp	r3, #0
 8005252:	d017      	beq.n	8005284 <HAL_SPI_TransmitReceive+0x274>
 8005254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005256:	2b01      	cmp	r3, #1
 8005258:	d114      	bne.n	8005284 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	330c      	adds	r3, #12
 8005264:	7812      	ldrb	r2, [r2, #0]
 8005266:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800526c:	1c5a      	adds	r2, r3, #1
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b01      	cmp	r3, #1
 8005290:	d119      	bne.n	80052c6 <HAL_SPI_TransmitReceive+0x2b6>
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005296:	b29b      	uxth	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d014      	beq.n	80052c6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29a      	uxth	r2, r3
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80052c2:	2301      	movs	r3, #1
 80052c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80052c6:	f7fd fb9d 	bl	8002a04 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d803      	bhi.n	80052de <HAL_SPI_TransmitReceive+0x2ce>
 80052d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052dc:	d102      	bne.n	80052e4 <HAL_SPI_TransmitReceive+0x2d4>
 80052de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d107      	bne.n	80052f4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80052f2:	e033      	b.n	800535c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d19e      	bne.n	800523c <HAL_SPI_TransmitReceive+0x22c>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005302:	b29b      	uxth	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d199      	bne.n	800523c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800530a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f8b7 	bl	8005480 <SPI_EndRxTxTransaction>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d006      	beq.n	8005326 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2220      	movs	r2, #32
 8005322:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005324:	e01a      	b.n	800535c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10a      	bne.n	8005344 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800532e:	2300      	movs	r3, #0
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005352:	e003      	b.n	800535c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005364:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005368:	4618      	mov	r0, r3
 800536a:	3730      	adds	r7, #48	@ 0x30
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b088      	sub	sp, #32
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	603b      	str	r3, [r7, #0]
 800537c:	4613      	mov	r3, r2
 800537e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005380:	f7fd fb40 	bl	8002a04 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005388:	1a9b      	subs	r3, r3, r2
 800538a:	683a      	ldr	r2, [r7, #0]
 800538c:	4413      	add	r3, r2
 800538e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005390:	f7fd fb38 	bl	8002a04 <HAL_GetTick>
 8005394:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005396:	4b39      	ldr	r3, [pc, #228]	@ (800547c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	015b      	lsls	r3, r3, #5
 800539c:	0d1b      	lsrs	r3, r3, #20
 800539e:	69fa      	ldr	r2, [r7, #28]
 80053a0:	fb02 f303 	mul.w	r3, r2, r3
 80053a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053a6:	e054      	b.n	8005452 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ae:	d050      	beq.n	8005452 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053b0:	f7fd fb28 	bl	8002a04 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d902      	bls.n	80053c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d13d      	bne.n	8005442 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80053d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80053de:	d111      	bne.n	8005404 <SPI_WaitFlagStateUntilTimeout+0x94>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053e8:	d004      	beq.n	80053f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053f2:	d107      	bne.n	8005404 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005402:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005408:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800540c:	d10f      	bne.n	800542e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800542c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e017      	b.n	8005472 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005448:	2300      	movs	r3, #0
 800544a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	3b01      	subs	r3, #1
 8005450:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4013      	ands	r3, r2
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	429a      	cmp	r2, r3
 8005460:	bf0c      	ite	eq
 8005462:	2301      	moveq	r3, #1
 8005464:	2300      	movne	r3, #0
 8005466:	b2db      	uxtb	r3, r3
 8005468:	461a      	mov	r2, r3
 800546a:	79fb      	ldrb	r3, [r7, #7]
 800546c:	429a      	cmp	r2, r3
 800546e:	d19b      	bne.n	80053a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3720      	adds	r7, #32
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	20000000 	.word	0x20000000

08005480 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b088      	sub	sp, #32
 8005484:	af02      	add	r7, sp, #8
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	9300      	str	r3, [sp, #0]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2201      	movs	r2, #1
 8005494:	2102      	movs	r1, #2
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f7ff ff6a 	bl	8005370 <SPI_WaitFlagStateUntilTimeout>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d007      	beq.n	80054b2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054a6:	f043 0220 	orr.w	r2, r3, #32
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e032      	b.n	8005518 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80054b2:	4b1b      	ldr	r3, [pc, #108]	@ (8005520 <SPI_EndRxTxTransaction+0xa0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005524 <SPI_EndRxTxTransaction+0xa4>)
 80054b8:	fba2 2303 	umull	r2, r3, r2, r3
 80054bc:	0d5b      	lsrs	r3, r3, #21
 80054be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80054c2:	fb02 f303 	mul.w	r3, r2, r3
 80054c6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054d0:	d112      	bne.n	80054f8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	9300      	str	r3, [sp, #0]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	2200      	movs	r2, #0
 80054da:	2180      	movs	r1, #128	@ 0x80
 80054dc:	68f8      	ldr	r0, [r7, #12]
 80054de:	f7ff ff47 	bl	8005370 <SPI_WaitFlagStateUntilTimeout>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d016      	beq.n	8005516 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ec:	f043 0220 	orr.w	r2, r3, #32
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e00f      	b.n	8005518 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	3b01      	subs	r3, #1
 8005502:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550e:	2b80      	cmp	r3, #128	@ 0x80
 8005510:	d0f2      	beq.n	80054f8 <SPI_EndRxTxTransaction+0x78>
 8005512:	e000      	b.n	8005516 <SPI_EndRxTxTransaction+0x96>
        break;
 8005514:	bf00      	nop
  }

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	20000000 	.word	0x20000000
 8005524:	165e9f81 	.word	0x165e9f81

08005528 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e041      	b.n	80055be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d106      	bne.n	8005554 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f839 	bl	80055c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3304      	adds	r3, #4
 8005564:	4619      	mov	r1, r3
 8005566:	4610      	mov	r0, r2
 8005568:	f000 f9b2 	bl	80058d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
	...

080055dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d001      	beq.n	80055f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e044      	b.n	800567e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68da      	ldr	r2, [r3, #12]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0201 	orr.w	r2, r2, #1
 800560a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a1e      	ldr	r2, [pc, #120]	@ (800568c <HAL_TIM_Base_Start_IT+0xb0>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d018      	beq.n	8005648 <HAL_TIM_Base_Start_IT+0x6c>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800561e:	d013      	beq.n	8005648 <HAL_TIM_Base_Start_IT+0x6c>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a1a      	ldr	r2, [pc, #104]	@ (8005690 <HAL_TIM_Base_Start_IT+0xb4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d00e      	beq.n	8005648 <HAL_TIM_Base_Start_IT+0x6c>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a19      	ldr	r2, [pc, #100]	@ (8005694 <HAL_TIM_Base_Start_IT+0xb8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d009      	beq.n	8005648 <HAL_TIM_Base_Start_IT+0x6c>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a17      	ldr	r2, [pc, #92]	@ (8005698 <HAL_TIM_Base_Start_IT+0xbc>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d004      	beq.n	8005648 <HAL_TIM_Base_Start_IT+0x6c>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a16      	ldr	r2, [pc, #88]	@ (800569c <HAL_TIM_Base_Start_IT+0xc0>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d111      	bne.n	800566c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2b06      	cmp	r3, #6
 8005658:	d010      	beq.n	800567c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0201 	orr.w	r2, r2, #1
 8005668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800566a:	e007      	b.n	800567c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 0201 	orr.w	r2, r2, #1
 800567a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	40010000 	.word	0x40010000
 8005690:	40000400 	.word	0x40000400
 8005694:	40000800 	.word	0x40000800
 8005698:	40000c00 	.word	0x40000c00
 800569c:	40014000 	.word	0x40014000

080056a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691b      	ldr	r3, [r3, #16]
 80056b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d020      	beq.n	8005704 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d01b      	beq.n	8005704 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f06f 0202 	mvn.w	r2, #2
 80056d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	f003 0303 	and.w	r3, r3, #3
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f8d2 	bl	8005894 <HAL_TIM_IC_CaptureCallback>
 80056f0:	e005      	b.n	80056fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f8c4 	bl	8005880 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 f8d5 	bl	80058a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	f003 0304 	and.w	r3, r3, #4
 800570a:	2b00      	cmp	r3, #0
 800570c:	d020      	beq.n	8005750 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f003 0304 	and.w	r3, r3, #4
 8005714:	2b00      	cmp	r3, #0
 8005716:	d01b      	beq.n	8005750 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f06f 0204 	mvn.w	r2, #4
 8005720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2202      	movs	r2, #2
 8005726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f8ac 	bl	8005894 <HAL_TIM_IC_CaptureCallback>
 800573c:	e005      	b.n	800574a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 f89e 	bl	8005880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f8af 	bl	80058a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b00      	cmp	r3, #0
 8005758:	d020      	beq.n	800579c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f003 0308 	and.w	r3, r3, #8
 8005760:	2b00      	cmp	r3, #0
 8005762:	d01b      	beq.n	800579c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f06f 0208 	mvn.w	r2, #8
 800576c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2204      	movs	r2, #4
 8005772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f886 	bl	8005894 <HAL_TIM_IC_CaptureCallback>
 8005788:	e005      	b.n	8005796 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f878 	bl	8005880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f889 	bl	80058a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f003 0310 	and.w	r3, r3, #16
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d020      	beq.n	80057e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f003 0310 	and.w	r3, r3, #16
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d01b      	beq.n	80057e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f06f 0210 	mvn.w	r2, #16
 80057b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2208      	movs	r2, #8
 80057be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d003      	beq.n	80057d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f860 	bl	8005894 <HAL_TIM_IC_CaptureCallback>
 80057d4:	e005      	b.n	80057e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f852 	bl	8005880 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 f863 	bl	80058a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00c      	beq.n	800580c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d007      	beq.n	800580c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f06f 0201 	mvn.w	r2, #1
 8005804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7fb fed8 	bl	80015bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00c      	beq.n	8005830 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800581c:	2b00      	cmp	r3, #0
 800581e:	d007      	beq.n	8005830 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 f8e6 	bl	80059fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00c      	beq.n	8005854 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005840:	2b00      	cmp	r3, #0
 8005842:	d007      	beq.n	8005854 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800584c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f834 	bl	80058bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	f003 0320 	and.w	r3, r3, #32
 800585a:	2b00      	cmp	r3, #0
 800585c:	d00c      	beq.n	8005878 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f003 0320 	and.w	r3, r3, #32
 8005864:	2b00      	cmp	r3, #0
 8005866:	d007      	beq.n	8005878 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f06f 0220 	mvn.w	r2, #32
 8005870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 f8b8 	bl	80059e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005878:	bf00      	nop
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a3a      	ldr	r2, [pc, #232]	@ (80059cc <TIM_Base_SetConfig+0xfc>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d00f      	beq.n	8005908 <TIM_Base_SetConfig+0x38>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ee:	d00b      	beq.n	8005908 <TIM_Base_SetConfig+0x38>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a37      	ldr	r2, [pc, #220]	@ (80059d0 <TIM_Base_SetConfig+0x100>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d007      	beq.n	8005908 <TIM_Base_SetConfig+0x38>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a36      	ldr	r2, [pc, #216]	@ (80059d4 <TIM_Base_SetConfig+0x104>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d003      	beq.n	8005908 <TIM_Base_SetConfig+0x38>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a35      	ldr	r2, [pc, #212]	@ (80059d8 <TIM_Base_SetConfig+0x108>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d108      	bne.n	800591a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800590e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	68fa      	ldr	r2, [r7, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a2b      	ldr	r2, [pc, #172]	@ (80059cc <TIM_Base_SetConfig+0xfc>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d01b      	beq.n	800595a <TIM_Base_SetConfig+0x8a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005928:	d017      	beq.n	800595a <TIM_Base_SetConfig+0x8a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a28      	ldr	r2, [pc, #160]	@ (80059d0 <TIM_Base_SetConfig+0x100>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d013      	beq.n	800595a <TIM_Base_SetConfig+0x8a>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a27      	ldr	r2, [pc, #156]	@ (80059d4 <TIM_Base_SetConfig+0x104>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d00f      	beq.n	800595a <TIM_Base_SetConfig+0x8a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a26      	ldr	r2, [pc, #152]	@ (80059d8 <TIM_Base_SetConfig+0x108>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00b      	beq.n	800595a <TIM_Base_SetConfig+0x8a>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a25      	ldr	r2, [pc, #148]	@ (80059dc <TIM_Base_SetConfig+0x10c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d007      	beq.n	800595a <TIM_Base_SetConfig+0x8a>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a24      	ldr	r2, [pc, #144]	@ (80059e0 <TIM_Base_SetConfig+0x110>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d003      	beq.n	800595a <TIM_Base_SetConfig+0x8a>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a23      	ldr	r2, [pc, #140]	@ (80059e4 <TIM_Base_SetConfig+0x114>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d108      	bne.n	800596c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005960:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	68fa      	ldr	r2, [r7, #12]
 8005968:	4313      	orrs	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	4313      	orrs	r3, r2
 8005978:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a0e      	ldr	r2, [pc, #56]	@ (80059cc <TIM_Base_SetConfig+0xfc>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d103      	bne.n	80059a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	f003 0301 	and.w	r3, r3, #1
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d105      	bne.n	80059be <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f023 0201 	bic.w	r2, r3, #1
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	611a      	str	r2, [r3, #16]
  }
}
 80059be:	bf00      	nop
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	40010000 	.word	0x40010000
 80059d0:	40000400 	.word	0x40000400
 80059d4:	40000800 	.word	0x40000800
 80059d8:	40000c00 	.word	0x40000c00
 80059dc:	40014000 	.word	0x40014000
 80059e0:	40014400 	.word	0x40014400
 80059e4:	40014800 	.word	0x40014800

080059e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e042      	b.n	8005aa8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d106      	bne.n	8005a3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f7fb ff34 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2224      	movs	r2, #36	@ 0x24
 8005a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68da      	ldr	r2, [r3, #12]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 f973 	bl	8005d40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	691a      	ldr	r2, [r3, #16]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695a      	ldr	r2, [r3, #20]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2220      	movs	r2, #32
 8005a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b08a      	sub	sp, #40	@ 0x28
 8005ab4:	af02      	add	r7, sp, #8
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	60b9      	str	r1, [r7, #8]
 8005aba:	603b      	str	r3, [r7, #0]
 8005abc:	4613      	mov	r3, r2
 8005abe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b20      	cmp	r3, #32
 8005ace:	d175      	bne.n	8005bbc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <HAL_UART_Transmit+0x2c>
 8005ad6:	88fb      	ldrh	r3, [r7, #6]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e06e      	b.n	8005bbe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2221      	movs	r2, #33	@ 0x21
 8005aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aee:	f7fc ff89 	bl	8002a04 <HAL_GetTick>
 8005af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	88fa      	ldrh	r2, [r7, #6]
 8005af8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	88fa      	ldrh	r2, [r7, #6]
 8005afe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b08:	d108      	bne.n	8005b1c <HAL_UART_Transmit+0x6c>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d104      	bne.n	8005b1c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b12:	2300      	movs	r3, #0
 8005b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	61bb      	str	r3, [r7, #24]
 8005b1a:	e003      	b.n	8005b24 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b20:	2300      	movs	r3, #0
 8005b22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b24:	e02e      	b.n	8005b84 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	9300      	str	r3, [sp, #0]
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	2180      	movs	r1, #128	@ 0x80
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 f848 	bl	8005bc6 <UART_WaitOnFlagUntilTimeout>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e03a      	b.n	8005bbe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10b      	bne.n	8005b66 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	881b      	ldrh	r3, [r3, #0]
 8005b52:	461a      	mov	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	3302      	adds	r3, #2
 8005b62:	61bb      	str	r3, [r7, #24]
 8005b64:	e007      	b.n	8005b76 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	781a      	ldrb	r2, [r3, #0]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	3301      	adds	r3, #1
 8005b74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1cb      	bne.n	8005b26 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2200      	movs	r2, #0
 8005b96:	2140      	movs	r1, #64	@ 0x40
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f000 f814 	bl	8005bc6 <UART_WaitOnFlagUntilTimeout>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d005      	beq.n	8005bb0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005bac:	2303      	movs	r3, #3
 8005bae:	e006      	b.n	8005bbe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	e000      	b.n	8005bbe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005bbc:	2302      	movs	r3, #2
  }
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3720      	adds	r7, #32
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b086      	sub	sp, #24
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	603b      	str	r3, [r7, #0]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bd6:	e03b      	b.n	8005c50 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bd8:	6a3b      	ldr	r3, [r7, #32]
 8005bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bde:	d037      	beq.n	8005c50 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005be0:	f7fc ff10 	bl	8002a04 <HAL_GetTick>
 8005be4:	4602      	mov	r2, r0
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	1ad3      	subs	r3, r2, r3
 8005bea:	6a3a      	ldr	r2, [r7, #32]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d302      	bcc.n	8005bf6 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e03a      	b.n	8005c70 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f003 0304 	and.w	r3, r3, #4
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d023      	beq.n	8005c50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2b80      	cmp	r3, #128	@ 0x80
 8005c0c:	d020      	beq.n	8005c50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2b40      	cmp	r3, #64	@ 0x40
 8005c12:	d01d      	beq.n	8005c50 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0308 	and.w	r3, r3, #8
 8005c1e:	2b08      	cmp	r3, #8
 8005c20:	d116      	bne.n	8005c50 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005c22:	2300      	movs	r3, #0
 8005c24:	617b      	str	r3, [r7, #20]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	617b      	str	r3, [r7, #20]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 f81d 	bl	8005c78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2208      	movs	r2, #8
 8005c42:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e00f      	b.n	8005c70 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	bf0c      	ite	eq
 8005c60:	2301      	moveq	r3, #1
 8005c62:	2300      	movne	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	461a      	mov	r2, r3
 8005c68:	79fb      	ldrb	r3, [r7, #7]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d0b4      	beq.n	8005bd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b095      	sub	sp, #84	@ 0x54
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	330c      	adds	r3, #12
 8005c86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c8a:	e853 3f00 	ldrex	r3, [r3]
 8005c8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	330c      	adds	r3, #12
 8005c9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ca0:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ca6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ca8:	e841 2300 	strex	r3, r2, [r1]
 8005cac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e5      	bne.n	8005c80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3314      	adds	r3, #20
 8005cba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	6a3b      	ldr	r3, [r7, #32]
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cc4:	69fb      	ldr	r3, [r7, #28]
 8005cc6:	f023 0301 	bic.w	r3, r3, #1
 8005cca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	3314      	adds	r3, #20
 8005cd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cdc:	e841 2300 	strex	r3, r2, [r1]
 8005ce0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1e5      	bne.n	8005cb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d119      	bne.n	8005d24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	330c      	adds	r3, #12
 8005cf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	e853 3f00 	ldrex	r3, [r3]
 8005cfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f023 0310 	bic.w	r3, r3, #16
 8005d06:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	330c      	adds	r3, #12
 8005d0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d10:	61ba      	str	r2, [r7, #24]
 8005d12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d14:	6979      	ldr	r1, [r7, #20]
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	e841 2300 	strex	r3, r2, [r1]
 8005d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1e5      	bne.n	8005cf0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005d32:	bf00      	nop
 8005d34:	3754      	adds	r7, #84	@ 0x54
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr
	...

08005d40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d44:	b0c0      	sub	sp, #256	@ 0x100
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d5c:	68d9      	ldr	r1, [r3, #12]
 8005d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	ea40 0301 	orr.w	r3, r0, r1
 8005d68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6e:	689a      	ldr	r2, [r3, #8]
 8005d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	431a      	orrs	r2, r3
 8005d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d98:	f021 010c 	bic.w	r1, r1, #12
 8005d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005da6:	430b      	orrs	r3, r1
 8005da8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dba:	6999      	ldr	r1, [r3, #24]
 8005dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	ea40 0301 	orr.w	r3, r0, r1
 8005dc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	4b8f      	ldr	r3, [pc, #572]	@ (800600c <UART_SetConfig+0x2cc>)
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d005      	beq.n	8005de0 <UART_SetConfig+0xa0>
 8005dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	4b8d      	ldr	r3, [pc, #564]	@ (8006010 <UART_SetConfig+0x2d0>)
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d104      	bne.n	8005dea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005de0:	f7fe fbd4 	bl	800458c <HAL_RCC_GetPCLK2Freq>
 8005de4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005de8:	e003      	b.n	8005df2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dea:	f7fe fbbb 	bl	8004564 <HAL_RCC_GetPCLK1Freq>
 8005dee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dfc:	f040 810c 	bne.w	8006018 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e04:	2200      	movs	r2, #0
 8005e06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e12:	4622      	mov	r2, r4
 8005e14:	462b      	mov	r3, r5
 8005e16:	1891      	adds	r1, r2, r2
 8005e18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e1a:	415b      	adcs	r3, r3
 8005e1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e22:	4621      	mov	r1, r4
 8005e24:	eb12 0801 	adds.w	r8, r2, r1
 8005e28:	4629      	mov	r1, r5
 8005e2a:	eb43 0901 	adc.w	r9, r3, r1
 8005e2e:	f04f 0200 	mov.w	r2, #0
 8005e32:	f04f 0300 	mov.w	r3, #0
 8005e36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e42:	4690      	mov	r8, r2
 8005e44:	4699      	mov	r9, r3
 8005e46:	4623      	mov	r3, r4
 8005e48:	eb18 0303 	adds.w	r3, r8, r3
 8005e4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e50:	462b      	mov	r3, r5
 8005e52:	eb49 0303 	adc.w	r3, r9, r3
 8005e56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e6e:	460b      	mov	r3, r1
 8005e70:	18db      	adds	r3, r3, r3
 8005e72:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e74:	4613      	mov	r3, r2
 8005e76:	eb42 0303 	adc.w	r3, r2, r3
 8005e7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e84:	f7fa ff08 	bl	8000c98 <__aeabi_uldivmod>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4b61      	ldr	r3, [pc, #388]	@ (8006014 <UART_SetConfig+0x2d4>)
 8005e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e92:	095b      	lsrs	r3, r3, #5
 8005e94:	011c      	lsls	r4, r3, #4
 8005e96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ea0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ea4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ea8:	4642      	mov	r2, r8
 8005eaa:	464b      	mov	r3, r9
 8005eac:	1891      	adds	r1, r2, r2
 8005eae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005eb0:	415b      	adcs	r3, r3
 8005eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005eb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005eb8:	4641      	mov	r1, r8
 8005eba:	eb12 0a01 	adds.w	sl, r2, r1
 8005ebe:	4649      	mov	r1, r9
 8005ec0:	eb43 0b01 	adc.w	fp, r3, r1
 8005ec4:	f04f 0200 	mov.w	r2, #0
 8005ec8:	f04f 0300 	mov.w	r3, #0
 8005ecc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ed0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ed4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ed8:	4692      	mov	sl, r2
 8005eda:	469b      	mov	fp, r3
 8005edc:	4643      	mov	r3, r8
 8005ede:	eb1a 0303 	adds.w	r3, sl, r3
 8005ee2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ee6:	464b      	mov	r3, r9
 8005ee8:	eb4b 0303 	adc.w	r3, fp, r3
 8005eec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005efc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f04:	460b      	mov	r3, r1
 8005f06:	18db      	adds	r3, r3, r3
 8005f08:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f0a:	4613      	mov	r3, r2
 8005f0c:	eb42 0303 	adc.w	r3, r2, r3
 8005f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f1a:	f7fa febd 	bl	8000c98 <__aeabi_uldivmod>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	4611      	mov	r1, r2
 8005f24:	4b3b      	ldr	r3, [pc, #236]	@ (8006014 <UART_SetConfig+0x2d4>)
 8005f26:	fba3 2301 	umull	r2, r3, r3, r1
 8005f2a:	095b      	lsrs	r3, r3, #5
 8005f2c:	2264      	movs	r2, #100	@ 0x64
 8005f2e:	fb02 f303 	mul.w	r3, r2, r3
 8005f32:	1acb      	subs	r3, r1, r3
 8005f34:	00db      	lsls	r3, r3, #3
 8005f36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f3a:	4b36      	ldr	r3, [pc, #216]	@ (8006014 <UART_SetConfig+0x2d4>)
 8005f3c:	fba3 2302 	umull	r2, r3, r3, r2
 8005f40:	095b      	lsrs	r3, r3, #5
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f48:	441c      	add	r4, r3
 8005f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f5c:	4642      	mov	r2, r8
 8005f5e:	464b      	mov	r3, r9
 8005f60:	1891      	adds	r1, r2, r2
 8005f62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f64:	415b      	adcs	r3, r3
 8005f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f6c:	4641      	mov	r1, r8
 8005f6e:	1851      	adds	r1, r2, r1
 8005f70:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f72:	4649      	mov	r1, r9
 8005f74:	414b      	adcs	r3, r1
 8005f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	f04f 0300 	mov.w	r3, #0
 8005f80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f84:	4659      	mov	r1, fp
 8005f86:	00cb      	lsls	r3, r1, #3
 8005f88:	4651      	mov	r1, sl
 8005f8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f8e:	4651      	mov	r1, sl
 8005f90:	00ca      	lsls	r2, r1, #3
 8005f92:	4610      	mov	r0, r2
 8005f94:	4619      	mov	r1, r3
 8005f96:	4603      	mov	r3, r0
 8005f98:	4642      	mov	r2, r8
 8005f9a:	189b      	adds	r3, r3, r2
 8005f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005fa0:	464b      	mov	r3, r9
 8005fa2:	460a      	mov	r2, r1
 8005fa4:	eb42 0303 	adc.w	r3, r2, r3
 8005fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fb8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005fbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	18db      	adds	r3, r3, r3
 8005fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	eb42 0303 	adc.w	r3, r2, r3
 8005fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005fd6:	f7fa fe5f 	bl	8000c98 <__aeabi_uldivmod>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	4b0d      	ldr	r3, [pc, #52]	@ (8006014 <UART_SetConfig+0x2d4>)
 8005fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8005fe4:	095b      	lsrs	r3, r3, #5
 8005fe6:	2164      	movs	r1, #100	@ 0x64
 8005fe8:	fb01 f303 	mul.w	r3, r1, r3
 8005fec:	1ad3      	subs	r3, r2, r3
 8005fee:	00db      	lsls	r3, r3, #3
 8005ff0:	3332      	adds	r3, #50	@ 0x32
 8005ff2:	4a08      	ldr	r2, [pc, #32]	@ (8006014 <UART_SetConfig+0x2d4>)
 8005ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff8:	095b      	lsrs	r3, r3, #5
 8005ffa:	f003 0207 	and.w	r2, r3, #7
 8005ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4422      	add	r2, r4
 8006006:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006008:	e106      	b.n	8006218 <UART_SetConfig+0x4d8>
 800600a:	bf00      	nop
 800600c:	40011000 	.word	0x40011000
 8006010:	40011400 	.word	0x40011400
 8006014:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006018:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800601c:	2200      	movs	r2, #0
 800601e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006022:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006026:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800602a:	4642      	mov	r2, r8
 800602c:	464b      	mov	r3, r9
 800602e:	1891      	adds	r1, r2, r2
 8006030:	6239      	str	r1, [r7, #32]
 8006032:	415b      	adcs	r3, r3
 8006034:	627b      	str	r3, [r7, #36]	@ 0x24
 8006036:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800603a:	4641      	mov	r1, r8
 800603c:	1854      	adds	r4, r2, r1
 800603e:	4649      	mov	r1, r9
 8006040:	eb43 0501 	adc.w	r5, r3, r1
 8006044:	f04f 0200 	mov.w	r2, #0
 8006048:	f04f 0300 	mov.w	r3, #0
 800604c:	00eb      	lsls	r3, r5, #3
 800604e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006052:	00e2      	lsls	r2, r4, #3
 8006054:	4614      	mov	r4, r2
 8006056:	461d      	mov	r5, r3
 8006058:	4643      	mov	r3, r8
 800605a:	18e3      	adds	r3, r4, r3
 800605c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006060:	464b      	mov	r3, r9
 8006062:	eb45 0303 	adc.w	r3, r5, r3
 8006066:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800606a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006076:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800607a:	f04f 0200 	mov.w	r2, #0
 800607e:	f04f 0300 	mov.w	r3, #0
 8006082:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006086:	4629      	mov	r1, r5
 8006088:	008b      	lsls	r3, r1, #2
 800608a:	4621      	mov	r1, r4
 800608c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006090:	4621      	mov	r1, r4
 8006092:	008a      	lsls	r2, r1, #2
 8006094:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006098:	f7fa fdfe 	bl	8000c98 <__aeabi_uldivmod>
 800609c:	4602      	mov	r2, r0
 800609e:	460b      	mov	r3, r1
 80060a0:	4b60      	ldr	r3, [pc, #384]	@ (8006224 <UART_SetConfig+0x4e4>)
 80060a2:	fba3 2302 	umull	r2, r3, r3, r2
 80060a6:	095b      	lsrs	r3, r3, #5
 80060a8:	011c      	lsls	r4, r3, #4
 80060aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80060b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80060bc:	4642      	mov	r2, r8
 80060be:	464b      	mov	r3, r9
 80060c0:	1891      	adds	r1, r2, r2
 80060c2:	61b9      	str	r1, [r7, #24]
 80060c4:	415b      	adcs	r3, r3
 80060c6:	61fb      	str	r3, [r7, #28]
 80060c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060cc:	4641      	mov	r1, r8
 80060ce:	1851      	adds	r1, r2, r1
 80060d0:	6139      	str	r1, [r7, #16]
 80060d2:	4649      	mov	r1, r9
 80060d4:	414b      	adcs	r3, r1
 80060d6:	617b      	str	r3, [r7, #20]
 80060d8:	f04f 0200 	mov.w	r2, #0
 80060dc:	f04f 0300 	mov.w	r3, #0
 80060e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060e4:	4659      	mov	r1, fp
 80060e6:	00cb      	lsls	r3, r1, #3
 80060e8:	4651      	mov	r1, sl
 80060ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060ee:	4651      	mov	r1, sl
 80060f0:	00ca      	lsls	r2, r1, #3
 80060f2:	4610      	mov	r0, r2
 80060f4:	4619      	mov	r1, r3
 80060f6:	4603      	mov	r3, r0
 80060f8:	4642      	mov	r2, r8
 80060fa:	189b      	adds	r3, r3, r2
 80060fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006100:	464b      	mov	r3, r9
 8006102:	460a      	mov	r2, r1
 8006104:	eb42 0303 	adc.w	r3, r2, r3
 8006108:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800610c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006116:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006118:	f04f 0200 	mov.w	r2, #0
 800611c:	f04f 0300 	mov.w	r3, #0
 8006120:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006124:	4649      	mov	r1, r9
 8006126:	008b      	lsls	r3, r1, #2
 8006128:	4641      	mov	r1, r8
 800612a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800612e:	4641      	mov	r1, r8
 8006130:	008a      	lsls	r2, r1, #2
 8006132:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006136:	f7fa fdaf 	bl	8000c98 <__aeabi_uldivmod>
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	4611      	mov	r1, r2
 8006140:	4b38      	ldr	r3, [pc, #224]	@ (8006224 <UART_SetConfig+0x4e4>)
 8006142:	fba3 2301 	umull	r2, r3, r3, r1
 8006146:	095b      	lsrs	r3, r3, #5
 8006148:	2264      	movs	r2, #100	@ 0x64
 800614a:	fb02 f303 	mul.w	r3, r2, r3
 800614e:	1acb      	subs	r3, r1, r3
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	3332      	adds	r3, #50	@ 0x32
 8006154:	4a33      	ldr	r2, [pc, #204]	@ (8006224 <UART_SetConfig+0x4e4>)
 8006156:	fba2 2303 	umull	r2, r3, r2, r3
 800615a:	095b      	lsrs	r3, r3, #5
 800615c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006160:	441c      	add	r4, r3
 8006162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006166:	2200      	movs	r2, #0
 8006168:	673b      	str	r3, [r7, #112]	@ 0x70
 800616a:	677a      	str	r2, [r7, #116]	@ 0x74
 800616c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006170:	4642      	mov	r2, r8
 8006172:	464b      	mov	r3, r9
 8006174:	1891      	adds	r1, r2, r2
 8006176:	60b9      	str	r1, [r7, #8]
 8006178:	415b      	adcs	r3, r3
 800617a:	60fb      	str	r3, [r7, #12]
 800617c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006180:	4641      	mov	r1, r8
 8006182:	1851      	adds	r1, r2, r1
 8006184:	6039      	str	r1, [r7, #0]
 8006186:	4649      	mov	r1, r9
 8006188:	414b      	adcs	r3, r1
 800618a:	607b      	str	r3, [r7, #4]
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	f04f 0300 	mov.w	r3, #0
 8006194:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006198:	4659      	mov	r1, fp
 800619a:	00cb      	lsls	r3, r1, #3
 800619c:	4651      	mov	r1, sl
 800619e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061a2:	4651      	mov	r1, sl
 80061a4:	00ca      	lsls	r2, r1, #3
 80061a6:	4610      	mov	r0, r2
 80061a8:	4619      	mov	r1, r3
 80061aa:	4603      	mov	r3, r0
 80061ac:	4642      	mov	r2, r8
 80061ae:	189b      	adds	r3, r3, r2
 80061b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061b2:	464b      	mov	r3, r9
 80061b4:	460a      	mov	r2, r1
 80061b6:	eb42 0303 	adc.w	r3, r2, r3
 80061ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	2200      	movs	r2, #0
 80061c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80061c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80061c8:	f04f 0200 	mov.w	r2, #0
 80061cc:	f04f 0300 	mov.w	r3, #0
 80061d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80061d4:	4649      	mov	r1, r9
 80061d6:	008b      	lsls	r3, r1, #2
 80061d8:	4641      	mov	r1, r8
 80061da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061de:	4641      	mov	r1, r8
 80061e0:	008a      	lsls	r2, r1, #2
 80061e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80061e6:	f7fa fd57 	bl	8000c98 <__aeabi_uldivmod>
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006224 <UART_SetConfig+0x4e4>)
 80061f0:	fba3 1302 	umull	r1, r3, r3, r2
 80061f4:	095b      	lsrs	r3, r3, #5
 80061f6:	2164      	movs	r1, #100	@ 0x64
 80061f8:	fb01 f303 	mul.w	r3, r1, r3
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	011b      	lsls	r3, r3, #4
 8006200:	3332      	adds	r3, #50	@ 0x32
 8006202:	4a08      	ldr	r2, [pc, #32]	@ (8006224 <UART_SetConfig+0x4e4>)
 8006204:	fba2 2303 	umull	r2, r3, r2, r3
 8006208:	095b      	lsrs	r3, r3, #5
 800620a:	f003 020f 	and.w	r2, r3, #15
 800620e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4422      	add	r2, r4
 8006216:	609a      	str	r2, [r3, #8]
}
 8006218:	bf00      	nop
 800621a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800621e:	46bd      	mov	sp, r7
 8006220:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006224:	51eb851f 	.word	0x51eb851f

08006228 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800622c:	4904      	ldr	r1, [pc, #16]	@ (8006240 <MX_FATFS_Init+0x18>)
 800622e:	4805      	ldr	r0, [pc, #20]	@ (8006244 <MX_FATFS_Init+0x1c>)
 8006230:	f003 ff20 	bl	800a074 <FATFS_LinkDriver>
 8006234:	4603      	mov	r3, r0
 8006236:	461a      	mov	r2, r3
 8006238:	4b03      	ldr	r3, [pc, #12]	@ (8006248 <MX_FATFS_Init+0x20>)
 800623a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800623c:	bf00      	nop
 800623e:	bd80      	pop	{r7, pc}
 8006240:	20002808 	.word	0x20002808
 8006244:	20000010 	.word	0x20000010
 8006248:	20002804 	.word	0x20002804

0800624c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006250:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006252:	4618      	mov	r0, r3
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b082      	sub	sp, #8
 8006260:	af00      	add	r7, sp, #0
 8006262:	4603      	mov	r3, r0
 8006264:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8006266:	79fb      	ldrb	r3, [r7, #7]
 8006268:	4618      	mov	r0, r3
 800626a:	f7fb fefd 	bl	8002068 <SD_disk_initialize>
 800626e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006270:	4618      	mov	r0, r3
 8006272:	3708      	adds	r7, #8
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	4603      	mov	r3, r0
 8006280:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8006282:	79fb      	ldrb	r3, [r7, #7]
 8006284:	4618      	mov	r0, r3
 8006286:	f7fb ffdb 	bl	8002240 <SD_disk_status>
 800628a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800628c:	4618      	mov	r0, r3
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	60b9      	str	r1, [r7, #8]
 800629c:	607a      	str	r2, [r7, #4]
 800629e:	603b      	str	r3, [r7, #0]
 80062a0:	4603      	mov	r3, r0
 80062a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80062a4:	7bf8      	ldrb	r0, [r7, #15]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	68b9      	ldr	r1, [r7, #8]
 80062ac:	f7fb ffde 	bl	800226c <SD_disk_read>
 80062b0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3710      	adds	r7, #16
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b084      	sub	sp, #16
 80062be:	af00      	add	r7, sp, #0
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
 80062c4:	603b      	str	r3, [r7, #0]
 80062c6:	4603      	mov	r3, r0
 80062c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80062ca:	7bf8      	ldrb	r0, [r7, #15]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	68b9      	ldr	r1, [r7, #8]
 80062d2:	f7fc f835 	bl	8002340 <SD_disk_write>
 80062d6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	4603      	mov	r3, r0
 80062e8:	603a      	str	r2, [r7, #0]
 80062ea:	71fb      	strb	r3, [r7, #7]
 80062ec:	460b      	mov	r3, r1
 80062ee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 80062f0:	79b9      	ldrb	r1, [r7, #6]
 80062f2:	79fb      	ldrb	r3, [r7, #7]
 80062f4:	683a      	ldr	r2, [r7, #0]
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fc f8a6 	bl	8002448 <SD_disk_ioctl>
 80062fc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
	...

08006308 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	4603      	mov	r3, r0
 8006310:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006312:	79fb      	ldrb	r3, [r7, #7]
 8006314:	4a08      	ldr	r2, [pc, #32]	@ (8006338 <disk_status+0x30>)
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	79fa      	ldrb	r2, [r7, #7]
 8006320:	4905      	ldr	r1, [pc, #20]	@ (8006338 <disk_status+0x30>)
 8006322:	440a      	add	r2, r1
 8006324:	7a12      	ldrb	r2, [r2, #8]
 8006326:	4610      	mov	r0, r2
 8006328:	4798      	blx	r3
 800632a:	4603      	mov	r3, r0
 800632c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800632e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	20002834 	.word	0x20002834

0800633c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	4603      	mov	r3, r0
 8006344:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800634a:	79fb      	ldrb	r3, [r7, #7]
 800634c:	4a0e      	ldr	r2, [pc, #56]	@ (8006388 <disk_initialize+0x4c>)
 800634e:	5cd3      	ldrb	r3, [r2, r3]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d114      	bne.n	800637e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006354:	79fb      	ldrb	r3, [r7, #7]
 8006356:	4a0c      	ldr	r2, [pc, #48]	@ (8006388 <disk_initialize+0x4c>)
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	4413      	add	r3, r2
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	79fa      	ldrb	r2, [r7, #7]
 8006362:	4909      	ldr	r1, [pc, #36]	@ (8006388 <disk_initialize+0x4c>)
 8006364:	440a      	add	r2, r1
 8006366:	7a12      	ldrb	r2, [r2, #8]
 8006368:	4610      	mov	r0, r2
 800636a:	4798      	blx	r3
 800636c:	4603      	mov	r3, r0
 800636e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8006370:	7bfb      	ldrb	r3, [r7, #15]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d103      	bne.n	800637e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8006376:	79fb      	ldrb	r3, [r7, #7]
 8006378:	4a03      	ldr	r2, [pc, #12]	@ (8006388 <disk_initialize+0x4c>)
 800637a:	2101      	movs	r1, #1
 800637c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800637e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	20002834 	.word	0x20002834

0800638c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800638c:	b590      	push	{r4, r7, lr}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	60b9      	str	r1, [r7, #8]
 8006394:	607a      	str	r2, [r7, #4]
 8006396:	603b      	str	r3, [r7, #0]
 8006398:	4603      	mov	r3, r0
 800639a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800639c:	7bfb      	ldrb	r3, [r7, #15]
 800639e:	4a0a      	ldr	r2, [pc, #40]	@ (80063c8 <disk_read+0x3c>)
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	4413      	add	r3, r2
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	689c      	ldr	r4, [r3, #8]
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
 80063aa:	4a07      	ldr	r2, [pc, #28]	@ (80063c8 <disk_read+0x3c>)
 80063ac:	4413      	add	r3, r2
 80063ae:	7a18      	ldrb	r0, [r3, #8]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	68b9      	ldr	r1, [r7, #8]
 80063b6:	47a0      	blx	r4
 80063b8:	4603      	mov	r3, r0
 80063ba:	75fb      	strb	r3, [r7, #23]
  return res;
 80063bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	371c      	adds	r7, #28
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd90      	pop	{r4, r7, pc}
 80063c6:	bf00      	nop
 80063c8:	20002834 	.word	0x20002834

080063cc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80063cc:	b590      	push	{r4, r7, lr}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	607a      	str	r2, [r7, #4]
 80063d6:	603b      	str	r3, [r7, #0]
 80063d8:	4603      	mov	r3, r0
 80063da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
 80063de:	4a0a      	ldr	r2, [pc, #40]	@ (8006408 <disk_write+0x3c>)
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	68dc      	ldr	r4, [r3, #12]
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
 80063ea:	4a07      	ldr	r2, [pc, #28]	@ (8006408 <disk_write+0x3c>)
 80063ec:	4413      	add	r3, r2
 80063ee:	7a18      	ldrb	r0, [r3, #8]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	68b9      	ldr	r1, [r7, #8]
 80063f6:	47a0      	blx	r4
 80063f8:	4603      	mov	r3, r0
 80063fa:	75fb      	strb	r3, [r7, #23]
  return res;
 80063fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80063fe:	4618      	mov	r0, r3
 8006400:	371c      	adds	r7, #28
 8006402:	46bd      	mov	sp, r7
 8006404:	bd90      	pop	{r4, r7, pc}
 8006406:	bf00      	nop
 8006408:	20002834 	.word	0x20002834

0800640c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	4603      	mov	r3, r0
 8006414:	603a      	str	r2, [r7, #0]
 8006416:	71fb      	strb	r3, [r7, #7]
 8006418:	460b      	mov	r3, r1
 800641a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800641c:	79fb      	ldrb	r3, [r7, #7]
 800641e:	4a09      	ldr	r2, [pc, #36]	@ (8006444 <disk_ioctl+0x38>)
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	79fa      	ldrb	r2, [r7, #7]
 800642a:	4906      	ldr	r1, [pc, #24]	@ (8006444 <disk_ioctl+0x38>)
 800642c:	440a      	add	r2, r1
 800642e:	7a10      	ldrb	r0, [r2, #8]
 8006430:	79b9      	ldrb	r1, [r7, #6]
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	4798      	blx	r3
 8006436:	4603      	mov	r3, r0
 8006438:	73fb      	strb	r3, [r7, #15]
  return res;
 800643a:	7bfb      	ldrb	r3, [r7, #15]
}
 800643c:	4618      	mov	r0, r3
 800643e:	3710      	adds	r7, #16
 8006440:	46bd      	mov	sp, r7
 8006442:	bd80      	pop	{r7, pc}
 8006444:	20002834 	.word	0x20002834

08006448 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3301      	adds	r3, #1
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006458:	89fb      	ldrh	r3, [r7, #14]
 800645a:	021b      	lsls	r3, r3, #8
 800645c:	b21a      	sxth	r2, r3
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	b21b      	sxth	r3, r3
 8006464:	4313      	orrs	r3, r2
 8006466:	b21b      	sxth	r3, r3
 8006468:	81fb      	strh	r3, [r7, #14]
	return rv;
 800646a:	89fb      	ldrh	r3, [r7, #14]
}
 800646c:	4618      	mov	r0, r3
 800646e:	3714      	adds	r7, #20
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3303      	adds	r3, #3
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	021b      	lsls	r3, r3, #8
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	3202      	adds	r2, #2
 8006490:	7812      	ldrb	r2, [r2, #0]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	021b      	lsls	r3, r3, #8
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	3201      	adds	r2, #1
 800649e:	7812      	ldrb	r2, [r2, #0]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	021b      	lsls	r3, r3, #8
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	7812      	ldrb	r2, [r2, #0]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	60fb      	str	r3, [r7, #12]
	return rv;
 80064b0:	68fb      	ldr	r3, [r7, #12]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3714      	adds	r7, #20
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80064be:	b480      	push	{r7}
 80064c0:	b083      	sub	sp, #12
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	460b      	mov	r3, r1
 80064c8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	607a      	str	r2, [r7, #4]
 80064d0:	887a      	ldrh	r2, [r7, #2]
 80064d2:	b2d2      	uxtb	r2, r2
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	887b      	ldrh	r3, [r7, #2]
 80064d8:	0a1b      	lsrs	r3, r3, #8
 80064da:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	607a      	str	r2, [r7, #4]
 80064e2:	887a      	ldrh	r2, [r7, #2]
 80064e4:	b2d2      	uxtb	r2, r2
 80064e6:	701a      	strb	r2, [r3, #0]
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	b2d2      	uxtb	r2, r2
 8006508:	701a      	strb	r2, [r3, #0]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	0a1b      	lsrs	r3, r3, #8
 800650e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	1c5a      	adds	r2, r3, #1
 8006514:	607a      	str	r2, [r7, #4]
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	b2d2      	uxtb	r2, r2
 800651a:	701a      	strb	r2, [r3, #0]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	0a1b      	lsrs	r3, r3, #8
 8006520:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	1c5a      	adds	r2, r3, #1
 8006526:	607a      	str	r2, [r7, #4]
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	b2d2      	uxtb	r2, r2
 800652c:	701a      	strb	r2, [r3, #0]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	0a1b      	lsrs	r3, r3, #8
 8006532:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	607a      	str	r2, [r7, #4]
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	b2d2      	uxtb	r2, r2
 800653e:	701a      	strb	r2, [r3, #0]
}
 8006540:	bf00      	nop
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800654c:	b480      	push	{r7}
 800654e:	b087      	sub	sp, #28
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00d      	beq.n	8006582 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	1c53      	adds	r3, r2, #1
 800656a:	613b      	str	r3, [r7, #16]
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	1c59      	adds	r1, r3, #1
 8006570:	6179      	str	r1, [r7, #20]
 8006572:	7812      	ldrb	r2, [r2, #0]
 8006574:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	3b01      	subs	r3, #1
 800657a:	607b      	str	r3, [r7, #4]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1f1      	bne.n	8006566 <mem_cpy+0x1a>
	}
}
 8006582:	bf00      	nop
 8006584:	371c      	adds	r7, #28
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr

0800658e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800658e:	b480      	push	{r7}
 8006590:	b087      	sub	sp, #28
 8006592:	af00      	add	r7, sp, #0
 8006594:	60f8      	str	r0, [r7, #12]
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	1c5a      	adds	r2, r3, #1
 80065a2:	617a      	str	r2, [r7, #20]
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	b2d2      	uxtb	r2, r2
 80065a8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	3b01      	subs	r3, #1
 80065ae:	607b      	str	r3, [r7, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1f3      	bne.n	800659e <mem_set+0x10>
}
 80065b6:	bf00      	nop
 80065b8:	bf00      	nop
 80065ba:	371c      	adds	r7, #28
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80065c4:	b480      	push	{r7}
 80065c6:	b089      	sub	sp, #36	@ 0x24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	61fb      	str	r3, [r7, #28]
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80065d8:	2300      	movs	r3, #0
 80065da:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	1c5a      	adds	r2, r3, #1
 80065e0:	61fa      	str	r2, [r7, #28]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	4619      	mov	r1, r3
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	61ba      	str	r2, [r7, #24]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	1acb      	subs	r3, r1, r3
 80065f0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	3b01      	subs	r3, #1
 80065f6:	607b      	str	r3, [r7, #4]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d002      	beq.n	8006604 <mem_cmp+0x40>
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d0eb      	beq.n	80065dc <mem_cmp+0x18>

	return r;
 8006604:	697b      	ldr	r3, [r7, #20]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3724      	adds	r7, #36	@ 0x24
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006612:	b480      	push	{r7}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
 800661a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800661c:	e002      	b.n	8006624 <chk_chr+0x12>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	3301      	adds	r3, #1
 8006622:	607b      	str	r3, [r7, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d005      	beq.n	8006638 <chk_chr+0x26>
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	461a      	mov	r2, r3
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	4293      	cmp	r3, r2
 8006636:	d1f2      	bne.n	800661e <chk_chr+0xc>
	return *str;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	781b      	ldrb	r3, [r3, #0]
}
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d009      	beq.n	800666a <lock_fs+0x22>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	4618      	mov	r0, r3
 800665c:	f003 fe0c 	bl	800a278 <ff_req_grant>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <lock_fs+0x22>
 8006666:	2301      	movs	r3, #1
 8006668:	e000      	b.n	800666c <lock_fs+0x24>
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3708      	adds	r7, #8
 8006670:	46bd      	mov	sp, r7
 8006672:	bd80      	pop	{r7, pc}

08006674 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	460b      	mov	r3, r1
 800667e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00d      	beq.n	80066a2 <unlock_fs+0x2e>
 8006686:	78fb      	ldrb	r3, [r7, #3]
 8006688:	2b0c      	cmp	r3, #12
 800668a:	d00a      	beq.n	80066a2 <unlock_fs+0x2e>
 800668c:	78fb      	ldrb	r3, [r7, #3]
 800668e:	2b0b      	cmp	r3, #11
 8006690:	d007      	beq.n	80066a2 <unlock_fs+0x2e>
 8006692:	78fb      	ldrb	r3, [r7, #3]
 8006694:	2b0f      	cmp	r3, #15
 8006696:	d004      	beq.n	80066a2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	695b      	ldr	r3, [r3, #20]
 800669c:	4618      	mov	r0, r3
 800669e:	f003 fe00 	bl	800a2a2 <ff_rel_grant>
	}
}
 80066a2:	bf00      	nop
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80066b6:	2300      	movs	r3, #0
 80066b8:	60bb      	str	r3, [r7, #8]
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	e029      	b.n	8006714 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80066c0:	4a27      	ldr	r2, [pc, #156]	@ (8006760 <chk_lock+0xb4>)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	011b      	lsls	r3, r3, #4
 80066c6:	4413      	add	r3, r2
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d01d      	beq.n	800670a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80066ce:	4a24      	ldr	r2, [pc, #144]	@ (8006760 <chk_lock+0xb4>)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	4413      	add	r3, r2
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d116      	bne.n	800670e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80066e0:	4a1f      	ldr	r2, [pc, #124]	@ (8006760 <chk_lock+0xb4>)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	011b      	lsls	r3, r3, #4
 80066e6:	4413      	add	r3, r2
 80066e8:	3304      	adds	r3, #4
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d10c      	bne.n	800670e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80066f4:	4a1a      	ldr	r2, [pc, #104]	@ (8006760 <chk_lock+0xb4>)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	011b      	lsls	r3, r3, #4
 80066fa:	4413      	add	r3, r2
 80066fc:	3308      	adds	r3, #8
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006704:	429a      	cmp	r2, r3
 8006706:	d102      	bne.n	800670e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006708:	e007      	b.n	800671a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800670a:	2301      	movs	r3, #1
 800670c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3301      	adds	r3, #1
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2b01      	cmp	r3, #1
 8006718:	d9d2      	bls.n	80066c0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2b02      	cmp	r3, #2
 800671e:	d109      	bne.n	8006734 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d102      	bne.n	800672c <chk_lock+0x80>
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2b02      	cmp	r3, #2
 800672a:	d101      	bne.n	8006730 <chk_lock+0x84>
 800672c:	2300      	movs	r3, #0
 800672e:	e010      	b.n	8006752 <chk_lock+0xa6>
 8006730:	2312      	movs	r3, #18
 8006732:	e00e      	b.n	8006752 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d108      	bne.n	800674c <chk_lock+0xa0>
 800673a:	4a09      	ldr	r2, [pc, #36]	@ (8006760 <chk_lock+0xb4>)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	4413      	add	r3, r2
 8006742:	330c      	adds	r3, #12
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800674a:	d101      	bne.n	8006750 <chk_lock+0xa4>
 800674c:	2310      	movs	r3, #16
 800674e:	e000      	b.n	8006752 <chk_lock+0xa6>
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	20002814 	.word	0x20002814

08006764 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800676a:	2300      	movs	r3, #0
 800676c:	607b      	str	r3, [r7, #4]
 800676e:	e002      	b.n	8006776 <enq_lock+0x12>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	3301      	adds	r3, #1
 8006774:	607b      	str	r3, [r7, #4]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d806      	bhi.n	800678a <enq_lock+0x26>
 800677c:	4a09      	ldr	r2, [pc, #36]	@ (80067a4 <enq_lock+0x40>)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	011b      	lsls	r3, r3, #4
 8006782:	4413      	add	r3, r2
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1f2      	bne.n	8006770 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b02      	cmp	r3, #2
 800678e:	bf14      	ite	ne
 8006790:	2301      	movne	r3, #1
 8006792:	2300      	moveq	r3, #0
 8006794:	b2db      	uxtb	r3, r3
}
 8006796:	4618      	mov	r0, r3
 8006798:	370c      	adds	r7, #12
 800679a:	46bd      	mov	sp, r7
 800679c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	20002814 	.word	0x20002814

080067a8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80067b2:	2300      	movs	r3, #0
 80067b4:	60fb      	str	r3, [r7, #12]
 80067b6:	e01f      	b.n	80067f8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80067b8:	4a41      	ldr	r2, [pc, #260]	@ (80068c0 <inc_lock+0x118>)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	011b      	lsls	r3, r3, #4
 80067be:	4413      	add	r3, r2
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d113      	bne.n	80067f2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80067ca:	4a3d      	ldr	r2, [pc, #244]	@ (80068c0 <inc_lock+0x118>)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	011b      	lsls	r3, r3, #4
 80067d0:	4413      	add	r3, r2
 80067d2:	3304      	adds	r3, #4
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80067da:	429a      	cmp	r2, r3
 80067dc:	d109      	bne.n	80067f2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80067de:	4a38      	ldr	r2, [pc, #224]	@ (80068c0 <inc_lock+0x118>)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	011b      	lsls	r3, r3, #4
 80067e4:	4413      	add	r3, r2
 80067e6:	3308      	adds	r3, #8
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d006      	beq.n	8006800 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	3301      	adds	r3, #1
 80067f6:	60fb      	str	r3, [r7, #12]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d9dc      	bls.n	80067b8 <inc_lock+0x10>
 80067fe:	e000      	b.n	8006802 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006800:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2b02      	cmp	r3, #2
 8006806:	d132      	bne.n	800686e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	e002      	b.n	8006814 <inc_lock+0x6c>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3301      	adds	r3, #1
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b01      	cmp	r3, #1
 8006818:	d806      	bhi.n	8006828 <inc_lock+0x80>
 800681a:	4a29      	ldr	r2, [pc, #164]	@ (80068c0 <inc_lock+0x118>)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	011b      	lsls	r3, r3, #4
 8006820:	4413      	add	r3, r2
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1f2      	bne.n	800680e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2b02      	cmp	r3, #2
 800682c:	d101      	bne.n	8006832 <inc_lock+0x8a>
 800682e:	2300      	movs	r3, #0
 8006830:	e040      	b.n	80068b4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	4922      	ldr	r1, [pc, #136]	@ (80068c0 <inc_lock+0x118>)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	011b      	lsls	r3, r3, #4
 800683c:	440b      	add	r3, r1
 800683e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	689a      	ldr	r2, [r3, #8]
 8006844:	491e      	ldr	r1, [pc, #120]	@ (80068c0 <inc_lock+0x118>)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	011b      	lsls	r3, r3, #4
 800684a:	440b      	add	r3, r1
 800684c:	3304      	adds	r3, #4
 800684e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	695a      	ldr	r2, [r3, #20]
 8006854:	491a      	ldr	r1, [pc, #104]	@ (80068c0 <inc_lock+0x118>)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	440b      	add	r3, r1
 800685c:	3308      	adds	r3, #8
 800685e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006860:	4a17      	ldr	r2, [pc, #92]	@ (80068c0 <inc_lock+0x118>)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	011b      	lsls	r3, r3, #4
 8006866:	4413      	add	r3, r2
 8006868:	330c      	adds	r3, #12
 800686a:	2200      	movs	r2, #0
 800686c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d009      	beq.n	8006888 <inc_lock+0xe0>
 8006874:	4a12      	ldr	r2, [pc, #72]	@ (80068c0 <inc_lock+0x118>)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	011b      	lsls	r3, r3, #4
 800687a:	4413      	add	r3, r2
 800687c:	330c      	adds	r3, #12
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d001      	beq.n	8006888 <inc_lock+0xe0>
 8006884:	2300      	movs	r3, #0
 8006886:	e015      	b.n	80068b4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d108      	bne.n	80068a0 <inc_lock+0xf8>
 800688e:	4a0c      	ldr	r2, [pc, #48]	@ (80068c0 <inc_lock+0x118>)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	011b      	lsls	r3, r3, #4
 8006894:	4413      	add	r3, r2
 8006896:	330c      	adds	r3, #12
 8006898:	881b      	ldrh	r3, [r3, #0]
 800689a:	3301      	adds	r3, #1
 800689c:	b29a      	uxth	r2, r3
 800689e:	e001      	b.n	80068a4 <inc_lock+0xfc>
 80068a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068a4:	4906      	ldr	r1, [pc, #24]	@ (80068c0 <inc_lock+0x118>)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	011b      	lsls	r3, r3, #4
 80068aa:	440b      	add	r3, r1
 80068ac:	330c      	adds	r3, #12
 80068ae:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	3301      	adds	r3, #1
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3714      	adds	r7, #20
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	20002814 	.word	0x20002814

080068c4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	607b      	str	r3, [r7, #4]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d825      	bhi.n	8006924 <dec_lock+0x60>
		n = Files[i].ctr;
 80068d8:	4a17      	ldr	r2, [pc, #92]	@ (8006938 <dec_lock+0x74>)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	4413      	add	r3, r2
 80068e0:	330c      	adds	r3, #12
 80068e2:	881b      	ldrh	r3, [r3, #0]
 80068e4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80068e6:	89fb      	ldrh	r3, [r7, #14]
 80068e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068ec:	d101      	bne.n	80068f2 <dec_lock+0x2e>
 80068ee:	2300      	movs	r3, #0
 80068f0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80068f2:	89fb      	ldrh	r3, [r7, #14]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <dec_lock+0x3a>
 80068f8:	89fb      	ldrh	r3, [r7, #14]
 80068fa:	3b01      	subs	r3, #1
 80068fc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80068fe:	4a0e      	ldr	r2, [pc, #56]	@ (8006938 <dec_lock+0x74>)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	011b      	lsls	r3, r3, #4
 8006904:	4413      	add	r3, r2
 8006906:	330c      	adds	r3, #12
 8006908:	89fa      	ldrh	r2, [r7, #14]
 800690a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800690c:	89fb      	ldrh	r3, [r7, #14]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d105      	bne.n	800691e <dec_lock+0x5a>
 8006912:	4a09      	ldr	r2, [pc, #36]	@ (8006938 <dec_lock+0x74>)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	4413      	add	r3, r2
 800691a:	2200      	movs	r2, #0
 800691c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800691e:	2300      	movs	r3, #0
 8006920:	737b      	strb	r3, [r7, #13]
 8006922:	e001      	b.n	8006928 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006924:	2302      	movs	r3, #2
 8006926:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006928:	7b7b      	ldrb	r3, [r7, #13]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	20002814 	.word	0x20002814

0800693c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006944:	2300      	movs	r3, #0
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	e010      	b.n	800696c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800694a:	4a0d      	ldr	r2, [pc, #52]	@ (8006980 <clear_lock+0x44>)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	011b      	lsls	r3, r3, #4
 8006950:	4413      	add	r3, r2
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	429a      	cmp	r2, r3
 8006958:	d105      	bne.n	8006966 <clear_lock+0x2a>
 800695a:	4a09      	ldr	r2, [pc, #36]	@ (8006980 <clear_lock+0x44>)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	011b      	lsls	r3, r3, #4
 8006960:	4413      	add	r3, r2
 8006962:	2200      	movs	r2, #0
 8006964:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	3301      	adds	r3, #1
 800696a:	60fb      	str	r3, [r7, #12]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d9eb      	bls.n	800694a <clear_lock+0xe>
	}
}
 8006972:	bf00      	nop
 8006974:	bf00      	nop
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	20002814 	.word	0x20002814

08006984 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800698c:	2300      	movs	r3, #0
 800698e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	78db      	ldrb	r3, [r3, #3]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d034      	beq.n	8006a02 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800699c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	7858      	ldrb	r0, [r3, #1]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80069a8:	2301      	movs	r3, #1
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	f7ff fd0e 	bl	80063cc <disk_write>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <sync_window+0x38>
			res = FR_DISK_ERR;
 80069b6:	2301      	movs	r3, #1
 80069b8:	73fb      	strb	r3, [r7, #15]
 80069ba:	e022      	b.n	8006a02 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	1ad2      	subs	r2, r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d217      	bcs.n	8006a02 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	789b      	ldrb	r3, [r3, #2]
 80069d6:	613b      	str	r3, [r7, #16]
 80069d8:	e010      	b.n	80069fc <sync_window+0x78>
					wsect += fs->fsize;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	4413      	add	r3, r2
 80069e2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	7858      	ldrb	r0, [r3, #1]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80069ee:	2301      	movs	r3, #1
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	f7ff fceb 	bl	80063cc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	3b01      	subs	r3, #1
 80069fa:	613b      	str	r3, [r7, #16]
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d8eb      	bhi.n	80069da <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3718      	adds	r7, #24
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d01b      	beq.n	8006a5c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7ff ffad 	bl	8006984 <sync_window>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d113      	bne.n	8006a5c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	7858      	ldrb	r0, [r3, #1]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006a3e:	2301      	movs	r3, #1
 8006a40:	683a      	ldr	r2, [r7, #0]
 8006a42:	f7ff fca3 	bl	800638c <disk_read>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d004      	beq.n	8006a56 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a50:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
	...

08006a68 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff ff87 	bl	8006984 <sync_window>
 8006a76:	4603      	mov	r3, r0
 8006a78:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d159      	bne.n	8006b34 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b03      	cmp	r3, #3
 8006a86:	d149      	bne.n	8006b1c <sync_fs+0xb4>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	791b      	ldrb	r3, [r3, #4]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d145      	bne.n	8006b1c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	899b      	ldrh	r3, [r3, #12]
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	2100      	movs	r1, #0
 8006a9e:	f7ff fd76 	bl	800658e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	333c      	adds	r3, #60	@ 0x3c
 8006aa6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006aaa:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7ff fd05 	bl	80064be <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	333c      	adds	r3, #60	@ 0x3c
 8006ab8:	4921      	ldr	r1, [pc, #132]	@ (8006b40 <sync_fs+0xd8>)
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7ff fd1a 	bl	80064f4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	333c      	adds	r3, #60	@ 0x3c
 8006ac4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006ac8:	491e      	ldr	r1, [pc, #120]	@ (8006b44 <sync_fs+0xdc>)
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7ff fd12 	bl	80064f4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	333c      	adds	r3, #60	@ 0x3c
 8006ad4:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	69db      	ldr	r3, [r3, #28]
 8006adc:	4619      	mov	r1, r3
 8006ade:	4610      	mov	r0, r2
 8006ae0:	f7ff fd08 	bl	80064f4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	333c      	adds	r3, #60	@ 0x3c
 8006ae8:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	4619      	mov	r1, r3
 8006af2:	4610      	mov	r0, r2
 8006af4:	f7ff fcfe 	bl	80064f4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006afc:	1c5a      	adds	r2, r3, #1
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	7858      	ldrb	r0, [r3, #1]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b10:	2301      	movs	r3, #1
 8006b12:	f7ff fc5b 	bl	80063cc <disk_write>
			fs->fsi_flag = 0;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	785b      	ldrb	r3, [r3, #1]
 8006b20:	2200      	movs	r2, #0
 8006b22:	2100      	movs	r1, #0
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7ff fc71 	bl	800640c <disk_ioctl>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d001      	beq.n	8006b34 <sync_fs+0xcc>
 8006b30:	2301      	movs	r3, #1
 8006b32:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	41615252 	.word	0x41615252
 8006b44:	61417272 	.word	0x61417272

08006b48 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	3b02      	subs	r3, #2
 8006b56:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	3b02      	subs	r3, #2
 8006b5e:	683a      	ldr	r2, [r7, #0]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d301      	bcc.n	8006b68 <clust2sect+0x20>
 8006b64:	2300      	movs	r3, #0
 8006b66:	e008      	b.n	8006b7a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	895b      	ldrh	r3, [r3, #10]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	fb03 f202 	mul.w	r2, r3, r2
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b78:	4413      	add	r3, r2
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	370c      	adds	r7, #12
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b086      	sub	sp, #24
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
 8006b8e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d904      	bls.n	8006ba6 <get_fat+0x20>
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	683a      	ldr	r2, [r7, #0]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d302      	bcc.n	8006bac <get_fat+0x26>
		val = 1;	/* Internal error */
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	617b      	str	r3, [r7, #20]
 8006baa:	e0ba      	b.n	8006d22 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006bac:	f04f 33ff 	mov.w	r3, #4294967295
 8006bb0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	2b03      	cmp	r3, #3
 8006bb8:	f000 8082 	beq.w	8006cc0 <get_fat+0x13a>
 8006bbc:	2b03      	cmp	r3, #3
 8006bbe:	f300 80a6 	bgt.w	8006d0e <get_fat+0x188>
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d002      	beq.n	8006bcc <get_fat+0x46>
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d055      	beq.n	8006c76 <get_fat+0xf0>
 8006bca:	e0a0      	b.n	8006d0e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	60fb      	str	r3, [r7, #12]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	085b      	lsrs	r3, r3, #1
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	899b      	ldrh	r3, [r3, #12]
 8006be2:	4619      	mov	r1, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bea:	4413      	add	r3, r2
 8006bec:	4619      	mov	r1, r3
 8006bee:	6938      	ldr	r0, [r7, #16]
 8006bf0:	f7ff ff0c 	bl	8006a0c <move_window>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	f040 808c 	bne.w	8006d14 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	1c5a      	adds	r2, r3, #1
 8006c00:	60fa      	str	r2, [r7, #12]
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	8992      	ldrh	r2, [r2, #12]
 8006c06:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c0a:	fb01 f202 	mul.w	r2, r1, r2
 8006c0e:	1a9b      	subs	r3, r3, r2
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	4413      	add	r3, r2
 8006c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c18:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	899b      	ldrh	r3, [r3, #12]
 8006c22:	4619      	mov	r1, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c2a:	4413      	add	r3, r2
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	6938      	ldr	r0, [r7, #16]
 8006c30:	f7ff feec 	bl	8006a0c <move_window>
 8006c34:	4603      	mov	r3, r0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d16e      	bne.n	8006d18 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	899b      	ldrh	r3, [r3, #12]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c46:	fb01 f202 	mul.w	r2, r1, r2
 8006c4a:	1a9b      	subs	r3, r3, r2
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c54:	021b      	lsls	r3, r3, #8
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d002      	beq.n	8006c6c <get_fat+0xe6>
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	091b      	lsrs	r3, r3, #4
 8006c6a:	e002      	b.n	8006c72 <get_fat+0xec>
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c72:	617b      	str	r3, [r7, #20]
			break;
 8006c74:	e055      	b.n	8006d22 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	899b      	ldrh	r3, [r3, #12]
 8006c7e:	085b      	lsrs	r3, r3, #1
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	4619      	mov	r1, r3
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c8a:	4413      	add	r3, r2
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6938      	ldr	r0, [r7, #16]
 8006c90:	f7ff febc 	bl	8006a0c <move_window>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d140      	bne.n	8006d1c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	005b      	lsls	r3, r3, #1
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	8992      	ldrh	r2, [r2, #12]
 8006ca8:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cac:	fb00 f202 	mul.w	r2, r0, r2
 8006cb0:	1a9b      	subs	r3, r3, r2
 8006cb2:	440b      	add	r3, r1
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f7ff fbc7 	bl	8006448 <ld_word>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	617b      	str	r3, [r7, #20]
			break;
 8006cbe:	e030      	b.n	8006d22 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	899b      	ldrh	r3, [r3, #12]
 8006cc8:	089b      	lsrs	r3, r3, #2
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	4619      	mov	r1, r3
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cd4:	4413      	add	r3, r2
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6938      	ldr	r0, [r7, #16]
 8006cda:	f7ff fe97 	bl	8006a0c <move_window>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d11d      	bne.n	8006d20 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	8992      	ldrh	r2, [r2, #12]
 8006cf2:	fbb3 f0f2 	udiv	r0, r3, r2
 8006cf6:	fb00 f202 	mul.w	r2, r0, r2
 8006cfa:	1a9b      	subs	r3, r3, r2
 8006cfc:	440b      	add	r3, r1
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7ff fbba 	bl	8006478 <ld_dword>
 8006d04:	4603      	mov	r3, r0
 8006d06:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006d0a:	617b      	str	r3, [r7, #20]
			break;
 8006d0c:	e009      	b.n	8006d22 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006d0e:	2301      	movs	r3, #1
 8006d10:	617b      	str	r3, [r7, #20]
 8006d12:	e006      	b.n	8006d22 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d14:	bf00      	nop
 8006d16:	e004      	b.n	8006d22 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006d18:	bf00      	nop
 8006d1a:	e002      	b.n	8006d22 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d1c:	bf00      	nop
 8006d1e:	e000      	b.n	8006d22 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d20:	bf00      	nop
		}
	}

	return val;
 8006d22:	697b      	ldr	r3, [r7, #20]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3718      	adds	r7, #24
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006d2c:	b590      	push	{r4, r7, lr}
 8006d2e:	b089      	sub	sp, #36	@ 0x24
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006d38:	2302      	movs	r3, #2
 8006d3a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	f240 8109 	bls.w	8006f56 <put_fat+0x22a>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	f080 8103 	bcs.w	8006f56 <put_fat+0x22a>
		switch (fs->fs_type) {
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b03      	cmp	r3, #3
 8006d56:	f000 80b6 	beq.w	8006ec6 <put_fat+0x19a>
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	f300 80fb 	bgt.w	8006f56 <put_fat+0x22a>
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d003      	beq.n	8006d6c <put_fat+0x40>
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	f000 8083 	beq.w	8006e70 <put_fat+0x144>
 8006d6a:	e0f4      	b.n	8006f56 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	61bb      	str	r3, [r7, #24]
 8006d70:	69bb      	ldr	r3, [r7, #24]
 8006d72:	085b      	lsrs	r3, r3, #1
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	4413      	add	r3, r2
 8006d78:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	899b      	ldrh	r3, [r3, #12]
 8006d82:	4619      	mov	r1, r3
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d8a:	4413      	add	r3, r2
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f7ff fe3c 	bl	8006a0c <move_window>
 8006d94:	4603      	mov	r3, r0
 8006d96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006d98:	7ffb      	ldrb	r3, [r7, #31]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f040 80d4 	bne.w	8006f48 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	61ba      	str	r2, [r7, #24]
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	8992      	ldrh	r2, [r2, #12]
 8006db0:	fbb3 f0f2 	udiv	r0, r3, r2
 8006db4:	fb00 f202 	mul.w	r2, r0, r2
 8006db8:	1a9b      	subs	r3, r3, r2
 8006dba:	440b      	add	r3, r1
 8006dbc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00d      	beq.n	8006de4 <put_fat+0xb8>
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	b25b      	sxtb	r3, r3
 8006dce:	f003 030f 	and.w	r3, r3, #15
 8006dd2:	b25a      	sxtb	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	011b      	lsls	r3, r3, #4
 8006dda:	b25b      	sxtb	r3, r3
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	b25b      	sxtb	r3, r3
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	e001      	b.n	8006de8 <put_fat+0xbc>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2201      	movs	r2, #1
 8006df0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	899b      	ldrh	r3, [r3, #12]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e02:	4413      	add	r3, r2
 8006e04:	4619      	mov	r1, r3
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f7ff fe00 	bl	8006a0c <move_window>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e10:	7ffb      	ldrb	r3, [r7, #31]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f040 809a 	bne.w	8006f4c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	899b      	ldrh	r3, [r3, #12]
 8006e22:	461a      	mov	r2, r3
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e2a:	fb00 f202 	mul.w	r2, r0, r2
 8006e2e:	1a9b      	subs	r3, r3, r2
 8006e30:	440b      	add	r3, r1
 8006e32:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <put_fat+0x11a>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	091b      	lsrs	r3, r3, #4
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	e00e      	b.n	8006e64 <put_fat+0x138>
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	b25b      	sxtb	r3, r3
 8006e4c:	f023 030f 	bic.w	r3, r3, #15
 8006e50:	b25a      	sxtb	r2, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	0a1b      	lsrs	r3, r3, #8
 8006e56:	b25b      	sxtb	r3, r3
 8006e58:	f003 030f 	and.w	r3, r3, #15
 8006e5c:	b25b      	sxtb	r3, r3
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	b25b      	sxtb	r3, r3
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	70da      	strb	r2, [r3, #3]
			break;
 8006e6e:	e072      	b.n	8006f56 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	899b      	ldrh	r3, [r3, #12]
 8006e78:	085b      	lsrs	r3, r3, #1
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e84:	4413      	add	r3, r2
 8006e86:	4619      	mov	r1, r3
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f7ff fdbf 	bl	8006a0c <move_window>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e92:	7ffb      	ldrb	r3, [r7, #31]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d15b      	bne.n	8006f50 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	005b      	lsls	r3, r3, #1
 8006ea2:	68fa      	ldr	r2, [r7, #12]
 8006ea4:	8992      	ldrh	r2, [r2, #12]
 8006ea6:	fbb3 f0f2 	udiv	r0, r3, r2
 8006eaa:	fb00 f202 	mul.w	r2, r0, r2
 8006eae:	1a9b      	subs	r3, r3, r2
 8006eb0:	440b      	add	r3, r1
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	b292      	uxth	r2, r2
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7ff fb00 	bl	80064be <st_word>
			fs->wflag = 1;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	70da      	strb	r2, [r3, #3]
			break;
 8006ec4:	e047      	b.n	8006f56 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	899b      	ldrh	r3, [r3, #12]
 8006ece:	089b      	lsrs	r3, r3, #2
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8006eda:	4413      	add	r3, r2
 8006edc:	4619      	mov	r1, r3
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f7ff fd94 	bl	8006a0c <move_window>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006ee8:	7ffb      	ldrb	r3, [r7, #31]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d132      	bne.n	8006f54 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	8992      	ldrh	r2, [r2, #12]
 8006f02:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f06:	fb00 f202 	mul.w	r2, r0, r2
 8006f0a:	1a9b      	subs	r3, r3, r2
 8006f0c:	440b      	add	r3, r1
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7ff fab2 	bl	8006478 <ld_dword>
 8006f14:	4603      	mov	r3, r0
 8006f16:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006f1a:	4323      	orrs	r3, r4
 8006f1c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	8992      	ldrh	r2, [r2, #12]
 8006f2c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f30:	fb00 f202 	mul.w	r2, r0, r2
 8006f34:	1a9b      	subs	r3, r3, r2
 8006f36:	440b      	add	r3, r1
 8006f38:	6879      	ldr	r1, [r7, #4]
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7ff fada 	bl	80064f4 <st_dword>
			fs->wflag = 1;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2201      	movs	r2, #1
 8006f44:	70da      	strb	r2, [r3, #3]
			break;
 8006f46:	e006      	b.n	8006f56 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006f48:	bf00      	nop
 8006f4a:	e004      	b.n	8006f56 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006f4c:	bf00      	nop
 8006f4e:	e002      	b.n	8006f56 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006f50:	bf00      	nop
 8006f52:	e000      	b.n	8006f56 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006f54:	bf00      	nop
		}
	}
	return res;
 8006f56:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3724      	adds	r7, #36	@ 0x24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd90      	pop	{r4, r7, pc}

08006f60 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b088      	sub	sp, #32
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d904      	bls.n	8006f86 <remove_chain+0x26>
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d301      	bcc.n	8006f8a <remove_chain+0x2a>
 8006f86:	2302      	movs	r3, #2
 8006f88:	e04b      	b.n	8007022 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00c      	beq.n	8006faa <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006f90:	f04f 32ff 	mov.w	r2, #4294967295
 8006f94:	6879      	ldr	r1, [r7, #4]
 8006f96:	69b8      	ldr	r0, [r7, #24]
 8006f98:	f7ff fec8 	bl	8006d2c <put_fat>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006fa0:	7ffb      	ldrb	r3, [r7, #31]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d001      	beq.n	8006faa <remove_chain+0x4a>
 8006fa6:	7ffb      	ldrb	r3, [r7, #31]
 8006fa8:	e03b      	b.n	8007022 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006faa:	68b9      	ldr	r1, [r7, #8]
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f7ff fdea 	bl	8006b86 <get_fat>
 8006fb2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d031      	beq.n	800701e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d101      	bne.n	8006fc4 <remove_chain+0x64>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e02e      	b.n	8007022 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fca:	d101      	bne.n	8006fd0 <remove_chain+0x70>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e028      	b.n	8007022 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	68b9      	ldr	r1, [r7, #8]
 8006fd4:	69b8      	ldr	r0, [r7, #24]
 8006fd6:	f7ff fea9 	bl	8006d2c <put_fat>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006fde:	7ffb      	ldrb	r3, [r7, #31]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <remove_chain+0x88>
 8006fe4:	7ffb      	ldrb	r3, [r7, #31]
 8006fe6:	e01c      	b.n	8007022 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	69da      	ldr	r2, [r3, #28]
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	6a1b      	ldr	r3, [r3, #32]
 8006ff0:	3b02      	subs	r3, #2
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d20b      	bcs.n	800700e <remove_chain+0xae>
			fs->free_clst++;
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	69db      	ldr	r3, [r3, #28]
 8006ffa:	1c5a      	adds	r2, r3, #1
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	791b      	ldrb	r3, [r3, #4]
 8007004:	f043 0301 	orr.w	r3, r3, #1
 8007008:	b2da      	uxtb	r2, r3
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	429a      	cmp	r2, r3
 800701a:	d3c6      	bcc.n	8006faa <remove_chain+0x4a>
 800701c:	e000      	b.n	8007020 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800701e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3720      	adds	r7, #32
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b088      	sub	sp, #32
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
 8007032:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d10d      	bne.n	800705c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d004      	beq.n	8007056 <create_chain+0x2c>
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	429a      	cmp	r2, r3
 8007054:	d31b      	bcc.n	800708e <create_chain+0x64>
 8007056:	2301      	movs	r3, #1
 8007058:	61bb      	str	r3, [r7, #24]
 800705a:	e018      	b.n	800708e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800705c:	6839      	ldr	r1, [r7, #0]
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7ff fd91 	bl	8006b86 <get_fat>
 8007064:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d801      	bhi.n	8007070 <create_chain+0x46>
 800706c:	2301      	movs	r3, #1
 800706e:	e070      	b.n	8007152 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007076:	d101      	bne.n	800707c <create_chain+0x52>
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	e06a      	b.n	8007152 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	6a1b      	ldr	r3, [r3, #32]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	429a      	cmp	r2, r3
 8007084:	d201      	bcs.n	800708a <create_chain+0x60>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	e063      	b.n	8007152 <create_chain+0x128>
		scl = clst;
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	3301      	adds	r3, #1
 8007096:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	6a1b      	ldr	r3, [r3, #32]
 800709c:	69fa      	ldr	r2, [r7, #28]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d307      	bcc.n	80070b2 <create_chain+0x88>
				ncl = 2;
 80070a2:	2302      	movs	r3, #2
 80070a4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80070a6:	69fa      	ldr	r2, [r7, #28]
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d901      	bls.n	80070b2 <create_chain+0x88>
 80070ae:	2300      	movs	r3, #0
 80070b0:	e04f      	b.n	8007152 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80070b2:	69f9      	ldr	r1, [r7, #28]
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7ff fd66 	bl	8006b86 <get_fat>
 80070ba:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00e      	beq.n	80070e0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d003      	beq.n	80070d0 <create_chain+0xa6>
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ce:	d101      	bne.n	80070d4 <create_chain+0xaa>
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	e03e      	b.n	8007152 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80070d4:	69fa      	ldr	r2, [r7, #28]
 80070d6:	69bb      	ldr	r3, [r7, #24]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d1da      	bne.n	8007092 <create_chain+0x68>
 80070dc:	2300      	movs	r3, #0
 80070de:	e038      	b.n	8007152 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80070e0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80070e2:	f04f 32ff 	mov.w	r2, #4294967295
 80070e6:	69f9      	ldr	r1, [r7, #28]
 80070e8:	6938      	ldr	r0, [r7, #16]
 80070ea:	f7ff fe1f 	bl	8006d2c <put_fat>
 80070ee:	4603      	mov	r3, r0
 80070f0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80070f2:	7dfb      	ldrb	r3, [r7, #23]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d109      	bne.n	800710c <create_chain+0xe2>
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d006      	beq.n	800710c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80070fe:	69fa      	ldr	r2, [r7, #28]
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	6938      	ldr	r0, [r7, #16]
 8007104:	f7ff fe12 	bl	8006d2c <put_fat>
 8007108:	4603      	mov	r3, r0
 800710a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800710c:	7dfb      	ldrb	r3, [r7, #23]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d116      	bne.n	8007140 <create_chain+0x116>
		fs->last_clst = ncl;
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	69fa      	ldr	r2, [r7, #28]
 8007116:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	69da      	ldr	r2, [r3, #28]
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	6a1b      	ldr	r3, [r3, #32]
 8007120:	3b02      	subs	r3, #2
 8007122:	429a      	cmp	r2, r3
 8007124:	d804      	bhi.n	8007130 <create_chain+0x106>
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	1e5a      	subs	r2, r3, #1
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	791b      	ldrb	r3, [r3, #4]
 8007134:	f043 0301 	orr.w	r3, r3, #1
 8007138:	b2da      	uxtb	r2, r3
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	711a      	strb	r2, [r3, #4]
 800713e:	e007      	b.n	8007150 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007140:	7dfb      	ldrb	r3, [r7, #23]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d102      	bne.n	800714c <create_chain+0x122>
 8007146:	f04f 33ff 	mov.w	r3, #4294967295
 800714a:	e000      	b.n	800714e <create_chain+0x124>
 800714c:	2301      	movs	r3, #1
 800714e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007150:	69fb      	ldr	r3, [r7, #28]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3720      	adds	r7, #32
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800715a:	b480      	push	{r7}
 800715c:	b087      	sub	sp, #28
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716e:	3304      	adds	r3, #4
 8007170:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	899b      	ldrh	r3, [r3, #12]
 8007176:	461a      	mov	r2, r3
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	fbb3 f3f2 	udiv	r3, r3, r2
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	8952      	ldrh	r2, [r2, #10]
 8007182:	fbb3 f3f2 	udiv	r3, r3, r2
 8007186:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	1d1a      	adds	r2, r3, #4
 800718c:	613a      	str	r2, [r7, #16]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <clmt_clust+0x42>
 8007198:	2300      	movs	r3, #0
 800719a:	e010      	b.n	80071be <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d307      	bcc.n	80071b4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	617b      	str	r3, [r7, #20]
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	3304      	adds	r3, #4
 80071b0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80071b2:	e7e9      	b.n	8007188 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80071b4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	4413      	add	r3, r2
}
 80071be:	4618      	mov	r0, r3
 80071c0:	371c      	adds	r7, #28
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b086      	sub	sp, #24
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80071e0:	d204      	bcs.n	80071ec <dir_sdi+0x22>
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	f003 031f 	and.w	r3, r3, #31
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <dir_sdi+0x26>
		return FR_INT_ERR;
 80071ec:	2302      	movs	r3, #2
 80071ee:	e071      	b.n	80072d4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d106      	bne.n	8007210 <dir_sdi+0x46>
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	2b02      	cmp	r3, #2
 8007208:	d902      	bls.n	8007210 <dir_sdi+0x46>
		clst = fs->dirbase;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800720e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10c      	bne.n	8007230 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	095b      	lsrs	r3, r3, #5
 800721a:	693a      	ldr	r2, [r7, #16]
 800721c:	8912      	ldrh	r2, [r2, #8]
 800721e:	4293      	cmp	r3, r2
 8007220:	d301      	bcc.n	8007226 <dir_sdi+0x5c>
 8007222:	2302      	movs	r3, #2
 8007224:	e056      	b.n	80072d4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	61da      	str	r2, [r3, #28]
 800722e:	e02d      	b.n	800728c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	895b      	ldrh	r3, [r3, #10]
 8007234:	461a      	mov	r2, r3
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	899b      	ldrh	r3, [r3, #12]
 800723a:	fb02 f303 	mul.w	r3, r2, r3
 800723e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007240:	e019      	b.n	8007276 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6979      	ldr	r1, [r7, #20]
 8007246:	4618      	mov	r0, r3
 8007248:	f7ff fc9d 	bl	8006b86 <get_fat>
 800724c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007254:	d101      	bne.n	800725a <dir_sdi+0x90>
 8007256:	2301      	movs	r3, #1
 8007258:	e03c      	b.n	80072d4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d904      	bls.n	800726a <dir_sdi+0xa0>
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	6a1b      	ldr	r3, [r3, #32]
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	429a      	cmp	r2, r3
 8007268:	d301      	bcc.n	800726e <dir_sdi+0xa4>
 800726a:	2302      	movs	r3, #2
 800726c:	e032      	b.n	80072d4 <dir_sdi+0x10a>
			ofs -= csz;
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007276:	683a      	ldr	r2, [r7, #0]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	429a      	cmp	r2, r3
 800727c:	d2e1      	bcs.n	8007242 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800727e:	6979      	ldr	r1, [r7, #20]
 8007280:	6938      	ldr	r0, [r7, #16]
 8007282:	f7ff fc61 	bl	8006b48 <clust2sect>
 8007286:	4602      	mov	r2, r0
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	697a      	ldr	r2, [r7, #20]
 8007290:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <dir_sdi+0xd4>
 800729a:	2302      	movs	r3, #2
 800729c:	e01a      	b.n	80072d4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	69da      	ldr	r2, [r3, #28]
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	899b      	ldrh	r3, [r3, #12]
 80072a6:	4619      	mov	r1, r3
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80072ae:	441a      	add	r2, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	899b      	ldrh	r3, [r3, #12]
 80072be:	461a      	mov	r2, r3
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80072c6:	fb00 f202 	mul.w	r2, r0, r2
 80072ca:	1a9b      	subs	r3, r3, r2
 80072cc:	18ca      	adds	r2, r1, r3
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80072d2:	2300      	movs	r3, #0
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3718      	adds	r7, #24
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	3320      	adds	r3, #32
 80072f2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d003      	beq.n	8007304 <dir_next+0x28>
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007302:	d301      	bcc.n	8007308 <dir_next+0x2c>
 8007304:	2304      	movs	r3, #4
 8007306:	e0bb      	b.n	8007480 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	899b      	ldrh	r3, [r3, #12]
 800730c:	461a      	mov	r2, r3
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	fbb3 f1f2 	udiv	r1, r3, r2
 8007314:	fb01 f202 	mul.w	r2, r1, r2
 8007318:	1a9b      	subs	r3, r3, r2
 800731a:	2b00      	cmp	r3, #0
 800731c:	f040 809d 	bne.w	800745a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	69db      	ldr	r3, [r3, #28]
 8007324:	1c5a      	adds	r2, r3, #1
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10b      	bne.n	800734a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	095b      	lsrs	r3, r3, #5
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	8912      	ldrh	r2, [r2, #8]
 800733a:	4293      	cmp	r3, r2
 800733c:	f0c0 808d 	bcc.w	800745a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	61da      	str	r2, [r3, #28]
 8007346:	2304      	movs	r3, #4
 8007348:	e09a      	b.n	8007480 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	899b      	ldrh	r3, [r3, #12]
 800734e:	461a      	mov	r2, r3
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	fbb3 f3f2 	udiv	r3, r3, r2
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	8952      	ldrh	r2, [r2, #10]
 800735a:	3a01      	subs	r2, #1
 800735c:	4013      	ands	r3, r2
 800735e:	2b00      	cmp	r3, #0
 8007360:	d17b      	bne.n	800745a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	4619      	mov	r1, r3
 800736a:	4610      	mov	r0, r2
 800736c:	f7ff fc0b 	bl	8006b86 <get_fat>
 8007370:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b01      	cmp	r3, #1
 8007376:	d801      	bhi.n	800737c <dir_next+0xa0>
 8007378:	2302      	movs	r3, #2
 800737a:	e081      	b.n	8007480 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007382:	d101      	bne.n	8007388 <dir_next+0xac>
 8007384:	2301      	movs	r3, #1
 8007386:	e07b      	b.n	8007480 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6a1b      	ldr	r3, [r3, #32]
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	429a      	cmp	r2, r3
 8007390:	d359      	bcc.n	8007446 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d104      	bne.n	80073a2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	61da      	str	r2, [r3, #28]
 800739e:	2304      	movs	r3, #4
 80073a0:	e06e      	b.n	8007480 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	4619      	mov	r1, r3
 80073aa:	4610      	mov	r0, r2
 80073ac:	f7ff fe3d 	bl	800702a <create_chain>
 80073b0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d101      	bne.n	80073bc <dir_next+0xe0>
 80073b8:	2307      	movs	r3, #7
 80073ba:	e061      	b.n	8007480 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d101      	bne.n	80073c6 <dir_next+0xea>
 80073c2:	2302      	movs	r3, #2
 80073c4:	e05c      	b.n	8007480 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073cc:	d101      	bne.n	80073d2 <dir_next+0xf6>
 80073ce:	2301      	movs	r3, #1
 80073d0:	e056      	b.n	8007480 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f7ff fad6 	bl	8006984 <sync_window>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <dir_next+0x106>
 80073de:	2301      	movs	r3, #1
 80073e0:	e04e      	b.n	8007480 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	899b      	ldrh	r3, [r3, #12]
 80073ec:	461a      	mov	r2, r3
 80073ee:	2100      	movs	r1, #0
 80073f0:	f7ff f8cd 	bl	800658e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80073f4:	2300      	movs	r3, #0
 80073f6:	613b      	str	r3, [r7, #16]
 80073f8:	6979      	ldr	r1, [r7, #20]
 80073fa:	68f8      	ldr	r0, [r7, #12]
 80073fc:	f7ff fba4 	bl	8006b48 <clust2sect>
 8007400:	4602      	mov	r2, r0
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	639a      	str	r2, [r3, #56]	@ 0x38
 8007406:	e012      	b.n	800742e <dir_next+0x152>
						fs->wflag = 1;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2201      	movs	r2, #1
 800740c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f7ff fab8 	bl	8006984 <sync_window>
 8007414:	4603      	mov	r3, r0
 8007416:	2b00      	cmp	r3, #0
 8007418:	d001      	beq.n	800741e <dir_next+0x142>
 800741a:	2301      	movs	r3, #1
 800741c:	e030      	b.n	8007480 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	3301      	adds	r3, #1
 8007422:	613b      	str	r3, [r7, #16]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	639a      	str	r2, [r3, #56]	@ 0x38
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	895b      	ldrh	r3, [r3, #10]
 8007432:	461a      	mov	r2, r3
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	4293      	cmp	r3, r2
 8007438:	d3e6      	bcc.n	8007408 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	1ad2      	subs	r2, r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800744c:	6979      	ldr	r1, [r7, #20]
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f7ff fb7a 	bl	8006b48 <clust2sect>
 8007454:	4602      	mov	r2, r0
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	899b      	ldrh	r3, [r3, #12]
 800746a:	461a      	mov	r2, r3
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007472:	fb00 f202 	mul.w	r2, r0, r2
 8007476:	1a9b      	subs	r3, r3, r2
 8007478:	18ca      	adds	r2, r1, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	3718      	adds	r7, #24
 8007484:	46bd      	mov	sp, r7
 8007486:	bd80      	pop	{r7, pc}

08007488 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007498:	2100      	movs	r1, #0
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7ff fe95 	bl	80071ca <dir_sdi>
 80074a0:	4603      	mov	r3, r0
 80074a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80074a4:	7dfb      	ldrb	r3, [r7, #23]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d12b      	bne.n	8007502 <dir_alloc+0x7a>
		n = 0;
 80074aa:	2300      	movs	r3, #0
 80074ac:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	4619      	mov	r1, r3
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f7ff faa9 	bl	8006a0c <move_window>
 80074ba:	4603      	mov	r3, r0
 80074bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80074be:	7dfb      	ldrb	r3, [r7, #23]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d11d      	bne.n	8007500 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a1b      	ldr	r3, [r3, #32]
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	2be5      	cmp	r3, #229	@ 0xe5
 80074cc:	d004      	beq.n	80074d8 <dir_alloc+0x50>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	781b      	ldrb	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d107      	bne.n	80074e8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	3301      	adds	r3, #1
 80074dc:	613b      	str	r3, [r7, #16]
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d102      	bne.n	80074ec <dir_alloc+0x64>
 80074e6:	e00c      	b.n	8007502 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80074e8:	2300      	movs	r3, #0
 80074ea:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80074ec:	2101      	movs	r1, #1
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7ff fef4 	bl	80072dc <dir_next>
 80074f4:	4603      	mov	r3, r0
 80074f6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80074f8:	7dfb      	ldrb	r3, [r7, #23]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0d7      	beq.n	80074ae <dir_alloc+0x26>
 80074fe:	e000      	b.n	8007502 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007500:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007502:	7dfb      	ldrb	r3, [r7, #23]
 8007504:	2b04      	cmp	r3, #4
 8007506:	d101      	bne.n	800750c <dir_alloc+0x84>
 8007508:	2307      	movs	r3, #7
 800750a:	75fb      	strb	r3, [r7, #23]
	return res;
 800750c:	7dfb      	ldrb	r3, [r7, #23]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3718      	adds	r7, #24
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b084      	sub	sp, #16
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
 800751e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	331a      	adds	r3, #26
 8007524:	4618      	mov	r0, r3
 8007526:	f7fe ff8f 	bl	8006448 <ld_word>
 800752a:	4603      	mov	r3, r0
 800752c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	2b03      	cmp	r3, #3
 8007534:	d109      	bne.n	800754a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	3314      	adds	r3, #20
 800753a:	4618      	mov	r0, r3
 800753c:	f7fe ff84 	bl	8006448 <ld_word>
 8007540:	4603      	mov	r3, r0
 8007542:	041b      	lsls	r3, r3, #16
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	4313      	orrs	r3, r2
 8007548:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800754a:	68fb      	ldr	r3, [r7, #12]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	331a      	adds	r3, #26
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	b292      	uxth	r2, r2
 8007568:	4611      	mov	r1, r2
 800756a:	4618      	mov	r0, r3
 800756c:	f7fe ffa7 	bl	80064be <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	2b03      	cmp	r3, #3
 8007576:	d109      	bne.n	800758c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	f103 0214 	add.w	r2, r3, #20
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	0c1b      	lsrs	r3, r3, #16
 8007582:	b29b      	uxth	r3, r3
 8007584:	4619      	mov	r1, r3
 8007586:	4610      	mov	r0, r2
 8007588:	f7fe ff99 	bl	80064be <st_word>
	}
}
 800758c:	bf00      	nop
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007594:	b590      	push	{r4, r7, lr}
 8007596:	b087      	sub	sp, #28
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	331a      	adds	r3, #26
 80075a2:	4618      	mov	r0, r3
 80075a4:	f7fe ff50 	bl	8006448 <ld_word>
 80075a8:	4603      	mov	r3, r0
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <cmp_lfn+0x1e>
 80075ae:	2300      	movs	r3, #0
 80075b0:	e059      	b.n	8007666 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80075ba:	1e5a      	subs	r2, r3, #1
 80075bc:	4613      	mov	r3, r2
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	4413      	add	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	4413      	add	r3, r2
 80075c6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80075c8:	2301      	movs	r3, #1
 80075ca:	81fb      	strh	r3, [r7, #14]
 80075cc:	2300      	movs	r3, #0
 80075ce:	613b      	str	r3, [r7, #16]
 80075d0:	e033      	b.n	800763a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80075d2:	4a27      	ldr	r2, [pc, #156]	@ (8007670 <cmp_lfn+0xdc>)
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	4413      	add	r3, r2
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	4413      	add	r3, r2
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7fe ff31 	bl	8006448 <ld_word>
 80075e6:	4603      	mov	r3, r0
 80075e8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80075ea:	89fb      	ldrh	r3, [r7, #14]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d01a      	beq.n	8007626 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	2bfe      	cmp	r3, #254	@ 0xfe
 80075f4:	d812      	bhi.n	800761c <cmp_lfn+0x88>
 80075f6:	89bb      	ldrh	r3, [r7, #12]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f002 fd87 	bl	800a10c <ff_wtoupper>
 80075fe:	4603      	mov	r3, r0
 8007600:	461c      	mov	r4, r3
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	1c5a      	adds	r2, r3, #1
 8007606:	617a      	str	r2, [r7, #20]
 8007608:	005b      	lsls	r3, r3, #1
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	4413      	add	r3, r2
 800760e:	881b      	ldrh	r3, [r3, #0]
 8007610:	4618      	mov	r0, r3
 8007612:	f002 fd7b 	bl	800a10c <ff_wtoupper>
 8007616:	4603      	mov	r3, r0
 8007618:	429c      	cmp	r4, r3
 800761a:	d001      	beq.n	8007620 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800761c:	2300      	movs	r3, #0
 800761e:	e022      	b.n	8007666 <cmp_lfn+0xd2>
			}
			wc = uc;
 8007620:	89bb      	ldrh	r3, [r7, #12]
 8007622:	81fb      	strh	r3, [r7, #14]
 8007624:	e006      	b.n	8007634 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007626:	89bb      	ldrh	r3, [r7, #12]
 8007628:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800762c:	4293      	cmp	r3, r2
 800762e:	d001      	beq.n	8007634 <cmp_lfn+0xa0>
 8007630:	2300      	movs	r3, #0
 8007632:	e018      	b.n	8007666 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	3301      	adds	r3, #1
 8007638:	613b      	str	r3, [r7, #16]
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	2b0c      	cmp	r3, #12
 800763e:	d9c8      	bls.n	80075d2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00b      	beq.n	8007664 <cmp_lfn+0xd0>
 800764c:	89fb      	ldrh	r3, [r7, #14]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d008      	beq.n	8007664 <cmp_lfn+0xd0>
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	4413      	add	r3, r2
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <cmp_lfn+0xd0>
 8007660:	2300      	movs	r3, #0
 8007662:	e000      	b.n	8007666 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007664:	2301      	movs	r3, #1
}
 8007666:	4618      	mov	r0, r3
 8007668:	371c      	adds	r7, #28
 800766a:	46bd      	mov	sp, r7
 800766c:	bd90      	pop	{r4, r7, pc}
 800766e:	bf00      	nop
 8007670:	0801164c 	.word	0x0801164c

08007674 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b086      	sub	sp, #24
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	331a      	adds	r3, #26
 8007682:	4618      	mov	r0, r3
 8007684:	f7fe fee0 	bl	8006448 <ld_word>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <pick_lfn+0x1e>
 800768e:	2300      	movs	r3, #0
 8007690:	e04d      	b.n	800772e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800769a:	1e5a      	subs	r2, r3, #1
 800769c:	4613      	mov	r3, r2
 800769e:	005b      	lsls	r3, r3, #1
 80076a0:	4413      	add	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80076a8:	2301      	movs	r3, #1
 80076aa:	81fb      	strh	r3, [r7, #14]
 80076ac:	2300      	movs	r3, #0
 80076ae:	613b      	str	r3, [r7, #16]
 80076b0:	e028      	b.n	8007704 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80076b2:	4a21      	ldr	r2, [pc, #132]	@ (8007738 <pick_lfn+0xc4>)
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	4413      	add	r3, r2
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	461a      	mov	r2, r3
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	4413      	add	r3, r2
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7fe fec1 	bl	8006448 <ld_word>
 80076c6:	4603      	mov	r3, r0
 80076c8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80076ca:	89fb      	ldrh	r3, [r7, #14]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00f      	beq.n	80076f0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	2bfe      	cmp	r3, #254	@ 0xfe
 80076d4:	d901      	bls.n	80076da <pick_lfn+0x66>
 80076d6:	2300      	movs	r3, #0
 80076d8:	e029      	b.n	800772e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80076da:	89bb      	ldrh	r3, [r7, #12]
 80076dc:	81fb      	strh	r3, [r7, #14]
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	1c5a      	adds	r2, r3, #1
 80076e2:	617a      	str	r2, [r7, #20]
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	4413      	add	r3, r2
 80076ea:	89fa      	ldrh	r2, [r7, #14]
 80076ec:	801a      	strh	r2, [r3, #0]
 80076ee:	e006      	b.n	80076fe <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80076f0:	89bb      	ldrh	r3, [r7, #12]
 80076f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d001      	beq.n	80076fe <pick_lfn+0x8a>
 80076fa:	2300      	movs	r3, #0
 80076fc:	e017      	b.n	800772e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	3301      	adds	r3, #1
 8007702:	613b      	str	r3, [r7, #16]
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	2b0c      	cmp	r3, #12
 8007708:	d9d3      	bls.n	80076b2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00a      	beq.n	800772c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	2bfe      	cmp	r3, #254	@ 0xfe
 800771a:	d901      	bls.n	8007720 <pick_lfn+0xac>
 800771c:	2300      	movs	r3, #0
 800771e:	e006      	b.n	800772e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	005b      	lsls	r3, r3, #1
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	4413      	add	r3, r2
 8007728:	2200      	movs	r2, #0
 800772a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800772c:	2301      	movs	r3, #1
}
 800772e:	4618      	mov	r0, r3
 8007730:	3718      	adds	r7, #24
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	0801164c 	.word	0x0801164c

0800773c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b088      	sub	sp, #32
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	4611      	mov	r1, r2
 8007748:	461a      	mov	r2, r3
 800774a:	460b      	mov	r3, r1
 800774c:	71fb      	strb	r3, [r7, #7]
 800774e:	4613      	mov	r3, r2
 8007750:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	330d      	adds	r3, #13
 8007756:	79ba      	ldrb	r2, [r7, #6]
 8007758:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	330b      	adds	r3, #11
 800775e:	220f      	movs	r2, #15
 8007760:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	330c      	adds	r3, #12
 8007766:	2200      	movs	r2, #0
 8007768:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	331a      	adds	r3, #26
 800776e:	2100      	movs	r1, #0
 8007770:	4618      	mov	r0, r3
 8007772:	f7fe fea4 	bl	80064be <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8007776:	79fb      	ldrb	r3, [r7, #7]
 8007778:	1e5a      	subs	r2, r3, #1
 800777a:	4613      	mov	r3, r2
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	4413      	add	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4413      	add	r3, r2
 8007784:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007786:	2300      	movs	r3, #0
 8007788:	82fb      	strh	r3, [r7, #22]
 800778a:	2300      	movs	r3, #0
 800778c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800778e:	8afb      	ldrh	r3, [r7, #22]
 8007790:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007794:	4293      	cmp	r3, r2
 8007796:	d007      	beq.n	80077a8 <put_lfn+0x6c>
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	1c5a      	adds	r2, r3, #1
 800779c:	61fa      	str	r2, [r7, #28]
 800779e:	005b      	lsls	r3, r3, #1
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	4413      	add	r3, r2
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80077a8:	4a17      	ldr	r2, [pc, #92]	@ (8007808 <put_lfn+0xcc>)
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	4413      	add	r3, r2
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	461a      	mov	r2, r3
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	4413      	add	r3, r2
 80077b6:	8afa      	ldrh	r2, [r7, #22]
 80077b8:	4611      	mov	r1, r2
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fe fe7f 	bl	80064be <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80077c0:	8afb      	ldrh	r3, [r7, #22]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d102      	bne.n	80077cc <put_lfn+0x90>
 80077c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80077ca:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	3301      	adds	r3, #1
 80077d0:	61bb      	str	r3, [r7, #24]
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	2b0c      	cmp	r3, #12
 80077d6:	d9da      	bls.n	800778e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80077d8:	8afb      	ldrh	r3, [r7, #22]
 80077da:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80077de:	4293      	cmp	r3, r2
 80077e0:	d006      	beq.n	80077f0 <put_lfn+0xb4>
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	4413      	add	r3, r2
 80077ea:	881b      	ldrh	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d103      	bne.n	80077f8 <put_lfn+0xbc>
 80077f0:	79fb      	ldrb	r3, [r7, #7]
 80077f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077f6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	79fa      	ldrb	r2, [r7, #7]
 80077fc:	701a      	strb	r2, [r3, #0]
}
 80077fe:	bf00      	nop
 8007800:	3720      	adds	r7, #32
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	0801164c 	.word	0x0801164c

0800780c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08c      	sub	sp, #48	@ 0x30
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	607a      	str	r2, [r7, #4]
 8007818:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800781a:	220b      	movs	r2, #11
 800781c:	68b9      	ldr	r1, [r7, #8]
 800781e:	68f8      	ldr	r0, [r7, #12]
 8007820:	f7fe fe94 	bl	800654c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2b05      	cmp	r3, #5
 8007828:	d92b      	bls.n	8007882 <gen_numname+0x76>
		sr = seq;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800782e:	e022      	b.n	8007876 <gen_numname+0x6a>
			wc = *lfn++;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	1c9a      	adds	r2, r3, #2
 8007834:	607a      	str	r2, [r7, #4]
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800783a:	2300      	movs	r3, #0
 800783c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800783e:	e017      	b.n	8007870 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007840:	69fb      	ldr	r3, [r7, #28]
 8007842:	005a      	lsls	r2, r3, #1
 8007844:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007846:	f003 0301 	and.w	r3, r3, #1
 800784a:	4413      	add	r3, r2
 800784c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800784e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007850:	085b      	lsrs	r3, r3, #1
 8007852:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800785a:	2b00      	cmp	r3, #0
 800785c:	d005      	beq.n	800786a <gen_numname+0x5e>
 800785e:	69fb      	ldr	r3, [r7, #28]
 8007860:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8007864:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8007868:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800786a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786c:	3301      	adds	r3, #1
 800786e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007872:	2b0f      	cmp	r3, #15
 8007874:	d9e4      	bls.n	8007840 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1d8      	bne.n	8007830 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007882:	2307      	movs	r3, #7
 8007884:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	b2db      	uxtb	r3, r3
 800788a:	f003 030f 	and.w	r3, r3, #15
 800788e:	b2db      	uxtb	r3, r3
 8007890:	3330      	adds	r3, #48	@ 0x30
 8007892:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8007896:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800789a:	2b39      	cmp	r3, #57	@ 0x39
 800789c:	d904      	bls.n	80078a8 <gen_numname+0x9c>
 800789e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80078a2:	3307      	adds	r3, #7
 80078a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80078a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078aa:	1e5a      	subs	r2, r3, #1
 80078ac:	62ba      	str	r2, [r7, #40]	@ 0x28
 80078ae:	3330      	adds	r3, #48	@ 0x30
 80078b0:	443b      	add	r3, r7
 80078b2:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80078b6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	091b      	lsrs	r3, r3, #4
 80078be:	603b      	str	r3, [r7, #0]
	} while (seq);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1df      	bne.n	8007886 <gen_numname+0x7a>
	ns[i] = '~';
 80078c6:	f107 0214 	add.w	r2, r7, #20
 80078ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078cc:	4413      	add	r3, r2
 80078ce:	227e      	movs	r2, #126	@ 0x7e
 80078d0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80078d2:	2300      	movs	r3, #0
 80078d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80078d6:	e002      	b.n	80078de <gen_numname+0xd2>
 80078d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078da:	3301      	adds	r3, #1
 80078dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80078de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d205      	bcs.n	80078f2 <gen_numname+0xe6>
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ea:	4413      	add	r3, r2
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	2b20      	cmp	r3, #32
 80078f0:	d1f2      	bne.n	80078d8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80078f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f4:	2b07      	cmp	r3, #7
 80078f6:	d807      	bhi.n	8007908 <gen_numname+0xfc>
 80078f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078fa:	1c5a      	adds	r2, r3, #1
 80078fc:	62ba      	str	r2, [r7, #40]	@ 0x28
 80078fe:	3330      	adds	r3, #48	@ 0x30
 8007900:	443b      	add	r3, r7
 8007902:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007906:	e000      	b.n	800790a <gen_numname+0xfe>
 8007908:	2120      	movs	r1, #32
 800790a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790c:	1c5a      	adds	r2, r3, #1
 800790e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	4413      	add	r3, r2
 8007914:	460a      	mov	r2, r1
 8007916:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791a:	2b07      	cmp	r3, #7
 800791c:	d9e9      	bls.n	80078f2 <gen_numname+0xe6>
}
 800791e:	bf00      	nop
 8007920:	bf00      	nop
 8007922:	3730      	adds	r7, #48	@ 0x30
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007930:	2300      	movs	r3, #0
 8007932:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007934:	230b      	movs	r3, #11
 8007936:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007938:	7bfb      	ldrb	r3, [r7, #15]
 800793a:	b2da      	uxtb	r2, r3
 800793c:	0852      	lsrs	r2, r2, #1
 800793e:	01db      	lsls	r3, r3, #7
 8007940:	4313      	orrs	r3, r2
 8007942:	b2da      	uxtb	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	1c59      	adds	r1, r3, #1
 8007948:	6079      	str	r1, [r7, #4]
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	4413      	add	r3, r2
 800794e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	3b01      	subs	r3, #1
 8007954:	60bb      	str	r3, [r7, #8]
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d1ed      	bne.n	8007938 <sum_sfn+0x10>
	return sum;
 800795c:	7bfb      	ldrb	r3, [r7, #15]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr

0800796a <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b086      	sub	sp, #24
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007974:	2304      	movs	r3, #4
 8007976:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800797e:	23ff      	movs	r3, #255	@ 0xff
 8007980:	757b      	strb	r3, [r7, #21]
 8007982:	23ff      	movs	r3, #255	@ 0xff
 8007984:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8007986:	e081      	b.n	8007a8c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	69db      	ldr	r3, [r3, #28]
 800798c:	4619      	mov	r1, r3
 800798e:	6938      	ldr	r0, [r7, #16]
 8007990:	f7ff f83c 	bl	8006a0c <move_window>
 8007994:	4603      	mov	r3, r0
 8007996:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007998:	7dfb      	ldrb	r3, [r7, #23]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d17c      	bne.n	8007a98 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80079a6:	7dbb      	ldrb	r3, [r7, #22]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d102      	bne.n	80079b2 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80079ac:	2304      	movs	r3, #4
 80079ae:	75fb      	strb	r3, [r7, #23]
 80079b0:	e077      	b.n	8007aa2 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6a1b      	ldr	r3, [r3, #32]
 80079b6:	330b      	adds	r3, #11
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079be:	73fb      	strb	r3, [r7, #15]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	7bfa      	ldrb	r2, [r7, #15]
 80079c4:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80079c6:	7dbb      	ldrb	r3, [r7, #22]
 80079c8:	2be5      	cmp	r3, #229	@ 0xe5
 80079ca:	d00e      	beq.n	80079ea <dir_read+0x80>
 80079cc:	7dbb      	ldrb	r3, [r7, #22]
 80079ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80079d0:	d00b      	beq.n	80079ea <dir_read+0x80>
 80079d2:	7bfb      	ldrb	r3, [r7, #15]
 80079d4:	f023 0320 	bic.w	r3, r3, #32
 80079d8:	2b08      	cmp	r3, #8
 80079da:	bf0c      	ite	eq
 80079dc:	2301      	moveq	r3, #1
 80079de:	2300      	movne	r3, #0
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	461a      	mov	r2, r3
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d002      	beq.n	80079f0 <dir_read+0x86>
				ord = 0xFF;
 80079ea:	23ff      	movs	r3, #255	@ 0xff
 80079ec:	757b      	strb	r3, [r7, #21]
 80079ee:	e044      	b.n	8007a7a <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80079f0:	7bfb      	ldrb	r3, [r7, #15]
 80079f2:	2b0f      	cmp	r3, #15
 80079f4:	d12f      	bne.n	8007a56 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80079f6:	7dbb      	ldrb	r3, [r7, #22]
 80079f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00d      	beq.n	8007a1c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6a1b      	ldr	r3, [r3, #32]
 8007a04:	7b5b      	ldrb	r3, [r3, #13]
 8007a06:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8007a08:	7dbb      	ldrb	r3, [r7, #22]
 8007a0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a0e:	75bb      	strb	r3, [r7, #22]
 8007a10:	7dbb      	ldrb	r3, [r7, #22]
 8007a12:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	695a      	ldr	r2, [r3, #20]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007a1c:	7dba      	ldrb	r2, [r7, #22]
 8007a1e:	7d7b      	ldrb	r3, [r7, #21]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d115      	bne.n	8007a50 <dir_read+0xe6>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a1b      	ldr	r3, [r3, #32]
 8007a28:	330d      	adds	r3, #13
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	7d3a      	ldrb	r2, [r7, #20]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d10e      	bne.n	8007a50 <dir_read+0xe6>
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	691a      	ldr	r2, [r3, #16]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a1b      	ldr	r3, [r3, #32]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	f7ff fe19 	bl	8007674 <pick_lfn>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d003      	beq.n	8007a50 <dir_read+0xe6>
 8007a48:	7d7b      	ldrb	r3, [r7, #21]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	e000      	b.n	8007a52 <dir_read+0xe8>
 8007a50:	23ff      	movs	r3, #255	@ 0xff
 8007a52:	757b      	strb	r3, [r7, #21]
 8007a54:	e011      	b.n	8007a7a <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8007a56:	7d7b      	ldrb	r3, [r7, #21]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d109      	bne.n	8007a70 <dir_read+0x106>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a1b      	ldr	r3, [r3, #32]
 8007a60:	4618      	mov	r0, r3
 8007a62:	f7ff ff61 	bl	8007928 <sum_sfn>
 8007a66:	4603      	mov	r3, r0
 8007a68:	461a      	mov	r2, r3
 8007a6a:	7d3b      	ldrb	r3, [r7, #20]
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d015      	beq.n	8007a9c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f04f 32ff 	mov.w	r2, #4294967295
 8007a76:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					break;
 8007a78:	e010      	b.n	8007a9c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f7ff fc2d 	bl	80072dc <dir_next>
 8007a82:	4603      	mov	r3, r0
 8007a84:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007a86:	7dfb      	ldrb	r3, [r7, #23]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d109      	bne.n	8007aa0 <dir_read+0x136>
	while (dp->sect) {
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	69db      	ldr	r3, [r3, #28]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f47f af79 	bne.w	8007988 <dir_read+0x1e>
 8007a96:	e004      	b.n	8007aa2 <dir_read+0x138>
		if (res != FR_OK) break;
 8007a98:	bf00      	nop
 8007a9a:	e002      	b.n	8007aa2 <dir_read+0x138>
					break;
 8007a9c:	bf00      	nop
 8007a9e:	e000      	b.n	8007aa2 <dir_read+0x138>
		if (res != FR_OK) break;
 8007aa0:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007aa2:	7dfb      	ldrb	r3, [r7, #23]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d002      	beq.n	8007aae <dir_read+0x144>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	61da      	str	r2, [r3, #28]
	return res;
 8007aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3718      	adds	r7, #24
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f7ff fb7e 	bl	80071ca <dir_sdi>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007ad2:	7dfb      	ldrb	r3, [r7, #23]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d001      	beq.n	8007adc <dir_find+0x24>
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
 8007ada:	e0a9      	b.n	8007c30 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007adc:	23ff      	movs	r3, #255	@ 0xff
 8007ade:	753b      	strb	r3, [r7, #20]
 8007ae0:	7d3b      	ldrb	r3, [r7, #20]
 8007ae2:	757b      	strb	r3, [r7, #21]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aea:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	69db      	ldr	r3, [r3, #28]
 8007af0:	4619      	mov	r1, r3
 8007af2:	6938      	ldr	r0, [r7, #16]
 8007af4:	f7fe ff8a 	bl	8006a0c <move_window>
 8007af8:	4603      	mov	r3, r0
 8007afa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007afc:	7dfb      	ldrb	r3, [r7, #23]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f040 8090 	bne.w	8007c24 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a1b      	ldr	r3, [r3, #32]
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007b0c:	7dbb      	ldrb	r3, [r7, #22]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d102      	bne.n	8007b18 <dir_find+0x60>
 8007b12:	2304      	movs	r3, #4
 8007b14:	75fb      	strb	r3, [r7, #23]
 8007b16:	e08a      	b.n	8007c2e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a1b      	ldr	r3, [r3, #32]
 8007b1c:	330b      	adds	r3, #11
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b24:	73fb      	strb	r3, [r7, #15]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	7bfa      	ldrb	r2, [r7, #15]
 8007b2a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007b2c:	7dbb      	ldrb	r3, [r7, #22]
 8007b2e:	2be5      	cmp	r3, #229	@ 0xe5
 8007b30:	d007      	beq.n	8007b42 <dir_find+0x8a>
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
 8007b34:	f003 0308 	and.w	r3, r3, #8
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d009      	beq.n	8007b50 <dir_find+0x98>
 8007b3c:	7bfb      	ldrb	r3, [r7, #15]
 8007b3e:	2b0f      	cmp	r3, #15
 8007b40:	d006      	beq.n	8007b50 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007b42:	23ff      	movs	r3, #255	@ 0xff
 8007b44:	757b      	strb	r3, [r7, #21]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f04f 32ff 	mov.w	r2, #4294967295
 8007b4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007b4e:	e05e      	b.n	8007c0e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007b50:	7bfb      	ldrb	r3, [r7, #15]
 8007b52:	2b0f      	cmp	r3, #15
 8007b54:	d136      	bne.n	8007bc4 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007b5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d154      	bne.n	8007c0e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007b64:	7dbb      	ldrb	r3, [r7, #22]
 8007b66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00d      	beq.n	8007b8a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6a1b      	ldr	r3, [r3, #32]
 8007b72:	7b5b      	ldrb	r3, [r3, #13]
 8007b74:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007b76:	7dbb      	ldrb	r3, [r7, #22]
 8007b78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b7c:	75bb      	strb	r3, [r7, #22]
 8007b7e:	7dbb      	ldrb	r3, [r7, #22]
 8007b80:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	695a      	ldr	r2, [r3, #20]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007b8a:	7dba      	ldrb	r2, [r7, #22]
 8007b8c:	7d7b      	ldrb	r3, [r7, #21]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d115      	bne.n	8007bbe <dir_find+0x106>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	330d      	adds	r3, #13
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	7d3a      	ldrb	r2, [r7, #20]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d10e      	bne.n	8007bbe <dir_find+0x106>
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	691a      	ldr	r2, [r3, #16]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a1b      	ldr	r3, [r3, #32]
 8007ba8:	4619      	mov	r1, r3
 8007baa:	4610      	mov	r0, r2
 8007bac:	f7ff fcf2 	bl	8007594 <cmp_lfn>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <dir_find+0x106>
 8007bb6:	7d7b      	ldrb	r3, [r7, #21]
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	e000      	b.n	8007bc0 <dir_find+0x108>
 8007bbe:	23ff      	movs	r3, #255	@ 0xff
 8007bc0:	757b      	strb	r3, [r7, #21]
 8007bc2:	e024      	b.n	8007c0e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007bc4:	7d7b      	ldrb	r3, [r7, #21]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d109      	bne.n	8007bde <dir_find+0x126>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a1b      	ldr	r3, [r3, #32]
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7ff feaa 	bl	8007928 <sum_sfn>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	7d3b      	ldrb	r3, [r7, #20]
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d024      	beq.n	8007c28 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007be4:	f003 0301 	and.w	r3, r3, #1
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d10a      	bne.n	8007c02 <dir_find+0x14a>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6a18      	ldr	r0, [r3, #32]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	3324      	adds	r3, #36	@ 0x24
 8007bf4:	220b      	movs	r2, #11
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	f7fe fce4 	bl	80065c4 <mem_cmp>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d014      	beq.n	8007c2c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007c02:	23ff      	movs	r3, #255	@ 0xff
 8007c04:	757b      	strb	r3, [r7, #21]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f04f 32ff 	mov.w	r2, #4294967295
 8007c0c:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007c0e:	2100      	movs	r1, #0
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f7ff fb63 	bl	80072dc <dir_next>
 8007c16:	4603      	mov	r3, r0
 8007c18:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f43f af65 	beq.w	8007aec <dir_find+0x34>
 8007c22:	e004      	b.n	8007c2e <dir_find+0x176>
		if (res != FR_OK) break;
 8007c24:	bf00      	nop
 8007c26:	e002      	b.n	8007c2e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007c28:	bf00      	nop
 8007c2a:	e000      	b.n	8007c2e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007c2c:	bf00      	nop

	return res;
 8007c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3718      	adds	r7, #24
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08c      	sub	sp, #48	@ 0x30
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007c4c:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d001      	beq.n	8007c58 <dir_register+0x20>
 8007c54:	2306      	movs	r3, #6
 8007c56:	e0e0      	b.n	8007e1a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007c58:	2300      	movs	r3, #0
 8007c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c5c:	e002      	b.n	8007c64 <dir_register+0x2c>
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c60:	3301      	adds	r3, #1
 8007c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	691a      	ldr	r2, [r3, #16]
 8007c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	4413      	add	r3, r2
 8007c6e:	881b      	ldrh	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1f4      	bne.n	8007c5e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8007c7a:	f107 030c 	add.w	r3, r7, #12
 8007c7e:	220c      	movs	r2, #12
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fe fc63 	bl	800654c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007c86:	7dfb      	ldrb	r3, [r7, #23]
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d032      	beq.n	8007cf6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2240      	movs	r2, #64	@ 0x40
 8007c94:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8007c98:	2301      	movs	r3, #1
 8007c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c9c:	e016      	b.n	8007ccc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	691a      	ldr	r2, [r3, #16]
 8007ca8:	f107 010c 	add.w	r1, r7, #12
 8007cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cae:	f7ff fdad 	bl	800780c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7ff ff00 	bl	8007ab8 <dir_find>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8007cbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d106      	bne.n	8007cd4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc8:	3301      	adds	r3, #1
 8007cca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cce:	2b63      	cmp	r3, #99	@ 0x63
 8007cd0:	d9e5      	bls.n	8007c9e <dir_register+0x66>
 8007cd2:	e000      	b.n	8007cd6 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007cd4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd8:	2b64      	cmp	r3, #100	@ 0x64
 8007cda:	d101      	bne.n	8007ce0 <dir_register+0xa8>
 8007cdc:	2307      	movs	r3, #7
 8007cde:	e09c      	b.n	8007e1a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007ce0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007ce4:	2b04      	cmp	r3, #4
 8007ce6:	d002      	beq.n	8007cee <dir_register+0xb6>
 8007ce8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007cec:	e095      	b.n	8007e1a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007cee:	7dfa      	ldrb	r2, [r7, #23]
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007cf6:	7dfb      	ldrb	r3, [r7, #23]
 8007cf8:	f003 0302 	and.w	r3, r3, #2
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d007      	beq.n	8007d10 <dir_register+0xd8>
 8007d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d02:	330c      	adds	r3, #12
 8007d04:	4a47      	ldr	r2, [pc, #284]	@ (8007e24 <dir_register+0x1ec>)
 8007d06:	fba2 2303 	umull	r2, r3, r2, r3
 8007d0a:	089b      	lsrs	r3, r3, #2
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	e000      	b.n	8007d12 <dir_register+0xda>
 8007d10:	2301      	movs	r3, #1
 8007d12:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007d14:	6a39      	ldr	r1, [r7, #32]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f7ff fbb6 	bl	8007488 <dir_alloc>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007d22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d148      	bne.n	8007dbc <dir_register+0x184>
 8007d2a:	6a3b      	ldr	r3, [r7, #32]
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	623b      	str	r3, [r7, #32]
 8007d30:	6a3b      	ldr	r3, [r7, #32]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d042      	beq.n	8007dbc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	695a      	ldr	r2, [r3, #20]
 8007d3a:	6a3b      	ldr	r3, [r7, #32]
 8007d3c:	015b      	lsls	r3, r3, #5
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	4619      	mov	r1, r3
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7ff fa41 	bl	80071ca <dir_sdi>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007d4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d132      	bne.n	8007dbc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	3324      	adds	r3, #36	@ 0x24
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7ff fde4 	bl	8007928 <sum_sfn>
 8007d60:	4603      	mov	r3, r0
 8007d62:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	69db      	ldr	r3, [r3, #28]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	69f8      	ldr	r0, [r7, #28]
 8007d6c:	f7fe fe4e 	bl	8006a0c <move_window>
 8007d70:	4603      	mov	r3, r0
 8007d72:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8007d76:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d11d      	bne.n	8007dba <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	6918      	ldr	r0, [r3, #16]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a19      	ldr	r1, [r3, #32]
 8007d86:	6a3b      	ldr	r3, [r7, #32]
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	7efb      	ldrb	r3, [r7, #27]
 8007d8c:	f7ff fcd6 	bl	800773c <put_lfn>
				fs->wflag = 1;
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	2201      	movs	r2, #1
 8007d94:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007d96:	2100      	movs	r1, #0
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7ff fa9f 	bl	80072dc <dir_next>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8007da4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d107      	bne.n	8007dbc <dir_register+0x184>
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	3b01      	subs	r3, #1
 8007db0:	623b      	str	r3, [r7, #32]
 8007db2:	6a3b      	ldr	r3, [r7, #32]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1d5      	bne.n	8007d64 <dir_register+0x12c>
 8007db8:	e000      	b.n	8007dbc <dir_register+0x184>
				if (res != FR_OK) break;
 8007dba:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007dbc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d128      	bne.n	8007e16 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	69db      	ldr	r3, [r3, #28]
 8007dc8:	4619      	mov	r1, r3
 8007dca:	69f8      	ldr	r0, [r7, #28]
 8007dcc:	f7fe fe1e 	bl	8006a0c <move_window>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007dd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d11b      	bne.n	8007e16 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a1b      	ldr	r3, [r3, #32]
 8007de2:	2220      	movs	r2, #32
 8007de4:	2100      	movs	r1, #0
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fe fbd1 	bl	800658e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a18      	ldr	r0, [r3, #32]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	3324      	adds	r3, #36	@ 0x24
 8007df4:	220b      	movs	r2, #11
 8007df6:	4619      	mov	r1, r3
 8007df8:	f7fe fba8 	bl	800654c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6a1b      	ldr	r3, [r3, #32]
 8007e06:	330c      	adds	r3, #12
 8007e08:	f002 0218 	and.w	r2, r2, #24
 8007e0c:	b2d2      	uxtb	r2, r2
 8007e0e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007e10:	69fb      	ldr	r3, [r7, #28]
 8007e12:	2201      	movs	r2, #1
 8007e14:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007e16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3730      	adds	r7, #48	@ 0x30
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	4ec4ec4f 	.word	0x4ec4ec4f

08007e28 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b086      	sub	sp, #24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e44:	d007      	beq.n	8007e56 <dir_remove+0x2e>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7ff f9bc 	bl	80071ca <dir_sdi>
 8007e52:	4603      	mov	r3, r0
 8007e54:	e000      	b.n	8007e58 <dir_remove+0x30>
 8007e56:	2300      	movs	r3, #0
 8007e58:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007e5a:	7dfb      	ldrb	r3, [r7, #23]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d128      	bne.n	8007eb2 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	69db      	ldr	r3, [r3, #28]
 8007e64:	4619      	mov	r1, r3
 8007e66:	6938      	ldr	r0, [r7, #16]
 8007e68:	f7fe fdd0 	bl	8006a0c <move_window>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007e70:	7dfb      	ldrb	r3, [r7, #23]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d115      	bne.n	8007ea2 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	22e5      	movs	r2, #229	@ 0xe5
 8007e7c:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	2201      	movs	r2, #1
 8007e82:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	695b      	ldr	r3, [r3, #20]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d90b      	bls.n	8007ea6 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8007e8e:	2100      	movs	r1, #0
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f7ff fa23 	bl	80072dc <dir_next>
 8007e96:	4603      	mov	r3, r0
 8007e98:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 8007e9a:	7dfb      	ldrb	r3, [r7, #23]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d0df      	beq.n	8007e60 <dir_remove+0x38>
 8007ea0:	e002      	b.n	8007ea8 <dir_remove+0x80>
			if (res != FR_OK) break;
 8007ea2:	bf00      	nop
 8007ea4:	e000      	b.n	8007ea8 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8007ea6:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8007ea8:	7dfb      	ldrb	r3, [r7, #23]
 8007eaa:	2b04      	cmp	r3, #4
 8007eac:	d101      	bne.n	8007eb2 <dir_remove+0x8a>
 8007eae:	2302      	movs	r3, #2
 8007eb0:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8007eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3718      	adds	r7, #24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b088      	sub	sp, #32
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	69db      	ldr	r3, [r3, #28]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f000 80ca 	beq.w	8008070 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee4:	d032      	beq.n	8007f4c <get_fileinfo+0x90>
			i = j = 0;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	61bb      	str	r3, [r7, #24]
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007eee:	e01b      	b.n	8007f28 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8007ef0:	89fb      	ldrh	r3, [r7, #14]
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f002 f8cd 	bl	800a094 <ff_convert>
 8007efa:	4603      	mov	r3, r0
 8007efc:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8007efe:	89fb      	ldrh	r3, [r7, #14]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d102      	bne.n	8007f0a <get_fileinfo+0x4e>
 8007f04:	2300      	movs	r3, #0
 8007f06:	61fb      	str	r3, [r7, #28]
 8007f08:	e01a      	b.n	8007f40 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	2bfe      	cmp	r3, #254	@ 0xfe
 8007f0e:	d902      	bls.n	8007f16 <get_fileinfo+0x5a>
 8007f10:	2300      	movs	r3, #0
 8007f12:	61fb      	str	r3, [r7, #28]
 8007f14:	e014      	b.n	8007f40 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	1c5a      	adds	r2, r3, #1
 8007f1a:	61fa      	str	r2, [r7, #28]
 8007f1c:	89fa      	ldrh	r2, [r7, #14]
 8007f1e:	b2d1      	uxtb	r1, r2
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	4413      	add	r3, r2
 8007f24:	460a      	mov	r2, r1
 8007f26:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	691a      	ldr	r2, [r3, #16]
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	1c59      	adds	r1, r3, #1
 8007f30:	61b9      	str	r1, [r7, #24]
 8007f32:	005b      	lsls	r3, r3, #1
 8007f34:	4413      	add	r3, r2
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	81fb      	strh	r3, [r7, #14]
 8007f3a:	89fb      	ldrh	r3, [r7, #14]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1d7      	bne.n	8007ef0 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	4413      	add	r3, r2
 8007f46:	3316      	adds	r3, #22
 8007f48:	2200      	movs	r2, #0
 8007f4a:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	61bb      	str	r3, [r7, #24]
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	4413      	add	r3, r2
 8007f5a:	3316      	adds	r3, #22
 8007f5c:	781b      	ldrb	r3, [r3, #0]
 8007f5e:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8007f60:	e04d      	b.n	8007ffe <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a1a      	ldr	r2, [r3, #32]
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	1c59      	adds	r1, r3, #1
 8007f6a:	61f9      	str	r1, [r7, #28]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007f72:	7dfb      	ldrb	r3, [r7, #23]
 8007f74:	2b20      	cmp	r3, #32
 8007f76:	d041      	beq.n	8007ffc <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007f78:	7dfb      	ldrb	r3, [r7, #23]
 8007f7a:	2b05      	cmp	r3, #5
 8007f7c:	d101      	bne.n	8007f82 <get_fileinfo+0xc6>
 8007f7e:	23e5      	movs	r3, #229	@ 0xe5
 8007f80:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	2b09      	cmp	r3, #9
 8007f86:	d10f      	bne.n	8007fa8 <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 8007f88:	89bb      	ldrh	r3, [r7, #12]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d105      	bne.n	8007f9a <get_fileinfo+0xde>
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	4413      	add	r3, r2
 8007f94:	3316      	adds	r3, #22
 8007f96:	222e      	movs	r2, #46	@ 0x2e
 8007f98:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8007f9a:	69bb      	ldr	r3, [r7, #24]
 8007f9c:	1c5a      	adds	r2, r3, #1
 8007f9e:	61ba      	str	r2, [r7, #24]
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	222e      	movs	r2, #46	@ 0x2e
 8007fa6:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	4413      	add	r3, r2
 8007fae:	3309      	adds	r3, #9
 8007fb0:	7dfa      	ldrb	r2, [r7, #23]
 8007fb2:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8007fb4:	89bb      	ldrh	r3, [r7, #12]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d11c      	bne.n	8007ff4 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8007fba:	7dfb      	ldrb	r3, [r7, #23]
 8007fbc:	2b40      	cmp	r3, #64	@ 0x40
 8007fbe:	d913      	bls.n	8007fe8 <get_fileinfo+0x12c>
 8007fc0:	7dfb      	ldrb	r3, [r7, #23]
 8007fc2:	2b5a      	cmp	r3, #90	@ 0x5a
 8007fc4:	d810      	bhi.n	8007fe8 <get_fileinfo+0x12c>
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	330c      	adds	r3, #12
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	2b08      	cmp	r3, #8
 8007fd4:	d901      	bls.n	8007fda <get_fileinfo+0x11e>
 8007fd6:	2310      	movs	r3, #16
 8007fd8:	e000      	b.n	8007fdc <get_fileinfo+0x120>
 8007fda:	2308      	movs	r3, #8
 8007fdc:	4013      	ands	r3, r2
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d002      	beq.n	8007fe8 <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 8007fe2:	7dfb      	ldrb	r3, [r7, #23]
 8007fe4:	3320      	adds	r3, #32
 8007fe6:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	69bb      	ldr	r3, [r7, #24]
 8007fec:	4413      	add	r3, r2
 8007fee:	3316      	adds	r3, #22
 8007ff0:	7dfa      	ldrb	r2, [r7, #23]
 8007ff2:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	61bb      	str	r3, [r7, #24]
 8007ffa:	e000      	b.n	8007ffe <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 8007ffc:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	2b0a      	cmp	r3, #10
 8008002:	d9ae      	bls.n	8007f62 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8008004:	89bb      	ldrh	r3, [r7, #12]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d10d      	bne.n	8008026 <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	4413      	add	r3, r2
 8008010:	3316      	adds	r3, #22
 8008012:	2200      	movs	r2, #0
 8008014:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	330c      	adds	r3, #12
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d101      	bne.n	8008026 <get_fileinfo+0x16a>
 8008022:	2300      	movs	r3, #0
 8008024:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8008026:	683a      	ldr	r2, [r7, #0]
 8008028:	69bb      	ldr	r3, [r7, #24]
 800802a:	4413      	add	r3, r2
 800802c:	3309      	adds	r3, #9
 800802e:	2200      	movs	r2, #0
 8008030:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	7ada      	ldrb	r2, [r3, #11]
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a1b      	ldr	r3, [r3, #32]
 8008040:	331c      	adds	r3, #28
 8008042:	4618      	mov	r0, r3
 8008044:	f7fe fa18 	bl	8006478 <ld_dword>
 8008048:	4602      	mov	r2, r0
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	3316      	adds	r3, #22
 8008054:	4618      	mov	r0, r3
 8008056:	f7fe fa0f 	bl	8006478 <ld_dword>
 800805a:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	b29a      	uxth	r2, r3
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	80da      	strh	r2, [r3, #6]
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	0c1b      	lsrs	r3, r3, #16
 8008068:	b29a      	uxth	r2, r3
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	809a      	strh	r2, [r3, #4]
 800806e:	e000      	b.n	8008072 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008070:	bf00      	nop
}
 8008072:	3720      	adds	r7, #32
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b08a      	sub	sp, #40	@ 0x28
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	613b      	str	r3, [r7, #16]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	691b      	ldr	r3, [r3, #16]
 800808e:	60fb      	str	r3, [r7, #12]
 8008090:	2300      	movs	r3, #0
 8008092:	617b      	str	r3, [r7, #20]
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	1c5a      	adds	r2, r3, #1
 800809c:	61ba      	str	r2, [r7, #24]
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	4413      	add	r3, r2
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80080a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80080a8:	2b1f      	cmp	r3, #31
 80080aa:	d940      	bls.n	800812e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80080ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80080ae:	2b2f      	cmp	r3, #47	@ 0x2f
 80080b0:	d006      	beq.n	80080c0 <create_name+0x48>
 80080b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80080b4:	2b5c      	cmp	r3, #92	@ 0x5c
 80080b6:	d110      	bne.n	80080da <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80080b8:	e002      	b.n	80080c0 <create_name+0x48>
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	3301      	adds	r3, #1
 80080be:	61bb      	str	r3, [r7, #24]
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	4413      	add	r3, r2
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	2b2f      	cmp	r3, #47	@ 0x2f
 80080ca:	d0f6      	beq.n	80080ba <create_name+0x42>
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	4413      	add	r3, r2
 80080d2:	781b      	ldrb	r3, [r3, #0]
 80080d4:	2b5c      	cmp	r3, #92	@ 0x5c
 80080d6:	d0f0      	beq.n	80080ba <create_name+0x42>
			break;
 80080d8:	e02a      	b.n	8008130 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	2bfe      	cmp	r3, #254	@ 0xfe
 80080de:	d901      	bls.n	80080e4 <create_name+0x6c>
 80080e0:	2306      	movs	r3, #6
 80080e2:	e17d      	b.n	80083e0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80080e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80080ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80080ec:	2101      	movs	r1, #1
 80080ee:	4618      	mov	r0, r3
 80080f0:	f001 ffd0 	bl	800a094 <ff_convert>
 80080f4:	4603      	mov	r3, r0
 80080f6:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80080f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d101      	bne.n	8008102 <create_name+0x8a>
 80080fe:	2306      	movs	r3, #6
 8008100:	e16e      	b.n	80083e0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008102:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008104:	2b7f      	cmp	r3, #127	@ 0x7f
 8008106:	d809      	bhi.n	800811c <create_name+0xa4>
 8008108:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800810a:	4619      	mov	r1, r3
 800810c:	488d      	ldr	r0, [pc, #564]	@ (8008344 <create_name+0x2cc>)
 800810e:	f7fe fa80 	bl	8006612 <chk_chr>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <create_name+0xa4>
 8008118:	2306      	movs	r3, #6
 800811a:	e161      	b.n	80083e0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	1c5a      	adds	r2, r3, #1
 8008120:	617a      	str	r2, [r7, #20]
 8008122:	005b      	lsls	r3, r3, #1
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	4413      	add	r3, r2
 8008128:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800812a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800812c:	e7b4      	b.n	8008098 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800812e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	69bb      	ldr	r3, [r7, #24]
 8008134:	441a      	add	r2, r3
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800813a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800813c:	2b1f      	cmp	r3, #31
 800813e:	d801      	bhi.n	8008144 <create_name+0xcc>
 8008140:	2304      	movs	r3, #4
 8008142:	e000      	b.n	8008146 <create_name+0xce>
 8008144:	2300      	movs	r3, #0
 8008146:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800814a:	e011      	b.n	8008170 <create_name+0xf8>
		w = lfn[di - 1];
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008152:	3b01      	subs	r3, #1
 8008154:	005b      	lsls	r3, r3, #1
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	4413      	add	r3, r2
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800815e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008160:	2b20      	cmp	r3, #32
 8008162:	d002      	beq.n	800816a <create_name+0xf2>
 8008164:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008166:	2b2e      	cmp	r3, #46	@ 0x2e
 8008168:	d106      	bne.n	8008178 <create_name+0x100>
		di--;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	3b01      	subs	r3, #1
 800816e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1ea      	bne.n	800814c <create_name+0xd4>
 8008176:	e000      	b.n	800817a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008178:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	005b      	lsls	r3, r3, #1
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	4413      	add	r3, r2
 8008182:	2200      	movs	r2, #0
 8008184:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d101      	bne.n	8008190 <create_name+0x118>
 800818c:	2306      	movs	r3, #6
 800818e:	e127      	b.n	80083e0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	3324      	adds	r3, #36	@ 0x24
 8008194:	220b      	movs	r2, #11
 8008196:	2120      	movs	r1, #32
 8008198:	4618      	mov	r0, r3
 800819a:	f7fe f9f8 	bl	800658e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800819e:	2300      	movs	r3, #0
 80081a0:	61bb      	str	r3, [r7, #24]
 80081a2:	e002      	b.n	80081aa <create_name+0x132>
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	3301      	adds	r3, #1
 80081a8:	61bb      	str	r3, [r7, #24]
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	005b      	lsls	r3, r3, #1
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	4413      	add	r3, r2
 80081b2:	881b      	ldrh	r3, [r3, #0]
 80081b4:	2b20      	cmp	r3, #32
 80081b6:	d0f5      	beq.n	80081a4 <create_name+0x12c>
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	005b      	lsls	r3, r3, #1
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	4413      	add	r3, r2
 80081c0:	881b      	ldrh	r3, [r3, #0]
 80081c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80081c4:	d0ee      	beq.n	80081a4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d009      	beq.n	80081e0 <create_name+0x168>
 80081cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80081d0:	f043 0303 	orr.w	r3, r3, #3
 80081d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80081d8:	e002      	b.n	80081e0 <create_name+0x168>
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	3b01      	subs	r3, #1
 80081de:	617b      	str	r3, [r7, #20]
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d009      	beq.n	80081fa <create_name+0x182>
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80081ec:	3b01      	subs	r3, #1
 80081ee:	005b      	lsls	r3, r3, #1
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	4413      	add	r3, r2
 80081f4:	881b      	ldrh	r3, [r3, #0]
 80081f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80081f8:	d1ef      	bne.n	80081da <create_name+0x162>

	i = b = 0; ni = 8;
 80081fa:	2300      	movs	r3, #0
 80081fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008200:	2300      	movs	r3, #0
 8008202:	623b      	str	r3, [r7, #32]
 8008204:	2308      	movs	r3, #8
 8008206:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	1c5a      	adds	r2, r3, #1
 800820c:	61ba      	str	r2, [r7, #24]
 800820e:	005b      	lsls	r3, r3, #1
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	4413      	add	r3, r2
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008218:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800821a:	2b00      	cmp	r3, #0
 800821c:	f000 8090 	beq.w	8008340 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008220:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008222:	2b20      	cmp	r3, #32
 8008224:	d006      	beq.n	8008234 <create_name+0x1bc>
 8008226:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008228:	2b2e      	cmp	r3, #46	@ 0x2e
 800822a:	d10a      	bne.n	8008242 <create_name+0x1ca>
 800822c:	69ba      	ldr	r2, [r7, #24]
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	429a      	cmp	r2, r3
 8008232:	d006      	beq.n	8008242 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008234:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008238:	f043 0303 	orr.w	r3, r3, #3
 800823c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008240:	e07d      	b.n	800833e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008242:	6a3a      	ldr	r2, [r7, #32]
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	429a      	cmp	r2, r3
 8008248:	d203      	bcs.n	8008252 <create_name+0x1da>
 800824a:	69ba      	ldr	r2, [r7, #24]
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	429a      	cmp	r2, r3
 8008250:	d123      	bne.n	800829a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	2b0b      	cmp	r3, #11
 8008256:	d106      	bne.n	8008266 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008258:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800825c:	f043 0303 	orr.w	r3, r3, #3
 8008260:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008264:	e075      	b.n	8008352 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008266:	69ba      	ldr	r2, [r7, #24]
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	429a      	cmp	r2, r3
 800826c:	d005      	beq.n	800827a <create_name+0x202>
 800826e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008272:	f043 0303 	orr.w	r3, r3, #3
 8008276:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800827a:	69ba      	ldr	r2, [r7, #24]
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	429a      	cmp	r2, r3
 8008280:	d866      	bhi.n	8008350 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	61bb      	str	r3, [r7, #24]
 8008286:	2308      	movs	r3, #8
 8008288:	623b      	str	r3, [r7, #32]
 800828a:	230b      	movs	r3, #11
 800828c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800828e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008298:	e051      	b.n	800833e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800829a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800829c:	2b7f      	cmp	r3, #127	@ 0x7f
 800829e:	d914      	bls.n	80082ca <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80082a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80082a2:	2100      	movs	r1, #0
 80082a4:	4618      	mov	r0, r3
 80082a6:	f001 fef5 	bl	800a094 <ff_convert>
 80082aa:	4603      	mov	r3, r0
 80082ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80082ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d004      	beq.n	80082be <create_name+0x246>
 80082b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80082b6:	3b80      	subs	r3, #128	@ 0x80
 80082b8:	4a23      	ldr	r2, [pc, #140]	@ (8008348 <create_name+0x2d0>)
 80082ba:	5cd3      	ldrb	r3, [r2, r3]
 80082bc:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80082be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082c2:	f043 0302 	orr.w	r3, r3, #2
 80082c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80082ca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d007      	beq.n	80082e0 <create_name+0x268>
 80082d0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80082d2:	4619      	mov	r1, r3
 80082d4:	481d      	ldr	r0, [pc, #116]	@ (800834c <create_name+0x2d4>)
 80082d6:	f7fe f99c 	bl	8006612 <chk_chr>
 80082da:	4603      	mov	r3, r0
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d008      	beq.n	80082f2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80082e0:	235f      	movs	r3, #95	@ 0x5f
 80082e2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80082e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082e8:	f043 0303 	orr.w	r3, r3, #3
 80082ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80082f0:	e01b      	b.n	800832a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80082f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80082f4:	2b40      	cmp	r3, #64	@ 0x40
 80082f6:	d909      	bls.n	800830c <create_name+0x294>
 80082f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80082fa:	2b5a      	cmp	r3, #90	@ 0x5a
 80082fc:	d806      	bhi.n	800830c <create_name+0x294>
					b |= 2;
 80082fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008302:	f043 0302 	orr.w	r3, r3, #2
 8008306:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800830a:	e00e      	b.n	800832a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800830c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800830e:	2b60      	cmp	r3, #96	@ 0x60
 8008310:	d90b      	bls.n	800832a <create_name+0x2b2>
 8008312:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008314:	2b7a      	cmp	r3, #122	@ 0x7a
 8008316:	d808      	bhi.n	800832a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008318:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800831c:	f043 0301 	orr.w	r3, r3, #1
 8008320:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008324:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008326:	3b20      	subs	r3, #32
 8008328:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800832a:	6a3b      	ldr	r3, [r7, #32]
 800832c:	1c5a      	adds	r2, r3, #1
 800832e:	623a      	str	r2, [r7, #32]
 8008330:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008332:	b2d1      	uxtb	r1, r2
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	4413      	add	r3, r2
 8008338:	460a      	mov	r2, r1
 800833a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800833e:	e763      	b.n	8008208 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008340:	bf00      	nop
 8008342:	e006      	b.n	8008352 <create_name+0x2da>
 8008344:	0801155c 	.word	0x0801155c
 8008348:	080115cc 	.word	0x080115cc
 800834c:	08011568 	.word	0x08011568
			if (si > di) break;			/* No extension */
 8008350:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008358:	2be5      	cmp	r3, #229	@ 0xe5
 800835a:	d103      	bne.n	8008364 <create_name+0x2ec>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2205      	movs	r2, #5
 8008360:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	2b08      	cmp	r3, #8
 8008368:	d104      	bne.n	8008374 <create_name+0x2fc>
 800836a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008374:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008378:	f003 030c 	and.w	r3, r3, #12
 800837c:	2b0c      	cmp	r3, #12
 800837e:	d005      	beq.n	800838c <create_name+0x314>
 8008380:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008384:	f003 0303 	and.w	r3, r3, #3
 8008388:	2b03      	cmp	r3, #3
 800838a:	d105      	bne.n	8008398 <create_name+0x320>
 800838c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008390:	f043 0302 	orr.w	r3, r3, #2
 8008394:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008398:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800839c:	f003 0302 	and.w	r3, r3, #2
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d117      	bne.n	80083d4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80083a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80083a8:	f003 0303 	and.w	r3, r3, #3
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d105      	bne.n	80083bc <create_name+0x344>
 80083b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083b4:	f043 0310 	orr.w	r3, r3, #16
 80083b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80083bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80083c0:	f003 030c 	and.w	r3, r3, #12
 80083c4:	2b04      	cmp	r3, #4
 80083c6:	d105      	bne.n	80083d4 <create_name+0x35c>
 80083c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083cc:	f043 0308 	orr.w	r3, r3, #8
 80083d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80083da:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80083de:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3728      	adds	r7, #40	@ 0x28
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b086      	sub	sp, #24
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80083fc:	e002      	b.n	8008404 <follow_path+0x1c>
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	3301      	adds	r3, #1
 8008402:	603b      	str	r3, [r7, #0]
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	781b      	ldrb	r3, [r3, #0]
 8008408:	2b2f      	cmp	r3, #47	@ 0x2f
 800840a:	d0f8      	beq.n	80083fe <follow_path+0x16>
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	2b5c      	cmp	r3, #92	@ 0x5c
 8008412:	d0f4      	beq.n	80083fe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	2200      	movs	r2, #0
 8008418:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	2b1f      	cmp	r3, #31
 8008420:	d80a      	bhi.n	8008438 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2280      	movs	r2, #128	@ 0x80
 8008426:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800842a:	2100      	movs	r1, #0
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7fe fecc 	bl	80071ca <dir_sdi>
 8008432:	4603      	mov	r3, r0
 8008434:	75fb      	strb	r3, [r7, #23]
 8008436:	e048      	b.n	80084ca <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008438:	463b      	mov	r3, r7
 800843a:	4619      	mov	r1, r3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f7ff fe1b 	bl	8008078 <create_name>
 8008442:	4603      	mov	r3, r0
 8008444:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008446:	7dfb      	ldrb	r3, [r7, #23]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d139      	bne.n	80084c0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f7ff fb33 	bl	8007ab8 <dir_find>
 8008452:	4603      	mov	r3, r0
 8008454:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800845c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800845e:	7dfb      	ldrb	r3, [r7, #23]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00a      	beq.n	800847a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008464:	7dfb      	ldrb	r3, [r7, #23]
 8008466:	2b04      	cmp	r3, #4
 8008468:	d12c      	bne.n	80084c4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800846a:	7afb      	ldrb	r3, [r7, #11]
 800846c:	f003 0304 	and.w	r3, r3, #4
 8008470:	2b00      	cmp	r3, #0
 8008472:	d127      	bne.n	80084c4 <follow_path+0xdc>
 8008474:	2305      	movs	r3, #5
 8008476:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008478:	e024      	b.n	80084c4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800847a:	7afb      	ldrb	r3, [r7, #11]
 800847c:	f003 0304 	and.w	r3, r3, #4
 8008480:	2b00      	cmp	r3, #0
 8008482:	d121      	bne.n	80084c8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	799b      	ldrb	r3, [r3, #6]
 8008488:	f003 0310 	and.w	r3, r3, #16
 800848c:	2b00      	cmp	r3, #0
 800848e:	d102      	bne.n	8008496 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008490:	2305      	movs	r3, #5
 8008492:	75fb      	strb	r3, [r7, #23]
 8008494:	e019      	b.n	80084ca <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	695b      	ldr	r3, [r3, #20]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	8992      	ldrh	r2, [r2, #12]
 80084a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80084a8:	fb00 f202 	mul.w	r2, r0, r2
 80084ac:	1a9b      	subs	r3, r3, r2
 80084ae:	440b      	add	r3, r1
 80084b0:	4619      	mov	r1, r3
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f7ff f82f 	bl	8007516 <ld_clust>
 80084b8:	4602      	mov	r2, r0
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80084be:	e7bb      	b.n	8008438 <follow_path+0x50>
			if (res != FR_OK) break;
 80084c0:	bf00      	nop
 80084c2:	e002      	b.n	80084ca <follow_path+0xe2>
				break;
 80084c4:	bf00      	nop
 80084c6:	e000      	b.n	80084ca <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80084c8:	bf00      	nop
			}
		}
	}

	return res;
 80084ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3718      	adds	r7, #24
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b087      	sub	sp, #28
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80084dc:	f04f 33ff 	mov.w	r3, #4294967295
 80084e0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d031      	beq.n	800854e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	617b      	str	r3, [r7, #20]
 80084f0:	e002      	b.n	80084f8 <get_ldnumber+0x24>
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	3301      	adds	r3, #1
 80084f6:	617b      	str	r3, [r7, #20]
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	781b      	ldrb	r3, [r3, #0]
 80084fc:	2b1f      	cmp	r3, #31
 80084fe:	d903      	bls.n	8008508 <get_ldnumber+0x34>
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	2b3a      	cmp	r3, #58	@ 0x3a
 8008506:	d1f4      	bne.n	80084f2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	2b3a      	cmp	r3, #58	@ 0x3a
 800850e:	d11c      	bne.n	800854a <get_ldnumber+0x76>
			tp = *path;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	1c5a      	adds	r2, r3, #1
 800851a:	60fa      	str	r2, [r7, #12]
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	3b30      	subs	r3, #48	@ 0x30
 8008520:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	2b09      	cmp	r3, #9
 8008526:	d80e      	bhi.n	8008546 <get_ldnumber+0x72>
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	429a      	cmp	r2, r3
 800852e:	d10a      	bne.n	8008546 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d107      	bne.n	8008546 <get_ldnumber+0x72>
					vol = (int)i;
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	3301      	adds	r3, #1
 800853e:	617b      	str	r3, [r7, #20]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	e002      	b.n	8008550 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800854a:	2300      	movs	r3, #0
 800854c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800854e:	693b      	ldr	r3, [r7, #16]
}
 8008550:	4618      	mov	r0, r3
 8008552:	371c      	adds	r7, #28
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b082      	sub	sp, #8
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	70da      	strb	r2, [r3, #3]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f04f 32ff 	mov.w	r2, #4294967295
 8008572:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008574:	6839      	ldr	r1, [r7, #0]
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7fe fa48 	bl	8006a0c <move_window>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d001      	beq.n	8008586 <check_fs+0x2a>
 8008582:	2304      	movs	r3, #4
 8008584:	e038      	b.n	80085f8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	333c      	adds	r3, #60	@ 0x3c
 800858a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800858e:	4618      	mov	r0, r3
 8008590:	f7fd ff5a 	bl	8006448 <ld_word>
 8008594:	4603      	mov	r3, r0
 8008596:	461a      	mov	r2, r3
 8008598:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800859c:	429a      	cmp	r2, r3
 800859e:	d001      	beq.n	80085a4 <check_fs+0x48>
 80085a0:	2303      	movs	r3, #3
 80085a2:	e029      	b.n	80085f8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085aa:	2be9      	cmp	r3, #233	@ 0xe9
 80085ac:	d009      	beq.n	80085c2 <check_fs+0x66>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085b4:	2beb      	cmp	r3, #235	@ 0xeb
 80085b6:	d11e      	bne.n	80085f6 <check_fs+0x9a>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80085be:	2b90      	cmp	r3, #144	@ 0x90
 80085c0:	d119      	bne.n	80085f6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	333c      	adds	r3, #60	@ 0x3c
 80085c6:	3336      	adds	r3, #54	@ 0x36
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7fd ff55 	bl	8006478 <ld_dword>
 80085ce:	4603      	mov	r3, r0
 80085d0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80085d4:	4a0a      	ldr	r2, [pc, #40]	@ (8008600 <check_fs+0xa4>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d101      	bne.n	80085de <check_fs+0x82>
 80085da:	2300      	movs	r3, #0
 80085dc:	e00c      	b.n	80085f8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	333c      	adds	r3, #60	@ 0x3c
 80085e2:	3352      	adds	r3, #82	@ 0x52
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fd ff47 	bl	8006478 <ld_dword>
 80085ea:	4603      	mov	r3, r0
 80085ec:	4a05      	ldr	r2, [pc, #20]	@ (8008604 <check_fs+0xa8>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d101      	bne.n	80085f6 <check_fs+0x9a>
 80085f2:	2300      	movs	r3, #0
 80085f4:	e000      	b.n	80085f8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80085f6:	2302      	movs	r3, #2
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}
 8008600:	00544146 	.word	0x00544146
 8008604:	33544146 	.word	0x33544146

08008608 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b096      	sub	sp, #88	@ 0x58
 800860c:	af00      	add	r7, sp, #0
 800860e:	60f8      	str	r0, [r7, #12]
 8008610:	60b9      	str	r1, [r7, #8]
 8008612:	4613      	mov	r3, r2
 8008614:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	2200      	movs	r2, #0
 800861a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800861c:	68f8      	ldr	r0, [r7, #12]
 800861e:	f7ff ff59 	bl	80084d4 <get_ldnumber>
 8008622:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008626:	2b00      	cmp	r3, #0
 8008628:	da01      	bge.n	800862e <find_volume+0x26>
 800862a:	230b      	movs	r3, #11
 800862c:	e26a      	b.n	8008b04 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800862e:	4aa3      	ldr	r2, [pc, #652]	@ (80088bc <find_volume+0x2b4>)
 8008630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008636:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863a:	2b00      	cmp	r3, #0
 800863c:	d101      	bne.n	8008642 <find_volume+0x3a>
 800863e:	230c      	movs	r3, #12
 8008640:	e260      	b.n	8008b04 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 8008642:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008644:	f7fe f800 	bl	8006648 <lock_fs>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <find_volume+0x4a>
 800864e:	230f      	movs	r3, #15
 8008650:	e258      	b.n	8008b04 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008656:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008658:	79fb      	ldrb	r3, [r7, #7]
 800865a:	f023 0301 	bic.w	r3, r3, #1
 800865e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d01a      	beq.n	800869e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8008668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800866a:	785b      	ldrb	r3, [r3, #1]
 800866c:	4618      	mov	r0, r3
 800866e:	f7fd fe4b 	bl	8006308 <disk_status>
 8008672:	4603      	mov	r3, r0
 8008674:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008678:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800867c:	f003 0301 	and.w	r3, r3, #1
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10c      	bne.n	800869e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008684:	79fb      	ldrb	r3, [r7, #7]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d007      	beq.n	800869a <find_volume+0x92>
 800868a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800868e:	f003 0304 	and.w	r3, r3, #4
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8008696:	230a      	movs	r3, #10
 8008698:	e234      	b.n	8008b04 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 800869a:	2300      	movs	r3, #0
 800869c:	e232      	b.n	8008b04 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800869e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a0:	2200      	movs	r2, #0
 80086a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80086a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086a6:	b2da      	uxtb	r2, r3
 80086a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80086ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ae:	785b      	ldrb	r3, [r3, #1]
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fd fe43 	bl	800633c <disk_initialize>
 80086b6:	4603      	mov	r3, r0
 80086b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80086bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80086c0:	f003 0301 	and.w	r3, r3, #1
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d001      	beq.n	80086cc <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80086c8:	2303      	movs	r3, #3
 80086ca:	e21b      	b.n	8008b04 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80086cc:	79fb      	ldrb	r3, [r7, #7]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d007      	beq.n	80086e2 <find_volume+0xda>
 80086d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80086d6:	f003 0304 	and.w	r3, r3, #4
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80086de:	230a      	movs	r3, #10
 80086e0:	e210      	b.n	8008b04 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80086e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e4:	7858      	ldrb	r0, [r3, #1]
 80086e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e8:	330c      	adds	r3, #12
 80086ea:	461a      	mov	r2, r3
 80086ec:	2102      	movs	r1, #2
 80086ee:	f7fd fe8d 	bl	800640c <disk_ioctl>
 80086f2:	4603      	mov	r3, r0
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d001      	beq.n	80086fc <find_volume+0xf4>
 80086f8:	2301      	movs	r3, #1
 80086fa:	e203      	b.n	8008b04 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80086fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086fe:	899b      	ldrh	r3, [r3, #12]
 8008700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008704:	d80d      	bhi.n	8008722 <find_volume+0x11a>
 8008706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008708:	899b      	ldrh	r3, [r3, #12]
 800870a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800870e:	d308      	bcc.n	8008722 <find_volume+0x11a>
 8008710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008712:	899b      	ldrh	r3, [r3, #12]
 8008714:	461a      	mov	r2, r3
 8008716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008718:	899b      	ldrh	r3, [r3, #12]
 800871a:	3b01      	subs	r3, #1
 800871c:	4013      	ands	r3, r2
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <find_volume+0x11e>
 8008722:	2301      	movs	r3, #1
 8008724:	e1ee      	b.n	8008b04 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008726:	2300      	movs	r3, #0
 8008728:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800872a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800872c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800872e:	f7ff ff15 	bl	800855c <check_fs>
 8008732:	4603      	mov	r3, r0
 8008734:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008738:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800873c:	2b02      	cmp	r3, #2
 800873e:	d149      	bne.n	80087d4 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008740:	2300      	movs	r3, #0
 8008742:	643b      	str	r3, [r7, #64]	@ 0x40
 8008744:	e01e      	b.n	8008784 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008748:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 800874c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800874e:	011b      	lsls	r3, r3, #4
 8008750:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008754:	4413      	add	r3, r2
 8008756:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800875a:	3304      	adds	r3, #4
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d006      	beq.n	8008770 <find_volume+0x168>
 8008762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008764:	3308      	adds	r3, #8
 8008766:	4618      	mov	r0, r3
 8008768:	f7fd fe86 	bl	8006478 <ld_dword>
 800876c:	4602      	mov	r2, r0
 800876e:	e000      	b.n	8008772 <find_volume+0x16a>
 8008770:	2200      	movs	r2, #0
 8008772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	3358      	adds	r3, #88	@ 0x58
 8008778:	443b      	add	r3, r7
 800877a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800877e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008780:	3301      	adds	r3, #1
 8008782:	643b      	str	r3, [r7, #64]	@ 0x40
 8008784:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008786:	2b03      	cmp	r3, #3
 8008788:	d9dd      	bls.n	8008746 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800878a:	2300      	movs	r3, #0
 800878c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800878e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <find_volume+0x192>
 8008794:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008796:	3b01      	subs	r3, #1
 8008798:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800879a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	3358      	adds	r3, #88	@ 0x58
 80087a0:	443b      	add	r3, r7
 80087a2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80087a6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80087a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d005      	beq.n	80087ba <find_volume+0x1b2>
 80087ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80087b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80087b2:	f7ff fed3 	bl	800855c <check_fs>
 80087b6:	4603      	mov	r3, r0
 80087b8:	e000      	b.n	80087bc <find_volume+0x1b4>
 80087ba:	2303      	movs	r3, #3
 80087bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80087c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d905      	bls.n	80087d4 <find_volume+0x1cc>
 80087c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087ca:	3301      	adds	r3, #1
 80087cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80087ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087d0:	2b03      	cmp	r3, #3
 80087d2:	d9e2      	bls.n	800879a <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80087d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80087d8:	2b04      	cmp	r3, #4
 80087da:	d101      	bne.n	80087e0 <find_volume+0x1d8>
 80087dc:	2301      	movs	r3, #1
 80087de:	e191      	b.n	8008b04 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80087e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d901      	bls.n	80087ec <find_volume+0x1e4>
 80087e8:	230d      	movs	r3, #13
 80087ea:	e18b      	b.n	8008b04 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80087ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087ee:	333c      	adds	r3, #60	@ 0x3c
 80087f0:	330b      	adds	r3, #11
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fd fe28 	bl	8006448 <ld_word>
 80087f8:	4603      	mov	r3, r0
 80087fa:	461a      	mov	r2, r3
 80087fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087fe:	899b      	ldrh	r3, [r3, #12]
 8008800:	429a      	cmp	r2, r3
 8008802:	d001      	beq.n	8008808 <find_volume+0x200>
 8008804:	230d      	movs	r3, #13
 8008806:	e17d      	b.n	8008b04 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800880a:	333c      	adds	r3, #60	@ 0x3c
 800880c:	3316      	adds	r3, #22
 800880e:	4618      	mov	r0, r3
 8008810:	f7fd fe1a 	bl	8006448 <ld_word>
 8008814:	4603      	mov	r3, r0
 8008816:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008818:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800881a:	2b00      	cmp	r3, #0
 800881c:	d106      	bne.n	800882c <find_volume+0x224>
 800881e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008820:	333c      	adds	r3, #60	@ 0x3c
 8008822:	3324      	adds	r3, #36	@ 0x24
 8008824:	4618      	mov	r0, r3
 8008826:	f7fd fe27 	bl	8006478 <ld_dword>
 800882a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800882c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800882e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008830:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008834:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8008838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800883a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800883c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800883e:	789b      	ldrb	r3, [r3, #2]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d005      	beq.n	8008850 <find_volume+0x248>
 8008844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008846:	789b      	ldrb	r3, [r3, #2]
 8008848:	2b02      	cmp	r3, #2
 800884a:	d001      	beq.n	8008850 <find_volume+0x248>
 800884c:	230d      	movs	r3, #13
 800884e:	e159      	b.n	8008b04 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008852:	789b      	ldrb	r3, [r3, #2]
 8008854:	461a      	mov	r2, r3
 8008856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008858:	fb02 f303 	mul.w	r3, r2, r3
 800885c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800885e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008860:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8008864:	461a      	mov	r2, r3
 8008866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008868:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800886a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800886c:	895b      	ldrh	r3, [r3, #10]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d008      	beq.n	8008884 <find_volume+0x27c>
 8008872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008874:	895b      	ldrh	r3, [r3, #10]
 8008876:	461a      	mov	r2, r3
 8008878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800887a:	895b      	ldrh	r3, [r3, #10]
 800887c:	3b01      	subs	r3, #1
 800887e:	4013      	ands	r3, r2
 8008880:	2b00      	cmp	r3, #0
 8008882:	d001      	beq.n	8008888 <find_volume+0x280>
 8008884:	230d      	movs	r3, #13
 8008886:	e13d      	b.n	8008b04 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888a:	333c      	adds	r3, #60	@ 0x3c
 800888c:	3311      	adds	r3, #17
 800888e:	4618      	mov	r0, r3
 8008890:	f7fd fdda 	bl	8006448 <ld_word>
 8008894:	4603      	mov	r3, r0
 8008896:	461a      	mov	r2, r3
 8008898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800889a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800889c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800889e:	891b      	ldrh	r3, [r3, #8]
 80088a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80088a2:	8992      	ldrh	r2, [r2, #12]
 80088a4:	0952      	lsrs	r2, r2, #5
 80088a6:	b292      	uxth	r2, r2
 80088a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80088ac:	fb01 f202 	mul.w	r2, r1, r2
 80088b0:	1a9b      	subs	r3, r3, r2
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d003      	beq.n	80088c0 <find_volume+0x2b8>
 80088b8:	230d      	movs	r3, #13
 80088ba:	e123      	b.n	8008b04 <find_volume+0x4fc>
 80088bc:	2000280c 	.word	0x2000280c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80088c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c2:	333c      	adds	r3, #60	@ 0x3c
 80088c4:	3313      	adds	r3, #19
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7fd fdbe 	bl	8006448 <ld_word>
 80088cc:	4603      	mov	r3, r0
 80088ce:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80088d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d106      	bne.n	80088e4 <find_volume+0x2dc>
 80088d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088d8:	333c      	adds	r3, #60	@ 0x3c
 80088da:	3320      	adds	r3, #32
 80088dc:	4618      	mov	r0, r3
 80088de:	f7fd fdcb 	bl	8006478 <ld_dword>
 80088e2:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80088e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088e6:	333c      	adds	r3, #60	@ 0x3c
 80088e8:	330e      	adds	r3, #14
 80088ea:	4618      	mov	r0, r3
 80088ec:	f7fd fdac 	bl	8006448 <ld_word>
 80088f0:	4603      	mov	r3, r0
 80088f2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80088f4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d101      	bne.n	80088fe <find_volume+0x2f6>
 80088fa:	230d      	movs	r3, #13
 80088fc:	e102      	b.n	8008b04 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80088fe:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008902:	4413      	add	r3, r2
 8008904:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008906:	8911      	ldrh	r1, [r2, #8]
 8008908:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800890a:	8992      	ldrh	r2, [r2, #12]
 800890c:	0952      	lsrs	r2, r2, #5
 800890e:	b292      	uxth	r2, r2
 8008910:	fbb1 f2f2 	udiv	r2, r1, r2
 8008914:	b292      	uxth	r2, r2
 8008916:	4413      	add	r3, r2
 8008918:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800891a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800891c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891e:	429a      	cmp	r2, r3
 8008920:	d201      	bcs.n	8008926 <find_volume+0x31e>
 8008922:	230d      	movs	r3, #13
 8008924:	e0ee      	b.n	8008b04 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008926:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892a:	1ad3      	subs	r3, r2, r3
 800892c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800892e:	8952      	ldrh	r2, [r2, #10]
 8008930:	fbb3 f3f2 	udiv	r3, r3, r2
 8008934:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008938:	2b00      	cmp	r3, #0
 800893a:	d101      	bne.n	8008940 <find_volume+0x338>
 800893c:	230d      	movs	r3, #13
 800893e:	e0e1      	b.n	8008b04 <find_volume+0x4fc>
		fmt = FS_FAT32;
 8008940:	2303      	movs	r3, #3
 8008942:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008948:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800894c:	4293      	cmp	r3, r2
 800894e:	d802      	bhi.n	8008956 <find_volume+0x34e>
 8008950:	2302      	movs	r3, #2
 8008952:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008958:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800895c:	4293      	cmp	r3, r2
 800895e:	d802      	bhi.n	8008966 <find_volume+0x35e>
 8008960:	2301      	movs	r3, #1
 8008962:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008968:	1c9a      	adds	r2, r3, #2
 800896a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800896c:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800896e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008970:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008972:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008974:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008976:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008978:	441a      	add	r2, r3
 800897a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800897c:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800897e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008982:	441a      	add	r2, r3
 8008984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008986:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 8008988:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800898c:	2b03      	cmp	r3, #3
 800898e:	d11e      	bne.n	80089ce <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008992:	333c      	adds	r3, #60	@ 0x3c
 8008994:	332a      	adds	r3, #42	@ 0x2a
 8008996:	4618      	mov	r0, r3
 8008998:	f7fd fd56 	bl	8006448 <ld_word>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <find_volume+0x39e>
 80089a2:	230d      	movs	r3, #13
 80089a4:	e0ae      	b.n	8008b04 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80089a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089a8:	891b      	ldrh	r3, [r3, #8]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d001      	beq.n	80089b2 <find_volume+0x3aa>
 80089ae:	230d      	movs	r3, #13
 80089b0:	e0a8      	b.n	8008b04 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80089b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b4:	333c      	adds	r3, #60	@ 0x3c
 80089b6:	332c      	adds	r3, #44	@ 0x2c
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7fd fd5d 	bl	8006478 <ld_dword>
 80089be:	4602      	mov	r2, r0
 80089c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c2:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80089c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c6:	6a1b      	ldr	r3, [r3, #32]
 80089c8:	009b      	lsls	r3, r3, #2
 80089ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80089cc:	e01f      	b.n	8008a0e <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80089ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d0:	891b      	ldrh	r3, [r3, #8]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d101      	bne.n	80089da <find_volume+0x3d2>
 80089d6:	230d      	movs	r3, #13
 80089d8:	e094      	b.n	8008b04 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80089da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089e0:	441a      	add	r2, r3
 80089e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e4:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80089e6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d103      	bne.n	80089f6 <find_volume+0x3ee>
 80089ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f0:	6a1b      	ldr	r3, [r3, #32]
 80089f2:	005b      	lsls	r3, r3, #1
 80089f4:	e00a      	b.n	8008a0c <find_volume+0x404>
 80089f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089f8:	6a1a      	ldr	r2, [r3, #32]
 80089fa:	4613      	mov	r3, r2
 80089fc:	005b      	lsls	r3, r3, #1
 80089fe:	4413      	add	r3, r2
 8008a00:	085a      	lsrs	r2, r3, #1
 8008a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	f003 0301 	and.w	r3, r3, #1
 8008a0a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008a0c:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008a0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a14:	899b      	ldrh	r3, [r3, #12]
 8008a16:	4619      	mov	r1, r3
 8008a18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a1a:	440b      	add	r3, r1
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008a20:	8989      	ldrh	r1, [r1, #12]
 8008a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d201      	bcs.n	8008a2e <find_volume+0x426>
 8008a2a:	230d      	movs	r3, #13
 8008a2c:	e06a      	b.n	8008b04 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a30:	f04f 32ff 	mov.w	r2, #4294967295
 8008a34:	61da      	str	r2, [r3, #28]
 8008a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a38:	69da      	ldr	r2, [r3, #28]
 8008a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a3c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8008a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a40:	2280      	movs	r2, #128	@ 0x80
 8008a42:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008a44:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a48:	2b03      	cmp	r3, #3
 8008a4a:	d149      	bne.n	8008ae0 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a4e:	333c      	adds	r3, #60	@ 0x3c
 8008a50:	3330      	adds	r3, #48	@ 0x30
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7fd fcf8 	bl	8006448 <ld_word>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b01      	cmp	r3, #1
 8008a5c:	d140      	bne.n	8008ae0 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008a5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a60:	3301      	adds	r3, #1
 8008a62:	4619      	mov	r1, r3
 8008a64:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008a66:	f7fd ffd1 	bl	8006a0c <move_window>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d137      	bne.n	8008ae0 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 8008a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a72:	2200      	movs	r2, #0
 8008a74:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a78:	333c      	adds	r3, #60	@ 0x3c
 8008a7a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fd fce2 	bl	8006448 <ld_word>
 8008a84:	4603      	mov	r3, r0
 8008a86:	461a      	mov	r2, r3
 8008a88:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d127      	bne.n	8008ae0 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a92:	333c      	adds	r3, #60	@ 0x3c
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fd fcef 	bl	8006478 <ld_dword>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	4a1b      	ldr	r2, [pc, #108]	@ (8008b0c <find_volume+0x504>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d11e      	bne.n	8008ae0 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa4:	333c      	adds	r3, #60	@ 0x3c
 8008aa6:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7fd fce4 	bl	8006478 <ld_dword>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	4a17      	ldr	r2, [pc, #92]	@ (8008b10 <find_volume+0x508>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d113      	bne.n	8008ae0 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aba:	333c      	adds	r3, #60	@ 0x3c
 8008abc:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7fd fcd9 	bl	8006478 <ld_dword>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aca:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ace:	333c      	adds	r3, #60	@ 0x3c
 8008ad0:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7fd fccf 	bl	8006478 <ld_dword>
 8008ada:	4602      	mov	r2, r0
 8008adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ade:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae2:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008ae6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8008b14 <find_volume+0x50c>)
 8008aea:	881b      	ldrh	r3, [r3, #0]
 8008aec:	3301      	adds	r3, #1
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	4b08      	ldr	r3, [pc, #32]	@ (8008b14 <find_volume+0x50c>)
 8008af2:	801a      	strh	r2, [r3, #0]
 8008af4:	4b07      	ldr	r3, [pc, #28]	@ (8008b14 <find_volume+0x50c>)
 8008af6:	881a      	ldrh	r2, [r3, #0]
 8008af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008afa:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008afc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008afe:	f7fd ff1d 	bl	800693c <clear_lock>
#endif
	return FR_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3758      	adds	r7, #88	@ 0x58
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	41615252 	.word	0x41615252
 8008b10:	61417272 	.word	0x61417272
 8008b14:	20002810 	.word	0x20002810

08008b18 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008b22:	2309      	movs	r3, #9
 8008b24:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d02e      	beq.n	8008b8a <validate+0x72>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d02a      	beq.n	8008b8a <validate+0x72>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d025      	beq.n	8008b8a <validate+0x72>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	889a      	ldrh	r2, [r3, #4]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	88db      	ldrh	r3, [r3, #6]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d11e      	bne.n	8008b8a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fd fd79 	bl	8006648 <lock_fs>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d014      	beq.n	8008b86 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	785b      	ldrb	r3, [r3, #1]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7fd fbd0 	bl	8006308 <disk_status>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	f003 0301 	and.w	r3, r3, #1
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d102      	bne.n	8008b78 <validate+0x60>
				res = FR_OK;
 8008b72:	2300      	movs	r3, #0
 8008b74:	73fb      	strb	r3, [r7, #15]
 8008b76:	e008      	b.n	8008b8a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2100      	movs	r1, #0
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7fd fd78 	bl	8006674 <unlock_fs>
 8008b84:	e001      	b.n	8008b8a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8008b86:	230f      	movs	r3, #15
 8008b88:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008b8a:	7bfb      	ldrb	r3, [r7, #15]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d102      	bne.n	8008b96 <validate+0x7e>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	e000      	b.n	8008b98 <validate+0x80>
 8008b96:	2300      	movs	r3, #0
 8008b98:	683a      	ldr	r2, [r7, #0]
 8008b9a:	6013      	str	r3, [r2, #0]
	return res;
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
	...

08008ba8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b088      	sub	sp, #32
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008bba:	f107 0310 	add.w	r3, r7, #16
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7ff fc88 	bl	80084d4 <get_ldnumber>
 8008bc4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	da01      	bge.n	8008bd0 <f_mount+0x28>
 8008bcc:	230b      	movs	r3, #11
 8008bce:	e048      	b.n	8008c62 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008bd0:	4a26      	ldr	r2, [pc, #152]	@ (8008c6c <f_mount+0xc4>)
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bd8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d00f      	beq.n	8008c00 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008be0:	69b8      	ldr	r0, [r7, #24]
 8008be2:	f7fd feab 	bl	800693c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	695b      	ldr	r3, [r3, #20]
 8008bea:	4618      	mov	r0, r3
 8008bec:	f001 fb38 	bl	800a260 <ff_del_syncobj>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d101      	bne.n	8008bfa <f_mount+0x52>
 8008bf6:	2302      	movs	r3, #2
 8008bf8:	e033      	b.n	8008c62 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d00f      	beq.n	8008c26 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	b2da      	uxtb	r2, r3
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	3314      	adds	r3, #20
 8008c14:	4619      	mov	r1, r3
 8008c16:	4610      	mov	r0, r2
 8008c18:	f001 fb02 	bl	800a220 <ff_cre_syncobj>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d101      	bne.n	8008c26 <f_mount+0x7e>
 8008c22:	2302      	movs	r3, #2
 8008c24:	e01d      	b.n	8008c62 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	4910      	ldr	r1, [pc, #64]	@ (8008c6c <f_mount+0xc4>)
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d002      	beq.n	8008c3c <f_mount+0x94>
 8008c36:	79fb      	ldrb	r3, [r7, #7]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d001      	beq.n	8008c40 <f_mount+0x98>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	e010      	b.n	8008c62 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008c40:	f107 010c 	add.w	r1, r7, #12
 8008c44:	f107 0308 	add.w	r3, r7, #8
 8008c48:	2200      	movs	r2, #0
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7ff fcdc 	bl	8008608 <find_volume>
 8008c50:	4603      	mov	r3, r0
 8008c52:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	7dfa      	ldrb	r2, [r7, #23]
 8008c58:	4611      	mov	r1, r2
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f7fd fd0a 	bl	8006674 <unlock_fs>
 8008c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3720      	adds	r7, #32
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	2000280c 	.word	0x2000280c

08008c70 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b09a      	sub	sp, #104	@ 0x68
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d101      	bne.n	8008c88 <f_open+0x18>
 8008c84:	2309      	movs	r3, #9
 8008c86:	e1d3      	b.n	8009030 <f_open+0x3c0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008c88:	79fb      	ldrb	r3, [r7, #7]
 8008c8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c8e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008c90:	79fa      	ldrb	r2, [r7, #7]
 8008c92:	f107 0110 	add.w	r1, r7, #16
 8008c96:	f107 0308 	add.w	r3, r7, #8
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7ff fcb4 	bl	8008608 <find_volume>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8008ca6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	f040 81b0 	bne.w	8009010 <f_open+0x3a0>
		dj.obj.fs = fs;
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8008cb4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008cb8:	f001 fafe 	bl	800a2b8 <ff_memalloc>
 8008cbc:	65b8      	str	r0, [r7, #88]	@ 0x58
 8008cbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d106      	bne.n	8008cd2 <f_open+0x62>
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	2111      	movs	r1, #17
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7fd fcd3 	bl	8006674 <unlock_fs>
 8008cce:	2311      	movs	r3, #17
 8008cd0:	e1ae      	b.n	8009030 <f_open+0x3c0>
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008cd6:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	f107 0314 	add.w	r3, r7, #20
 8008cde:	4611      	mov	r1, r2
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7ff fb81 	bl	80083e8 <follow_path>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008cec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d118      	bne.n	8008d26 <f_open+0xb6>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008cf4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008cf8:	b25b      	sxtb	r3, r3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	da03      	bge.n	8008d06 <f_open+0x96>
				res = FR_INVALID_NAME;
 8008cfe:	2306      	movs	r3, #6
 8008d00:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008d04:	e00f      	b.n	8008d26 <f_open+0xb6>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008d06:	79fb      	ldrb	r3, [r7, #7]
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	bf8c      	ite	hi
 8008d0c:	2301      	movhi	r3, #1
 8008d0e:	2300      	movls	r3, #0
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	461a      	mov	r2, r3
 8008d14:	f107 0314 	add.w	r3, r7, #20
 8008d18:	4611      	mov	r1, r2
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7fd fcc6 	bl	80066ac <chk_lock>
 8008d20:	4603      	mov	r3, r0
 8008d22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008d26:	79fb      	ldrb	r3, [r7, #7]
 8008d28:	f003 031c 	and.w	r3, r3, #28
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d07f      	beq.n	8008e30 <f_open+0x1c0>
			if (res != FR_OK) {					/* No file, create new */
 8008d30:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d017      	beq.n	8008d68 <f_open+0xf8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008d38:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008d3c:	2b04      	cmp	r3, #4
 8008d3e:	d10e      	bne.n	8008d5e <f_open+0xee>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008d40:	f7fd fd10 	bl	8006764 <enq_lock>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d006      	beq.n	8008d58 <f_open+0xe8>
 8008d4a:	f107 0314 	add.w	r3, r7, #20
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7fe ff72 	bl	8007c38 <dir_register>
 8008d54:	4603      	mov	r3, r0
 8008d56:	e000      	b.n	8008d5a <f_open+0xea>
 8008d58:	2312      	movs	r3, #18
 8008d5a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008d5e:	79fb      	ldrb	r3, [r7, #7]
 8008d60:	f043 0308 	orr.w	r3, r3, #8
 8008d64:	71fb      	strb	r3, [r7, #7]
 8008d66:	e010      	b.n	8008d8a <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008d68:	7ebb      	ldrb	r3, [r7, #26]
 8008d6a:	f003 0311 	and.w	r3, r3, #17
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d003      	beq.n	8008d7a <f_open+0x10a>
					res = FR_DENIED;
 8008d72:	2307      	movs	r3, #7
 8008d74:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008d78:	e007      	b.n	8008d8a <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008d7a:	79fb      	ldrb	r3, [r7, #7]
 8008d7c:	f003 0304 	and.w	r3, r3, #4
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d002      	beq.n	8008d8a <f_open+0x11a>
 8008d84:	2308      	movs	r3, #8
 8008d86:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008d8a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d168      	bne.n	8008e64 <f_open+0x1f4>
 8008d92:	79fb      	ldrb	r3, [r7, #7]
 8008d94:	f003 0308 	and.w	r3, r3, #8
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d063      	beq.n	8008e64 <f_open+0x1f4>
				dw = GET_FATTIME();
 8008d9c:	f7fd fa56 	bl	800624c <get_fattime>
 8008da0:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008da4:	330e      	adds	r3, #14
 8008da6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008da8:	4618      	mov	r0, r3
 8008daa:	f7fd fba3 	bl	80064f4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008db0:	3316      	adds	r3, #22
 8008db2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7fd fb9d 	bl	80064f4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008dba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dbc:	330b      	adds	r3, #11
 8008dbe:	2220      	movs	r2, #32
 8008dc0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008dc6:	4611      	mov	r1, r2
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f7fe fba4 	bl	8007516 <ld_clust>
 8008dce:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fe fbbc 	bl	8007554 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dde:	331c      	adds	r3, #28
 8008de0:	2100      	movs	r1, #0
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7fd fb86 	bl	80064f4 <st_dword>
					fs->wflag = 1;
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	2201      	movs	r2, #1
 8008dec:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008dee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d037      	beq.n	8008e64 <f_open+0x1f4>
						dw = fs->winsect;
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008df8:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8008dfa:	f107 0314 	add.w	r3, r7, #20
 8008dfe:	2200      	movs	r2, #0
 8008e00:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7fe f8ac 	bl	8006f60 <remove_chain>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8008e0e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d126      	bne.n	8008e64 <f_open+0x1f4>
							res = move_window(fs, dw);
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7fd fdf6 	bl	8006a0c <move_window>
 8008e20:	4603      	mov	r3, r0
 8008e22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008e2a:	3a01      	subs	r2, #1
 8008e2c:	619a      	str	r2, [r3, #24]
 8008e2e:	e019      	b.n	8008e64 <f_open+0x1f4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008e30:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d115      	bne.n	8008e64 <f_open+0x1f4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008e38:	7ebb      	ldrb	r3, [r7, #26]
 8008e3a:	f003 0310 	and.w	r3, r3, #16
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d003      	beq.n	8008e4a <f_open+0x1da>
					res = FR_NO_FILE;
 8008e42:	2304      	movs	r3, #4
 8008e44:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008e48:	e00c      	b.n	8008e64 <f_open+0x1f4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008e4a:	79fb      	ldrb	r3, [r7, #7]
 8008e4c:	f003 0302 	and.w	r3, r3, #2
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d007      	beq.n	8008e64 <f_open+0x1f4>
 8008e54:	7ebb      	ldrb	r3, [r7, #26]
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d002      	beq.n	8008e64 <f_open+0x1f4>
						res = FR_DENIED;
 8008e5e:	2307      	movs	r3, #7
 8008e60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008e64:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d126      	bne.n	8008eba <f_open+0x24a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008e6c:	79fb      	ldrb	r3, [r7, #7]
 8008e6e:	f003 0308 	and.w	r3, r3, #8
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d003      	beq.n	8008e7e <f_open+0x20e>
				mode |= FA_MODIFIED;
 8008e76:	79fb      	ldrb	r3, [r7, #7]
 8008e78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e7c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008e86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008e8c:	79fb      	ldrb	r3, [r7, #7]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	bf8c      	ite	hi
 8008e92:	2301      	movhi	r3, #1
 8008e94:	2300      	movls	r3, #0
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	461a      	mov	r2, r3
 8008e9a:	f107 0314 	add.w	r3, r7, #20
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f7fd fc81 	bl	80067a8 <inc_lock>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d102      	bne.n	8008eba <f_open+0x24a>
 8008eb4:	2302      	movs	r3, #2
 8008eb6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008eba:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	f040 80a3 	bne.w	800900a <f_open+0x39a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ec8:	4611      	mov	r1, r2
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fe fb23 	bl	8007516 <ld_clust>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008ed6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ed8:	331c      	adds	r3, #28
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fd facc 	bl	8006478 <ld_dword>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008eec:	693a      	ldr	r2, [r7, #16]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	88da      	ldrh	r2, [r3, #6]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	79fa      	ldrb	r2, [r7, #7]
 8008efe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	3330      	adds	r3, #48	@ 0x30
 8008f16:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f7fd fb36 	bl	800658e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008f22:	79fb      	ldrb	r3, [r7, #7]
 8008f24:	f003 0320 	and.w	r3, r3, #32
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d06e      	beq.n	800900a <f_open+0x39a>
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d06a      	beq.n	800900a <f_open+0x39a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	68da      	ldr	r2, [r3, #12]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	895b      	ldrh	r3, [r3, #10]
 8008f40:	461a      	mov	r2, r3
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	899b      	ldrh	r3, [r3, #12]
 8008f46:	fb02 f303 	mul.w	r3, r2, r3
 8008f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	68db      	ldr	r3, [r3, #12]
 8008f56:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f58:	e016      	b.n	8008f88 <f_open+0x318>
					clst = get_fat(&fp->obj, clst);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7fd fe11 	bl	8006b86 <get_fat>
 8008f64:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008f66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d802      	bhi.n	8008f72 <f_open+0x302>
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008f72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f78:	d102      	bne.n	8008f80 <f_open+0x310>
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008f80:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008f82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f88:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d103      	bne.n	8008f98 <f_open+0x328>
 8008f90:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008f92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d8e0      	bhi.n	8008f5a <f_open+0x2ea>
				}
				fp->clust = clst;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008f9c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008f9e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d131      	bne.n	800900a <f_open+0x39a>
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	899b      	ldrh	r3, [r3, #12]
 8008faa:	461a      	mov	r2, r3
 8008fac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fae:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fb2:	fb01 f202 	mul.w	r2, r1, r2
 8008fb6:	1a9b      	subs	r3, r3, r2
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d026      	beq.n	800900a <f_open+0x39a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7fd fdc1 	bl	8006b48 <clust2sect>
 8008fc6:	64b8      	str	r0, [r7, #72]	@ 0x48
 8008fc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d103      	bne.n	8008fd6 <f_open+0x366>
						res = FR_INT_ERR;
 8008fce:	2302      	movs	r3, #2
 8008fd0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008fd4:	e019      	b.n	800900a <f_open+0x39a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008fd6:	693b      	ldr	r3, [r7, #16]
 8008fd8:	899b      	ldrh	r3, [r3, #12]
 8008fda:	461a      	mov	r2, r3
 8008fdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fde:	fbb3 f2f2 	udiv	r2, r3, r2
 8008fe2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fe4:	441a      	add	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	7858      	ldrb	r0, [r3, #1]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6a1a      	ldr	r2, [r3, #32]
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	f7fd f9c7 	bl	800638c <disk_read>
 8008ffe:	4603      	mov	r3, r0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d002      	beq.n	800900a <f_open+0x39a>
 8009004:	2301      	movs	r3, #1
 8009006:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800900a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800900c:	f001 f960 	bl	800a2d0 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009010:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009014:	2b00      	cmp	r3, #0
 8009016:	d002      	beq.n	800901e <f_open+0x3ae>
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2200      	movs	r2, #0
 800901c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8009024:	4611      	mov	r1, r2
 8009026:	4618      	mov	r0, r3
 8009028:	f7fd fb24 	bl	8006674 <unlock_fs>
 800902c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8009030:	4618      	mov	r0, r3
 8009032:	3768      	adds	r7, #104	@ 0x68
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b08e      	sub	sp, #56	@ 0x38
 800903c:	af00      	add	r7, sp, #0
 800903e:	60f8      	str	r0, [r7, #12]
 8009040:	60b9      	str	r1, [r7, #8]
 8009042:	607a      	str	r2, [r7, #4]
 8009044:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	2200      	movs	r2, #0
 800904e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f107 0214 	add.w	r2, r7, #20
 8009056:	4611      	mov	r1, r2
 8009058:	4618      	mov	r0, r3
 800905a:	f7ff fd5d 	bl	8008b18 <validate>
 800905e:	4603      	mov	r3, r0
 8009060:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009064:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009068:	2b00      	cmp	r3, #0
 800906a:	d107      	bne.n	800907c <f_read+0x44>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	7d5b      	ldrb	r3, [r3, #21]
 8009070:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009074:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009078:	2b00      	cmp	r3, #0
 800907a:	d009      	beq.n	8009090 <f_read+0x58>
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8009082:	4611      	mov	r1, r2
 8009084:	4618      	mov	r0, r3
 8009086:	f7fd faf5 	bl	8006674 <unlock_fs>
 800908a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800908e:	e15d      	b.n	800934c <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	7d1b      	ldrb	r3, [r3, #20]
 8009094:	f003 0301 	and.w	r3, r3, #1
 8009098:	2b00      	cmp	r3, #0
 800909a:	d106      	bne.n	80090aa <f_read+0x72>
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	2107      	movs	r1, #7
 80090a0:	4618      	mov	r0, r3
 80090a2:	f7fd fae7 	bl	8006674 <unlock_fs>
 80090a6:	2307      	movs	r3, #7
 80090a8:	e150      	b.n	800934c <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	68da      	ldr	r2, [r3, #12]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	699b      	ldr	r3, [r3, #24]
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80090b6:	687a      	ldr	r2, [r7, #4]
 80090b8:	6a3b      	ldr	r3, [r7, #32]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	f240 813c 	bls.w	8009338 <f_read+0x300>
 80090c0:	6a3b      	ldr	r3, [r7, #32]
 80090c2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80090c4:	e138      	b.n	8009338 <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	699b      	ldr	r3, [r3, #24]
 80090ca:	697a      	ldr	r2, [r7, #20]
 80090cc:	8992      	ldrh	r2, [r2, #12]
 80090ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80090d2:	fb01 f202 	mul.w	r2, r1, r2
 80090d6:	1a9b      	subs	r3, r3, r2
 80090d8:	2b00      	cmp	r3, #0
 80090da:	f040 80f3 	bne.w	80092c4 <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	8992      	ldrh	r2, [r2, #12]
 80090e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	8952      	ldrh	r2, [r2, #10]
 80090ee:	3a01      	subs	r2, #1
 80090f0:	4013      	ands	r3, r2
 80090f2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d139      	bne.n	800916e <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	699b      	ldr	r3, [r3, #24]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d103      	bne.n	800910a <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	633b      	str	r3, [r7, #48]	@ 0x30
 8009108:	e013      	b.n	8009132 <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800910e:	2b00      	cmp	r3, #0
 8009110:	d007      	beq.n	8009122 <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	699b      	ldr	r3, [r3, #24]
 8009116:	4619      	mov	r1, r3
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f7fe f81e 	bl	800715a <clmt_clust>
 800911e:	6338      	str	r0, [r7, #48]	@ 0x30
 8009120:	e007      	b.n	8009132 <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	69db      	ldr	r3, [r3, #28]
 8009128:	4619      	mov	r1, r3
 800912a:	4610      	mov	r0, r2
 800912c:	f7fd fd2b 	bl	8006b86 <get_fat>
 8009130:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009134:	2b01      	cmp	r3, #1
 8009136:	d809      	bhi.n	800914c <f_read+0x114>
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2202      	movs	r2, #2
 800913c:	755a      	strb	r2, [r3, #21]
 800913e:	697b      	ldr	r3, [r7, #20]
 8009140:	2102      	movs	r1, #2
 8009142:	4618      	mov	r0, r3
 8009144:	f7fd fa96 	bl	8006674 <unlock_fs>
 8009148:	2302      	movs	r3, #2
 800914a:	e0ff      	b.n	800934c <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800914c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009152:	d109      	bne.n	8009168 <f_read+0x130>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2201      	movs	r2, #1
 8009158:	755a      	strb	r2, [r3, #21]
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	2101      	movs	r1, #1
 800915e:	4618      	mov	r0, r3
 8009160:	f7fd fa88 	bl	8006674 <unlock_fs>
 8009164:	2301      	movs	r3, #1
 8009166:	e0f1      	b.n	800934c <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800916c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800916e:	697a      	ldr	r2, [r7, #20]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	69db      	ldr	r3, [r3, #28]
 8009174:	4619      	mov	r1, r3
 8009176:	4610      	mov	r0, r2
 8009178:	f7fd fce6 	bl	8006b48 <clust2sect>
 800917c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d109      	bne.n	8009198 <f_read+0x160>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2202      	movs	r2, #2
 8009188:	755a      	strb	r2, [r3, #21]
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	2102      	movs	r1, #2
 800918e:	4618      	mov	r0, r3
 8009190:	f7fd fa70 	bl	8006674 <unlock_fs>
 8009194:	2302      	movs	r3, #2
 8009196:	e0d9      	b.n	800934c <f_read+0x314>
			sect += csect;
 8009198:	69ba      	ldr	r2, [r7, #24]
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	4413      	add	r3, r2
 800919e:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	899b      	ldrh	r3, [r3, #12]
 80091a4:	461a      	mov	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80091ac:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80091ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d046      	beq.n	8009242 <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80091b4:	69fa      	ldr	r2, [r7, #28]
 80091b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b8:	4413      	add	r3, r2
 80091ba:	697a      	ldr	r2, [r7, #20]
 80091bc:	8952      	ldrh	r2, [r2, #10]
 80091be:	4293      	cmp	r3, r2
 80091c0:	d905      	bls.n	80091ce <f_read+0x196>
					cc = fs->csize - csect;
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	895b      	ldrh	r3, [r3, #10]
 80091c6:	461a      	mov	r2, r3
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	1ad3      	subs	r3, r2, r3
 80091cc:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	7858      	ldrb	r0, [r3, #1]
 80091d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d4:	69ba      	ldr	r2, [r7, #24]
 80091d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80091d8:	f7fd f8d8 	bl	800638c <disk_read>
 80091dc:	4603      	mov	r3, r0
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d009      	beq.n	80091f6 <f_read+0x1be>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2201      	movs	r2, #1
 80091e6:	755a      	strb	r2, [r3, #21]
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	2101      	movs	r1, #1
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7fd fa41 	bl	8006674 <unlock_fs>
 80091f2:	2301      	movs	r3, #1
 80091f4:	e0aa      	b.n	800934c <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	7d1b      	ldrb	r3, [r3, #20]
 80091fa:	b25b      	sxtb	r3, r3
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	da18      	bge.n	8009232 <f_read+0x1fa>
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6a1a      	ldr	r2, [r3, #32]
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	1ad3      	subs	r3, r2, r3
 8009208:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800920a:	429a      	cmp	r2, r3
 800920c:	d911      	bls.n	8009232 <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	6a1a      	ldr	r2, [r3, #32]
 8009212:	69bb      	ldr	r3, [r7, #24]
 8009214:	1ad3      	subs	r3, r2, r3
 8009216:	697a      	ldr	r2, [r7, #20]
 8009218:	8992      	ldrh	r2, [r2, #12]
 800921a:	fb02 f303 	mul.w	r3, r2, r3
 800921e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009220:	18d0      	adds	r0, r2, r3
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	899b      	ldrh	r3, [r3, #12]
 800922c:	461a      	mov	r2, r3
 800922e:	f7fd f98d 	bl	800654c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	899b      	ldrh	r3, [r3, #12]
 8009236:	461a      	mov	r2, r3
 8009238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800923a:	fb02 f303 	mul.w	r3, r2, r3
 800923e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009240:	e066      	b.n	8009310 <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6a1b      	ldr	r3, [r3, #32]
 8009246:	69ba      	ldr	r2, [r7, #24]
 8009248:	429a      	cmp	r2, r3
 800924a:	d038      	beq.n	80092be <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	7d1b      	ldrb	r3, [r3, #20]
 8009250:	b25b      	sxtb	r3, r3
 8009252:	2b00      	cmp	r3, #0
 8009254:	da1d      	bge.n	8009292 <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	7858      	ldrb	r0, [r3, #1]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6a1a      	ldr	r2, [r3, #32]
 8009264:	2301      	movs	r3, #1
 8009266:	f7fd f8b1 	bl	80063cc <disk_write>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	d009      	beq.n	8009284 <f_read+0x24c>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2201      	movs	r2, #1
 8009274:	755a      	strb	r2, [r3, #21]
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2101      	movs	r1, #1
 800927a:	4618      	mov	r0, r3
 800927c:	f7fd f9fa 	bl	8006674 <unlock_fs>
 8009280:	2301      	movs	r3, #1
 8009282:	e063      	b.n	800934c <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	7d1b      	ldrb	r3, [r3, #20]
 8009288:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800928c:	b2da      	uxtb	r2, r3
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	7858      	ldrb	r0, [r3, #1]
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800929c:	2301      	movs	r3, #1
 800929e:	69ba      	ldr	r2, [r7, #24]
 80092a0:	f7fd f874 	bl	800638c <disk_read>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d009      	beq.n	80092be <f_read+0x286>
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2201      	movs	r2, #1
 80092ae:	755a      	strb	r2, [r3, #21]
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	2101      	movs	r1, #1
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7fd f9dd 	bl	8006674 <unlock_fs>
 80092ba:	2301      	movs	r3, #1
 80092bc:	e046      	b.n	800934c <f_read+0x314>
			}
#endif
			fp->sect = sect;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	69ba      	ldr	r2, [r7, #24]
 80092c2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	899b      	ldrh	r3, [r3, #12]
 80092c8:	4618      	mov	r0, r3
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	699b      	ldr	r3, [r3, #24]
 80092ce:	697a      	ldr	r2, [r7, #20]
 80092d0:	8992      	ldrh	r2, [r2, #12]
 80092d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80092d6:	fb01 f202 	mul.w	r2, r1, r2
 80092da:	1a9b      	subs	r3, r3, r2
 80092dc:	1ac3      	subs	r3, r0, r3
 80092de:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80092e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d901      	bls.n	80092ec <f_read+0x2b4>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	8992      	ldrh	r2, [r2, #12]
 80092fa:	fbb3 f0f2 	udiv	r0, r3, r2
 80092fe:	fb00 f202 	mul.w	r2, r0, r2
 8009302:	1a9b      	subs	r3, r3, r2
 8009304:	440b      	add	r3, r1
 8009306:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009308:	4619      	mov	r1, r3
 800930a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800930c:	f7fd f91e 	bl	800654c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009314:	4413      	add	r3, r2
 8009316:	627b      	str	r3, [r7, #36]	@ 0x24
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	699a      	ldr	r2, [r3, #24]
 800931c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800931e:	441a      	add	r2, r3
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	619a      	str	r2, [r3, #24]
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800932a:	441a      	add	r2, r3
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	601a      	str	r2, [r3, #0]
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009334:	1ad3      	subs	r3, r2, r3
 8009336:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	f47f aec3 	bne.w	80090c6 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	2100      	movs	r1, #0
 8009344:	4618      	mov	r0, r3
 8009346:	f7fd f995 	bl	8006674 <unlock_fs>
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3738      	adds	r7, #56	@ 0x38
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b08c      	sub	sp, #48	@ 0x30
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	607a      	str	r2, [r7, #4]
 8009360:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	2200      	movs	r2, #0
 800936a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f107 0210 	add.w	r2, r7, #16
 8009372:	4611      	mov	r1, r2
 8009374:	4618      	mov	r0, r3
 8009376:	f7ff fbcf 	bl	8008b18 <validate>
 800937a:	4603      	mov	r3, r0
 800937c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009380:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009384:	2b00      	cmp	r3, #0
 8009386:	d107      	bne.n	8009398 <f_write+0x44>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	7d5b      	ldrb	r3, [r3, #21]
 800938c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009390:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009394:	2b00      	cmp	r3, #0
 8009396:	d009      	beq.n	80093ac <f_write+0x58>
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800939e:	4611      	mov	r1, r2
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fd f967 	bl	8006674 <unlock_fs>
 80093a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80093aa:	e192      	b.n	80096d2 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	7d1b      	ldrb	r3, [r3, #20]
 80093b0:	f003 0302 	and.w	r3, r3, #2
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d106      	bne.n	80093c6 <f_write+0x72>
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	2107      	movs	r1, #7
 80093bc:	4618      	mov	r0, r3
 80093be:	f7fd f959 	bl	8006674 <unlock_fs>
 80093c2:	2307      	movs	r3, #7
 80093c4:	e185      	b.n	80096d2 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	699a      	ldr	r2, [r3, #24]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	441a      	add	r2, r3
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	429a      	cmp	r2, r3
 80093d4:	f080 816a 	bcs.w	80096ac <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	43db      	mvns	r3, r3
 80093de:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80093e0:	e164      	b.n	80096ac <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	699b      	ldr	r3, [r3, #24]
 80093e6:	693a      	ldr	r2, [r7, #16]
 80093e8:	8992      	ldrh	r2, [r2, #12]
 80093ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80093ee:	fb01 f202 	mul.w	r2, r1, r2
 80093f2:	1a9b      	subs	r3, r3, r2
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	f040 810f 	bne.w	8009618 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	8992      	ldrh	r2, [r2, #12]
 8009402:	fbb3 f3f2 	udiv	r3, r3, r2
 8009406:	693a      	ldr	r2, [r7, #16]
 8009408:	8952      	ldrh	r2, [r2, #10]
 800940a:	3a01      	subs	r2, #1
 800940c:	4013      	ands	r3, r2
 800940e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009410:	69bb      	ldr	r3, [r7, #24]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d14d      	bne.n	80094b2 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10c      	bne.n	8009438 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009426:	2b00      	cmp	r3, #0
 8009428:	d11a      	bne.n	8009460 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2100      	movs	r1, #0
 800942e:	4618      	mov	r0, r3
 8009430:	f7fd fdfb 	bl	800702a <create_chain>
 8009434:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009436:	e013      	b.n	8009460 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800943c:	2b00      	cmp	r3, #0
 800943e:	d007      	beq.n	8009450 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	699b      	ldr	r3, [r3, #24]
 8009444:	4619      	mov	r1, r3
 8009446:	68f8      	ldr	r0, [r7, #12]
 8009448:	f7fd fe87 	bl	800715a <clmt_clust>
 800944c:	62b8      	str	r0, [r7, #40]	@ 0x28
 800944e:	e007      	b.n	8009460 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009450:	68fa      	ldr	r2, [r7, #12]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	69db      	ldr	r3, [r3, #28]
 8009456:	4619      	mov	r1, r3
 8009458:	4610      	mov	r0, r2
 800945a:	f7fd fde6 	bl	800702a <create_chain>
 800945e:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009462:	2b00      	cmp	r3, #0
 8009464:	f000 8127 	beq.w	80096b6 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800946a:	2b01      	cmp	r3, #1
 800946c:	d109      	bne.n	8009482 <f_write+0x12e>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2202      	movs	r2, #2
 8009472:	755a      	strb	r2, [r3, #21]
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	2102      	movs	r1, #2
 8009478:	4618      	mov	r0, r3
 800947a:	f7fd f8fb 	bl	8006674 <unlock_fs>
 800947e:	2302      	movs	r3, #2
 8009480:	e127      	b.n	80096d2 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009488:	d109      	bne.n	800949e <f_write+0x14a>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2201      	movs	r2, #1
 800948e:	755a      	strb	r2, [r3, #21]
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	2101      	movs	r1, #1
 8009494:	4618      	mov	r0, r3
 8009496:	f7fd f8ed 	bl	8006674 <unlock_fs>
 800949a:	2301      	movs	r3, #1
 800949c:	e119      	b.n	80096d2 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094a2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	689b      	ldr	r3, [r3, #8]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d102      	bne.n	80094b2 <f_write+0x15e>
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094b0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	7d1b      	ldrb	r3, [r3, #20]
 80094b6:	b25b      	sxtb	r3, r3
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	da1d      	bge.n	80094f8 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	7858      	ldrb	r0, [r3, #1]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6a1a      	ldr	r2, [r3, #32]
 80094ca:	2301      	movs	r3, #1
 80094cc:	f7fc ff7e 	bl	80063cc <disk_write>
 80094d0:	4603      	mov	r3, r0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d009      	beq.n	80094ea <f_write+0x196>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2201      	movs	r2, #1
 80094da:	755a      	strb	r2, [r3, #21]
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	2101      	movs	r1, #1
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7fd f8c7 	bl	8006674 <unlock_fs>
 80094e6:	2301      	movs	r3, #1
 80094e8:	e0f3      	b.n	80096d2 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	7d1b      	ldrb	r3, [r3, #20]
 80094ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094f2:	b2da      	uxtb	r2, r3
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80094f8:	693a      	ldr	r2, [r7, #16]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	69db      	ldr	r3, [r3, #28]
 80094fe:	4619      	mov	r1, r3
 8009500:	4610      	mov	r0, r2
 8009502:	f7fd fb21 	bl	8006b48 <clust2sect>
 8009506:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d109      	bne.n	8009522 <f_write+0x1ce>
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2202      	movs	r2, #2
 8009512:	755a      	strb	r2, [r3, #21]
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	2102      	movs	r1, #2
 8009518:	4618      	mov	r0, r3
 800951a:	f7fd f8ab 	bl	8006674 <unlock_fs>
 800951e:	2302      	movs	r3, #2
 8009520:	e0d7      	b.n	80096d2 <f_write+0x37e>
			sect += csect;
 8009522:	697a      	ldr	r2, [r7, #20]
 8009524:	69bb      	ldr	r3, [r7, #24]
 8009526:	4413      	add	r3, r2
 8009528:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	899b      	ldrh	r3, [r3, #12]
 800952e:	461a      	mov	r2, r3
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	fbb3 f3f2 	udiv	r3, r3, r2
 8009536:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009538:	6a3b      	ldr	r3, [r7, #32]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d048      	beq.n	80095d0 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800953e:	69ba      	ldr	r2, [r7, #24]
 8009540:	6a3b      	ldr	r3, [r7, #32]
 8009542:	4413      	add	r3, r2
 8009544:	693a      	ldr	r2, [r7, #16]
 8009546:	8952      	ldrh	r2, [r2, #10]
 8009548:	4293      	cmp	r3, r2
 800954a:	d905      	bls.n	8009558 <f_write+0x204>
					cc = fs->csize - csect;
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	895b      	ldrh	r3, [r3, #10]
 8009550:	461a      	mov	r2, r3
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	1ad3      	subs	r3, r2, r3
 8009556:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	7858      	ldrb	r0, [r3, #1]
 800955c:	6a3b      	ldr	r3, [r7, #32]
 800955e:	697a      	ldr	r2, [r7, #20]
 8009560:	69f9      	ldr	r1, [r7, #28]
 8009562:	f7fc ff33 	bl	80063cc <disk_write>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d009      	beq.n	8009580 <f_write+0x22c>
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2201      	movs	r2, #1
 8009570:	755a      	strb	r2, [r3, #21]
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	2101      	movs	r1, #1
 8009576:	4618      	mov	r0, r3
 8009578:	f7fd f87c 	bl	8006674 <unlock_fs>
 800957c:	2301      	movs	r3, #1
 800957e:	e0a8      	b.n	80096d2 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6a1a      	ldr	r2, [r3, #32]
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	1ad3      	subs	r3, r2, r3
 8009588:	6a3a      	ldr	r2, [r7, #32]
 800958a:	429a      	cmp	r2, r3
 800958c:	d918      	bls.n	80095c0 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6a1a      	ldr	r2, [r3, #32]
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	1ad3      	subs	r3, r2, r3
 800959c:	693a      	ldr	r2, [r7, #16]
 800959e:	8992      	ldrh	r2, [r2, #12]
 80095a0:	fb02 f303 	mul.w	r3, r2, r3
 80095a4:	69fa      	ldr	r2, [r7, #28]
 80095a6:	18d1      	adds	r1, r2, r3
 80095a8:	693b      	ldr	r3, [r7, #16]
 80095aa:	899b      	ldrh	r3, [r3, #12]
 80095ac:	461a      	mov	r2, r3
 80095ae:	f7fc ffcd 	bl	800654c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	7d1b      	ldrb	r3, [r3, #20]
 80095b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	899b      	ldrh	r3, [r3, #12]
 80095c4:	461a      	mov	r2, r3
 80095c6:	6a3b      	ldr	r3, [r7, #32]
 80095c8:	fb02 f303 	mul.w	r3, r2, r3
 80095cc:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80095ce:	e050      	b.n	8009672 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	6a1b      	ldr	r3, [r3, #32]
 80095d4:	697a      	ldr	r2, [r7, #20]
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d01b      	beq.n	8009612 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	699a      	ldr	r2, [r3, #24]
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d215      	bcs.n	8009612 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	7858      	ldrb	r0, [r3, #1]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80095f0:	2301      	movs	r3, #1
 80095f2:	697a      	ldr	r2, [r7, #20]
 80095f4:	f7fc feca 	bl	800638c <disk_read>
 80095f8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d009      	beq.n	8009612 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2201      	movs	r2, #1
 8009602:	755a      	strb	r2, [r3, #21]
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	2101      	movs	r1, #1
 8009608:	4618      	mov	r0, r3
 800960a:	f7fd f833 	bl	8006674 <unlock_fs>
 800960e:	2301      	movs	r3, #1
 8009610:	e05f      	b.n	80096d2 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	697a      	ldr	r2, [r7, #20]
 8009616:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009618:	693b      	ldr	r3, [r7, #16]
 800961a:	899b      	ldrh	r3, [r3, #12]
 800961c:	4618      	mov	r0, r3
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	699b      	ldr	r3, [r3, #24]
 8009622:	693a      	ldr	r2, [r7, #16]
 8009624:	8992      	ldrh	r2, [r2, #12]
 8009626:	fbb3 f1f2 	udiv	r1, r3, r2
 800962a:	fb01 f202 	mul.w	r2, r1, r2
 800962e:	1a9b      	subs	r3, r3, r2
 8009630:	1ac3      	subs	r3, r0, r3
 8009632:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	429a      	cmp	r2, r3
 800963a:	d901      	bls.n	8009640 <f_write+0x2ec>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	699b      	ldr	r3, [r3, #24]
 800964a:	693a      	ldr	r2, [r7, #16]
 800964c:	8992      	ldrh	r2, [r2, #12]
 800964e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009652:	fb00 f202 	mul.w	r2, r0, r2
 8009656:	1a9b      	subs	r3, r3, r2
 8009658:	440b      	add	r3, r1
 800965a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800965c:	69f9      	ldr	r1, [r7, #28]
 800965e:	4618      	mov	r0, r3
 8009660:	f7fc ff74 	bl	800654c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	7d1b      	ldrb	r3, [r3, #20]
 8009668:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800966c:	b2da      	uxtb	r2, r3
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009672:	69fa      	ldr	r2, [r7, #28]
 8009674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009676:	4413      	add	r3, r2
 8009678:	61fb      	str	r3, [r7, #28]
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	699a      	ldr	r2, [r3, #24]
 800967e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009680:	441a      	add	r2, r3
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	619a      	str	r2, [r3, #24]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	68da      	ldr	r2, [r3, #12]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	699b      	ldr	r3, [r3, #24]
 800968e:	429a      	cmp	r2, r3
 8009690:	bf38      	it	cc
 8009692:	461a      	movcc	r2, r3
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	60da      	str	r2, [r3, #12]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800969e:	441a      	add	r2, r3
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	601a      	str	r2, [r3, #0]
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a8:	1ad3      	subs	r3, r2, r3
 80096aa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	f47f ae97 	bne.w	80093e2 <f_write+0x8e>
 80096b4:	e000      	b.n	80096b8 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80096b6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	7d1b      	ldrb	r3, [r3, #20]
 80096bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096c0:	b2da      	uxtb	r2, r3
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	2100      	movs	r1, #0
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fc ffd2 	bl	8006674 <unlock_fs>
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3730      	adds	r7, #48	@ 0x30
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b086      	sub	sp, #24
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f107 0208 	add.w	r2, r7, #8
 80096e8:	4611      	mov	r1, r2
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7ff fa14 	bl	8008b18 <validate>
 80096f0:	4603      	mov	r3, r0
 80096f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80096f4:	7dfb      	ldrb	r3, [r7, #23]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d16d      	bne.n	80097d6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	7d1b      	ldrb	r3, [r3, #20]
 80096fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009702:	2b00      	cmp	r3, #0
 8009704:	d067      	beq.n	80097d6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	7d1b      	ldrb	r3, [r3, #20]
 800970a:	b25b      	sxtb	r3, r3
 800970c:	2b00      	cmp	r3, #0
 800970e:	da1a      	bge.n	8009746 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	7858      	ldrb	r0, [r3, #1]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a1a      	ldr	r2, [r3, #32]
 800971e:	2301      	movs	r3, #1
 8009720:	f7fc fe54 	bl	80063cc <disk_write>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d006      	beq.n	8009738 <f_sync+0x5e>
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	2101      	movs	r1, #1
 800972e:	4618      	mov	r0, r3
 8009730:	f7fc ffa0 	bl	8006674 <unlock_fs>
 8009734:	2301      	movs	r3, #1
 8009736:	e055      	b.n	80097e4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	7d1b      	ldrb	r3, [r3, #20]
 800973c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009740:	b2da      	uxtb	r2, r3
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009746:	f7fc fd81 	bl	800624c <get_fattime>
 800974a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009752:	4619      	mov	r1, r3
 8009754:	4610      	mov	r0, r2
 8009756:	f7fd f959 	bl	8006a0c <move_window>
 800975a:	4603      	mov	r3, r0
 800975c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800975e:	7dfb      	ldrb	r3, [r7, #23]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d138      	bne.n	80097d6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009768:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	330b      	adds	r3, #11
 800976e:	781a      	ldrb	r2, [r3, #0]
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	330b      	adds	r3, #11
 8009774:	f042 0220 	orr.w	r2, r2, #32
 8009778:	b2d2      	uxtb	r2, r2
 800977a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6818      	ldr	r0, [r3, #0]
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	461a      	mov	r2, r3
 8009786:	68f9      	ldr	r1, [r7, #12]
 8009788:	f7fd fee4 	bl	8007554 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f103 021c 	add.w	r2, r3, #28
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	4619      	mov	r1, r3
 8009798:	4610      	mov	r0, r2
 800979a:	f7fc feab 	bl	80064f4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	3316      	adds	r3, #22
 80097a2:	6939      	ldr	r1, [r7, #16]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7fc fea5 	bl	80064f4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	3312      	adds	r3, #18
 80097ae:	2100      	movs	r1, #0
 80097b0:	4618      	mov	r0, r3
 80097b2:	f7fc fe84 	bl	80064be <st_word>
					fs->wflag = 1;
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	2201      	movs	r2, #1
 80097ba:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	4618      	mov	r0, r3
 80097c0:	f7fd f952 	bl	8006a68 <sync_fs>
 80097c4:	4603      	mov	r3, r0
 80097c6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	7d1b      	ldrb	r3, [r3, #20]
 80097cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097d0:	b2da      	uxtb	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	7dfa      	ldrb	r2, [r7, #23]
 80097da:	4611      	mov	r1, r2
 80097dc:	4618      	mov	r0, r3
 80097de:	f7fc ff49 	bl	8006674 <unlock_fs>
 80097e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3718      	adds	r7, #24
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80097f4:	6878      	ldr	r0, [r7, #4]
 80097f6:	f7ff ff70 	bl	80096da <f_sync>
 80097fa:	4603      	mov	r3, r0
 80097fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80097fe:	7bfb      	ldrb	r3, [r7, #15]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d11d      	bne.n	8009840 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f107 0208 	add.w	r2, r7, #8
 800980a:	4611      	mov	r1, r2
 800980c:	4618      	mov	r0, r3
 800980e:	f7ff f983 	bl	8008b18 <validate>
 8009812:	4603      	mov	r3, r0
 8009814:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009816:	7bfb      	ldrb	r3, [r7, #15]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d111      	bne.n	8009840 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	691b      	ldr	r3, [r3, #16]
 8009820:	4618      	mov	r0, r3
 8009822:	f7fd f84f 	bl	80068c4 <dec_lock>
 8009826:	4603      	mov	r3, r0
 8009828:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800982a:	7bfb      	ldrb	r3, [r7, #15]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d102      	bne.n	8009836 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	2100      	movs	r1, #0
 800983a:	4618      	mov	r0, r3
 800983c:	f7fc ff1a 	bl	8006674 <unlock_fs>
#endif
		}
	}
	return res;
 8009840:	7bfb      	ldrb	r3, [r7, #15]
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b090      	sub	sp, #64	@ 0x40
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f107 0208 	add.w	r2, r7, #8
 800985a:	4611      	mov	r1, r2
 800985c:	4618      	mov	r0, r3
 800985e:	f7ff f95b 	bl	8008b18 <validate>
 8009862:	4603      	mov	r3, r0
 8009864:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009868:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800986c:	2b00      	cmp	r3, #0
 800986e:	d103      	bne.n	8009878 <f_lseek+0x2e>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	7d5b      	ldrb	r3, [r3, #21]
 8009874:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009878:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800987c:	2b00      	cmp	r3, #0
 800987e:	d009      	beq.n	8009894 <f_lseek+0x4a>
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8009886:	4611      	mov	r1, r2
 8009888:	4618      	mov	r0, r3
 800988a:	f7fc fef3 	bl	8006674 <unlock_fs>
 800988e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009892:	e244      	b.n	8009d1e <f_lseek+0x4d4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009898:	2b00      	cmp	r3, #0
 800989a:	f000 80f2 	beq.w	8009a82 <f_lseek+0x238>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a4:	d164      	bne.n	8009970 <f_lseek+0x126>
			tbl = fp->cltbl;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098aa:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80098ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ae:	1d1a      	adds	r2, r3, #4
 80098b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	617b      	str	r3, [r7, #20]
 80098b6:	2302      	movs	r3, #2
 80098b8:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80098c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d044      	beq.n	8009950 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80098c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c8:	613b      	str	r3, [r7, #16]
 80098ca:	2300      	movs	r3, #0
 80098cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d0:	3302      	adds	r3, #2
 80098d2:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80098d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098d6:	60fb      	str	r3, [r7, #12]
 80098d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098da:	3301      	adds	r3, #1
 80098dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80098e2:	4618      	mov	r0, r3
 80098e4:	f7fd f94f 	bl	8006b86 <get_fat>
 80098e8:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80098ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d809      	bhi.n	8009904 <f_lseek+0xba>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2202      	movs	r2, #2
 80098f4:	755a      	strb	r2, [r3, #21]
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	2102      	movs	r1, #2
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fc feba 	bl	8006674 <unlock_fs>
 8009900:	2302      	movs	r3, #2
 8009902:	e20c      	b.n	8009d1e <f_lseek+0x4d4>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990a:	d109      	bne.n	8009920 <f_lseek+0xd6>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	755a      	strb	r2, [r3, #21]
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	2101      	movs	r1, #1
 8009916:	4618      	mov	r0, r3
 8009918:	f7fc feac 	bl	8006674 <unlock_fs>
 800991c:	2301      	movs	r3, #1
 800991e:	e1fe      	b.n	8009d1e <f_lseek+0x4d4>
					} while (cl == pcl + 1);
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	3301      	adds	r3, #1
 8009924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009926:	429a      	cmp	r2, r3
 8009928:	d0d4      	beq.n	80098d4 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800992a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	429a      	cmp	r2, r3
 8009930:	d809      	bhi.n	8009946 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8009932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009934:	1d1a      	adds	r2, r3, #4
 8009936:	627a      	str	r2, [r7, #36]	@ 0x24
 8009938:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800993a:	601a      	str	r2, [r3, #0]
 800993c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993e:	1d1a      	adds	r2, r3, #4
 8009940:	627a      	str	r2, [r7, #36]	@ 0x24
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	6a1b      	ldr	r3, [r3, #32]
 800994a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800994c:	429a      	cmp	r2, r3
 800994e:	d3ba      	bcc.n	80098c6 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009954:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009956:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009958:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	429a      	cmp	r2, r3
 800995e:	d803      	bhi.n	8009968 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8009960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009962:	2200      	movs	r2, #0
 8009964:	601a      	str	r2, [r3, #0]
 8009966:	e1d1      	b.n	8009d0c <f_lseek+0x4c2>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009968:	2311      	movs	r3, #17
 800996a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800996e:	e1cd      	b.n	8009d0c <f_lseek+0x4c2>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	683a      	ldr	r2, [r7, #0]
 8009976:	429a      	cmp	r2, r3
 8009978:	d902      	bls.n	8009980 <f_lseek+0x136>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	683a      	ldr	r2, [r7, #0]
 8009984:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	f000 81bf 	beq.w	8009d0c <f_lseek+0x4c2>
				fp->clust = clmt_clust(fp, ofs - 1);
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	3b01      	subs	r3, #1
 8009992:	4619      	mov	r1, r3
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f7fd fbe0 	bl	800715a <clmt_clust>
 800999a:	4602      	mov	r2, r0
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80099a0:	68ba      	ldr	r2, [r7, #8]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	69db      	ldr	r3, [r3, #28]
 80099a6:	4619      	mov	r1, r3
 80099a8:	4610      	mov	r0, r2
 80099aa:	f7fd f8cd 	bl	8006b48 <clust2sect>
 80099ae:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d109      	bne.n	80099ca <f_lseek+0x180>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2202      	movs	r2, #2
 80099ba:	755a      	strb	r2, [r3, #21]
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	2102      	movs	r1, #2
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7fc fe57 	bl	8006674 <unlock_fs>
 80099c6:	2302      	movs	r3, #2
 80099c8:	e1a9      	b.n	8009d1e <f_lseek+0x4d4>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	3b01      	subs	r3, #1
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	8992      	ldrh	r2, [r2, #12]
 80099d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80099d6:	68ba      	ldr	r2, [r7, #8]
 80099d8:	8952      	ldrh	r2, [r2, #10]
 80099da:	3a01      	subs	r2, #1
 80099dc:	4013      	ands	r3, r2
 80099de:	69ba      	ldr	r2, [r7, #24]
 80099e0:	4413      	add	r3, r2
 80099e2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	8992      	ldrh	r2, [r2, #12]
 80099ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80099f0:	fb01 f202 	mul.w	r2, r1, r2
 80099f4:	1a9b      	subs	r3, r3, r2
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	f000 8188 	beq.w	8009d0c <f_lseek+0x4c2>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6a1b      	ldr	r3, [r3, #32]
 8009a00:	69ba      	ldr	r2, [r7, #24]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	f000 8182 	beq.w	8009d0c <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	7d1b      	ldrb	r3, [r3, #20]
 8009a0c:	b25b      	sxtb	r3, r3
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	da1d      	bge.n	8009a4e <f_lseek+0x204>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	7858      	ldrb	r0, [r3, #1]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a1a      	ldr	r2, [r3, #32]
 8009a20:	2301      	movs	r3, #1
 8009a22:	f7fc fcd3 	bl	80063cc <disk_write>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d009      	beq.n	8009a40 <f_lseek+0x1f6>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	755a      	strb	r2, [r3, #21]
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	2101      	movs	r1, #1
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7fc fe1c 	bl	8006674 <unlock_fs>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e16e      	b.n	8009d1e <f_lseek+0x4d4>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	7d1b      	ldrb	r3, [r3, #20]
 8009a44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a48:	b2da      	uxtb	r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	7858      	ldrb	r0, [r3, #1]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009a58:	2301      	movs	r3, #1
 8009a5a:	69ba      	ldr	r2, [r7, #24]
 8009a5c:	f7fc fc96 	bl	800638c <disk_read>
 8009a60:	4603      	mov	r3, r0
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d009      	beq.n	8009a7a <f_lseek+0x230>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2201      	movs	r2, #1
 8009a6a:	755a      	strb	r2, [r3, #21]
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	2101      	movs	r1, #1
 8009a70:	4618      	mov	r0, r3
 8009a72:	f7fc fdff 	bl	8006674 <unlock_fs>
 8009a76:	2301      	movs	r3, #1
 8009a78:	e151      	b.n	8009d1e <f_lseek+0x4d4>
#endif
					fp->sect = dsc;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	69ba      	ldr	r2, [r7, #24]
 8009a7e:	621a      	str	r2, [r3, #32]
 8009a80:	e144      	b.n	8009d0c <f_lseek+0x4c2>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	683a      	ldr	r2, [r7, #0]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d908      	bls.n	8009a9e <f_lseek+0x254>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	7d1b      	ldrb	r3, [r3, #20]
 8009a90:	f003 0302 	and.w	r3, r3, #2
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d102      	bne.n	8009a9e <f_lseek+0x254>
			ofs = fp->obj.objsize;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	68db      	ldr	r3, [r3, #12]
 8009a9c:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	699b      	ldr	r3, [r3, #24]
 8009aa2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009aac:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f000 80ce 	beq.w	8009c52 <f_lseek+0x408>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	895b      	ldrh	r3, [r3, #10]
 8009aba:	461a      	mov	r2, r3
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	899b      	ldrh	r3, [r3, #12]
 8009ac0:	fb02 f303 	mul.w	r3, r2, r3
 8009ac4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009ac6:	6a3b      	ldr	r3, [r7, #32]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d01b      	beq.n	8009b04 <f_lseek+0x2ba>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	1e5a      	subs	r2, r3, #1
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ad6:	6a3b      	ldr	r3, [r7, #32]
 8009ad8:	1e59      	subs	r1, r3, #1
 8009ada:	69fb      	ldr	r3, [r7, #28]
 8009adc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d30f      	bcc.n	8009b04 <f_lseek+0x2ba>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009ae4:	6a3b      	ldr	r3, [r7, #32]
 8009ae6:	1e5a      	subs	r2, r3, #1
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	425b      	negs	r3, r3
 8009aec:	401a      	ands	r2, r3
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	699b      	ldr	r3, [r3, #24]
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	1ad3      	subs	r3, r2, r3
 8009afa:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	69db      	ldr	r3, [r3, #28]
 8009b00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009b02:	e02c      	b.n	8009b5e <f_lseek+0x314>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	689b      	ldr	r3, [r3, #8]
 8009b08:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8009b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d123      	bne.n	8009b58 <f_lseek+0x30e>
					clst = create_chain(&fp->obj, 0);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	2100      	movs	r1, #0
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fd fa88 	bl	800702a <create_chain>
 8009b1a:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d109      	bne.n	8009b36 <f_lseek+0x2ec>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2202      	movs	r2, #2
 8009b26:	755a      	strb	r2, [r3, #21]
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	2102      	movs	r1, #2
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7fc fda1 	bl	8006674 <unlock_fs>
 8009b32:	2302      	movs	r3, #2
 8009b34:	e0f3      	b.n	8009d1e <f_lseek+0x4d4>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b3c:	d109      	bne.n	8009b52 <f_lseek+0x308>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2201      	movs	r2, #1
 8009b42:	755a      	strb	r2, [r3, #21]
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	2101      	movs	r1, #1
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f7fc fd93 	bl	8006674 <unlock_fs>
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e0e5      	b.n	8009d1e <f_lseek+0x4d4>
					fp->obj.sclust = clst;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b56:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b5c:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8009b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d076      	beq.n	8009c52 <f_lseek+0x408>
				while (ofs > bcs) {						/* Cluster following loop */
 8009b64:	e044      	b.n	8009bf0 <f_lseek+0x3a6>
					ofs -= bcs; fp->fptr += bcs;
 8009b66:	683a      	ldr	r2, [r7, #0]
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	1ad3      	subs	r3, r2, r3
 8009b6c:	603b      	str	r3, [r7, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	699a      	ldr	r2, [r3, #24]
 8009b72:	69fb      	ldr	r3, [r7, #28]
 8009b74:	441a      	add	r2, r3
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	7d1b      	ldrb	r3, [r3, #20]
 8009b7e:	f003 0302 	and.w	r3, r3, #2
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d00b      	beq.n	8009b9e <f_lseek+0x354>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fd fa4d 	bl	800702a <create_chain>
 8009b90:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d108      	bne.n	8009baa <f_lseek+0x360>
							ofs = 0; break;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	603b      	str	r3, [r7, #0]
 8009b9c:	e02c      	b.n	8009bf8 <f_lseek+0x3ae>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7fc ffef 	bl	8006b86 <get_fat>
 8009ba8:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bb0:	d109      	bne.n	8009bc6 <f_lseek+0x37c>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2201      	movs	r2, #1
 8009bb6:	755a      	strb	r2, [r3, #21]
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	2101      	movs	r1, #1
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7fc fd59 	bl	8006674 <unlock_fs>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e0ab      	b.n	8009d1e <f_lseek+0x4d4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d904      	bls.n	8009bd6 <f_lseek+0x38c>
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	6a1b      	ldr	r3, [r3, #32]
 8009bd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d309      	bcc.n	8009bea <f_lseek+0x3a0>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2202      	movs	r2, #2
 8009bda:	755a      	strb	r2, [r3, #21]
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	2102      	movs	r1, #2
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7fc fd47 	bl	8006674 <unlock_fs>
 8009be6:	2302      	movs	r3, #2
 8009be8:	e099      	b.n	8009d1e <f_lseek+0x4d4>
					fp->clust = clst;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009bee:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	69fb      	ldr	r3, [r7, #28]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d8b6      	bhi.n	8009b66 <f_lseek+0x31c>
				}
				fp->fptr += ofs;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	699a      	ldr	r2, [r3, #24]
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	441a      	add	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	899b      	ldrh	r3, [r3, #12]
 8009c08:	461a      	mov	r2, r3
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c10:	fb01 f202 	mul.w	r2, r1, r2
 8009c14:	1a9b      	subs	r3, r3, r2
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d01b      	beq.n	8009c52 <f_lseek+0x408>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f7fc ff92 	bl	8006b48 <clust2sect>
 8009c24:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d109      	bne.n	8009c40 <f_lseek+0x3f6>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2202      	movs	r2, #2
 8009c30:	755a      	strb	r2, [r3, #21]
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	2102      	movs	r1, #2
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7fc fd1c 	bl	8006674 <unlock_fs>
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	e06e      	b.n	8009d1e <f_lseek+0x4d4>
					nsect += (DWORD)(ofs / SS(fs));
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	899b      	ldrh	r3, [r3, #12]
 8009c44:	461a      	mov	r2, r3
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c4e:	4413      	add	r3, r2
 8009c50:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	699a      	ldr	r2, [r3, #24]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d90a      	bls.n	8009c74 <f_lseek+0x42a>
			fp->obj.objsize = fp->fptr;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	699a      	ldr	r2, [r3, #24]
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	7d1b      	ldrb	r3, [r3, #20]
 8009c6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c6e:	b2da      	uxtb	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	699b      	ldr	r3, [r3, #24]
 8009c78:	68ba      	ldr	r2, [r7, #8]
 8009c7a:	8992      	ldrh	r2, [r2, #12]
 8009c7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c80:	fb01 f202 	mul.w	r2, r1, r2
 8009c84:	1a9b      	subs	r3, r3, r2
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d040      	beq.n	8009d0c <f_lseek+0x4c2>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	6a1b      	ldr	r3, [r3, #32]
 8009c8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d03b      	beq.n	8009d0c <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	7d1b      	ldrb	r3, [r3, #20]
 8009c98:	b25b      	sxtb	r3, r3
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	da1d      	bge.n	8009cda <f_lseek+0x490>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	7858      	ldrb	r0, [r3, #1]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6a1a      	ldr	r2, [r3, #32]
 8009cac:	2301      	movs	r3, #1
 8009cae:	f7fc fb8d 	bl	80063cc <disk_write>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d009      	beq.n	8009ccc <f_lseek+0x482>
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	755a      	strb	r2, [r3, #21]
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	2101      	movs	r1, #1
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fc fcd6 	bl	8006674 <unlock_fs>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	e028      	b.n	8009d1e <f_lseek+0x4d4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	7d1b      	ldrb	r3, [r3, #20]
 8009cd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009cd4:	b2da      	uxtb	r2, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	7858      	ldrb	r0, [r3, #1]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009ce8:	f7fc fb50 	bl	800638c <disk_read>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d009      	beq.n	8009d06 <f_lseek+0x4bc>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	755a      	strb	r2, [r3, #21]
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f7fc fcb9 	bl	8006674 <unlock_fs>
 8009d02:	2301      	movs	r3, #1
 8009d04:	e00b      	b.n	8009d1e <f_lseek+0x4d4>
#endif
			fp->sect = nsect;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009d0a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009d0c:	68bb      	ldr	r3, [r7, #8]
 8009d0e:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8009d12:	4611      	mov	r1, r2
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7fc fcad 	bl	8006674 <unlock_fs>
 8009d1a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3740      	adds	r7, #64	@ 0x40
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b092      	sub	sp, #72	@ 0x48
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	6078      	str	r0, [r7, #4]
 8009d2e:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8009d30:	f107 010c 	add.w	r1, r7, #12
 8009d34:	1d3b      	adds	r3, r7, #4
 8009d36:	2200      	movs	r2, #0
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f7fe fc65 	bl	8008608 <find_volume>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8009d44:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d134      	bne.n	8009db6 <f_stat+0x90>
		INIT_NAMBUF(dj.obj.fs);
 8009d4c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009d50:	f000 fab2 	bl	800a2b8 <ff_memalloc>
 8009d54:	6438      	str	r0, [r7, #64]	@ 0x40
 8009d56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d106      	bne.n	8009d6a <f_stat+0x44>
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2111      	movs	r1, #17
 8009d60:	4618      	mov	r0, r3
 8009d62:	f7fc fc87 	bl	8006674 <unlock_fs>
 8009d66:	2311      	movs	r3, #17
 8009d68:	e02e      	b.n	8009dc8 <f_stat+0xa2>
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009d6e:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	f107 030c 	add.w	r3, r7, #12
 8009d76:	4611      	mov	r1, r2
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7fe fb35 	bl	80083e8 <follow_path>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		if (res == FR_OK) {				/* Follow completed */
 8009d84:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d111      	bne.n	8009db0 <f_stat+0x8a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8009d8c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8009d90:	b25b      	sxtb	r3, r3
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	da03      	bge.n	8009d9e <f_stat+0x78>
				res = FR_INVALID_NAME;
 8009d96:	2306      	movs	r3, #6
 8009d98:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009d9c:	e008      	b.n	8009db0 <f_stat+0x8a>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d005      	beq.n	8009db0 <f_stat+0x8a>
 8009da4:	f107 030c 	add.w	r3, r7, #12
 8009da8:	6839      	ldr	r1, [r7, #0]
 8009daa:	4618      	mov	r0, r3
 8009dac:	f7fe f886 	bl	8007ebc <get_fileinfo>
			}
		}
		FREE_NAMBUF();
 8009db0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8009db2:	f000 fa8d 	bl	800a2d0 <ff_memfree>
	}

	LEAVE_FF(dj.obj.fs, res);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8009dbc:	4611      	mov	r1, r2
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fc fc58 	bl	8006674 <unlock_fs>
 8009dc4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3748      	adds	r7, #72	@ 0x48
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b0a0      	sub	sp, #128	@ 0x80
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8009ddc:	f107 0108 	add.w	r1, r7, #8
 8009de0:	1d3b      	adds	r3, r7, #4
 8009de2:	2202      	movs	r2, #2
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fe fc0f 	bl	8008608 <find_volume>
 8009dea:	4603      	mov	r3, r0
 8009dec:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	dj.obj.fs = fs;
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	643b      	str	r3, [r7, #64]	@ 0x40
	if (res == FR_OK) {
 8009df4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f040 80a3 	bne.w	8009f44 <f_unlink+0x174>
		INIT_NAMBUF(fs);
 8009dfe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009e02:	f000 fa59 	bl	800a2b8 <ff_memalloc>
 8009e06:	6778      	str	r0, [r7, #116]	@ 0x74
 8009e08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d106      	bne.n	8009e1c <f_unlink+0x4c>
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	2111      	movs	r1, #17
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7fc fc2e 	bl	8006674 <unlock_fs>
 8009e18:	2311      	movs	r3, #17
 8009e1a:	e09c      	b.n	8009f56 <f_unlink+0x186>
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009e20:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);		/* Follow the file path */
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009e28:	4611      	mov	r1, r2
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fe fadc 	bl	80083e8 <follow_path>
 8009e30:	4603      	mov	r3, r0
 8009e32:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8009e36:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d108      	bne.n	8009e50 <f_unlink+0x80>
 8009e3e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009e42:	2102      	movs	r1, #2
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7fc fc31 	bl	80066ac <chk_lock>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8009e50:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d172      	bne.n	8009f3e <f_unlink+0x16e>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8009e58:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8009e5c:	b25b      	sxtb	r3, r3
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	da03      	bge.n	8009e6a <f_unlink+0x9a>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8009e62:	2306      	movs	r3, #6
 8009e64:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8009e68:	e008      	b.n	8009e7c <f_unlink+0xac>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8009e6a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d002      	beq.n	8009e7c <f_unlink+0xac>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8009e76:	2307      	movs	r3, #7
 8009e78:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				}
			}
			if (res == FR_OK) {
 8009e7c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d134      	bne.n	8009eee <f_unlink+0x11e>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009e88:	4611      	mov	r1, r2
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7fd fb43 	bl	8007516 <ld_clust>
 8009e90:	67b8      	str	r0, [r7, #120]	@ 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8009e92:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009e96:	f003 0310 	and.w	r3, r3, #16
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d027      	beq.n	8009eee <f_unlink+0x11e>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	60fb      	str	r3, [r7, #12]
						sdj.obj.sclust = dclst;
 8009ea2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ea4:	617b      	str	r3, [r7, #20]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8009ea6:	f107 030c 	add.w	r3, r7, #12
 8009eaa:	2100      	movs	r1, #0
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7fd f98c 	bl	80071ca <dir_sdi>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						if (res == FR_OK) {
 8009eb8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d116      	bne.n	8009eee <f_unlink+0x11e>
							res = dir_read(&sdj, 0);			/* Read an item */
 8009ec0:	f107 030c 	add.w	r3, r7, #12
 8009ec4:	2100      	movs	r1, #0
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7fd fd4f 	bl	800796a <dir_read>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8009ed2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d102      	bne.n	8009ee0 <f_unlink+0x110>
 8009eda:	2307      	movs	r3, #7
 8009edc:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8009ee0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009ee4:	2b04      	cmp	r3, #4
 8009ee6:	d102      	bne.n	8009eee <f_unlink+0x11e>
 8009ee8:	2300      	movs	r3, #0
 8009eea:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 8009eee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d123      	bne.n	8009f3e <f_unlink+0x16e>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8009ef6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7fd ff94 	bl	8007e28 <dir_remove>
 8009f00:	4603      	mov	r3, r0
 8009f02:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8009f06:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d10c      	bne.n	8009f28 <f_unlink+0x158>
 8009f0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d009      	beq.n	8009f28 <f_unlink+0x158>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8009f14:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009f18:	2200      	movs	r2, #0
 8009f1a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	f7fd f81f 	bl	8006f60 <remove_chain>
 8009f22:	4603      	mov	r3, r0
 8009f24:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8009f28:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d106      	bne.n	8009f3e <f_unlink+0x16e>
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7fc fd98 	bl	8006a68 <sync_fs>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			}
		}
		FREE_NAMBUF();
 8009f3e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8009f40:	f000 f9c6 	bl	800a2d0 <ff_memfree>
	}

	LEAVE_FF(fs, res);
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	f897 207f 	ldrb.w	r2, [r7, #127]	@ 0x7f
 8009f4a:	4611      	mov	r1, r2
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f7fc fb91 	bl	8006674 <unlock_fs>
 8009f52:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3780      	adds	r7, #128	@ 0x80
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}

08009f5e <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8009f5e:	b580      	push	{r7, lr}
 8009f60:	b088      	sub	sp, #32
 8009f62:	af00      	add	r7, sp, #0
 8009f64:	60f8      	str	r0, [r7, #12]
 8009f66:	60b9      	str	r1, [r7, #8]
 8009f68:	607a      	str	r2, [r7, #4]
	int n = 0;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009f72:	e01c      	b.n	8009fae <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009f74:	f107 0310 	add.w	r3, r7, #16
 8009f78:	f107 0114 	add.w	r1, r7, #20
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f7ff f85a 	bl	8009038 <f_read>
		if (rc != 1) break;
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d117      	bne.n	8009fba <f_gets+0x5c>
		c = s[0];
 8009f8a:	7d3b      	ldrb	r3, [r7, #20]
 8009f8c:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009f8e:	7dfb      	ldrb	r3, [r7, #23]
 8009f90:	2b0d      	cmp	r3, #13
 8009f92:	d00b      	beq.n	8009fac <f_gets+0x4e>
		*p++ = c;
 8009f94:	69bb      	ldr	r3, [r7, #24]
 8009f96:	1c5a      	adds	r2, r3, #1
 8009f98:	61ba      	str	r2, [r7, #24]
 8009f9a:	7dfa      	ldrb	r2, [r7, #23]
 8009f9c:	701a      	strb	r2, [r3, #0]
		n++;
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8009fa4:	7dfb      	ldrb	r3, [r7, #23]
 8009fa6:	2b0a      	cmp	r3, #10
 8009fa8:	d009      	beq.n	8009fbe <f_gets+0x60>
 8009faa:	e000      	b.n	8009fae <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009fac:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	3b01      	subs	r3, #1
 8009fb2:	69fa      	ldr	r2, [r7, #28]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	dbdd      	blt.n	8009f74 <f_gets+0x16>
 8009fb8:	e002      	b.n	8009fc0 <f_gets+0x62>
		if (rc != 1) break;
 8009fba:	bf00      	nop
 8009fbc:	e000      	b.n	8009fc0 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8009fbe:	bf00      	nop
	}
	*p = 0;
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d001      	beq.n	8009fd0 <f_gets+0x72>
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	e000      	b.n	8009fd2 <f_gets+0x74>
 8009fd0:	2300      	movs	r3, #0
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3720      	adds	r7, #32
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
	...

08009fdc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b087      	sub	sp, #28
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009fea:	2301      	movs	r3, #1
 8009fec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009ff2:	4b1f      	ldr	r3, [pc, #124]	@ (800a070 <FATFS_LinkDriverEx+0x94>)
 8009ff4:	7a5b      	ldrb	r3, [r3, #9]
 8009ff6:	b2db      	uxtb	r3, r3
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d131      	bne.n	800a060 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009ffc:	4b1c      	ldr	r3, [pc, #112]	@ (800a070 <FATFS_LinkDriverEx+0x94>)
 8009ffe:	7a5b      	ldrb	r3, [r3, #9]
 800a000:	b2db      	uxtb	r3, r3
 800a002:	461a      	mov	r2, r3
 800a004:	4b1a      	ldr	r3, [pc, #104]	@ (800a070 <FATFS_LinkDriverEx+0x94>)
 800a006:	2100      	movs	r1, #0
 800a008:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a00a:	4b19      	ldr	r3, [pc, #100]	@ (800a070 <FATFS_LinkDriverEx+0x94>)
 800a00c:	7a5b      	ldrb	r3, [r3, #9]
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	4a17      	ldr	r2, [pc, #92]	@ (800a070 <FATFS_LinkDriverEx+0x94>)
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	4413      	add	r3, r2
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a01a:	4b15      	ldr	r3, [pc, #84]	@ (800a070 <FATFS_LinkDriverEx+0x94>)
 800a01c:	7a5b      	ldrb	r3, [r3, #9]
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	461a      	mov	r2, r3
 800a022:	4b13      	ldr	r3, [pc, #76]	@ (800a070 <FATFS_LinkDriverEx+0x94>)
 800a024:	4413      	add	r3, r2
 800a026:	79fa      	ldrb	r2, [r7, #7]
 800a028:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a02a:	4b11      	ldr	r3, [pc, #68]	@ (800a070 <FATFS_LinkDriverEx+0x94>)
 800a02c:	7a5b      	ldrb	r3, [r3, #9]
 800a02e:	b2db      	uxtb	r3, r3
 800a030:	1c5a      	adds	r2, r3, #1
 800a032:	b2d1      	uxtb	r1, r2
 800a034:	4a0e      	ldr	r2, [pc, #56]	@ (800a070 <FATFS_LinkDriverEx+0x94>)
 800a036:	7251      	strb	r1, [r2, #9]
 800a038:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a03a:	7dbb      	ldrb	r3, [r7, #22]
 800a03c:	3330      	adds	r3, #48	@ 0x30
 800a03e:	b2da      	uxtb	r2, r3
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	3301      	adds	r3, #1
 800a048:	223a      	movs	r2, #58	@ 0x3a
 800a04a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	3302      	adds	r3, #2
 800a050:	222f      	movs	r2, #47	@ 0x2f
 800a052:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	3303      	adds	r3, #3
 800a058:	2200      	movs	r2, #0
 800a05a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a05c:	2300      	movs	r3, #0
 800a05e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a060:	7dfb      	ldrb	r3, [r7, #23]
}
 800a062:	4618      	mov	r0, r3
 800a064:	371c      	adds	r7, #28
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr
 800a06e:	bf00      	nop
 800a070:	20002834 	.word	0x20002834

0800a074 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b082      	sub	sp, #8
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a07e:	2200      	movs	r2, #0
 800a080:	6839      	ldr	r1, [r7, #0]
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f7ff ffaa 	bl	8009fdc <FATFS_LinkDriverEx>
 800a088:	4603      	mov	r3, r0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3708      	adds	r7, #8
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
	...

0800a094 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800a094:	b480      	push	{r7}
 800a096:	b085      	sub	sp, #20
 800a098:	af00      	add	r7, sp, #0
 800a09a:	4603      	mov	r3, r0
 800a09c:	6039      	str	r1, [r7, #0]
 800a09e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800a0a0:	88fb      	ldrh	r3, [r7, #6]
 800a0a2:	2b7f      	cmp	r3, #127	@ 0x7f
 800a0a4:	d802      	bhi.n	800a0ac <ff_convert+0x18>
		c = chr;
 800a0a6:	88fb      	ldrh	r3, [r7, #6]
 800a0a8:	81fb      	strh	r3, [r7, #14]
 800a0aa:	e025      	b.n	800a0f8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d00b      	beq.n	800a0ca <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800a0b2:	88fb      	ldrh	r3, [r7, #6]
 800a0b4:	2bff      	cmp	r3, #255	@ 0xff
 800a0b6:	d805      	bhi.n	800a0c4 <ff_convert+0x30>
 800a0b8:	88fb      	ldrh	r3, [r7, #6]
 800a0ba:	3b80      	subs	r3, #128	@ 0x80
 800a0bc:	4a12      	ldr	r2, [pc, #72]	@ (800a108 <ff_convert+0x74>)
 800a0be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0c2:	e000      	b.n	800a0c6 <ff_convert+0x32>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	81fb      	strh	r3, [r7, #14]
 800a0c8:	e016      	b.n	800a0f8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	81fb      	strh	r3, [r7, #14]
 800a0ce:	e009      	b.n	800a0e4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800a0d0:	89fb      	ldrh	r3, [r7, #14]
 800a0d2:	4a0d      	ldr	r2, [pc, #52]	@ (800a108 <ff_convert+0x74>)
 800a0d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0d8:	88fa      	ldrh	r2, [r7, #6]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d006      	beq.n	800a0ec <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800a0de:	89fb      	ldrh	r3, [r7, #14]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	81fb      	strh	r3, [r7, #14]
 800a0e4:	89fb      	ldrh	r3, [r7, #14]
 800a0e6:	2b7f      	cmp	r3, #127	@ 0x7f
 800a0e8:	d9f2      	bls.n	800a0d0 <ff_convert+0x3c>
 800a0ea:	e000      	b.n	800a0ee <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800a0ec:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800a0ee:	89fb      	ldrh	r3, [r7, #14]
 800a0f0:	3380      	adds	r3, #128	@ 0x80
 800a0f2:	b29b      	uxth	r3, r3
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800a0f8:	89fb      	ldrh	r3, [r7, #14]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3714      	adds	r7, #20
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	0801165c 	.word	0x0801165c

0800a10c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b087      	sub	sp, #28
 800a110:	af00      	add	r7, sp, #0
 800a112:	4603      	mov	r3, r0
 800a114:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800a116:	88fb      	ldrh	r3, [r7, #6]
 800a118:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a11c:	d201      	bcs.n	800a122 <ff_wtoupper+0x16>
 800a11e:	4b3e      	ldr	r3, [pc, #248]	@ (800a218 <ff_wtoupper+0x10c>)
 800a120:	e000      	b.n	800a124 <ff_wtoupper+0x18>
 800a122:	4b3e      	ldr	r3, [pc, #248]	@ (800a21c <ff_wtoupper+0x110>)
 800a124:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	1c9a      	adds	r2, r3, #2
 800a12a:	617a      	str	r2, [r7, #20]
 800a12c:	881b      	ldrh	r3, [r3, #0]
 800a12e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800a130:	8a7b      	ldrh	r3, [r7, #18]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d068      	beq.n	800a208 <ff_wtoupper+0xfc>
 800a136:	88fa      	ldrh	r2, [r7, #6]
 800a138:	8a7b      	ldrh	r3, [r7, #18]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d364      	bcc.n	800a208 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	1c9a      	adds	r2, r3, #2
 800a142:	617a      	str	r2, [r7, #20]
 800a144:	881b      	ldrh	r3, [r3, #0]
 800a146:	823b      	strh	r3, [r7, #16]
 800a148:	8a3b      	ldrh	r3, [r7, #16]
 800a14a:	0a1b      	lsrs	r3, r3, #8
 800a14c:	81fb      	strh	r3, [r7, #14]
 800a14e:	8a3b      	ldrh	r3, [r7, #16]
 800a150:	b2db      	uxtb	r3, r3
 800a152:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800a154:	88fa      	ldrh	r2, [r7, #6]
 800a156:	8a79      	ldrh	r1, [r7, #18]
 800a158:	8a3b      	ldrh	r3, [r7, #16]
 800a15a:	440b      	add	r3, r1
 800a15c:	429a      	cmp	r2, r3
 800a15e:	da49      	bge.n	800a1f4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800a160:	89fb      	ldrh	r3, [r7, #14]
 800a162:	2b08      	cmp	r3, #8
 800a164:	d84f      	bhi.n	800a206 <ff_wtoupper+0xfa>
 800a166:	a201      	add	r2, pc, #4	@ (adr r2, 800a16c <ff_wtoupper+0x60>)
 800a168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a16c:	0800a191 	.word	0x0800a191
 800a170:	0800a1a3 	.word	0x0800a1a3
 800a174:	0800a1b9 	.word	0x0800a1b9
 800a178:	0800a1c1 	.word	0x0800a1c1
 800a17c:	0800a1c9 	.word	0x0800a1c9
 800a180:	0800a1d1 	.word	0x0800a1d1
 800a184:	0800a1d9 	.word	0x0800a1d9
 800a188:	0800a1e1 	.word	0x0800a1e1
 800a18c:	0800a1e9 	.word	0x0800a1e9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800a190:	88fa      	ldrh	r2, [r7, #6]
 800a192:	8a7b      	ldrh	r3, [r7, #18]
 800a194:	1ad3      	subs	r3, r2, r3
 800a196:	005b      	lsls	r3, r3, #1
 800a198:	697a      	ldr	r2, [r7, #20]
 800a19a:	4413      	add	r3, r2
 800a19c:	881b      	ldrh	r3, [r3, #0]
 800a19e:	80fb      	strh	r3, [r7, #6]
 800a1a0:	e027      	b.n	800a1f2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800a1a2:	88fa      	ldrh	r2, [r7, #6]
 800a1a4:	8a7b      	ldrh	r3, [r7, #18]
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	f003 0301 	and.w	r3, r3, #1
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	88fa      	ldrh	r2, [r7, #6]
 800a1b2:	1ad3      	subs	r3, r2, r3
 800a1b4:	80fb      	strh	r3, [r7, #6]
 800a1b6:	e01c      	b.n	800a1f2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800a1b8:	88fb      	ldrh	r3, [r7, #6]
 800a1ba:	3b10      	subs	r3, #16
 800a1bc:	80fb      	strh	r3, [r7, #6]
 800a1be:	e018      	b.n	800a1f2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800a1c0:	88fb      	ldrh	r3, [r7, #6]
 800a1c2:	3b20      	subs	r3, #32
 800a1c4:	80fb      	strh	r3, [r7, #6]
 800a1c6:	e014      	b.n	800a1f2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800a1c8:	88fb      	ldrh	r3, [r7, #6]
 800a1ca:	3b30      	subs	r3, #48	@ 0x30
 800a1cc:	80fb      	strh	r3, [r7, #6]
 800a1ce:	e010      	b.n	800a1f2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800a1d0:	88fb      	ldrh	r3, [r7, #6]
 800a1d2:	3b1a      	subs	r3, #26
 800a1d4:	80fb      	strh	r3, [r7, #6]
 800a1d6:	e00c      	b.n	800a1f2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800a1d8:	88fb      	ldrh	r3, [r7, #6]
 800a1da:	3308      	adds	r3, #8
 800a1dc:	80fb      	strh	r3, [r7, #6]
 800a1de:	e008      	b.n	800a1f2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800a1e0:	88fb      	ldrh	r3, [r7, #6]
 800a1e2:	3b50      	subs	r3, #80	@ 0x50
 800a1e4:	80fb      	strh	r3, [r7, #6]
 800a1e6:	e004      	b.n	800a1f2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800a1e8:	88fb      	ldrh	r3, [r7, #6]
 800a1ea:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800a1ee:	80fb      	strh	r3, [r7, #6]
 800a1f0:	bf00      	nop
			}
			break;
 800a1f2:	e008      	b.n	800a206 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800a1f4:	89fb      	ldrh	r3, [r7, #14]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d195      	bne.n	800a126 <ff_wtoupper+0x1a>
 800a1fa:	8a3b      	ldrh	r3, [r7, #16]
 800a1fc:	005b      	lsls	r3, r3, #1
 800a1fe:	697a      	ldr	r2, [r7, #20]
 800a200:	4413      	add	r3, r2
 800a202:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800a204:	e78f      	b.n	800a126 <ff_wtoupper+0x1a>
			break;
 800a206:	bf00      	nop
	}

	return chr;
 800a208:	88fb      	ldrh	r3, [r7, #6]
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	371c      	adds	r7, #28
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop
 800a218:	0801175c 	.word	0x0801175c
 800a21c:	08011950 	.word	0x08011950

0800a220 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b086      	sub	sp, #24
 800a224:	af00      	add	r7, sp, #0
 800a226:	4603      	mov	r3, r0
 800a228:	6039      	str	r1, [r7, #0]
 800a22a:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 800a22c:	2300      	movs	r3, #0
 800a22e:	60fb      	str	r3, [r7, #12]
 800a230:	2300      	movs	r3, #0
 800a232:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 800a234:	f107 030c 	add.w	r3, r7, #12
 800a238:	2101      	movs	r1, #1
 800a23a:	4618      	mov	r0, r3
 800a23c:	f000 f865 	bl	800a30a <osSemaphoreCreate>
 800a240:	4602      	mov	r2, r0
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	bf14      	ite	ne
 800a24e:	2301      	movne	r3, #1
 800a250:	2300      	moveq	r3, #0
 800a252:	b2db      	uxtb	r3, r3
 800a254:	617b      	str	r3, [r7, #20]

    return ret;
 800a256:	697b      	ldr	r3, [r7, #20]
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3718      	adds	r7, #24
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b082      	sub	sp, #8
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 f905 	bl	800a478 <osSemaphoreDelete>
#endif
    return 1;
 800a26e:	2301      	movs	r3, #1
}
 800a270:	4618      	mov	r0, r3
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800a280:	2300      	movs	r3, #0
 800a282:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800a284:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800a288:	6878      	ldr	r0, [r7, #4]
 800a28a:	f000 f871 	bl	800a370 <osSemaphoreWait>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d101      	bne.n	800a298 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800a294:	2301      	movs	r3, #1
 800a296:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a298:	68fb      	ldr	r3, [r7, #12]
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}

0800a2a2 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800a2a2:	b580      	push	{r7, lr}
 800a2a4:	b082      	sub	sp, #8
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 f8ae 	bl	800a40c <osSemaphoreRelease>
#endif
}
 800a2b0:	bf00      	nop
 800a2b2:	3708      	adds	r7, #8
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f002 f99b 	bl	800c5fc <pvPortMalloc>
 800a2c6:	4603      	mov	r3, r0
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3708      	adds	r7, #8
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f002 fa5d 	bl	800c798 <vPortFree>
}
 800a2de:	bf00      	nop
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a2e6:	b480      	push	{r7}
 800a2e8:	b083      	sub	sp, #12
 800a2ea:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2ec:	f3ef 8305 	mrs	r3, IPSR
 800a2f0:	607b      	str	r3, [r7, #4]
  return(result);
 800a2f2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	bf14      	ite	ne
 800a2f8:	2301      	movne	r3, #1
 800a2fa:	2300      	moveq	r3, #0
 800a2fc:	b2db      	uxtb	r3, r3
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	370c      	adds	r7, #12
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr

0800a30a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b086      	sub	sp, #24
 800a30e:	af02      	add	r7, sp, #8
 800a310:	6078      	str	r0, [r7, #4]
 800a312:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00f      	beq.n	800a33c <osSemaphoreCreate+0x32>
    if (count == 1) {
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d10a      	bne.n	800a338 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	2203      	movs	r2, #3
 800a328:	9200      	str	r2, [sp, #0]
 800a32a:	2200      	movs	r2, #0
 800a32c:	2100      	movs	r1, #0
 800a32e:	2001      	movs	r0, #1
 800a330:	f000 f9d4 	bl	800a6dc <xQueueGenericCreateStatic>
 800a334:	4603      	mov	r3, r0
 800a336:	e016      	b.n	800a366 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a338:	2300      	movs	r3, #0
 800a33a:	e014      	b.n	800a366 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d110      	bne.n	800a364 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800a342:	2203      	movs	r2, #3
 800a344:	2100      	movs	r1, #0
 800a346:	2001      	movs	r0, #1
 800a348:	f000 fa45 	bl	800a7d6 <xQueueGenericCreate>
 800a34c:	60f8      	str	r0, [r7, #12]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d005      	beq.n	800a360 <osSemaphoreCreate+0x56>
 800a354:	2300      	movs	r3, #0
 800a356:	2200      	movs	r2, #0
 800a358:	2100      	movs	r1, #0
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f000 fa96 	bl	800a88c <xQueueGenericSend>
      return sema;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	e000      	b.n	800a366 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a364:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a366:	4618      	mov	r0, r3
 800a368:	3710      	adds	r7, #16
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
	...

0800a370 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a37a:	2300      	movs	r3, #0
 800a37c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d101      	bne.n	800a388 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a384:	2380      	movs	r3, #128	@ 0x80
 800a386:	e03a      	b.n	800a3fe <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a388:	2300      	movs	r3, #0
 800a38a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a392:	d103      	bne.n	800a39c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a394:	f04f 33ff 	mov.w	r3, #4294967295
 800a398:	60fb      	str	r3, [r7, #12]
 800a39a:	e009      	b.n	800a3b0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a39c:	683b      	ldr	r3, [r7, #0]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d006      	beq.n	800a3b0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a3a2:	683b      	ldr	r3, [r7, #0]
 800a3a4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d101      	bne.n	800a3b0 <osSemaphoreWait+0x40>
      ticks = 1;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a3b0:	f7ff ff99 	bl	800a2e6 <inHandlerMode>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d017      	beq.n	800a3ea <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a3ba:	f107 0308 	add.w	r3, r7, #8
 800a3be:	461a      	mov	r2, r3
 800a3c0:	2100      	movs	r1, #0
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 fd04 	bl	800add0 <xQueueReceiveFromISR>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d001      	beq.n	800a3d2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800a3ce:	23ff      	movs	r3, #255	@ 0xff
 800a3d0:	e015      	b.n	800a3fe <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d011      	beq.n	800a3fc <osSemaphoreWait+0x8c>
 800a3d8:	4b0b      	ldr	r3, [pc, #44]	@ (800a408 <osSemaphoreWait+0x98>)
 800a3da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3de:	601a      	str	r2, [r3, #0]
 800a3e0:	f3bf 8f4f 	dsb	sy
 800a3e4:	f3bf 8f6f 	isb	sy
 800a3e8:	e008      	b.n	800a3fc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a3ea:	68f9      	ldr	r1, [r7, #12]
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 fbdf 	bl	800abb0 <xQueueSemaphoreTake>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d001      	beq.n	800a3fc <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a3f8:	23ff      	movs	r3, #255	@ 0xff
 800a3fa:	e000      	b.n	800a3fe <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3710      	adds	r7, #16
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	e000ed04 	.word	0xe000ed04

0800a40c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a414:	2300      	movs	r3, #0
 800a416:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a418:	2300      	movs	r3, #0
 800a41a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a41c:	f7ff ff63 	bl	800a2e6 <inHandlerMode>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d016      	beq.n	800a454 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a426:	f107 0308 	add.w	r3, r7, #8
 800a42a:	4619      	mov	r1, r3
 800a42c:	6878      	ldr	r0, [r7, #4]
 800a42e:	f000 fb2f 	bl	800aa90 <xQueueGiveFromISR>
 800a432:	4603      	mov	r3, r0
 800a434:	2b01      	cmp	r3, #1
 800a436:	d001      	beq.n	800a43c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a438:	23ff      	movs	r3, #255	@ 0xff
 800a43a:	e017      	b.n	800a46c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d013      	beq.n	800a46a <osSemaphoreRelease+0x5e>
 800a442:	4b0c      	ldr	r3, [pc, #48]	@ (800a474 <osSemaphoreRelease+0x68>)
 800a444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a448:	601a      	str	r2, [r3, #0]
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	e00a      	b.n	800a46a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a454:	2300      	movs	r3, #0
 800a456:	2200      	movs	r2, #0
 800a458:	2100      	movs	r1, #0
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f000 fa16 	bl	800a88c <xQueueGenericSend>
 800a460:	4603      	mov	r3, r0
 800a462:	2b01      	cmp	r3, #1
 800a464:	d001      	beq.n	800a46a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a466:	23ff      	movs	r3, #255	@ 0xff
 800a468:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a46a:	68fb      	ldr	r3, [r7, #12]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	e000ed04 	.word	0xe000ed04

0800a478 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b082      	sub	sp, #8
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a480:	f7ff ff31 	bl	800a2e6 <inHandlerMode>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d001      	beq.n	800a48e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800a48a:	2382      	movs	r3, #130	@ 0x82
 800a48c:	e003      	b.n	800a496 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 fd20 	bl	800aed4 <vQueueDelete>

  return osOK; 
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3708      	adds	r7, #8
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a49e:	b480      	push	{r7}
 800a4a0:	b083      	sub	sp, #12
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f103 0208 	add.w	r2, r3, #8
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4b6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f103 0208 	add.w	r2, r3, #8
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f103 0208 	add.w	r2, r3, #8
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a4d2:	bf00      	nop
 800a4d4:	370c      	adds	r7, #12
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr

0800a4de <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a4de:	b480      	push	{r7}
 800a4e0:	b083      	sub	sp, #12
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a4ec:	bf00      	nop
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr

0800a4f8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	68fa      	ldr	r2, [r7, #12]
 800a50c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	689a      	ldr	r2, [r3, #8]
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	683a      	ldr	r2, [r7, #0]
 800a51c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	683a      	ldr	r2, [r7, #0]
 800a522:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	1c5a      	adds	r2, r3, #1
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	601a      	str	r2, [r3, #0]
}
 800a534:	bf00      	nop
 800a536:	3714      	adds	r7, #20
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a54a:	683b      	ldr	r3, [r7, #0]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a556:	d103      	bne.n	800a560 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	691b      	ldr	r3, [r3, #16]
 800a55c:	60fb      	str	r3, [r7, #12]
 800a55e:	e00c      	b.n	800a57a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	3308      	adds	r3, #8
 800a564:	60fb      	str	r3, [r7, #12]
 800a566:	e002      	b.n	800a56e <vListInsert+0x2e>
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	60fb      	str	r3, [r7, #12]
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	429a      	cmp	r2, r3
 800a578:	d2f6      	bcs.n	800a568 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	685a      	ldr	r2, [r3, #4]
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	685b      	ldr	r3, [r3, #4]
 800a586:	683a      	ldr	r2, [r7, #0]
 800a588:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	1c5a      	adds	r2, r3, #1
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	601a      	str	r2, [r3, #0]
}
 800a5a6:	bf00      	nop
 800a5a8:	3714      	adds	r7, #20
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a5b2:	b480      	push	{r7}
 800a5b4:	b085      	sub	sp, #20
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	687a      	ldr	r2, [r7, #4]
 800a5c6:	6892      	ldr	r2, [r2, #8]
 800a5c8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	6852      	ldr	r2, [r2, #4]
 800a5d2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	429a      	cmp	r2, r3
 800a5dc:	d103      	bne.n	800a5e6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	689a      	ldr	r2, [r3, #8]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	1e5a      	subs	r2, r3, #1
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3714      	adds	r7, #20
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
	...

0800a608 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b084      	sub	sp, #16
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10b      	bne.n	800a634 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a61c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a620:	f383 8811 	msr	BASEPRI, r3
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	f3bf 8f4f 	dsb	sy
 800a62c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a62e:	bf00      	nop
 800a630:	bf00      	nop
 800a632:	e7fd      	b.n	800a630 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a634:	f001 fec0 	bl	800c3b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a640:	68f9      	ldr	r1, [r7, #12]
 800a642:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a644:	fb01 f303 	mul.w	r3, r1, r3
 800a648:	441a      	add	r2, r3
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2200      	movs	r2, #0
 800a652:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a664:	3b01      	subs	r3, #1
 800a666:	68f9      	ldr	r1, [r7, #12]
 800a668:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a66a:	fb01 f303 	mul.w	r3, r1, r3
 800a66e:	441a      	add	r2, r3
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	22ff      	movs	r2, #255	@ 0xff
 800a678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	22ff      	movs	r2, #255	@ 0xff
 800a680:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d114      	bne.n	800a6b4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	691b      	ldr	r3, [r3, #16]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d01a      	beq.n	800a6c8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	3310      	adds	r3, #16
 800a696:	4618      	mov	r0, r3
 800a698:	f001 f974 	bl	800b984 <xTaskRemoveFromEventList>
 800a69c:	4603      	mov	r3, r0
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d012      	beq.n	800a6c8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a6a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a6d8 <xQueueGenericReset+0xd0>)
 800a6a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6a8:	601a      	str	r2, [r3, #0]
 800a6aa:	f3bf 8f4f 	dsb	sy
 800a6ae:	f3bf 8f6f 	isb	sy
 800a6b2:	e009      	b.n	800a6c8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	3310      	adds	r3, #16
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	f7ff fef0 	bl	800a49e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	3324      	adds	r3, #36	@ 0x24
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f7ff feeb 	bl	800a49e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a6c8:	f001 fea8 	bl	800c41c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a6cc:	2301      	movs	r3, #1
}
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	3710      	adds	r7, #16
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	bd80      	pop	{r7, pc}
 800a6d6:	bf00      	nop
 800a6d8:	e000ed04 	.word	0xe000ed04

0800a6dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b08e      	sub	sp, #56	@ 0x38
 800a6e0:	af02      	add	r7, sp, #8
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	60b9      	str	r1, [r7, #8]
 800a6e6:	607a      	str	r2, [r7, #4]
 800a6e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d10b      	bne.n	800a708 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a6f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f4:	f383 8811 	msr	BASEPRI, r3
 800a6f8:	f3bf 8f6f 	isb	sy
 800a6fc:	f3bf 8f4f 	dsb	sy
 800a700:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a702:	bf00      	nop
 800a704:	bf00      	nop
 800a706:	e7fd      	b.n	800a704 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d10b      	bne.n	800a726 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a70e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a712:	f383 8811 	msr	BASEPRI, r3
 800a716:	f3bf 8f6f 	isb	sy
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a720:	bf00      	nop
 800a722:	bf00      	nop
 800a724:	e7fd      	b.n	800a722 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d002      	beq.n	800a732 <xQueueGenericCreateStatic+0x56>
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d001      	beq.n	800a736 <xQueueGenericCreateStatic+0x5a>
 800a732:	2301      	movs	r3, #1
 800a734:	e000      	b.n	800a738 <xQueueGenericCreateStatic+0x5c>
 800a736:	2300      	movs	r3, #0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d10b      	bne.n	800a754 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a73c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a740:	f383 8811 	msr	BASEPRI, r3
 800a744:	f3bf 8f6f 	isb	sy
 800a748:	f3bf 8f4f 	dsb	sy
 800a74c:	623b      	str	r3, [r7, #32]
}
 800a74e:	bf00      	nop
 800a750:	bf00      	nop
 800a752:	e7fd      	b.n	800a750 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d102      	bne.n	800a760 <xQueueGenericCreateStatic+0x84>
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d101      	bne.n	800a764 <xQueueGenericCreateStatic+0x88>
 800a760:	2301      	movs	r3, #1
 800a762:	e000      	b.n	800a766 <xQueueGenericCreateStatic+0x8a>
 800a764:	2300      	movs	r3, #0
 800a766:	2b00      	cmp	r3, #0
 800a768:	d10b      	bne.n	800a782 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a76a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a76e:	f383 8811 	msr	BASEPRI, r3
 800a772:	f3bf 8f6f 	isb	sy
 800a776:	f3bf 8f4f 	dsb	sy
 800a77a:	61fb      	str	r3, [r7, #28]
}
 800a77c:	bf00      	nop
 800a77e:	bf00      	nop
 800a780:	e7fd      	b.n	800a77e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a782:	2348      	movs	r3, #72	@ 0x48
 800a784:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	2b48      	cmp	r3, #72	@ 0x48
 800a78a:	d00b      	beq.n	800a7a4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a78c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a790:	f383 8811 	msr	BASEPRI, r3
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	61bb      	str	r3, [r7, #24]
}
 800a79e:	bf00      	nop
 800a7a0:	bf00      	nop
 800a7a2:	e7fd      	b.n	800a7a0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a7a4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00d      	beq.n	800a7cc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a7b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a7b8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7be:	9300      	str	r3, [sp, #0]
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	68b9      	ldr	r1, [r7, #8]
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	f000 f840 	bl	800a84c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a7cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3730      	adds	r7, #48	@ 0x30
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b08a      	sub	sp, #40	@ 0x28
 800a7da:	af02      	add	r7, sp, #8
 800a7dc:	60f8      	str	r0, [r7, #12]
 800a7de:	60b9      	str	r1, [r7, #8]
 800a7e0:	4613      	mov	r3, r2
 800a7e2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d10b      	bne.n	800a802 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a7ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ee:	f383 8811 	msr	BASEPRI, r3
 800a7f2:	f3bf 8f6f 	isb	sy
 800a7f6:	f3bf 8f4f 	dsb	sy
 800a7fa:	613b      	str	r3, [r7, #16]
}
 800a7fc:	bf00      	nop
 800a7fe:	bf00      	nop
 800a800:	e7fd      	b.n	800a7fe <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	68ba      	ldr	r2, [r7, #8]
 800a806:	fb02 f303 	mul.w	r3, r2, r3
 800a80a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	3348      	adds	r3, #72	@ 0x48
 800a810:	4618      	mov	r0, r3
 800a812:	f001 fef3 	bl	800c5fc <pvPortMalloc>
 800a816:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d011      	beq.n	800a842 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a81e:	69bb      	ldr	r3, [r7, #24]
 800a820:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	3348      	adds	r3, #72	@ 0x48
 800a826:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a830:	79fa      	ldrb	r2, [r7, #7]
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	9300      	str	r3, [sp, #0]
 800a836:	4613      	mov	r3, r2
 800a838:	697a      	ldr	r2, [r7, #20]
 800a83a:	68b9      	ldr	r1, [r7, #8]
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f000 f805 	bl	800a84c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a842:	69bb      	ldr	r3, [r7, #24]
	}
 800a844:	4618      	mov	r0, r3
 800a846:	3720      	adds	r7, #32
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
 800a858:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d103      	bne.n	800a868 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	69ba      	ldr	r2, [r7, #24]
 800a864:	601a      	str	r2, [r3, #0]
 800a866:	e002      	b.n	800a86e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a868:	69bb      	ldr	r3, [r7, #24]
 800a86a:	687a      	ldr	r2, [r7, #4]
 800a86c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a86e:	69bb      	ldr	r3, [r7, #24]
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a874:	69bb      	ldr	r3, [r7, #24]
 800a876:	68ba      	ldr	r2, [r7, #8]
 800a878:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a87a:	2101      	movs	r1, #1
 800a87c:	69b8      	ldr	r0, [r7, #24]
 800a87e:	f7ff fec3 	bl	800a608 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a882:	bf00      	nop
 800a884:	3710      	adds	r7, #16
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
	...

0800a88c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08e      	sub	sp, #56	@ 0x38
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
 800a898:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a89a:	2300      	movs	r3, #0
 800a89c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d10b      	bne.n	800a8c0 <xQueueGenericSend+0x34>
	__asm volatile
 800a8a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ac:	f383 8811 	msr	BASEPRI, r3
 800a8b0:	f3bf 8f6f 	isb	sy
 800a8b4:	f3bf 8f4f 	dsb	sy
 800a8b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a8ba:	bf00      	nop
 800a8bc:	bf00      	nop
 800a8be:	e7fd      	b.n	800a8bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d103      	bne.n	800a8ce <xQueueGenericSend+0x42>
 800a8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d101      	bne.n	800a8d2 <xQueueGenericSend+0x46>
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	e000      	b.n	800a8d4 <xQueueGenericSend+0x48>
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d10b      	bne.n	800a8f0 <xQueueGenericSend+0x64>
	__asm volatile
 800a8d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8dc:	f383 8811 	msr	BASEPRI, r3
 800a8e0:	f3bf 8f6f 	isb	sy
 800a8e4:	f3bf 8f4f 	dsb	sy
 800a8e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a8ea:	bf00      	nop
 800a8ec:	bf00      	nop
 800a8ee:	e7fd      	b.n	800a8ec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	2b02      	cmp	r3, #2
 800a8f4:	d103      	bne.n	800a8fe <xQueueGenericSend+0x72>
 800a8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8fa:	2b01      	cmp	r3, #1
 800a8fc:	d101      	bne.n	800a902 <xQueueGenericSend+0x76>
 800a8fe:	2301      	movs	r3, #1
 800a900:	e000      	b.n	800a904 <xQueueGenericSend+0x78>
 800a902:	2300      	movs	r3, #0
 800a904:	2b00      	cmp	r3, #0
 800a906:	d10b      	bne.n	800a920 <xQueueGenericSend+0x94>
	__asm volatile
 800a908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a90c:	f383 8811 	msr	BASEPRI, r3
 800a910:	f3bf 8f6f 	isb	sy
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	623b      	str	r3, [r7, #32]
}
 800a91a:	bf00      	nop
 800a91c:	bf00      	nop
 800a91e:	e7fd      	b.n	800a91c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a920:	f001 f9f0 	bl	800bd04 <xTaskGetSchedulerState>
 800a924:	4603      	mov	r3, r0
 800a926:	2b00      	cmp	r3, #0
 800a928:	d102      	bne.n	800a930 <xQueueGenericSend+0xa4>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <xQueueGenericSend+0xa8>
 800a930:	2301      	movs	r3, #1
 800a932:	e000      	b.n	800a936 <xQueueGenericSend+0xaa>
 800a934:	2300      	movs	r3, #0
 800a936:	2b00      	cmp	r3, #0
 800a938:	d10b      	bne.n	800a952 <xQueueGenericSend+0xc6>
	__asm volatile
 800a93a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a93e:	f383 8811 	msr	BASEPRI, r3
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	f3bf 8f4f 	dsb	sy
 800a94a:	61fb      	str	r3, [r7, #28]
}
 800a94c:	bf00      	nop
 800a94e:	bf00      	nop
 800a950:	e7fd      	b.n	800a94e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a952:	f001 fd31 	bl	800c3b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a958:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a95a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a95c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a95e:	429a      	cmp	r2, r3
 800a960:	d302      	bcc.n	800a968 <xQueueGenericSend+0xdc>
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	2b02      	cmp	r3, #2
 800a966:	d129      	bne.n	800a9bc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a968:	683a      	ldr	r2, [r7, #0]
 800a96a:	68b9      	ldr	r1, [r7, #8]
 800a96c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a96e:	f000 faed 	bl	800af4c <prvCopyDataToQueue>
 800a972:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d010      	beq.n	800a99e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a97c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a97e:	3324      	adds	r3, #36	@ 0x24
 800a980:	4618      	mov	r0, r3
 800a982:	f000 ffff 	bl	800b984 <xTaskRemoveFromEventList>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d013      	beq.n	800a9b4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a98c:	4b3f      	ldr	r3, [pc, #252]	@ (800aa8c <xQueueGenericSend+0x200>)
 800a98e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a992:	601a      	str	r2, [r3, #0]
 800a994:	f3bf 8f4f 	dsb	sy
 800a998:	f3bf 8f6f 	isb	sy
 800a99c:	e00a      	b.n	800a9b4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d007      	beq.n	800a9b4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a9a4:	4b39      	ldr	r3, [pc, #228]	@ (800aa8c <xQueueGenericSend+0x200>)
 800a9a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9aa:	601a      	str	r2, [r3, #0]
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a9b4:	f001 fd32 	bl	800c41c <vPortExitCritical>
				return pdPASS;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e063      	b.n	800aa84 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d103      	bne.n	800a9ca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a9c2:	f001 fd2b 	bl	800c41c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	e05c      	b.n	800aa84 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d106      	bne.n	800a9de <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9d0:	f107 0314 	add.w	r3, r7, #20
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f001 f839 	bl	800ba4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9de:	f001 fd1d 	bl	800c41c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9e2:	f000 fde7 	bl	800b5b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9e6:	f001 fce7 	bl	800c3b8 <vPortEnterCritical>
 800a9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9f0:	b25b      	sxtb	r3, r3
 800a9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9f6:	d103      	bne.n	800aa00 <xQueueGenericSend+0x174>
 800a9f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa06:	b25b      	sxtb	r3, r3
 800aa08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa0c:	d103      	bne.n	800aa16 <xQueueGenericSend+0x18a>
 800aa0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa10:	2200      	movs	r2, #0
 800aa12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa16:	f001 fd01 	bl	800c41c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa1a:	1d3a      	adds	r2, r7, #4
 800aa1c:	f107 0314 	add.w	r3, r7, #20
 800aa20:	4611      	mov	r1, r2
 800aa22:	4618      	mov	r0, r3
 800aa24:	f001 f828 	bl	800ba78 <xTaskCheckForTimeOut>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d124      	bne.n	800aa78 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800aa2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa30:	f000 fb84 	bl	800b13c <prvIsQueueFull>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d018      	beq.n	800aa6c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800aa3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3c:	3310      	adds	r3, #16
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	4611      	mov	r1, r2
 800aa42:	4618      	mov	r0, r3
 800aa44:	f000 ff78 	bl	800b938 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aa48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa4a:	f000 fb0f 	bl	800b06c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aa4e:	f000 fdbf 	bl	800b5d0 <xTaskResumeAll>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	f47f af7c 	bne.w	800a952 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800aa5a:	4b0c      	ldr	r3, [pc, #48]	@ (800aa8c <xQueueGenericSend+0x200>)
 800aa5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa60:	601a      	str	r2, [r3, #0]
 800aa62:	f3bf 8f4f 	dsb	sy
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	e772      	b.n	800a952 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aa6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa6e:	f000 fafd 	bl	800b06c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa72:	f000 fdad 	bl	800b5d0 <xTaskResumeAll>
 800aa76:	e76c      	b.n	800a952 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aa78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa7a:	f000 faf7 	bl	800b06c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa7e:	f000 fda7 	bl	800b5d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aa82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3738      	adds	r7, #56	@ 0x38
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	e000ed04 	.word	0xe000ed04

0800aa90 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b08e      	sub	sp, #56	@ 0x38
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800aa9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10b      	bne.n	800aabc <xQueueGiveFromISR+0x2c>
	__asm volatile
 800aaa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaa8:	f383 8811 	msr	BASEPRI, r3
 800aaac:	f3bf 8f6f 	isb	sy
 800aab0:	f3bf 8f4f 	dsb	sy
 800aab4:	623b      	str	r3, [r7, #32]
}
 800aab6:	bf00      	nop
 800aab8:	bf00      	nop
 800aaba:	e7fd      	b.n	800aab8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aabc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aabe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d00b      	beq.n	800aadc <xQueueGiveFromISR+0x4c>
	__asm volatile
 800aac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac8:	f383 8811 	msr	BASEPRI, r3
 800aacc:	f3bf 8f6f 	isb	sy
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	61fb      	str	r3, [r7, #28]
}
 800aad6:	bf00      	nop
 800aad8:	bf00      	nop
 800aada:	e7fd      	b.n	800aad8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800aadc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d103      	bne.n	800aaec <xQueueGiveFromISR+0x5c>
 800aae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d101      	bne.n	800aaf0 <xQueueGiveFromISR+0x60>
 800aaec:	2301      	movs	r3, #1
 800aaee:	e000      	b.n	800aaf2 <xQueueGiveFromISR+0x62>
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10b      	bne.n	800ab0e <xQueueGiveFromISR+0x7e>
	__asm volatile
 800aaf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aafa:	f383 8811 	msr	BASEPRI, r3
 800aafe:	f3bf 8f6f 	isb	sy
 800ab02:	f3bf 8f4f 	dsb	sy
 800ab06:	61bb      	str	r3, [r7, #24]
}
 800ab08:	bf00      	nop
 800ab0a:	bf00      	nop
 800ab0c:	e7fd      	b.n	800ab0a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab0e:	f001 fd33 	bl	800c578 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ab12:	f3ef 8211 	mrs	r2, BASEPRI
 800ab16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab1a:	f383 8811 	msr	BASEPRI, r3
 800ab1e:	f3bf 8f6f 	isb	sy
 800ab22:	f3bf 8f4f 	dsb	sy
 800ab26:	617a      	str	r2, [r7, #20]
 800ab28:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ab2a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab32:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ab34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab3a:	429a      	cmp	r2, r3
 800ab3c:	d22b      	bcs.n	800ab96 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab4a:	1c5a      	adds	r2, r3, #1
 800ab4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab4e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab50:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ab54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab58:	d112      	bne.n	800ab80 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d016      	beq.n	800ab90 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab64:	3324      	adds	r3, #36	@ 0x24
 800ab66:	4618      	mov	r0, r3
 800ab68:	f000 ff0c 	bl	800b984 <xTaskRemoveFromEventList>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00e      	beq.n	800ab90 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d00b      	beq.n	800ab90 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	601a      	str	r2, [r3, #0]
 800ab7e:	e007      	b.n	800ab90 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab84:	3301      	adds	r3, #1
 800ab86:	b2db      	uxtb	r3, r3
 800ab88:	b25a      	sxtb	r2, r3
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ab90:	2301      	movs	r3, #1
 800ab92:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab94:	e001      	b.n	800ab9a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab96:	2300      	movs	r3, #0
 800ab98:	637b      	str	r3, [r7, #52]	@ 0x34
 800ab9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab9c:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aba4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3738      	adds	r7, #56	@ 0x38
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b08e      	sub	sp, #56	@ 0x38
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800abba:	2300      	movs	r3, #0
 800abbc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800abc2:	2300      	movs	r3, #0
 800abc4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800abc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10b      	bne.n	800abe4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800abcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abd0:	f383 8811 	msr	BASEPRI, r3
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	623b      	str	r3, [r7, #32]
}
 800abde:	bf00      	nop
 800abe0:	bf00      	nop
 800abe2:	e7fd      	b.n	800abe0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800abe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00b      	beq.n	800ac04 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800abec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abf0:	f383 8811 	msr	BASEPRI, r3
 800abf4:	f3bf 8f6f 	isb	sy
 800abf8:	f3bf 8f4f 	dsb	sy
 800abfc:	61fb      	str	r3, [r7, #28]
}
 800abfe:	bf00      	nop
 800ac00:	bf00      	nop
 800ac02:	e7fd      	b.n	800ac00 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac04:	f001 f87e 	bl	800bd04 <xTaskGetSchedulerState>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d102      	bne.n	800ac14 <xQueueSemaphoreTake+0x64>
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d101      	bne.n	800ac18 <xQueueSemaphoreTake+0x68>
 800ac14:	2301      	movs	r3, #1
 800ac16:	e000      	b.n	800ac1a <xQueueSemaphoreTake+0x6a>
 800ac18:	2300      	movs	r3, #0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d10b      	bne.n	800ac36 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800ac1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac22:	f383 8811 	msr	BASEPRI, r3
 800ac26:	f3bf 8f6f 	isb	sy
 800ac2a:	f3bf 8f4f 	dsb	sy
 800ac2e:	61bb      	str	r3, [r7, #24]
}
 800ac30:	bf00      	nop
 800ac32:	bf00      	nop
 800ac34:	e7fd      	b.n	800ac32 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac36:	f001 fbbf 	bl	800c3b8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ac3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac3e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ac40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d024      	beq.n	800ac90 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ac46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac48:	1e5a      	subs	r2, r3, #1
 800ac4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac4c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ac4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d104      	bne.n	800ac60 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ac56:	f001 fa01 	bl	800c05c <pvTaskIncrementMutexHeldCount>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac5e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac62:	691b      	ldr	r3, [r3, #16]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d00f      	beq.n	800ac88 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac6a:	3310      	adds	r3, #16
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	f000 fe89 	bl	800b984 <xTaskRemoveFromEventList>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d007      	beq.n	800ac88 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac78:	4b54      	ldr	r3, [pc, #336]	@ (800adcc <xQueueSemaphoreTake+0x21c>)
 800ac7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac7e:	601a      	str	r2, [r3, #0]
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac88:	f001 fbc8 	bl	800c41c <vPortExitCritical>
				return pdPASS;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	e098      	b.n	800adc2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d112      	bne.n	800acbc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ac96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d00b      	beq.n	800acb4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800ac9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca0:	f383 8811 	msr	BASEPRI, r3
 800aca4:	f3bf 8f6f 	isb	sy
 800aca8:	f3bf 8f4f 	dsb	sy
 800acac:	617b      	str	r3, [r7, #20]
}
 800acae:	bf00      	nop
 800acb0:	bf00      	nop
 800acb2:	e7fd      	b.n	800acb0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800acb4:	f001 fbb2 	bl	800c41c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800acb8:	2300      	movs	r3, #0
 800acba:	e082      	b.n	800adc2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800acbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d106      	bne.n	800acd0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800acc2:	f107 030c 	add.w	r3, r7, #12
 800acc6:	4618      	mov	r0, r3
 800acc8:	f000 fec0 	bl	800ba4c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800accc:	2301      	movs	r3, #1
 800acce:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800acd0:	f001 fba4 	bl	800c41c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800acd4:	f000 fc6e 	bl	800b5b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800acd8:	f001 fb6e 	bl	800c3b8 <vPortEnterCritical>
 800acdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acde:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ace2:	b25b      	sxtb	r3, r3
 800ace4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace8:	d103      	bne.n	800acf2 <xQueueSemaphoreTake+0x142>
 800acea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acec:	2200      	movs	r2, #0
 800acee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800acf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acf4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800acf8:	b25b      	sxtb	r3, r3
 800acfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acfe:	d103      	bne.n	800ad08 <xQueueSemaphoreTake+0x158>
 800ad00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad02:	2200      	movs	r2, #0
 800ad04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad08:	f001 fb88 	bl	800c41c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad0c:	463a      	mov	r2, r7
 800ad0e:	f107 030c 	add.w	r3, r7, #12
 800ad12:	4611      	mov	r1, r2
 800ad14:	4618      	mov	r0, r3
 800ad16:	f000 feaf 	bl	800ba78 <xTaskCheckForTimeOut>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d132      	bne.n	800ad86 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad20:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ad22:	f000 f9f5 	bl	800b110 <prvIsQueueEmpty>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d026      	beq.n	800ad7a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d109      	bne.n	800ad48 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ad34:	f001 fb40 	bl	800c3b8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f000 ffff 	bl	800bd40 <xTaskPriorityInherit>
 800ad42:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ad44:	f001 fb6a 	bl	800c41c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ad48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad4a:	3324      	adds	r3, #36	@ 0x24
 800ad4c:	683a      	ldr	r2, [r7, #0]
 800ad4e:	4611      	mov	r1, r2
 800ad50:	4618      	mov	r0, r3
 800ad52:	f000 fdf1 	bl	800b938 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ad56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ad58:	f000 f988 	bl	800b06c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ad5c:	f000 fc38 	bl	800b5d0 <xTaskResumeAll>
 800ad60:	4603      	mov	r3, r0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f47f af67 	bne.w	800ac36 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ad68:	4b18      	ldr	r3, [pc, #96]	@ (800adcc <xQueueSemaphoreTake+0x21c>)
 800ad6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad6e:	601a      	str	r2, [r3, #0]
 800ad70:	f3bf 8f4f 	dsb	sy
 800ad74:	f3bf 8f6f 	isb	sy
 800ad78:	e75d      	b.n	800ac36 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ad7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ad7c:	f000 f976 	bl	800b06c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad80:	f000 fc26 	bl	800b5d0 <xTaskResumeAll>
 800ad84:	e757      	b.n	800ac36 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ad86:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ad88:	f000 f970 	bl	800b06c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad8c:	f000 fc20 	bl	800b5d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ad92:	f000 f9bd 	bl	800b110 <prvIsQueueEmpty>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	f43f af4c 	beq.w	800ac36 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ad9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00d      	beq.n	800adc0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800ada4:	f001 fb08 	bl	800c3b8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ada8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800adaa:	f000 f8b7 	bl	800af1c <prvGetDisinheritPriorityAfterTimeout>
 800adae:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800adb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800adb6:	4618      	mov	r0, r3
 800adb8:	f001 f8c0 	bl	800bf3c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800adbc:	f001 fb2e 	bl	800c41c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800adc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3738      	adds	r7, #56	@ 0x38
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	e000ed04 	.word	0xe000ed04

0800add0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b08e      	sub	sp, #56	@ 0x38
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ade0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d10b      	bne.n	800adfe <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800ade6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adea:	f383 8811 	msr	BASEPRI, r3
 800adee:	f3bf 8f6f 	isb	sy
 800adf2:	f3bf 8f4f 	dsb	sy
 800adf6:	623b      	str	r3, [r7, #32]
}
 800adf8:	bf00      	nop
 800adfa:	bf00      	nop
 800adfc:	e7fd      	b.n	800adfa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d103      	bne.n	800ae0c <xQueueReceiveFromISR+0x3c>
 800ae04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d101      	bne.n	800ae10 <xQueueReceiveFromISR+0x40>
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e000      	b.n	800ae12 <xQueueReceiveFromISR+0x42>
 800ae10:	2300      	movs	r3, #0
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d10b      	bne.n	800ae2e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800ae16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae1a:	f383 8811 	msr	BASEPRI, r3
 800ae1e:	f3bf 8f6f 	isb	sy
 800ae22:	f3bf 8f4f 	dsb	sy
 800ae26:	61fb      	str	r3, [r7, #28]
}
 800ae28:	bf00      	nop
 800ae2a:	bf00      	nop
 800ae2c:	e7fd      	b.n	800ae2a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae2e:	f001 fba3 	bl	800c578 <vPortValidateInterruptPriority>
	__asm volatile
 800ae32:	f3ef 8211 	mrs	r2, BASEPRI
 800ae36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae3a:	f383 8811 	msr	BASEPRI, r3
 800ae3e:	f3bf 8f6f 	isb	sy
 800ae42:	f3bf 8f4f 	dsb	sy
 800ae46:	61ba      	str	r2, [r7, #24]
 800ae48:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ae4a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ae4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae52:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d02f      	beq.n	800aeba <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae64:	68b9      	ldr	r1, [r7, #8]
 800ae66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae68:	f000 f8da 	bl	800b020 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae6e:	1e5a      	subs	r2, r3, #1
 800ae70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae72:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ae74:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ae78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae7c:	d112      	bne.n	800aea4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae80:	691b      	ldr	r3, [r3, #16]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d016      	beq.n	800aeb4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae88:	3310      	adds	r3, #16
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 fd7a 	bl	800b984 <xTaskRemoveFromEventList>
 800ae90:	4603      	mov	r3, r0
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d00e      	beq.n	800aeb4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d00b      	beq.n	800aeb4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	2201      	movs	r2, #1
 800aea0:	601a      	str	r2, [r3, #0]
 800aea2:	e007      	b.n	800aeb4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aea4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aea8:	3301      	adds	r3, #1
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	b25a      	sxtb	r2, r3
 800aeae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800aeb8:	e001      	b.n	800aebe <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800aeba:	2300      	movs	r3, #0
 800aebc:	637b      	str	r3, [r7, #52]	@ 0x34
 800aebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aec0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aec2:	693b      	ldr	r3, [r7, #16]
 800aec4:	f383 8811 	msr	BASEPRI, r3
}
 800aec8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aeca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3738      	adds	r7, #56	@ 0x38
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d10b      	bne.n	800aefe <vQueueDelete+0x2a>
	__asm volatile
 800aee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeea:	f383 8811 	msr	BASEPRI, r3
 800aeee:	f3bf 8f6f 	isb	sy
 800aef2:	f3bf 8f4f 	dsb	sy
 800aef6:	60bb      	str	r3, [r7, #8]
}
 800aef8:	bf00      	nop
 800aefa:	bf00      	nop
 800aefc:	e7fd      	b.n	800aefa <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	f000 f934 	bl	800b16c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d102      	bne.n	800af14 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800af0e:	68f8      	ldr	r0, [r7, #12]
 800af10:	f001 fc42 	bl	800c798 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800af14:	bf00      	nop
 800af16:	3710      	adds	r7, #16
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800af1c:	b480      	push	{r7}
 800af1e:	b085      	sub	sp, #20
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d006      	beq.n	800af3a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f1c3 0307 	rsb	r3, r3, #7
 800af36:	60fb      	str	r3, [r7, #12]
 800af38:	e001      	b.n	800af3e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800af3a:	2300      	movs	r3, #0
 800af3c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800af3e:	68fb      	ldr	r3, [r7, #12]
	}
 800af40:	4618      	mov	r0, r3
 800af42:	3714      	adds	r7, #20
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b086      	sub	sp, #24
 800af50:	af00      	add	r7, sp, #0
 800af52:	60f8      	str	r0, [r7, #12]
 800af54:	60b9      	str	r1, [r7, #8]
 800af56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800af58:	2300      	movs	r3, #0
 800af5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af66:	2b00      	cmp	r3, #0
 800af68:	d10d      	bne.n	800af86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d14d      	bne.n	800b00e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	689b      	ldr	r3, [r3, #8]
 800af76:	4618      	mov	r0, r3
 800af78:	f000 ff58 	bl	800be2c <xTaskPriorityDisinherit>
 800af7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2200      	movs	r2, #0
 800af82:	609a      	str	r2, [r3, #8]
 800af84:	e043      	b.n	800b00e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d119      	bne.n	800afc0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	6858      	ldr	r0, [r3, #4]
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af94:	461a      	mov	r2, r3
 800af96:	68b9      	ldr	r1, [r7, #8]
 800af98:	f003 fc75 	bl	800e886 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	685a      	ldr	r2, [r3, #4]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afa4:	441a      	add	r2, r3
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	685a      	ldr	r2, [r3, #4]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	689b      	ldr	r3, [r3, #8]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d32b      	bcc.n	800b00e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681a      	ldr	r2, [r3, #0]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	605a      	str	r2, [r3, #4]
 800afbe:	e026      	b.n	800b00e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	68d8      	ldr	r0, [r3, #12]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afc8:	461a      	mov	r2, r3
 800afca:	68b9      	ldr	r1, [r7, #8]
 800afcc:	f003 fc5b 	bl	800e886 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	68da      	ldr	r2, [r3, #12]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afd8:	425b      	negs	r3, r3
 800afda:	441a      	add	r2, r3
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	68da      	ldr	r2, [r3, #12]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d207      	bcs.n	800affc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	689a      	ldr	r2, [r3, #8]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aff4:	425b      	negs	r3, r3
 800aff6:	441a      	add	r2, r3
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	2b02      	cmp	r3, #2
 800b000:	d105      	bne.n	800b00e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d002      	beq.n	800b00e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	3b01      	subs	r3, #1
 800b00c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b00e:	693b      	ldr	r3, [r7, #16]
 800b010:	1c5a      	adds	r2, r3, #1
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b016:	697b      	ldr	r3, [r7, #20]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3718      	adds	r7, #24
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d018      	beq.n	800b064 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	68da      	ldr	r2, [r3, #12]
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b03a:	441a      	add	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	68da      	ldr	r2, [r3, #12]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d303      	bcc.n	800b054 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	68d9      	ldr	r1, [r3, #12]
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b05c:	461a      	mov	r2, r3
 800b05e:	6838      	ldr	r0, [r7, #0]
 800b060:	f003 fc11 	bl	800e886 <memcpy>
	}
}
 800b064:	bf00      	nop
 800b066:	3708      	adds	r7, #8
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b074:	f001 f9a0 	bl	800c3b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b07e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b080:	e011      	b.n	800b0a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b086:	2b00      	cmp	r3, #0
 800b088:	d012      	beq.n	800b0b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	3324      	adds	r3, #36	@ 0x24
 800b08e:	4618      	mov	r0, r3
 800b090:	f000 fc78 	bl	800b984 <xTaskRemoveFromEventList>
 800b094:	4603      	mov	r3, r0
 800b096:	2b00      	cmp	r3, #0
 800b098:	d001      	beq.n	800b09e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b09a:	f000 fd51 	bl	800bb40 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b09e:	7bfb      	ldrb	r3, [r7, #15]
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	dce9      	bgt.n	800b082 <prvUnlockQueue+0x16>
 800b0ae:	e000      	b.n	800b0b2 <prvUnlockQueue+0x46>
					break;
 800b0b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	22ff      	movs	r2, #255	@ 0xff
 800b0b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b0ba:	f001 f9af 	bl	800c41c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b0be:	f001 f97b 	bl	800c3b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b0ca:	e011      	b.n	800b0f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	691b      	ldr	r3, [r3, #16]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d012      	beq.n	800b0fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	3310      	adds	r3, #16
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f000 fc53 	bl	800b984 <xTaskRemoveFromEventList>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d001      	beq.n	800b0e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b0e4:	f000 fd2c 	bl	800bb40 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b0e8:	7bbb      	ldrb	r3, [r7, #14]
 800b0ea:	3b01      	subs	r3, #1
 800b0ec:	b2db      	uxtb	r3, r3
 800b0ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b0f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	dce9      	bgt.n	800b0cc <prvUnlockQueue+0x60>
 800b0f8:	e000      	b.n	800b0fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b0fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	22ff      	movs	r2, #255	@ 0xff
 800b100:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b104:	f001 f98a 	bl	800c41c <vPortExitCritical>
}
 800b108:	bf00      	nop
 800b10a:	3710      	adds	r7, #16
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b084      	sub	sp, #16
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b118:	f001 f94e 	bl	800c3b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b120:	2b00      	cmp	r3, #0
 800b122:	d102      	bne.n	800b12a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b124:	2301      	movs	r3, #1
 800b126:	60fb      	str	r3, [r7, #12]
 800b128:	e001      	b.n	800b12e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b12a:	2300      	movs	r3, #0
 800b12c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b12e:	f001 f975 	bl	800c41c <vPortExitCritical>

	return xReturn;
 800b132:	68fb      	ldr	r3, [r7, #12]
}
 800b134:	4618      	mov	r0, r3
 800b136:	3710      	adds	r7, #16
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}

0800b13c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b084      	sub	sp, #16
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b144:	f001 f938 	bl	800c3b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b150:	429a      	cmp	r2, r3
 800b152:	d102      	bne.n	800b15a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b154:	2301      	movs	r3, #1
 800b156:	60fb      	str	r3, [r7, #12]
 800b158:	e001      	b.n	800b15e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b15a:	2300      	movs	r3, #0
 800b15c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b15e:	f001 f95d 	bl	800c41c <vPortExitCritical>

	return xReturn;
 800b162:	68fb      	ldr	r3, [r7, #12]
}
 800b164:	4618      	mov	r0, r3
 800b166:	3710      	adds	r7, #16
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}

0800b16c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b16c:	b480      	push	{r7}
 800b16e:	b085      	sub	sp, #20
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b174:	2300      	movs	r3, #0
 800b176:	60fb      	str	r3, [r7, #12]
 800b178:	e016      	b.n	800b1a8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b17a:	4a10      	ldr	r2, [pc, #64]	@ (800b1bc <vQueueUnregisterQueue+0x50>)
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	00db      	lsls	r3, r3, #3
 800b180:	4413      	add	r3, r2
 800b182:	685b      	ldr	r3, [r3, #4]
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	429a      	cmp	r2, r3
 800b188:	d10b      	bne.n	800b1a2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b18a:	4a0c      	ldr	r2, [pc, #48]	@ (800b1bc <vQueueUnregisterQueue+0x50>)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2100      	movs	r1, #0
 800b190:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b194:	4a09      	ldr	r2, [pc, #36]	@ (800b1bc <vQueueUnregisterQueue+0x50>)
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	00db      	lsls	r3, r3, #3
 800b19a:	4413      	add	r3, r2
 800b19c:	2200      	movs	r2, #0
 800b19e:	605a      	str	r2, [r3, #4]
				break;
 800b1a0:	e006      	b.n	800b1b0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	3301      	adds	r3, #1
 800b1a6:	60fb      	str	r3, [r7, #12]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2b07      	cmp	r3, #7
 800b1ac:	d9e5      	bls.n	800b17a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b1ae:	bf00      	nop
 800b1b0:	bf00      	nop
 800b1b2:	3714      	adds	r7, #20
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr
 800b1bc:	20002840 	.word	0x20002840

0800b1c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b08e      	sub	sp, #56	@ 0x38
 800b1c4:	af04      	add	r7, sp, #16
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]
 800b1cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b1ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10b      	bne.n	800b1ec <xTaskCreateStatic+0x2c>
	__asm volatile
 800b1d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1d8:	f383 8811 	msr	BASEPRI, r3
 800b1dc:	f3bf 8f6f 	isb	sy
 800b1e0:	f3bf 8f4f 	dsb	sy
 800b1e4:	623b      	str	r3, [r7, #32]
}
 800b1e6:	bf00      	nop
 800b1e8:	bf00      	nop
 800b1ea:	e7fd      	b.n	800b1e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b1ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d10b      	bne.n	800b20a <xTaskCreateStatic+0x4a>
	__asm volatile
 800b1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f6:	f383 8811 	msr	BASEPRI, r3
 800b1fa:	f3bf 8f6f 	isb	sy
 800b1fe:	f3bf 8f4f 	dsb	sy
 800b202:	61fb      	str	r3, [r7, #28]
}
 800b204:	bf00      	nop
 800b206:	bf00      	nop
 800b208:	e7fd      	b.n	800b206 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b20a:	2354      	movs	r3, #84	@ 0x54
 800b20c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	2b54      	cmp	r3, #84	@ 0x54
 800b212:	d00b      	beq.n	800b22c <xTaskCreateStatic+0x6c>
	__asm volatile
 800b214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b218:	f383 8811 	msr	BASEPRI, r3
 800b21c:	f3bf 8f6f 	isb	sy
 800b220:	f3bf 8f4f 	dsb	sy
 800b224:	61bb      	str	r3, [r7, #24]
}
 800b226:	bf00      	nop
 800b228:	bf00      	nop
 800b22a:	e7fd      	b.n	800b228 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b22c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b230:	2b00      	cmp	r3, #0
 800b232:	d01e      	beq.n	800b272 <xTaskCreateStatic+0xb2>
 800b234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b236:	2b00      	cmp	r3, #0
 800b238:	d01b      	beq.n	800b272 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b23c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b240:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b242:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b246:	2202      	movs	r2, #2
 800b248:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b24c:	2300      	movs	r3, #0
 800b24e:	9303      	str	r3, [sp, #12]
 800b250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b252:	9302      	str	r3, [sp, #8]
 800b254:	f107 0314 	add.w	r3, r7, #20
 800b258:	9301      	str	r3, [sp, #4]
 800b25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b25c:	9300      	str	r3, [sp, #0]
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	68b9      	ldr	r1, [r7, #8]
 800b264:	68f8      	ldr	r0, [r7, #12]
 800b266:	f000 f850 	bl	800b30a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b26a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b26c:	f000 f8d6 	bl	800b41c <prvAddNewTaskToReadyList>
 800b270:	e001      	b.n	800b276 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b272:	2300      	movs	r3, #0
 800b274:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b276:	697b      	ldr	r3, [r7, #20]
	}
 800b278:	4618      	mov	r0, r3
 800b27a:	3728      	adds	r7, #40	@ 0x28
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b280:	b580      	push	{r7, lr}
 800b282:	b08c      	sub	sp, #48	@ 0x30
 800b284:	af04      	add	r7, sp, #16
 800b286:	60f8      	str	r0, [r7, #12]
 800b288:	60b9      	str	r1, [r7, #8]
 800b28a:	603b      	str	r3, [r7, #0]
 800b28c:	4613      	mov	r3, r2
 800b28e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b290:	88fb      	ldrh	r3, [r7, #6]
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4618      	mov	r0, r3
 800b296:	f001 f9b1 	bl	800c5fc <pvPortMalloc>
 800b29a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d00e      	beq.n	800b2c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b2a2:	2054      	movs	r0, #84	@ 0x54
 800b2a4:	f001 f9aa 	bl	800c5fc <pvPortMalloc>
 800b2a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b2aa:	69fb      	ldr	r3, [r7, #28]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d003      	beq.n	800b2b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b2b0:	69fb      	ldr	r3, [r7, #28]
 800b2b2:	697a      	ldr	r2, [r7, #20]
 800b2b4:	631a      	str	r2, [r3, #48]	@ 0x30
 800b2b6:	e005      	b.n	800b2c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b2b8:	6978      	ldr	r0, [r7, #20]
 800b2ba:	f001 fa6d 	bl	800c798 <vPortFree>
 800b2be:	e001      	b.n	800b2c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d017      	beq.n	800b2fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b2ca:	69fb      	ldr	r3, [r7, #28]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b2d2:	88fa      	ldrh	r2, [r7, #6]
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	9303      	str	r3, [sp, #12]
 800b2d8:	69fb      	ldr	r3, [r7, #28]
 800b2da:	9302      	str	r3, [sp, #8]
 800b2dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2de:	9301      	str	r3, [sp, #4]
 800b2e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2e2:	9300      	str	r3, [sp, #0]
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	68b9      	ldr	r1, [r7, #8]
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f000 f80e 	bl	800b30a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b2ee:	69f8      	ldr	r0, [r7, #28]
 800b2f0:	f000 f894 	bl	800b41c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	61bb      	str	r3, [r7, #24]
 800b2f8:	e002      	b.n	800b300 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b2fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b300:	69bb      	ldr	r3, [r7, #24]
	}
 800b302:	4618      	mov	r0, r3
 800b304:	3720      	adds	r7, #32
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b088      	sub	sp, #32
 800b30e:	af00      	add	r7, sp, #0
 800b310:	60f8      	str	r0, [r7, #12]
 800b312:	60b9      	str	r1, [r7, #8]
 800b314:	607a      	str	r2, [r7, #4]
 800b316:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b31a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b322:	3b01      	subs	r3, #1
 800b324:	009b      	lsls	r3, r3, #2
 800b326:	4413      	add	r3, r2
 800b328:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b32a:	69bb      	ldr	r3, [r7, #24]
 800b32c:	f023 0307 	bic.w	r3, r3, #7
 800b330:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	f003 0307 	and.w	r3, r3, #7
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d00b      	beq.n	800b354 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800b33c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b340:	f383 8811 	msr	BASEPRI, r3
 800b344:	f3bf 8f6f 	isb	sy
 800b348:	f3bf 8f4f 	dsb	sy
 800b34c:	617b      	str	r3, [r7, #20]
}
 800b34e:	bf00      	nop
 800b350:	bf00      	nop
 800b352:	e7fd      	b.n	800b350 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d01f      	beq.n	800b39a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b35a:	2300      	movs	r3, #0
 800b35c:	61fb      	str	r3, [r7, #28]
 800b35e:	e012      	b.n	800b386 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b360:	68ba      	ldr	r2, [r7, #8]
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	4413      	add	r3, r2
 800b366:	7819      	ldrb	r1, [r3, #0]
 800b368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	4413      	add	r3, r2
 800b36e:	3334      	adds	r3, #52	@ 0x34
 800b370:	460a      	mov	r2, r1
 800b372:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b374:	68ba      	ldr	r2, [r7, #8]
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	4413      	add	r3, r2
 800b37a:	781b      	ldrb	r3, [r3, #0]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d006      	beq.n	800b38e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b380:	69fb      	ldr	r3, [r7, #28]
 800b382:	3301      	adds	r3, #1
 800b384:	61fb      	str	r3, [r7, #28]
 800b386:	69fb      	ldr	r3, [r7, #28]
 800b388:	2b0f      	cmp	r3, #15
 800b38a:	d9e9      	bls.n	800b360 <prvInitialiseNewTask+0x56>
 800b38c:	e000      	b.n	800b390 <prvInitialiseNewTask+0x86>
			{
				break;
 800b38e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b392:	2200      	movs	r2, #0
 800b394:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b398:	e003      	b.n	800b3a2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b39a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39c:	2200      	movs	r2, #0
 800b39e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3a4:	2b06      	cmp	r3, #6
 800b3a6:	d901      	bls.n	800b3ac <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b3a8:	2306      	movs	r3, #6
 800b3aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b3ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b3b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b3b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b3b6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b3b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b3be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c0:	3304      	adds	r3, #4
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7ff f88b 	bl	800a4de <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ca:	3318      	adds	r3, #24
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f7ff f886 	bl	800a4de <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3da:	f1c3 0207 	rsb	r2, r3, #7
 800b3de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3e6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b3f6:	683a      	ldr	r2, [r7, #0]
 800b3f8:	68f9      	ldr	r1, [r7, #12]
 800b3fa:	69b8      	ldr	r0, [r7, #24]
 800b3fc:	f000 fea8 	bl	800c150 <pxPortInitialiseStack>
 800b400:	4602      	mov	r2, r0
 800b402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b404:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d002      	beq.n	800b412 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b40e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b410:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b412:	bf00      	nop
 800b414:	3720      	adds	r7, #32
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
	...

0800b41c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b424:	f000 ffc8 	bl	800c3b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b428:	4b2a      	ldr	r3, [pc, #168]	@ (800b4d4 <prvAddNewTaskToReadyList+0xb8>)
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	3301      	adds	r3, #1
 800b42e:	4a29      	ldr	r2, [pc, #164]	@ (800b4d4 <prvAddNewTaskToReadyList+0xb8>)
 800b430:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b432:	4b29      	ldr	r3, [pc, #164]	@ (800b4d8 <prvAddNewTaskToReadyList+0xbc>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d109      	bne.n	800b44e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b43a:	4a27      	ldr	r2, [pc, #156]	@ (800b4d8 <prvAddNewTaskToReadyList+0xbc>)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b440:	4b24      	ldr	r3, [pc, #144]	@ (800b4d4 <prvAddNewTaskToReadyList+0xb8>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	2b01      	cmp	r3, #1
 800b446:	d110      	bne.n	800b46a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b448:	f000 fb9e 	bl	800bb88 <prvInitialiseTaskLists>
 800b44c:	e00d      	b.n	800b46a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b44e:	4b23      	ldr	r3, [pc, #140]	@ (800b4dc <prvAddNewTaskToReadyList+0xc0>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d109      	bne.n	800b46a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b456:	4b20      	ldr	r3, [pc, #128]	@ (800b4d8 <prvAddNewTaskToReadyList+0xbc>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b460:	429a      	cmp	r2, r3
 800b462:	d802      	bhi.n	800b46a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b464:	4a1c      	ldr	r2, [pc, #112]	@ (800b4d8 <prvAddNewTaskToReadyList+0xbc>)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b46a:	4b1d      	ldr	r3, [pc, #116]	@ (800b4e0 <prvAddNewTaskToReadyList+0xc4>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	3301      	adds	r3, #1
 800b470:	4a1b      	ldr	r2, [pc, #108]	@ (800b4e0 <prvAddNewTaskToReadyList+0xc4>)
 800b472:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b478:	2201      	movs	r2, #1
 800b47a:	409a      	lsls	r2, r3
 800b47c:	4b19      	ldr	r3, [pc, #100]	@ (800b4e4 <prvAddNewTaskToReadyList+0xc8>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4313      	orrs	r3, r2
 800b482:	4a18      	ldr	r2, [pc, #96]	@ (800b4e4 <prvAddNewTaskToReadyList+0xc8>)
 800b484:	6013      	str	r3, [r2, #0]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b48a:	4613      	mov	r3, r2
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	4413      	add	r3, r2
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	4a15      	ldr	r2, [pc, #84]	@ (800b4e8 <prvAddNewTaskToReadyList+0xcc>)
 800b494:	441a      	add	r2, r3
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	3304      	adds	r3, #4
 800b49a:	4619      	mov	r1, r3
 800b49c:	4610      	mov	r0, r2
 800b49e:	f7ff f82b 	bl	800a4f8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b4a2:	f000 ffbb 	bl	800c41c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b4a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b4dc <prvAddNewTaskToReadyList+0xc0>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d00e      	beq.n	800b4cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b4ae:	4b0a      	ldr	r3, [pc, #40]	@ (800b4d8 <prvAddNewTaskToReadyList+0xbc>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d207      	bcs.n	800b4cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b4bc:	4b0b      	ldr	r3, [pc, #44]	@ (800b4ec <prvAddNewTaskToReadyList+0xd0>)
 800b4be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4c2:	601a      	str	r2, [r3, #0]
 800b4c4:	f3bf 8f4f 	dsb	sy
 800b4c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4cc:	bf00      	nop
 800b4ce:	3708      	adds	r7, #8
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	20002980 	.word	0x20002980
 800b4d8:	20002880 	.word	0x20002880
 800b4dc:	2000298c 	.word	0x2000298c
 800b4e0:	2000299c 	.word	0x2000299c
 800b4e4:	20002988 	.word	0x20002988
 800b4e8:	20002884 	.word	0x20002884
 800b4ec:	e000ed04 	.word	0xe000ed04

0800b4f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b08a      	sub	sp, #40	@ 0x28
 800b4f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b4fe:	463a      	mov	r2, r7
 800b500:	1d39      	adds	r1, r7, #4
 800b502:	f107 0308 	add.w	r3, r7, #8
 800b506:	4618      	mov	r0, r3
 800b508:	f7f5 fd74 	bl	8000ff4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b50c:	6839      	ldr	r1, [r7, #0]
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	68ba      	ldr	r2, [r7, #8]
 800b512:	9202      	str	r2, [sp, #8]
 800b514:	9301      	str	r3, [sp, #4]
 800b516:	2300      	movs	r3, #0
 800b518:	9300      	str	r3, [sp, #0]
 800b51a:	2300      	movs	r3, #0
 800b51c:	460a      	mov	r2, r1
 800b51e:	491f      	ldr	r1, [pc, #124]	@ (800b59c <vTaskStartScheduler+0xac>)
 800b520:	481f      	ldr	r0, [pc, #124]	@ (800b5a0 <vTaskStartScheduler+0xb0>)
 800b522:	f7ff fe4d 	bl	800b1c0 <xTaskCreateStatic>
 800b526:	4603      	mov	r3, r0
 800b528:	4a1e      	ldr	r2, [pc, #120]	@ (800b5a4 <vTaskStartScheduler+0xb4>)
 800b52a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b52c:	4b1d      	ldr	r3, [pc, #116]	@ (800b5a4 <vTaskStartScheduler+0xb4>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d002      	beq.n	800b53a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b534:	2301      	movs	r3, #1
 800b536:	617b      	str	r3, [r7, #20]
 800b538:	e001      	b.n	800b53e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b53a:	2300      	movs	r3, #0
 800b53c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	2b01      	cmp	r3, #1
 800b542:	d116      	bne.n	800b572 <vTaskStartScheduler+0x82>
	__asm volatile
 800b544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b548:	f383 8811 	msr	BASEPRI, r3
 800b54c:	f3bf 8f6f 	isb	sy
 800b550:	f3bf 8f4f 	dsb	sy
 800b554:	613b      	str	r3, [r7, #16]
}
 800b556:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b558:	4b13      	ldr	r3, [pc, #76]	@ (800b5a8 <vTaskStartScheduler+0xb8>)
 800b55a:	f04f 32ff 	mov.w	r2, #4294967295
 800b55e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b560:	4b12      	ldr	r3, [pc, #72]	@ (800b5ac <vTaskStartScheduler+0xbc>)
 800b562:	2201      	movs	r2, #1
 800b564:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b566:	4b12      	ldr	r3, [pc, #72]	@ (800b5b0 <vTaskStartScheduler+0xc0>)
 800b568:	2200      	movs	r2, #0
 800b56a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b56c:	f000 fe80 	bl	800c270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b570:	e00f      	b.n	800b592 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b578:	d10b      	bne.n	800b592 <vTaskStartScheduler+0xa2>
	__asm volatile
 800b57a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b57e:	f383 8811 	msr	BASEPRI, r3
 800b582:	f3bf 8f6f 	isb	sy
 800b586:	f3bf 8f4f 	dsb	sy
 800b58a:	60fb      	str	r3, [r7, #12]
}
 800b58c:	bf00      	nop
 800b58e:	bf00      	nop
 800b590:	e7fd      	b.n	800b58e <vTaskStartScheduler+0x9e>
}
 800b592:	bf00      	nop
 800b594:	3718      	adds	r7, #24
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	080115a4 	.word	0x080115a4
 800b5a0:	0800bb59 	.word	0x0800bb59
 800b5a4:	200029a4 	.word	0x200029a4
 800b5a8:	200029a0 	.word	0x200029a0
 800b5ac:	2000298c 	.word	0x2000298c
 800b5b0:	20002984 	.word	0x20002984

0800b5b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b5b8:	4b04      	ldr	r3, [pc, #16]	@ (800b5cc <vTaskSuspendAll+0x18>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	4a03      	ldr	r2, [pc, #12]	@ (800b5cc <vTaskSuspendAll+0x18>)
 800b5c0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b5c2:	bf00      	nop
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr
 800b5cc:	200029a8 	.word	0x200029a8

0800b5d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b5de:	4b42      	ldr	r3, [pc, #264]	@ (800b6e8 <xTaskResumeAll+0x118>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d10b      	bne.n	800b5fe <xTaskResumeAll+0x2e>
	__asm volatile
 800b5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ea:	f383 8811 	msr	BASEPRI, r3
 800b5ee:	f3bf 8f6f 	isb	sy
 800b5f2:	f3bf 8f4f 	dsb	sy
 800b5f6:	603b      	str	r3, [r7, #0]
}
 800b5f8:	bf00      	nop
 800b5fa:	bf00      	nop
 800b5fc:	e7fd      	b.n	800b5fa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b5fe:	f000 fedb 	bl	800c3b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b602:	4b39      	ldr	r3, [pc, #228]	@ (800b6e8 <xTaskResumeAll+0x118>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	3b01      	subs	r3, #1
 800b608:	4a37      	ldr	r2, [pc, #220]	@ (800b6e8 <xTaskResumeAll+0x118>)
 800b60a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b60c:	4b36      	ldr	r3, [pc, #216]	@ (800b6e8 <xTaskResumeAll+0x118>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d161      	bne.n	800b6d8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b614:	4b35      	ldr	r3, [pc, #212]	@ (800b6ec <xTaskResumeAll+0x11c>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d05d      	beq.n	800b6d8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b61c:	e02e      	b.n	800b67c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b61e:	4b34      	ldr	r3, [pc, #208]	@ (800b6f0 <xTaskResumeAll+0x120>)
 800b620:	68db      	ldr	r3, [r3, #12]
 800b622:	68db      	ldr	r3, [r3, #12]
 800b624:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	3318      	adds	r3, #24
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7fe ffc1 	bl	800a5b2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	3304      	adds	r3, #4
 800b634:	4618      	mov	r0, r3
 800b636:	f7fe ffbc 	bl	800a5b2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b63e:	2201      	movs	r2, #1
 800b640:	409a      	lsls	r2, r3
 800b642:	4b2c      	ldr	r3, [pc, #176]	@ (800b6f4 <xTaskResumeAll+0x124>)
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4313      	orrs	r3, r2
 800b648:	4a2a      	ldr	r2, [pc, #168]	@ (800b6f4 <xTaskResumeAll+0x124>)
 800b64a:	6013      	str	r3, [r2, #0]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b650:	4613      	mov	r3, r2
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	4413      	add	r3, r2
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	4a27      	ldr	r2, [pc, #156]	@ (800b6f8 <xTaskResumeAll+0x128>)
 800b65a:	441a      	add	r2, r3
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	3304      	adds	r3, #4
 800b660:	4619      	mov	r1, r3
 800b662:	4610      	mov	r0, r2
 800b664:	f7fe ff48 	bl	800a4f8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b66c:	4b23      	ldr	r3, [pc, #140]	@ (800b6fc <xTaskResumeAll+0x12c>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b672:	429a      	cmp	r2, r3
 800b674:	d302      	bcc.n	800b67c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b676:	4b22      	ldr	r3, [pc, #136]	@ (800b700 <xTaskResumeAll+0x130>)
 800b678:	2201      	movs	r2, #1
 800b67a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b67c:	4b1c      	ldr	r3, [pc, #112]	@ (800b6f0 <xTaskResumeAll+0x120>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d1cc      	bne.n	800b61e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d001      	beq.n	800b68e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b68a:	f000 fb1b 	bl	800bcc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b68e:	4b1d      	ldr	r3, [pc, #116]	@ (800b704 <xTaskResumeAll+0x134>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d010      	beq.n	800b6bc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b69a:	f000 f837 	bl	800b70c <xTaskIncrementTick>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d002      	beq.n	800b6aa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b6a4:	4b16      	ldr	r3, [pc, #88]	@ (800b700 <xTaskResumeAll+0x130>)
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d1f1      	bne.n	800b69a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b6b6:	4b13      	ldr	r3, [pc, #76]	@ (800b704 <xTaskResumeAll+0x134>)
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b6bc:	4b10      	ldr	r3, [pc, #64]	@ (800b700 <xTaskResumeAll+0x130>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d009      	beq.n	800b6d8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b6c8:	4b0f      	ldr	r3, [pc, #60]	@ (800b708 <xTaskResumeAll+0x138>)
 800b6ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6ce:	601a      	str	r2, [r3, #0]
 800b6d0:	f3bf 8f4f 	dsb	sy
 800b6d4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6d8:	f000 fea0 	bl	800c41c <vPortExitCritical>

	return xAlreadyYielded;
 800b6dc:	68bb      	ldr	r3, [r7, #8]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	200029a8 	.word	0x200029a8
 800b6ec:	20002980 	.word	0x20002980
 800b6f0:	20002940 	.word	0x20002940
 800b6f4:	20002988 	.word	0x20002988
 800b6f8:	20002884 	.word	0x20002884
 800b6fc:	20002880 	.word	0x20002880
 800b700:	20002994 	.word	0x20002994
 800b704:	20002990 	.word	0x20002990
 800b708:	e000ed04 	.word	0xe000ed04

0800b70c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b086      	sub	sp, #24
 800b710:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b712:	2300      	movs	r3, #0
 800b714:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b716:	4b4f      	ldr	r3, [pc, #316]	@ (800b854 <xTaskIncrementTick+0x148>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	f040 808f 	bne.w	800b83e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b720:	4b4d      	ldr	r3, [pc, #308]	@ (800b858 <xTaskIncrementTick+0x14c>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	3301      	adds	r3, #1
 800b726:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b728:	4a4b      	ldr	r2, [pc, #300]	@ (800b858 <xTaskIncrementTick+0x14c>)
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d121      	bne.n	800b778 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b734:	4b49      	ldr	r3, [pc, #292]	@ (800b85c <xTaskIncrementTick+0x150>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00b      	beq.n	800b756 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b742:	f383 8811 	msr	BASEPRI, r3
 800b746:	f3bf 8f6f 	isb	sy
 800b74a:	f3bf 8f4f 	dsb	sy
 800b74e:	603b      	str	r3, [r7, #0]
}
 800b750:	bf00      	nop
 800b752:	bf00      	nop
 800b754:	e7fd      	b.n	800b752 <xTaskIncrementTick+0x46>
 800b756:	4b41      	ldr	r3, [pc, #260]	@ (800b85c <xTaskIncrementTick+0x150>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	60fb      	str	r3, [r7, #12]
 800b75c:	4b40      	ldr	r3, [pc, #256]	@ (800b860 <xTaskIncrementTick+0x154>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	4a3e      	ldr	r2, [pc, #248]	@ (800b85c <xTaskIncrementTick+0x150>)
 800b762:	6013      	str	r3, [r2, #0]
 800b764:	4a3e      	ldr	r2, [pc, #248]	@ (800b860 <xTaskIncrementTick+0x154>)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6013      	str	r3, [r2, #0]
 800b76a:	4b3e      	ldr	r3, [pc, #248]	@ (800b864 <xTaskIncrementTick+0x158>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	3301      	adds	r3, #1
 800b770:	4a3c      	ldr	r2, [pc, #240]	@ (800b864 <xTaskIncrementTick+0x158>)
 800b772:	6013      	str	r3, [r2, #0]
 800b774:	f000 faa6 	bl	800bcc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b778:	4b3b      	ldr	r3, [pc, #236]	@ (800b868 <xTaskIncrementTick+0x15c>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	693a      	ldr	r2, [r7, #16]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d348      	bcc.n	800b814 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b782:	4b36      	ldr	r3, [pc, #216]	@ (800b85c <xTaskIncrementTick+0x150>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d104      	bne.n	800b796 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b78c:	4b36      	ldr	r3, [pc, #216]	@ (800b868 <xTaskIncrementTick+0x15c>)
 800b78e:	f04f 32ff 	mov.w	r2, #4294967295
 800b792:	601a      	str	r2, [r3, #0]
					break;
 800b794:	e03e      	b.n	800b814 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b796:	4b31      	ldr	r3, [pc, #196]	@ (800b85c <xTaskIncrementTick+0x150>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	68db      	ldr	r3, [r3, #12]
 800b79e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	685b      	ldr	r3, [r3, #4]
 800b7a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b7a6:	693a      	ldr	r2, [r7, #16]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	429a      	cmp	r2, r3
 800b7ac:	d203      	bcs.n	800b7b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b7ae:	4a2e      	ldr	r2, [pc, #184]	@ (800b868 <xTaskIncrementTick+0x15c>)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b7b4:	e02e      	b.n	800b814 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	3304      	adds	r3, #4
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	f7fe fef9 	bl	800a5b2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d004      	beq.n	800b7d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	3318      	adds	r3, #24
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7fe fef0 	bl	800a5b2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	409a      	lsls	r2, r3
 800b7da:	4b24      	ldr	r3, [pc, #144]	@ (800b86c <xTaskIncrementTick+0x160>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	4a22      	ldr	r2, [pc, #136]	@ (800b86c <xTaskIncrementTick+0x160>)
 800b7e2:	6013      	str	r3, [r2, #0]
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	4413      	add	r3, r2
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	4a1f      	ldr	r2, [pc, #124]	@ (800b870 <xTaskIncrementTick+0x164>)
 800b7f2:	441a      	add	r2, r3
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	3304      	adds	r3, #4
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	4610      	mov	r0, r2
 800b7fc:	f7fe fe7c 	bl	800a4f8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b804:	4b1b      	ldr	r3, [pc, #108]	@ (800b874 <xTaskIncrementTick+0x168>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d3b9      	bcc.n	800b782 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b80e:	2301      	movs	r3, #1
 800b810:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b812:	e7b6      	b.n	800b782 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b814:	4b17      	ldr	r3, [pc, #92]	@ (800b874 <xTaskIncrementTick+0x168>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b81a:	4915      	ldr	r1, [pc, #84]	@ (800b870 <xTaskIncrementTick+0x164>)
 800b81c:	4613      	mov	r3, r2
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	4413      	add	r3, r2
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	440b      	add	r3, r1
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2b01      	cmp	r3, #1
 800b82a:	d901      	bls.n	800b830 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b82c:	2301      	movs	r3, #1
 800b82e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b830:	4b11      	ldr	r3, [pc, #68]	@ (800b878 <xTaskIncrementTick+0x16c>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d007      	beq.n	800b848 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b838:	2301      	movs	r3, #1
 800b83a:	617b      	str	r3, [r7, #20]
 800b83c:	e004      	b.n	800b848 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b83e:	4b0f      	ldr	r3, [pc, #60]	@ (800b87c <xTaskIncrementTick+0x170>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	3301      	adds	r3, #1
 800b844:	4a0d      	ldr	r2, [pc, #52]	@ (800b87c <xTaskIncrementTick+0x170>)
 800b846:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b848:	697b      	ldr	r3, [r7, #20]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3718      	adds	r7, #24
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	200029a8 	.word	0x200029a8
 800b858:	20002984 	.word	0x20002984
 800b85c:	20002938 	.word	0x20002938
 800b860:	2000293c 	.word	0x2000293c
 800b864:	20002998 	.word	0x20002998
 800b868:	200029a0 	.word	0x200029a0
 800b86c:	20002988 	.word	0x20002988
 800b870:	20002884 	.word	0x20002884
 800b874:	20002880 	.word	0x20002880
 800b878:	20002994 	.word	0x20002994
 800b87c:	20002990 	.word	0x20002990

0800b880 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b880:	b480      	push	{r7}
 800b882:	b087      	sub	sp, #28
 800b884:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b886:	4b27      	ldr	r3, [pc, #156]	@ (800b924 <vTaskSwitchContext+0xa4>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d003      	beq.n	800b896 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b88e:	4b26      	ldr	r3, [pc, #152]	@ (800b928 <vTaskSwitchContext+0xa8>)
 800b890:	2201      	movs	r2, #1
 800b892:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b894:	e040      	b.n	800b918 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b896:	4b24      	ldr	r3, [pc, #144]	@ (800b928 <vTaskSwitchContext+0xa8>)
 800b898:	2200      	movs	r2, #0
 800b89a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b89c:	4b23      	ldr	r3, [pc, #140]	@ (800b92c <vTaskSwitchContext+0xac>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	fab3 f383 	clz	r3, r3
 800b8a8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b8aa:	7afb      	ldrb	r3, [r7, #11]
 800b8ac:	f1c3 031f 	rsb	r3, r3, #31
 800b8b0:	617b      	str	r3, [r7, #20]
 800b8b2:	491f      	ldr	r1, [pc, #124]	@ (800b930 <vTaskSwitchContext+0xb0>)
 800b8b4:	697a      	ldr	r2, [r7, #20]
 800b8b6:	4613      	mov	r3, r2
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	4413      	add	r3, r2
 800b8bc:	009b      	lsls	r3, r3, #2
 800b8be:	440b      	add	r3, r1
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d10b      	bne.n	800b8de <vTaskSwitchContext+0x5e>
	__asm volatile
 800b8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ca:	f383 8811 	msr	BASEPRI, r3
 800b8ce:	f3bf 8f6f 	isb	sy
 800b8d2:	f3bf 8f4f 	dsb	sy
 800b8d6:	607b      	str	r3, [r7, #4]
}
 800b8d8:	bf00      	nop
 800b8da:	bf00      	nop
 800b8dc:	e7fd      	b.n	800b8da <vTaskSwitchContext+0x5a>
 800b8de:	697a      	ldr	r2, [r7, #20]
 800b8e0:	4613      	mov	r3, r2
 800b8e2:	009b      	lsls	r3, r3, #2
 800b8e4:	4413      	add	r3, r2
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	4a11      	ldr	r2, [pc, #68]	@ (800b930 <vTaskSwitchContext+0xb0>)
 800b8ea:	4413      	add	r3, r2
 800b8ec:	613b      	str	r3, [r7, #16]
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	685a      	ldr	r2, [r3, #4]
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	605a      	str	r2, [r3, #4]
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	685a      	ldr	r2, [r3, #4]
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	3308      	adds	r3, #8
 800b900:	429a      	cmp	r2, r3
 800b902:	d104      	bne.n	800b90e <vTaskSwitchContext+0x8e>
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	685a      	ldr	r2, [r3, #4]
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	605a      	str	r2, [r3, #4]
 800b90e:	693b      	ldr	r3, [r7, #16]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	68db      	ldr	r3, [r3, #12]
 800b914:	4a07      	ldr	r2, [pc, #28]	@ (800b934 <vTaskSwitchContext+0xb4>)
 800b916:	6013      	str	r3, [r2, #0]
}
 800b918:	bf00      	nop
 800b91a:	371c      	adds	r7, #28
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr
 800b924:	200029a8 	.word	0x200029a8
 800b928:	20002994 	.word	0x20002994
 800b92c:	20002988 	.word	0x20002988
 800b930:	20002884 	.word	0x20002884
 800b934:	20002880 	.word	0x20002880

0800b938 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d10b      	bne.n	800b960 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b94c:	f383 8811 	msr	BASEPRI, r3
 800b950:	f3bf 8f6f 	isb	sy
 800b954:	f3bf 8f4f 	dsb	sy
 800b958:	60fb      	str	r3, [r7, #12]
}
 800b95a:	bf00      	nop
 800b95c:	bf00      	nop
 800b95e:	e7fd      	b.n	800b95c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b960:	4b07      	ldr	r3, [pc, #28]	@ (800b980 <vTaskPlaceOnEventList+0x48>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	3318      	adds	r3, #24
 800b966:	4619      	mov	r1, r3
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f7fe fde9 	bl	800a540 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b96e:	2101      	movs	r1, #1
 800b970:	6838      	ldr	r0, [r7, #0]
 800b972:	f000 fb87 	bl	800c084 <prvAddCurrentTaskToDelayedList>
}
 800b976:	bf00      	nop
 800b978:	3710      	adds	r7, #16
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bd80      	pop	{r7, pc}
 800b97e:	bf00      	nop
 800b980:	20002880 	.word	0x20002880

0800b984 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	68db      	ldr	r3, [r3, #12]
 800b992:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d10b      	bne.n	800b9b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b99a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b99e:	f383 8811 	msr	BASEPRI, r3
 800b9a2:	f3bf 8f6f 	isb	sy
 800b9a6:	f3bf 8f4f 	dsb	sy
 800b9aa:	60fb      	str	r3, [r7, #12]
}
 800b9ac:	bf00      	nop
 800b9ae:	bf00      	nop
 800b9b0:	e7fd      	b.n	800b9ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	3318      	adds	r3, #24
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7fe fdfb 	bl	800a5b2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9bc:	4b1d      	ldr	r3, [pc, #116]	@ (800ba34 <xTaskRemoveFromEventList+0xb0>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d11c      	bne.n	800b9fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	3304      	adds	r3, #4
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7fe fdf2 	bl	800a5b2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	409a      	lsls	r2, r3
 800b9d6:	4b18      	ldr	r3, [pc, #96]	@ (800ba38 <xTaskRemoveFromEventList+0xb4>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4313      	orrs	r3, r2
 800b9dc:	4a16      	ldr	r2, [pc, #88]	@ (800ba38 <xTaskRemoveFromEventList+0xb4>)
 800b9de:	6013      	str	r3, [r2, #0]
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9e4:	4613      	mov	r3, r2
 800b9e6:	009b      	lsls	r3, r3, #2
 800b9e8:	4413      	add	r3, r2
 800b9ea:	009b      	lsls	r3, r3, #2
 800b9ec:	4a13      	ldr	r2, [pc, #76]	@ (800ba3c <xTaskRemoveFromEventList+0xb8>)
 800b9ee:	441a      	add	r2, r3
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	3304      	adds	r3, #4
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	4610      	mov	r0, r2
 800b9f8:	f7fe fd7e 	bl	800a4f8 <vListInsertEnd>
 800b9fc:	e005      	b.n	800ba0a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	3318      	adds	r3, #24
 800ba02:	4619      	mov	r1, r3
 800ba04:	480e      	ldr	r0, [pc, #56]	@ (800ba40 <xTaskRemoveFromEventList+0xbc>)
 800ba06:	f7fe fd77 	bl	800a4f8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba0a:	693b      	ldr	r3, [r7, #16]
 800ba0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ba44 <xTaskRemoveFromEventList+0xc0>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d905      	bls.n	800ba24 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ba1c:	4b0a      	ldr	r3, [pc, #40]	@ (800ba48 <xTaskRemoveFromEventList+0xc4>)
 800ba1e:	2201      	movs	r2, #1
 800ba20:	601a      	str	r2, [r3, #0]
 800ba22:	e001      	b.n	800ba28 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800ba24:	2300      	movs	r3, #0
 800ba26:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ba28:	697b      	ldr	r3, [r7, #20]
}
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	3718      	adds	r7, #24
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	200029a8 	.word	0x200029a8
 800ba38:	20002988 	.word	0x20002988
 800ba3c:	20002884 	.word	0x20002884
 800ba40:	20002940 	.word	0x20002940
 800ba44:	20002880 	.word	0x20002880
 800ba48:	20002994 	.word	0x20002994

0800ba4c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ba4c:	b480      	push	{r7}
 800ba4e:	b083      	sub	sp, #12
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ba54:	4b06      	ldr	r3, [pc, #24]	@ (800ba70 <vTaskInternalSetTimeOutState+0x24>)
 800ba56:	681a      	ldr	r2, [r3, #0]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ba5c:	4b05      	ldr	r3, [pc, #20]	@ (800ba74 <vTaskInternalSetTimeOutState+0x28>)
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	605a      	str	r2, [r3, #4]
}
 800ba64:	bf00      	nop
 800ba66:	370c      	adds	r7, #12
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr
 800ba70:	20002998 	.word	0x20002998
 800ba74:	20002984 	.word	0x20002984

0800ba78 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b088      	sub	sp, #32
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d10b      	bne.n	800baa0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ba88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba8c:	f383 8811 	msr	BASEPRI, r3
 800ba90:	f3bf 8f6f 	isb	sy
 800ba94:	f3bf 8f4f 	dsb	sy
 800ba98:	613b      	str	r3, [r7, #16]
}
 800ba9a:	bf00      	nop
 800ba9c:	bf00      	nop
 800ba9e:	e7fd      	b.n	800ba9c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d10b      	bne.n	800babe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800baa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baaa:	f383 8811 	msr	BASEPRI, r3
 800baae:	f3bf 8f6f 	isb	sy
 800bab2:	f3bf 8f4f 	dsb	sy
 800bab6:	60fb      	str	r3, [r7, #12]
}
 800bab8:	bf00      	nop
 800baba:	bf00      	nop
 800babc:	e7fd      	b.n	800baba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800babe:	f000 fc7b 	bl	800c3b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bac2:	4b1d      	ldr	r3, [pc, #116]	@ (800bb38 <xTaskCheckForTimeOut+0xc0>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	685b      	ldr	r3, [r3, #4]
 800bacc:	69ba      	ldr	r2, [r7, #24]
 800bace:	1ad3      	subs	r3, r2, r3
 800bad0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bada:	d102      	bne.n	800bae2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800badc:	2300      	movs	r3, #0
 800bade:	61fb      	str	r3, [r7, #28]
 800bae0:	e023      	b.n	800bb2a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	4b15      	ldr	r3, [pc, #84]	@ (800bb3c <xTaskCheckForTimeOut+0xc4>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	429a      	cmp	r2, r3
 800baec:	d007      	beq.n	800bafe <xTaskCheckForTimeOut+0x86>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	69ba      	ldr	r2, [r7, #24]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d302      	bcc.n	800bafe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800baf8:	2301      	movs	r3, #1
 800bafa:	61fb      	str	r3, [r7, #28]
 800bafc:	e015      	b.n	800bb2a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	697a      	ldr	r2, [r7, #20]
 800bb04:	429a      	cmp	r2, r3
 800bb06:	d20b      	bcs.n	800bb20 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	1ad2      	subs	r2, r2, r3
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f7ff ff99 	bl	800ba4c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	61fb      	str	r3, [r7, #28]
 800bb1e:	e004      	b.n	800bb2a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	2200      	movs	r2, #0
 800bb24:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bb26:	2301      	movs	r3, #1
 800bb28:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb2a:	f000 fc77 	bl	800c41c <vPortExitCritical>

	return xReturn;
 800bb2e:	69fb      	ldr	r3, [r7, #28]
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3720      	adds	r7, #32
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}
 800bb38:	20002984 	.word	0x20002984
 800bb3c:	20002998 	.word	0x20002998

0800bb40 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bb40:	b480      	push	{r7}
 800bb42:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bb44:	4b03      	ldr	r3, [pc, #12]	@ (800bb54 <vTaskMissedYield+0x14>)
 800bb46:	2201      	movs	r2, #1
 800bb48:	601a      	str	r2, [r3, #0]
}
 800bb4a:	bf00      	nop
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr
 800bb54:	20002994 	.word	0x20002994

0800bb58 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bb60:	f000 f852 	bl	800bc08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bb64:	4b06      	ldr	r3, [pc, #24]	@ (800bb80 <prvIdleTask+0x28>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	d9f9      	bls.n	800bb60 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bb6c:	4b05      	ldr	r3, [pc, #20]	@ (800bb84 <prvIdleTask+0x2c>)
 800bb6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb72:	601a      	str	r2, [r3, #0]
 800bb74:	f3bf 8f4f 	dsb	sy
 800bb78:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bb7c:	e7f0      	b.n	800bb60 <prvIdleTask+0x8>
 800bb7e:	bf00      	nop
 800bb80:	20002884 	.word	0x20002884
 800bb84:	e000ed04 	.word	0xe000ed04

0800bb88 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb8e:	2300      	movs	r3, #0
 800bb90:	607b      	str	r3, [r7, #4]
 800bb92:	e00c      	b.n	800bbae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	4613      	mov	r3, r2
 800bb98:	009b      	lsls	r3, r3, #2
 800bb9a:	4413      	add	r3, r2
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	4a12      	ldr	r2, [pc, #72]	@ (800bbe8 <prvInitialiseTaskLists+0x60>)
 800bba0:	4413      	add	r3, r2
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7fe fc7b 	bl	800a49e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	3301      	adds	r3, #1
 800bbac:	607b      	str	r3, [r7, #4]
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2b06      	cmp	r3, #6
 800bbb2:	d9ef      	bls.n	800bb94 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bbb4:	480d      	ldr	r0, [pc, #52]	@ (800bbec <prvInitialiseTaskLists+0x64>)
 800bbb6:	f7fe fc72 	bl	800a49e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bbba:	480d      	ldr	r0, [pc, #52]	@ (800bbf0 <prvInitialiseTaskLists+0x68>)
 800bbbc:	f7fe fc6f 	bl	800a49e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bbc0:	480c      	ldr	r0, [pc, #48]	@ (800bbf4 <prvInitialiseTaskLists+0x6c>)
 800bbc2:	f7fe fc6c 	bl	800a49e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bbc6:	480c      	ldr	r0, [pc, #48]	@ (800bbf8 <prvInitialiseTaskLists+0x70>)
 800bbc8:	f7fe fc69 	bl	800a49e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bbcc:	480b      	ldr	r0, [pc, #44]	@ (800bbfc <prvInitialiseTaskLists+0x74>)
 800bbce:	f7fe fc66 	bl	800a49e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bbd2:	4b0b      	ldr	r3, [pc, #44]	@ (800bc00 <prvInitialiseTaskLists+0x78>)
 800bbd4:	4a05      	ldr	r2, [pc, #20]	@ (800bbec <prvInitialiseTaskLists+0x64>)
 800bbd6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bbd8:	4b0a      	ldr	r3, [pc, #40]	@ (800bc04 <prvInitialiseTaskLists+0x7c>)
 800bbda:	4a05      	ldr	r2, [pc, #20]	@ (800bbf0 <prvInitialiseTaskLists+0x68>)
 800bbdc:	601a      	str	r2, [r3, #0]
}
 800bbde:	bf00      	nop
 800bbe0:	3708      	adds	r7, #8
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	20002884 	.word	0x20002884
 800bbec:	20002910 	.word	0x20002910
 800bbf0:	20002924 	.word	0x20002924
 800bbf4:	20002940 	.word	0x20002940
 800bbf8:	20002954 	.word	0x20002954
 800bbfc:	2000296c 	.word	0x2000296c
 800bc00:	20002938 	.word	0x20002938
 800bc04:	2000293c 	.word	0x2000293c

0800bc08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b082      	sub	sp, #8
 800bc0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc0e:	e019      	b.n	800bc44 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bc10:	f000 fbd2 	bl	800c3b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc14:	4b10      	ldr	r3, [pc, #64]	@ (800bc58 <prvCheckTasksWaitingTermination+0x50>)
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	3304      	adds	r3, #4
 800bc20:	4618      	mov	r0, r3
 800bc22:	f7fe fcc6 	bl	800a5b2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc26:	4b0d      	ldr	r3, [pc, #52]	@ (800bc5c <prvCheckTasksWaitingTermination+0x54>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	3b01      	subs	r3, #1
 800bc2c:	4a0b      	ldr	r2, [pc, #44]	@ (800bc5c <prvCheckTasksWaitingTermination+0x54>)
 800bc2e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc30:	4b0b      	ldr	r3, [pc, #44]	@ (800bc60 <prvCheckTasksWaitingTermination+0x58>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	3b01      	subs	r3, #1
 800bc36:	4a0a      	ldr	r2, [pc, #40]	@ (800bc60 <prvCheckTasksWaitingTermination+0x58>)
 800bc38:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bc3a:	f000 fbef 	bl	800c41c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bc3e:	6878      	ldr	r0, [r7, #4]
 800bc40:	f000 f810 	bl	800bc64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc44:	4b06      	ldr	r3, [pc, #24]	@ (800bc60 <prvCheckTasksWaitingTermination+0x58>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d1e1      	bne.n	800bc10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bc4c:	bf00      	nop
 800bc4e:	bf00      	nop
 800bc50:	3708      	adds	r7, #8
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	20002954 	.word	0x20002954
 800bc5c:	20002980 	.word	0x20002980
 800bc60:	20002968 	.word	0x20002968

0800bc64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b084      	sub	sp, #16
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d108      	bne.n	800bc88 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f000 fd8c 	bl	800c798 <vPortFree>
				vPortFree( pxTCB );
 800bc80:	6878      	ldr	r0, [r7, #4]
 800bc82:	f000 fd89 	bl	800c798 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc86:	e019      	b.n	800bcbc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	d103      	bne.n	800bc9a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 fd80 	bl	800c798 <vPortFree>
	}
 800bc98:	e010      	b.n	800bcbc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bca0:	2b02      	cmp	r3, #2
 800bca2:	d00b      	beq.n	800bcbc <prvDeleteTCB+0x58>
	__asm volatile
 800bca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bca8:	f383 8811 	msr	BASEPRI, r3
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	f3bf 8f4f 	dsb	sy
 800bcb4:	60fb      	str	r3, [r7, #12]
}
 800bcb6:	bf00      	nop
 800bcb8:	bf00      	nop
 800bcba:	e7fd      	b.n	800bcb8 <prvDeleteTCB+0x54>
	}
 800bcbc:	bf00      	nop
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bcca:	4b0c      	ldr	r3, [pc, #48]	@ (800bcfc <prvResetNextTaskUnblockTime+0x38>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d104      	bne.n	800bcde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bcd4:	4b0a      	ldr	r3, [pc, #40]	@ (800bd00 <prvResetNextTaskUnblockTime+0x3c>)
 800bcd6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bcdc:	e008      	b.n	800bcf0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bcde:	4b07      	ldr	r3, [pc, #28]	@ (800bcfc <prvResetNextTaskUnblockTime+0x38>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	68db      	ldr	r3, [r3, #12]
 800bce4:	68db      	ldr	r3, [r3, #12]
 800bce6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	4a04      	ldr	r2, [pc, #16]	@ (800bd00 <prvResetNextTaskUnblockTime+0x3c>)
 800bcee:	6013      	str	r3, [r2, #0]
}
 800bcf0:	bf00      	nop
 800bcf2:	370c      	adds	r7, #12
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr
 800bcfc:	20002938 	.word	0x20002938
 800bd00:	200029a0 	.word	0x200029a0

0800bd04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd0a:	4b0b      	ldr	r3, [pc, #44]	@ (800bd38 <xTaskGetSchedulerState+0x34>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d102      	bne.n	800bd18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bd12:	2301      	movs	r3, #1
 800bd14:	607b      	str	r3, [r7, #4]
 800bd16:	e008      	b.n	800bd2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd18:	4b08      	ldr	r3, [pc, #32]	@ (800bd3c <xTaskGetSchedulerState+0x38>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d102      	bne.n	800bd26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bd20:	2302      	movs	r3, #2
 800bd22:	607b      	str	r3, [r7, #4]
 800bd24:	e001      	b.n	800bd2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bd26:	2300      	movs	r3, #0
 800bd28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bd2a:	687b      	ldr	r3, [r7, #4]
	}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	370c      	adds	r7, #12
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr
 800bd38:	2000298c 	.word	0x2000298c
 800bd3c:	200029a8 	.word	0x200029a8

0800bd40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b084      	sub	sp, #16
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d05e      	beq.n	800be14 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd5a:	4b31      	ldr	r3, [pc, #196]	@ (800be20 <xTaskPriorityInherit+0xe0>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d24e      	bcs.n	800be02 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bd64:	68bb      	ldr	r3, [r7, #8]
 800bd66:	699b      	ldr	r3, [r3, #24]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	db06      	blt.n	800bd7a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd6c:	4b2c      	ldr	r3, [pc, #176]	@ (800be20 <xTaskPriorityInherit+0xe0>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd72:	f1c3 0207 	rsb	r2, r3, #7
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bd7a:	68bb      	ldr	r3, [r7, #8]
 800bd7c:	6959      	ldr	r1, [r3, #20]
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd82:	4613      	mov	r3, r2
 800bd84:	009b      	lsls	r3, r3, #2
 800bd86:	4413      	add	r3, r2
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	4a26      	ldr	r2, [pc, #152]	@ (800be24 <xTaskPriorityInherit+0xe4>)
 800bd8c:	4413      	add	r3, r2
 800bd8e:	4299      	cmp	r1, r3
 800bd90:	d12f      	bne.n	800bdf2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	3304      	adds	r3, #4
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7fe fc0b 	bl	800a5b2 <uxListRemove>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d10a      	bne.n	800bdb8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bda6:	2201      	movs	r2, #1
 800bda8:	fa02 f303 	lsl.w	r3, r2, r3
 800bdac:	43da      	mvns	r2, r3
 800bdae:	4b1e      	ldr	r3, [pc, #120]	@ (800be28 <xTaskPriorityInherit+0xe8>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	4013      	ands	r3, r2
 800bdb4:	4a1c      	ldr	r2, [pc, #112]	@ (800be28 <xTaskPriorityInherit+0xe8>)
 800bdb6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bdb8:	4b19      	ldr	r3, [pc, #100]	@ (800be20 <xTaskPriorityInherit+0xe0>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdc6:	2201      	movs	r2, #1
 800bdc8:	409a      	lsls	r2, r3
 800bdca:	4b17      	ldr	r3, [pc, #92]	@ (800be28 <xTaskPriorityInherit+0xe8>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4313      	orrs	r3, r2
 800bdd0:	4a15      	ldr	r2, [pc, #84]	@ (800be28 <xTaskPriorityInherit+0xe8>)
 800bdd2:	6013      	str	r3, [r2, #0]
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdd8:	4613      	mov	r3, r2
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	4413      	add	r3, r2
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	4a10      	ldr	r2, [pc, #64]	@ (800be24 <xTaskPriorityInherit+0xe4>)
 800bde2:	441a      	add	r2, r3
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	3304      	adds	r3, #4
 800bde8:	4619      	mov	r1, r3
 800bdea:	4610      	mov	r0, r2
 800bdec:	f7fe fb84 	bl	800a4f8 <vListInsertEnd>
 800bdf0:	e004      	b.n	800bdfc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bdf2:	4b0b      	ldr	r3, [pc, #44]	@ (800be20 <xTaskPriorityInherit+0xe0>)
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdf8:	68bb      	ldr	r3, [r7, #8]
 800bdfa:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	60fb      	str	r3, [r7, #12]
 800be00:	e008      	b.n	800be14 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800be02:	68bb      	ldr	r3, [r7, #8]
 800be04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be06:	4b06      	ldr	r3, [pc, #24]	@ (800be20 <xTaskPriorityInherit+0xe0>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d201      	bcs.n	800be14 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800be10:	2301      	movs	r3, #1
 800be12:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be14:	68fb      	ldr	r3, [r7, #12]
	}
 800be16:	4618      	mov	r0, r3
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	20002880 	.word	0x20002880
 800be24:	20002884 	.word	0x20002884
 800be28:	20002988 	.word	0x20002988

0800be2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b086      	sub	sp, #24
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800be38:	2300      	movs	r3, #0
 800be3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d070      	beq.n	800bf24 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800be42:	4b3b      	ldr	r3, [pc, #236]	@ (800bf30 <xTaskPriorityDisinherit+0x104>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	693a      	ldr	r2, [r7, #16]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d00b      	beq.n	800be64 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800be4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be50:	f383 8811 	msr	BASEPRI, r3
 800be54:	f3bf 8f6f 	isb	sy
 800be58:	f3bf 8f4f 	dsb	sy
 800be5c:	60fb      	str	r3, [r7, #12]
}
 800be5e:	bf00      	nop
 800be60:	bf00      	nop
 800be62:	e7fd      	b.n	800be60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d10b      	bne.n	800be84 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800be6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be70:	f383 8811 	msr	BASEPRI, r3
 800be74:	f3bf 8f6f 	isb	sy
 800be78:	f3bf 8f4f 	dsb	sy
 800be7c:	60bb      	str	r3, [r7, #8]
}
 800be7e:	bf00      	nop
 800be80:	bf00      	nop
 800be82:	e7fd      	b.n	800be80 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be88:	1e5a      	subs	r2, r3, #1
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be92:	693b      	ldr	r3, [r7, #16]
 800be94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800be96:	429a      	cmp	r2, r3
 800be98:	d044      	beq.n	800bf24 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d140      	bne.n	800bf24 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bea2:	693b      	ldr	r3, [r7, #16]
 800bea4:	3304      	adds	r3, #4
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7fe fb83 	bl	800a5b2 <uxListRemove>
 800beac:	4603      	mov	r3, r0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d115      	bne.n	800bede <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800beb6:	491f      	ldr	r1, [pc, #124]	@ (800bf34 <xTaskPriorityDisinherit+0x108>)
 800beb8:	4613      	mov	r3, r2
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	4413      	add	r3, r2
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	440b      	add	r3, r1
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d10a      	bne.n	800bede <xTaskPriorityDisinherit+0xb2>
 800bec8:	693b      	ldr	r3, [r7, #16]
 800beca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800becc:	2201      	movs	r2, #1
 800bece:	fa02 f303 	lsl.w	r3, r2, r3
 800bed2:	43da      	mvns	r2, r3
 800bed4:	4b18      	ldr	r3, [pc, #96]	@ (800bf38 <xTaskPriorityDisinherit+0x10c>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	4013      	ands	r3, r2
 800beda:	4a17      	ldr	r2, [pc, #92]	@ (800bf38 <xTaskPriorityDisinherit+0x10c>)
 800bedc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bee6:	693b      	ldr	r3, [r7, #16]
 800bee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beea:	f1c3 0207 	rsb	r2, r3, #7
 800beee:	693b      	ldr	r3, [r7, #16]
 800bef0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bef6:	2201      	movs	r2, #1
 800bef8:	409a      	lsls	r2, r3
 800befa:	4b0f      	ldr	r3, [pc, #60]	@ (800bf38 <xTaskPriorityDisinherit+0x10c>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	4313      	orrs	r3, r2
 800bf00:	4a0d      	ldr	r2, [pc, #52]	@ (800bf38 <xTaskPriorityDisinherit+0x10c>)
 800bf02:	6013      	str	r3, [r2, #0]
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf08:	4613      	mov	r3, r2
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	4413      	add	r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	4a08      	ldr	r2, [pc, #32]	@ (800bf34 <xTaskPriorityDisinherit+0x108>)
 800bf12:	441a      	add	r2, r3
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	3304      	adds	r3, #4
 800bf18:	4619      	mov	r1, r3
 800bf1a:	4610      	mov	r0, r2
 800bf1c:	f7fe faec 	bl	800a4f8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bf20:	2301      	movs	r3, #1
 800bf22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf24:	697b      	ldr	r3, [r7, #20]
	}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3718      	adds	r7, #24
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	20002880 	.word	0x20002880
 800bf34:	20002884 	.word	0x20002884
 800bf38:	20002988 	.word	0x20002988

0800bf3c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b088      	sub	sp, #32
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d079      	beq.n	800c048 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bf54:	69bb      	ldr	r3, [r7, #24]
 800bf56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d10b      	bne.n	800bf74 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800bf5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf60:	f383 8811 	msr	BASEPRI, r3
 800bf64:	f3bf 8f6f 	isb	sy
 800bf68:	f3bf 8f4f 	dsb	sy
 800bf6c:	60fb      	str	r3, [r7, #12]
}
 800bf6e:	bf00      	nop
 800bf70:	bf00      	nop
 800bf72:	e7fd      	b.n	800bf70 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bf74:	69bb      	ldr	r3, [r7, #24]
 800bf76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf78:	683a      	ldr	r2, [r7, #0]
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d902      	bls.n	800bf84 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bf7e:	683b      	ldr	r3, [r7, #0]
 800bf80:	61fb      	str	r3, [r7, #28]
 800bf82:	e002      	b.n	800bf8a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bf84:	69bb      	ldr	r3, [r7, #24]
 800bf86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf88:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bf8a:	69bb      	ldr	r3, [r7, #24]
 800bf8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf8e:	69fa      	ldr	r2, [r7, #28]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d059      	beq.n	800c048 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bf94:	69bb      	ldr	r3, [r7, #24]
 800bf96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bf98:	697a      	ldr	r2, [r7, #20]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	d154      	bne.n	800c048 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bf9e:	4b2c      	ldr	r3, [pc, #176]	@ (800c050 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	69ba      	ldr	r2, [r7, #24]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d10b      	bne.n	800bfc0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800bfa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfac:	f383 8811 	msr	BASEPRI, r3
 800bfb0:	f3bf 8f6f 	isb	sy
 800bfb4:	f3bf 8f4f 	dsb	sy
 800bfb8:	60bb      	str	r3, [r7, #8]
}
 800bfba:	bf00      	nop
 800bfbc:	bf00      	nop
 800bfbe:	e7fd      	b.n	800bfbc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bfc0:	69bb      	ldr	r3, [r7, #24]
 800bfc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfc4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	69fa      	ldr	r2, [r7, #28]
 800bfca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	699b      	ldr	r3, [r3, #24]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	db04      	blt.n	800bfde <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	f1c3 0207 	rsb	r2, r3, #7
 800bfda:	69bb      	ldr	r3, [r7, #24]
 800bfdc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	6959      	ldr	r1, [r3, #20]
 800bfe2:	693a      	ldr	r2, [r7, #16]
 800bfe4:	4613      	mov	r3, r2
 800bfe6:	009b      	lsls	r3, r3, #2
 800bfe8:	4413      	add	r3, r2
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	4a19      	ldr	r2, [pc, #100]	@ (800c054 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bfee:	4413      	add	r3, r2
 800bff0:	4299      	cmp	r1, r3
 800bff2:	d129      	bne.n	800c048 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	3304      	adds	r3, #4
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7fe fada 	bl	800a5b2 <uxListRemove>
 800bffe:	4603      	mov	r3, r0
 800c000:	2b00      	cmp	r3, #0
 800c002:	d10a      	bne.n	800c01a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c008:	2201      	movs	r2, #1
 800c00a:	fa02 f303 	lsl.w	r3, r2, r3
 800c00e:	43da      	mvns	r2, r3
 800c010:	4b11      	ldr	r3, [pc, #68]	@ (800c058 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4013      	ands	r3, r2
 800c016:	4a10      	ldr	r2, [pc, #64]	@ (800c058 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c018:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c01e:	2201      	movs	r2, #1
 800c020:	409a      	lsls	r2, r3
 800c022:	4b0d      	ldr	r3, [pc, #52]	@ (800c058 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4313      	orrs	r3, r2
 800c028:	4a0b      	ldr	r2, [pc, #44]	@ (800c058 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800c02a:	6013      	str	r3, [r2, #0]
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c030:	4613      	mov	r3, r2
 800c032:	009b      	lsls	r3, r3, #2
 800c034:	4413      	add	r3, r2
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	4a06      	ldr	r2, [pc, #24]	@ (800c054 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c03a:	441a      	add	r2, r3
 800c03c:	69bb      	ldr	r3, [r7, #24]
 800c03e:	3304      	adds	r3, #4
 800c040:	4619      	mov	r1, r3
 800c042:	4610      	mov	r0, r2
 800c044:	f7fe fa58 	bl	800a4f8 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c048:	bf00      	nop
 800c04a:	3720      	adds	r7, #32
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bd80      	pop	{r7, pc}
 800c050:	20002880 	.word	0x20002880
 800c054:	20002884 	.word	0x20002884
 800c058:	20002988 	.word	0x20002988

0800c05c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c05c:	b480      	push	{r7}
 800c05e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c060:	4b07      	ldr	r3, [pc, #28]	@ (800c080 <pvTaskIncrementMutexHeldCount+0x24>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d004      	beq.n	800c072 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c068:	4b05      	ldr	r3, [pc, #20]	@ (800c080 <pvTaskIncrementMutexHeldCount+0x24>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c06e:	3201      	adds	r2, #1
 800c070:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800c072:	4b03      	ldr	r3, [pc, #12]	@ (800c080 <pvTaskIncrementMutexHeldCount+0x24>)
 800c074:	681b      	ldr	r3, [r3, #0]
	}
 800c076:	4618      	mov	r0, r3
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr
 800c080:	20002880 	.word	0x20002880

0800c084 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c08e:	4b29      	ldr	r3, [pc, #164]	@ (800c134 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c094:	4b28      	ldr	r3, [pc, #160]	@ (800c138 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	3304      	adds	r3, #4
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7fe fa89 	bl	800a5b2 <uxListRemove>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d10b      	bne.n	800c0be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c0a6:	4b24      	ldr	r3, [pc, #144]	@ (800c138 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c0b2:	43da      	mvns	r2, r3
 800c0b4:	4b21      	ldr	r3, [pc, #132]	@ (800c13c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4013      	ands	r3, r2
 800c0ba:	4a20      	ldr	r2, [pc, #128]	@ (800c13c <prvAddCurrentTaskToDelayedList+0xb8>)
 800c0bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c4:	d10a      	bne.n	800c0dc <prvAddCurrentTaskToDelayedList+0x58>
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d007      	beq.n	800c0dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0cc:	4b1a      	ldr	r3, [pc, #104]	@ (800c138 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	4619      	mov	r1, r3
 800c0d4:	481a      	ldr	r0, [pc, #104]	@ (800c140 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c0d6:	f7fe fa0f 	bl	800a4f8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c0da:	e026      	b.n	800c12a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c0dc:	68fa      	ldr	r2, [r7, #12]
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4413      	add	r3, r2
 800c0e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c0e4:	4b14      	ldr	r3, [pc, #80]	@ (800c138 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	68ba      	ldr	r2, [r7, #8]
 800c0ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c0ec:	68ba      	ldr	r2, [r7, #8]
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	429a      	cmp	r2, r3
 800c0f2:	d209      	bcs.n	800c108 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0f4:	4b13      	ldr	r3, [pc, #76]	@ (800c144 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c0f6:	681a      	ldr	r2, [r3, #0]
 800c0f8:	4b0f      	ldr	r3, [pc, #60]	@ (800c138 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	3304      	adds	r3, #4
 800c0fe:	4619      	mov	r1, r3
 800c100:	4610      	mov	r0, r2
 800c102:	f7fe fa1d 	bl	800a540 <vListInsert>
}
 800c106:	e010      	b.n	800c12a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c108:	4b0f      	ldr	r3, [pc, #60]	@ (800c148 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c10a:	681a      	ldr	r2, [r3, #0]
 800c10c:	4b0a      	ldr	r3, [pc, #40]	@ (800c138 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	3304      	adds	r3, #4
 800c112:	4619      	mov	r1, r3
 800c114:	4610      	mov	r0, r2
 800c116:	f7fe fa13 	bl	800a540 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c11a:	4b0c      	ldr	r3, [pc, #48]	@ (800c14c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	68ba      	ldr	r2, [r7, #8]
 800c120:	429a      	cmp	r2, r3
 800c122:	d202      	bcs.n	800c12a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c124:	4a09      	ldr	r2, [pc, #36]	@ (800c14c <prvAddCurrentTaskToDelayedList+0xc8>)
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	6013      	str	r3, [r2, #0]
}
 800c12a:	bf00      	nop
 800c12c:	3710      	adds	r7, #16
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	20002984 	.word	0x20002984
 800c138:	20002880 	.word	0x20002880
 800c13c:	20002988 	.word	0x20002988
 800c140:	2000296c 	.word	0x2000296c
 800c144:	2000293c 	.word	0x2000293c
 800c148:	20002938 	.word	0x20002938
 800c14c:	200029a0 	.word	0x200029a0

0800c150 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c150:	b480      	push	{r7}
 800c152:	b085      	sub	sp, #20
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	3b04      	subs	r3, #4
 800c160:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c168:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	3b04      	subs	r3, #4
 800c16e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	f023 0201 	bic.w	r2, r3, #1
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	3b04      	subs	r3, #4
 800c17e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c180:	4a0c      	ldr	r2, [pc, #48]	@ (800c1b4 <pxPortInitialiseStack+0x64>)
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	3b14      	subs	r3, #20
 800c18a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c18c:	687a      	ldr	r2, [r7, #4]
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	3b04      	subs	r3, #4
 800c196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f06f 0202 	mvn.w	r2, #2
 800c19e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	3b20      	subs	r3, #32
 800c1a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
}
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	3714      	adds	r7, #20
 800c1ac:	46bd      	mov	sp, r7
 800c1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b2:	4770      	bx	lr
 800c1b4:	0800c1b9 	.word	0x0800c1b9

0800c1b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b085      	sub	sp, #20
 800c1bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c1c2:	4b13      	ldr	r3, [pc, #76]	@ (800c210 <prvTaskExitError+0x58>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ca:	d00b      	beq.n	800c1e4 <prvTaskExitError+0x2c>
	__asm volatile
 800c1cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d0:	f383 8811 	msr	BASEPRI, r3
 800c1d4:	f3bf 8f6f 	isb	sy
 800c1d8:	f3bf 8f4f 	dsb	sy
 800c1dc:	60fb      	str	r3, [r7, #12]
}
 800c1de:	bf00      	nop
 800c1e0:	bf00      	nop
 800c1e2:	e7fd      	b.n	800c1e0 <prvTaskExitError+0x28>
	__asm volatile
 800c1e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1e8:	f383 8811 	msr	BASEPRI, r3
 800c1ec:	f3bf 8f6f 	isb	sy
 800c1f0:	f3bf 8f4f 	dsb	sy
 800c1f4:	60bb      	str	r3, [r7, #8]
}
 800c1f6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c1f8:	bf00      	nop
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d0fc      	beq.n	800c1fa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c200:	bf00      	nop
 800c202:	bf00      	nop
 800c204:	3714      	adds	r7, #20
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr
 800c20e:	bf00      	nop
 800c210:	20000024 	.word	0x20000024
	...

0800c220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c220:	4b07      	ldr	r3, [pc, #28]	@ (800c240 <pxCurrentTCBConst2>)
 800c222:	6819      	ldr	r1, [r3, #0]
 800c224:	6808      	ldr	r0, [r1, #0]
 800c226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c22a:	f380 8809 	msr	PSP, r0
 800c22e:	f3bf 8f6f 	isb	sy
 800c232:	f04f 0000 	mov.w	r0, #0
 800c236:	f380 8811 	msr	BASEPRI, r0
 800c23a:	4770      	bx	lr
 800c23c:	f3af 8000 	nop.w

0800c240 <pxCurrentTCBConst2>:
 800c240:	20002880 	.word	0x20002880
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c244:	bf00      	nop
 800c246:	bf00      	nop

0800c248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c248:	4808      	ldr	r0, [pc, #32]	@ (800c26c <prvPortStartFirstTask+0x24>)
 800c24a:	6800      	ldr	r0, [r0, #0]
 800c24c:	6800      	ldr	r0, [r0, #0]
 800c24e:	f380 8808 	msr	MSP, r0
 800c252:	f04f 0000 	mov.w	r0, #0
 800c256:	f380 8814 	msr	CONTROL, r0
 800c25a:	b662      	cpsie	i
 800c25c:	b661      	cpsie	f
 800c25e:	f3bf 8f4f 	dsb	sy
 800c262:	f3bf 8f6f 	isb	sy
 800c266:	df00      	svc	0
 800c268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c26a:	bf00      	nop
 800c26c:	e000ed08 	.word	0xe000ed08

0800c270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b086      	sub	sp, #24
 800c274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c276:	4b47      	ldr	r3, [pc, #284]	@ (800c394 <xPortStartScheduler+0x124>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	4a47      	ldr	r2, [pc, #284]	@ (800c398 <xPortStartScheduler+0x128>)
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d10b      	bne.n	800c298 <xPortStartScheduler+0x28>
	__asm volatile
 800c280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c284:	f383 8811 	msr	BASEPRI, r3
 800c288:	f3bf 8f6f 	isb	sy
 800c28c:	f3bf 8f4f 	dsb	sy
 800c290:	613b      	str	r3, [r7, #16]
}
 800c292:	bf00      	nop
 800c294:	bf00      	nop
 800c296:	e7fd      	b.n	800c294 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c298:	4b3e      	ldr	r3, [pc, #248]	@ (800c394 <xPortStartScheduler+0x124>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4a3f      	ldr	r2, [pc, #252]	@ (800c39c <xPortStartScheduler+0x12c>)
 800c29e:	4293      	cmp	r3, r2
 800c2a0:	d10b      	bne.n	800c2ba <xPortStartScheduler+0x4a>
	__asm volatile
 800c2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2a6:	f383 8811 	msr	BASEPRI, r3
 800c2aa:	f3bf 8f6f 	isb	sy
 800c2ae:	f3bf 8f4f 	dsb	sy
 800c2b2:	60fb      	str	r3, [r7, #12]
}
 800c2b4:	bf00      	nop
 800c2b6:	bf00      	nop
 800c2b8:	e7fd      	b.n	800c2b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c2ba:	4b39      	ldr	r3, [pc, #228]	@ (800c3a0 <xPortStartScheduler+0x130>)
 800c2bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	781b      	ldrb	r3, [r3, #0]
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	22ff      	movs	r2, #255	@ 0xff
 800c2ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c2d4:	78fb      	ldrb	r3, [r7, #3]
 800c2d6:	b2db      	uxtb	r3, r3
 800c2d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c2dc:	b2da      	uxtb	r2, r3
 800c2de:	4b31      	ldr	r3, [pc, #196]	@ (800c3a4 <xPortStartScheduler+0x134>)
 800c2e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c2e2:	4b31      	ldr	r3, [pc, #196]	@ (800c3a8 <xPortStartScheduler+0x138>)
 800c2e4:	2207      	movs	r2, #7
 800c2e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2e8:	e009      	b.n	800c2fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c2ea:	4b2f      	ldr	r3, [pc, #188]	@ (800c3a8 <xPortStartScheduler+0x138>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	4a2d      	ldr	r2, [pc, #180]	@ (800c3a8 <xPortStartScheduler+0x138>)
 800c2f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c2f4:	78fb      	ldrb	r3, [r7, #3]
 800c2f6:	b2db      	uxtb	r3, r3
 800c2f8:	005b      	lsls	r3, r3, #1
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c2fe:	78fb      	ldrb	r3, [r7, #3]
 800c300:	b2db      	uxtb	r3, r3
 800c302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c306:	2b80      	cmp	r3, #128	@ 0x80
 800c308:	d0ef      	beq.n	800c2ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c30a:	4b27      	ldr	r3, [pc, #156]	@ (800c3a8 <xPortStartScheduler+0x138>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f1c3 0307 	rsb	r3, r3, #7
 800c312:	2b04      	cmp	r3, #4
 800c314:	d00b      	beq.n	800c32e <xPortStartScheduler+0xbe>
	__asm volatile
 800c316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c31a:	f383 8811 	msr	BASEPRI, r3
 800c31e:	f3bf 8f6f 	isb	sy
 800c322:	f3bf 8f4f 	dsb	sy
 800c326:	60bb      	str	r3, [r7, #8]
}
 800c328:	bf00      	nop
 800c32a:	bf00      	nop
 800c32c:	e7fd      	b.n	800c32a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c32e:	4b1e      	ldr	r3, [pc, #120]	@ (800c3a8 <xPortStartScheduler+0x138>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	021b      	lsls	r3, r3, #8
 800c334:	4a1c      	ldr	r2, [pc, #112]	@ (800c3a8 <xPortStartScheduler+0x138>)
 800c336:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c338:	4b1b      	ldr	r3, [pc, #108]	@ (800c3a8 <xPortStartScheduler+0x138>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c340:	4a19      	ldr	r2, [pc, #100]	@ (800c3a8 <xPortStartScheduler+0x138>)
 800c342:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	b2da      	uxtb	r2, r3
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c34c:	4b17      	ldr	r3, [pc, #92]	@ (800c3ac <xPortStartScheduler+0x13c>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a16      	ldr	r2, [pc, #88]	@ (800c3ac <xPortStartScheduler+0x13c>)
 800c352:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c356:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c358:	4b14      	ldr	r3, [pc, #80]	@ (800c3ac <xPortStartScheduler+0x13c>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	4a13      	ldr	r2, [pc, #76]	@ (800c3ac <xPortStartScheduler+0x13c>)
 800c35e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c362:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c364:	f000 f8da 	bl	800c51c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c368:	4b11      	ldr	r3, [pc, #68]	@ (800c3b0 <xPortStartScheduler+0x140>)
 800c36a:	2200      	movs	r2, #0
 800c36c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c36e:	f000 f8f9 	bl	800c564 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c372:	4b10      	ldr	r3, [pc, #64]	@ (800c3b4 <xPortStartScheduler+0x144>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a0f      	ldr	r2, [pc, #60]	@ (800c3b4 <xPortStartScheduler+0x144>)
 800c378:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c37c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c37e:	f7ff ff63 	bl	800c248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c382:	f7ff fa7d 	bl	800b880 <vTaskSwitchContext>
	prvTaskExitError();
 800c386:	f7ff ff17 	bl	800c1b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c38a:	2300      	movs	r3, #0
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3718      	adds	r7, #24
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}
 800c394:	e000ed00 	.word	0xe000ed00
 800c398:	410fc271 	.word	0x410fc271
 800c39c:	410fc270 	.word	0x410fc270
 800c3a0:	e000e400 	.word	0xe000e400
 800c3a4:	200029ac 	.word	0x200029ac
 800c3a8:	200029b0 	.word	0x200029b0
 800c3ac:	e000ed20 	.word	0xe000ed20
 800c3b0:	20000024 	.word	0x20000024
 800c3b4:	e000ef34 	.word	0xe000ef34

0800c3b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c3be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c2:	f383 8811 	msr	BASEPRI, r3
 800c3c6:	f3bf 8f6f 	isb	sy
 800c3ca:	f3bf 8f4f 	dsb	sy
 800c3ce:	607b      	str	r3, [r7, #4]
}
 800c3d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c3d2:	4b10      	ldr	r3, [pc, #64]	@ (800c414 <vPortEnterCritical+0x5c>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	3301      	adds	r3, #1
 800c3d8:	4a0e      	ldr	r2, [pc, #56]	@ (800c414 <vPortEnterCritical+0x5c>)
 800c3da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c3dc:	4b0d      	ldr	r3, [pc, #52]	@ (800c414 <vPortEnterCritical+0x5c>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2b01      	cmp	r3, #1
 800c3e2:	d110      	bne.n	800c406 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c3e4:	4b0c      	ldr	r3, [pc, #48]	@ (800c418 <vPortEnterCritical+0x60>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	b2db      	uxtb	r3, r3
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d00b      	beq.n	800c406 <vPortEnterCritical+0x4e>
	__asm volatile
 800c3ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3f2:	f383 8811 	msr	BASEPRI, r3
 800c3f6:	f3bf 8f6f 	isb	sy
 800c3fa:	f3bf 8f4f 	dsb	sy
 800c3fe:	603b      	str	r3, [r7, #0]
}
 800c400:	bf00      	nop
 800c402:	bf00      	nop
 800c404:	e7fd      	b.n	800c402 <vPortEnterCritical+0x4a>
	}
}
 800c406:	bf00      	nop
 800c408:	370c      	adds	r7, #12
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	20000024 	.word	0x20000024
 800c418:	e000ed04 	.word	0xe000ed04

0800c41c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c41c:	b480      	push	{r7}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c422:	4b12      	ldr	r3, [pc, #72]	@ (800c46c <vPortExitCritical+0x50>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d10b      	bne.n	800c442 <vPortExitCritical+0x26>
	__asm volatile
 800c42a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c42e:	f383 8811 	msr	BASEPRI, r3
 800c432:	f3bf 8f6f 	isb	sy
 800c436:	f3bf 8f4f 	dsb	sy
 800c43a:	607b      	str	r3, [r7, #4]
}
 800c43c:	bf00      	nop
 800c43e:	bf00      	nop
 800c440:	e7fd      	b.n	800c43e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c442:	4b0a      	ldr	r3, [pc, #40]	@ (800c46c <vPortExitCritical+0x50>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	3b01      	subs	r3, #1
 800c448:	4a08      	ldr	r2, [pc, #32]	@ (800c46c <vPortExitCritical+0x50>)
 800c44a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c44c:	4b07      	ldr	r3, [pc, #28]	@ (800c46c <vPortExitCritical+0x50>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d105      	bne.n	800c460 <vPortExitCritical+0x44>
 800c454:	2300      	movs	r3, #0
 800c456:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	f383 8811 	msr	BASEPRI, r3
}
 800c45e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c460:	bf00      	nop
 800c462:	370c      	adds	r7, #12
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr
 800c46c:	20000024 	.word	0x20000024

0800c470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c470:	f3ef 8009 	mrs	r0, PSP
 800c474:	f3bf 8f6f 	isb	sy
 800c478:	4b15      	ldr	r3, [pc, #84]	@ (800c4d0 <pxCurrentTCBConst>)
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	f01e 0f10 	tst.w	lr, #16
 800c480:	bf08      	it	eq
 800c482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c48a:	6010      	str	r0, [r2, #0]
 800c48c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c490:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c494:	f380 8811 	msr	BASEPRI, r0
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	f7ff f9ee 	bl	800b880 <vTaskSwitchContext>
 800c4a4:	f04f 0000 	mov.w	r0, #0
 800c4a8:	f380 8811 	msr	BASEPRI, r0
 800c4ac:	bc09      	pop	{r0, r3}
 800c4ae:	6819      	ldr	r1, [r3, #0]
 800c4b0:	6808      	ldr	r0, [r1, #0]
 800c4b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4b6:	f01e 0f10 	tst.w	lr, #16
 800c4ba:	bf08      	it	eq
 800c4bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c4c0:	f380 8809 	msr	PSP, r0
 800c4c4:	f3bf 8f6f 	isb	sy
 800c4c8:	4770      	bx	lr
 800c4ca:	bf00      	nop
 800c4cc:	f3af 8000 	nop.w

0800c4d0 <pxCurrentTCBConst>:
 800c4d0:	20002880 	.word	0x20002880
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c4d4:	bf00      	nop
 800c4d6:	bf00      	nop

0800c4d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e2:	f383 8811 	msr	BASEPRI, r3
 800c4e6:	f3bf 8f6f 	isb	sy
 800c4ea:	f3bf 8f4f 	dsb	sy
 800c4ee:	607b      	str	r3, [r7, #4]
}
 800c4f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c4f2:	f7ff f90b 	bl	800b70c <xTaskIncrementTick>
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d003      	beq.n	800c504 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c4fc:	4b06      	ldr	r3, [pc, #24]	@ (800c518 <SysTick_Handler+0x40>)
 800c4fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c502:	601a      	str	r2, [r3, #0]
 800c504:	2300      	movs	r3, #0
 800c506:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	f383 8811 	msr	BASEPRI, r3
}
 800c50e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c510:	bf00      	nop
 800c512:	3708      	adds	r7, #8
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}
 800c518:	e000ed04 	.word	0xe000ed04

0800c51c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c51c:	b480      	push	{r7}
 800c51e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c520:	4b0b      	ldr	r3, [pc, #44]	@ (800c550 <vPortSetupTimerInterrupt+0x34>)
 800c522:	2200      	movs	r2, #0
 800c524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c526:	4b0b      	ldr	r3, [pc, #44]	@ (800c554 <vPortSetupTimerInterrupt+0x38>)
 800c528:	2200      	movs	r2, #0
 800c52a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c52c:	4b0a      	ldr	r3, [pc, #40]	@ (800c558 <vPortSetupTimerInterrupt+0x3c>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a0a      	ldr	r2, [pc, #40]	@ (800c55c <vPortSetupTimerInterrupt+0x40>)
 800c532:	fba2 2303 	umull	r2, r3, r2, r3
 800c536:	099b      	lsrs	r3, r3, #6
 800c538:	4a09      	ldr	r2, [pc, #36]	@ (800c560 <vPortSetupTimerInterrupt+0x44>)
 800c53a:	3b01      	subs	r3, #1
 800c53c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c53e:	4b04      	ldr	r3, [pc, #16]	@ (800c550 <vPortSetupTimerInterrupt+0x34>)
 800c540:	2207      	movs	r2, #7
 800c542:	601a      	str	r2, [r3, #0]
}
 800c544:	bf00      	nop
 800c546:	46bd      	mov	sp, r7
 800c548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54c:	4770      	bx	lr
 800c54e:	bf00      	nop
 800c550:	e000e010 	.word	0xe000e010
 800c554:	e000e018 	.word	0xe000e018
 800c558:	20000000 	.word	0x20000000
 800c55c:	10624dd3 	.word	0x10624dd3
 800c560:	e000e014 	.word	0xe000e014

0800c564 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c564:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c574 <vPortEnableVFP+0x10>
 800c568:	6801      	ldr	r1, [r0, #0]
 800c56a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c56e:	6001      	str	r1, [r0, #0]
 800c570:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c572:	bf00      	nop
 800c574:	e000ed88 	.word	0xe000ed88

0800c578 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c578:	b480      	push	{r7}
 800c57a:	b085      	sub	sp, #20
 800c57c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c57e:	f3ef 8305 	mrs	r3, IPSR
 800c582:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	2b0f      	cmp	r3, #15
 800c588:	d915      	bls.n	800c5b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c58a:	4a18      	ldr	r2, [pc, #96]	@ (800c5ec <vPortValidateInterruptPriority+0x74>)
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	4413      	add	r3, r2
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c594:	4b16      	ldr	r3, [pc, #88]	@ (800c5f0 <vPortValidateInterruptPriority+0x78>)
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	7afa      	ldrb	r2, [r7, #11]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d20b      	bcs.n	800c5b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5a2:	f383 8811 	msr	BASEPRI, r3
 800c5a6:	f3bf 8f6f 	isb	sy
 800c5aa:	f3bf 8f4f 	dsb	sy
 800c5ae:	607b      	str	r3, [r7, #4]
}
 800c5b0:	bf00      	nop
 800c5b2:	bf00      	nop
 800c5b4:	e7fd      	b.n	800c5b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c5b6:	4b0f      	ldr	r3, [pc, #60]	@ (800c5f4 <vPortValidateInterruptPriority+0x7c>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c5be:	4b0e      	ldr	r3, [pc, #56]	@ (800c5f8 <vPortValidateInterruptPriority+0x80>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d90b      	bls.n	800c5de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ca:	f383 8811 	msr	BASEPRI, r3
 800c5ce:	f3bf 8f6f 	isb	sy
 800c5d2:	f3bf 8f4f 	dsb	sy
 800c5d6:	603b      	str	r3, [r7, #0]
}
 800c5d8:	bf00      	nop
 800c5da:	bf00      	nop
 800c5dc:	e7fd      	b.n	800c5da <vPortValidateInterruptPriority+0x62>
	}
 800c5de:	bf00      	nop
 800c5e0:	3714      	adds	r7, #20
 800c5e2:	46bd      	mov	sp, r7
 800c5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e8:	4770      	bx	lr
 800c5ea:	bf00      	nop
 800c5ec:	e000e3f0 	.word	0xe000e3f0
 800c5f0:	200029ac 	.word	0x200029ac
 800c5f4:	e000ed0c 	.word	0xe000ed0c
 800c5f8:	200029b0 	.word	0x200029b0

0800c5fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b08a      	sub	sp, #40	@ 0x28
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c604:	2300      	movs	r3, #0
 800c606:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c608:	f7fe ffd4 	bl	800b5b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c60c:	4b5c      	ldr	r3, [pc, #368]	@ (800c780 <pvPortMalloc+0x184>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d101      	bne.n	800c618 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c614:	f000 f924 	bl	800c860 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c618:	4b5a      	ldr	r3, [pc, #360]	@ (800c784 <pvPortMalloc+0x188>)
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	4013      	ands	r3, r2
 800c620:	2b00      	cmp	r3, #0
 800c622:	f040 8095 	bne.w	800c750 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d01e      	beq.n	800c66a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c62c:	2208      	movs	r2, #8
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	4413      	add	r3, r2
 800c632:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	f003 0307 	and.w	r3, r3, #7
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d015      	beq.n	800c66a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	f023 0307 	bic.w	r3, r3, #7
 800c644:	3308      	adds	r3, #8
 800c646:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f003 0307 	and.w	r3, r3, #7
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d00b      	beq.n	800c66a <pvPortMalloc+0x6e>
	__asm volatile
 800c652:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c656:	f383 8811 	msr	BASEPRI, r3
 800c65a:	f3bf 8f6f 	isb	sy
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	617b      	str	r3, [r7, #20]
}
 800c664:	bf00      	nop
 800c666:	bf00      	nop
 800c668:	e7fd      	b.n	800c666 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d06f      	beq.n	800c750 <pvPortMalloc+0x154>
 800c670:	4b45      	ldr	r3, [pc, #276]	@ (800c788 <pvPortMalloc+0x18c>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	687a      	ldr	r2, [r7, #4]
 800c676:	429a      	cmp	r2, r3
 800c678:	d86a      	bhi.n	800c750 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c67a:	4b44      	ldr	r3, [pc, #272]	@ (800c78c <pvPortMalloc+0x190>)
 800c67c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c67e:	4b43      	ldr	r3, [pc, #268]	@ (800c78c <pvPortMalloc+0x190>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c684:	e004      	b.n	800c690 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c688:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c68a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	429a      	cmp	r2, r3
 800c698:	d903      	bls.n	800c6a2 <pvPortMalloc+0xa6>
 800c69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1f1      	bne.n	800c686 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c6a2:	4b37      	ldr	r3, [pc, #220]	@ (800c780 <pvPortMalloc+0x184>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d051      	beq.n	800c750 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c6ac:	6a3b      	ldr	r3, [r7, #32]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	2208      	movs	r2, #8
 800c6b2:	4413      	add	r3, r2
 800c6b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c6b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6b8:	681a      	ldr	r2, [r3, #0]
 800c6ba:	6a3b      	ldr	r3, [r7, #32]
 800c6bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c0:	685a      	ldr	r2, [r3, #4]
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	1ad2      	subs	r2, r2, r3
 800c6c6:	2308      	movs	r3, #8
 800c6c8:	005b      	lsls	r3, r3, #1
 800c6ca:	429a      	cmp	r2, r3
 800c6cc:	d920      	bls.n	800c710 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c6ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	4413      	add	r3, r2
 800c6d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6d6:	69bb      	ldr	r3, [r7, #24]
 800c6d8:	f003 0307 	and.w	r3, r3, #7
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d00b      	beq.n	800c6f8 <pvPortMalloc+0xfc>
	__asm volatile
 800c6e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6e4:	f383 8811 	msr	BASEPRI, r3
 800c6e8:	f3bf 8f6f 	isb	sy
 800c6ec:	f3bf 8f4f 	dsb	sy
 800c6f0:	613b      	str	r3, [r7, #16]
}
 800c6f2:	bf00      	nop
 800c6f4:	bf00      	nop
 800c6f6:	e7fd      	b.n	800c6f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fa:	685a      	ldr	r2, [r3, #4]
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	1ad2      	subs	r2, r2, r3
 800c700:	69bb      	ldr	r3, [r7, #24]
 800c702:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c70a:	69b8      	ldr	r0, [r7, #24]
 800c70c:	f000 f90a 	bl	800c924 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c710:	4b1d      	ldr	r3, [pc, #116]	@ (800c788 <pvPortMalloc+0x18c>)
 800c712:	681a      	ldr	r2, [r3, #0]
 800c714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	1ad3      	subs	r3, r2, r3
 800c71a:	4a1b      	ldr	r2, [pc, #108]	@ (800c788 <pvPortMalloc+0x18c>)
 800c71c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c71e:	4b1a      	ldr	r3, [pc, #104]	@ (800c788 <pvPortMalloc+0x18c>)
 800c720:	681a      	ldr	r2, [r3, #0]
 800c722:	4b1b      	ldr	r3, [pc, #108]	@ (800c790 <pvPortMalloc+0x194>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	429a      	cmp	r2, r3
 800c728:	d203      	bcs.n	800c732 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c72a:	4b17      	ldr	r3, [pc, #92]	@ (800c788 <pvPortMalloc+0x18c>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	4a18      	ldr	r2, [pc, #96]	@ (800c790 <pvPortMalloc+0x194>)
 800c730:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c734:	685a      	ldr	r2, [r3, #4]
 800c736:	4b13      	ldr	r3, [pc, #76]	@ (800c784 <pvPortMalloc+0x188>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	431a      	orrs	r2, r3
 800c73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c73e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c742:	2200      	movs	r2, #0
 800c744:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c746:	4b13      	ldr	r3, [pc, #76]	@ (800c794 <pvPortMalloc+0x198>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	3301      	adds	r3, #1
 800c74c:	4a11      	ldr	r2, [pc, #68]	@ (800c794 <pvPortMalloc+0x198>)
 800c74e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c750:	f7fe ff3e 	bl	800b5d0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c754:	69fb      	ldr	r3, [r7, #28]
 800c756:	f003 0307 	and.w	r3, r3, #7
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d00b      	beq.n	800c776 <pvPortMalloc+0x17a>
	__asm volatile
 800c75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c762:	f383 8811 	msr	BASEPRI, r3
 800c766:	f3bf 8f6f 	isb	sy
 800c76a:	f3bf 8f4f 	dsb	sy
 800c76e:	60fb      	str	r3, [r7, #12]
}
 800c770:	bf00      	nop
 800c772:	bf00      	nop
 800c774:	e7fd      	b.n	800c772 <pvPortMalloc+0x176>
	return pvReturn;
 800c776:	69fb      	ldr	r3, [r7, #28]
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3728      	adds	r7, #40	@ 0x28
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}
 800c780:	200065bc 	.word	0x200065bc
 800c784:	200065d0 	.word	0x200065d0
 800c788:	200065c0 	.word	0x200065c0
 800c78c:	200065b4 	.word	0x200065b4
 800c790:	200065c4 	.word	0x200065c4
 800c794:	200065c8 	.word	0x200065c8

0800c798 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b086      	sub	sp, #24
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d04f      	beq.n	800c84a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c7aa:	2308      	movs	r3, #8
 800c7ac:	425b      	negs	r3, r3
 800c7ae:	697a      	ldr	r2, [r7, #20]
 800c7b0:	4413      	add	r3, r2
 800c7b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	685a      	ldr	r2, [r3, #4]
 800c7bc:	4b25      	ldr	r3, [pc, #148]	@ (800c854 <vPortFree+0xbc>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4013      	ands	r3, r2
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d10b      	bne.n	800c7de <vPortFree+0x46>
	__asm volatile
 800c7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ca:	f383 8811 	msr	BASEPRI, r3
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	60fb      	str	r3, [r7, #12]
}
 800c7d8:	bf00      	nop
 800c7da:	bf00      	nop
 800c7dc:	e7fd      	b.n	800c7da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d00b      	beq.n	800c7fe <vPortFree+0x66>
	__asm volatile
 800c7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ea:	f383 8811 	msr	BASEPRI, r3
 800c7ee:	f3bf 8f6f 	isb	sy
 800c7f2:	f3bf 8f4f 	dsb	sy
 800c7f6:	60bb      	str	r3, [r7, #8]
}
 800c7f8:	bf00      	nop
 800c7fa:	bf00      	nop
 800c7fc:	e7fd      	b.n	800c7fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	685a      	ldr	r2, [r3, #4]
 800c802:	4b14      	ldr	r3, [pc, #80]	@ (800c854 <vPortFree+0xbc>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	4013      	ands	r3, r2
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d01e      	beq.n	800c84a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c80c:	693b      	ldr	r3, [r7, #16]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d11a      	bne.n	800c84a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	685a      	ldr	r2, [r3, #4]
 800c818:	4b0e      	ldr	r3, [pc, #56]	@ (800c854 <vPortFree+0xbc>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	43db      	mvns	r3, r3
 800c81e:	401a      	ands	r2, r3
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c824:	f7fe fec6 	bl	800b5b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	685a      	ldr	r2, [r3, #4]
 800c82c:	4b0a      	ldr	r3, [pc, #40]	@ (800c858 <vPortFree+0xc0>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	4413      	add	r3, r2
 800c832:	4a09      	ldr	r2, [pc, #36]	@ (800c858 <vPortFree+0xc0>)
 800c834:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c836:	6938      	ldr	r0, [r7, #16]
 800c838:	f000 f874 	bl	800c924 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c83c:	4b07      	ldr	r3, [pc, #28]	@ (800c85c <vPortFree+0xc4>)
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	3301      	adds	r3, #1
 800c842:	4a06      	ldr	r2, [pc, #24]	@ (800c85c <vPortFree+0xc4>)
 800c844:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c846:	f7fe fec3 	bl	800b5d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c84a:	bf00      	nop
 800c84c:	3718      	adds	r7, #24
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}
 800c852:	bf00      	nop
 800c854:	200065d0 	.word	0x200065d0
 800c858:	200065c0 	.word	0x200065c0
 800c85c:	200065cc 	.word	0x200065cc

0800c860 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c860:	b480      	push	{r7}
 800c862:	b085      	sub	sp, #20
 800c864:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c866:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c86a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c86c:	4b27      	ldr	r3, [pc, #156]	@ (800c90c <prvHeapInit+0xac>)
 800c86e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	f003 0307 	and.w	r3, r3, #7
 800c876:	2b00      	cmp	r3, #0
 800c878:	d00c      	beq.n	800c894 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	3307      	adds	r3, #7
 800c87e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f023 0307 	bic.w	r3, r3, #7
 800c886:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c888:	68ba      	ldr	r2, [r7, #8]
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	1ad3      	subs	r3, r2, r3
 800c88e:	4a1f      	ldr	r2, [pc, #124]	@ (800c90c <prvHeapInit+0xac>)
 800c890:	4413      	add	r3, r2
 800c892:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c898:	4a1d      	ldr	r2, [pc, #116]	@ (800c910 <prvHeapInit+0xb0>)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c89e:	4b1c      	ldr	r3, [pc, #112]	@ (800c910 <prvHeapInit+0xb0>)
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	68ba      	ldr	r2, [r7, #8]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c8ac:	2208      	movs	r2, #8
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	1a9b      	subs	r3, r3, r2
 800c8b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f023 0307 	bic.w	r3, r3, #7
 800c8ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	4a15      	ldr	r2, [pc, #84]	@ (800c914 <prvHeapInit+0xb4>)
 800c8c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c8c2:	4b14      	ldr	r3, [pc, #80]	@ (800c914 <prvHeapInit+0xb4>)
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c8ca:	4b12      	ldr	r3, [pc, #72]	@ (800c914 <prvHeapInit+0xb4>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	68fa      	ldr	r2, [r7, #12]
 800c8da:	1ad2      	subs	r2, r2, r3
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c8e0:	4b0c      	ldr	r3, [pc, #48]	@ (800c914 <prvHeapInit+0xb4>)
 800c8e2:	681a      	ldr	r2, [r3, #0]
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	4a0a      	ldr	r2, [pc, #40]	@ (800c918 <prvHeapInit+0xb8>)
 800c8ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	4a09      	ldr	r2, [pc, #36]	@ (800c91c <prvHeapInit+0xbc>)
 800c8f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c8f8:	4b09      	ldr	r3, [pc, #36]	@ (800c920 <prvHeapInit+0xc0>)
 800c8fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c8fe:	601a      	str	r2, [r3, #0]
}
 800c900:	bf00      	nop
 800c902:	3714      	adds	r7, #20
 800c904:	46bd      	mov	sp, r7
 800c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90a:	4770      	bx	lr
 800c90c:	200029b4 	.word	0x200029b4
 800c910:	200065b4 	.word	0x200065b4
 800c914:	200065bc 	.word	0x200065bc
 800c918:	200065c4 	.word	0x200065c4
 800c91c:	200065c0 	.word	0x200065c0
 800c920:	200065d0 	.word	0x200065d0

0800c924 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c924:	b480      	push	{r7}
 800c926:	b085      	sub	sp, #20
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c92c:	4b28      	ldr	r3, [pc, #160]	@ (800c9d0 <prvInsertBlockIntoFreeList+0xac>)
 800c92e:	60fb      	str	r3, [r7, #12]
 800c930:	e002      	b.n	800c938 <prvInsertBlockIntoFreeList+0x14>
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	60fb      	str	r3, [r7, #12]
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d8f7      	bhi.n	800c932 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	68ba      	ldr	r2, [r7, #8]
 800c94c:	4413      	add	r3, r2
 800c94e:	687a      	ldr	r2, [r7, #4]
 800c950:	429a      	cmp	r2, r3
 800c952:	d108      	bne.n	800c966 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	685a      	ldr	r2, [r3, #4]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	441a      	add	r2, r3
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	68ba      	ldr	r2, [r7, #8]
 800c970:	441a      	add	r2, r3
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	429a      	cmp	r2, r3
 800c978:	d118      	bne.n	800c9ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	4b15      	ldr	r3, [pc, #84]	@ (800c9d4 <prvInsertBlockIntoFreeList+0xb0>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	429a      	cmp	r2, r3
 800c984:	d00d      	beq.n	800c9a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	685a      	ldr	r2, [r3, #4]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	441a      	add	r2, r3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	601a      	str	r2, [r3, #0]
 800c9a0:	e008      	b.n	800c9b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c9a2:	4b0c      	ldr	r3, [pc, #48]	@ (800c9d4 <prvInsertBlockIntoFreeList+0xb0>)
 800c9a4:	681a      	ldr	r2, [r3, #0]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	601a      	str	r2, [r3, #0]
 800c9aa:	e003      	b.n	800c9b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d002      	beq.n	800c9c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9c2:	bf00      	nop
 800c9c4:	3714      	adds	r7, #20
 800c9c6:	46bd      	mov	sp, r7
 800c9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9cc:	4770      	bx	lr
 800c9ce:	bf00      	nop
 800c9d0:	200065b4 	.word	0x200065b4
 800c9d4:	200065bc 	.word	0x200065bc

0800c9d8 <sulp>:
 800c9d8:	b570      	push	{r4, r5, r6, lr}
 800c9da:	4604      	mov	r4, r0
 800c9dc:	460d      	mov	r5, r1
 800c9de:	ec45 4b10 	vmov	d0, r4, r5
 800c9e2:	4616      	mov	r6, r2
 800c9e4:	f003 fd98 	bl	8010518 <__ulp>
 800c9e8:	ec51 0b10 	vmov	r0, r1, d0
 800c9ec:	b17e      	cbz	r6, 800ca0e <sulp+0x36>
 800c9ee:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c9f2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	dd09      	ble.n	800ca0e <sulp+0x36>
 800c9fa:	051b      	lsls	r3, r3, #20
 800c9fc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ca00:	2400      	movs	r4, #0
 800ca02:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ca06:	4622      	mov	r2, r4
 800ca08:	462b      	mov	r3, r5
 800ca0a:	f7f3 fdfd 	bl	8000608 <__aeabi_dmul>
 800ca0e:	ec41 0b10 	vmov	d0, r0, r1
 800ca12:	bd70      	pop	{r4, r5, r6, pc}
 800ca14:	0000      	movs	r0, r0
	...

0800ca18 <_strtod_l>:
 800ca18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca1c:	b09f      	sub	sp, #124	@ 0x7c
 800ca1e:	460c      	mov	r4, r1
 800ca20:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ca22:	2200      	movs	r2, #0
 800ca24:	921a      	str	r2, [sp, #104]	@ 0x68
 800ca26:	9005      	str	r0, [sp, #20]
 800ca28:	f04f 0a00 	mov.w	sl, #0
 800ca2c:	f04f 0b00 	mov.w	fp, #0
 800ca30:	460a      	mov	r2, r1
 800ca32:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca34:	7811      	ldrb	r1, [r2, #0]
 800ca36:	292b      	cmp	r1, #43	@ 0x2b
 800ca38:	d04a      	beq.n	800cad0 <_strtod_l+0xb8>
 800ca3a:	d838      	bhi.n	800caae <_strtod_l+0x96>
 800ca3c:	290d      	cmp	r1, #13
 800ca3e:	d832      	bhi.n	800caa6 <_strtod_l+0x8e>
 800ca40:	2908      	cmp	r1, #8
 800ca42:	d832      	bhi.n	800caaa <_strtod_l+0x92>
 800ca44:	2900      	cmp	r1, #0
 800ca46:	d03b      	beq.n	800cac0 <_strtod_l+0xa8>
 800ca48:	2200      	movs	r2, #0
 800ca4a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ca4c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800ca4e:	782a      	ldrb	r2, [r5, #0]
 800ca50:	2a30      	cmp	r2, #48	@ 0x30
 800ca52:	f040 80b3 	bne.w	800cbbc <_strtod_l+0x1a4>
 800ca56:	786a      	ldrb	r2, [r5, #1]
 800ca58:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800ca5c:	2a58      	cmp	r2, #88	@ 0x58
 800ca5e:	d16e      	bne.n	800cb3e <_strtod_l+0x126>
 800ca60:	9302      	str	r3, [sp, #8]
 800ca62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca64:	9301      	str	r3, [sp, #4]
 800ca66:	ab1a      	add	r3, sp, #104	@ 0x68
 800ca68:	9300      	str	r3, [sp, #0]
 800ca6a:	4a8e      	ldr	r2, [pc, #568]	@ (800cca4 <_strtod_l+0x28c>)
 800ca6c:	9805      	ldr	r0, [sp, #20]
 800ca6e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800ca70:	a919      	add	r1, sp, #100	@ 0x64
 800ca72:	f002 fe43 	bl	800f6fc <__gethex>
 800ca76:	f010 060f 	ands.w	r6, r0, #15
 800ca7a:	4604      	mov	r4, r0
 800ca7c:	d005      	beq.n	800ca8a <_strtod_l+0x72>
 800ca7e:	2e06      	cmp	r6, #6
 800ca80:	d128      	bne.n	800cad4 <_strtod_l+0xbc>
 800ca82:	3501      	adds	r5, #1
 800ca84:	2300      	movs	r3, #0
 800ca86:	9519      	str	r5, [sp, #100]	@ 0x64
 800ca88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca8a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	f040 858e 	bne.w	800d5ae <_strtod_l+0xb96>
 800ca92:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ca94:	b1cb      	cbz	r3, 800caca <_strtod_l+0xb2>
 800ca96:	4652      	mov	r2, sl
 800ca98:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800ca9c:	ec43 2b10 	vmov	d0, r2, r3
 800caa0:	b01f      	add	sp, #124	@ 0x7c
 800caa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa6:	2920      	cmp	r1, #32
 800caa8:	d1ce      	bne.n	800ca48 <_strtod_l+0x30>
 800caaa:	3201      	adds	r2, #1
 800caac:	e7c1      	b.n	800ca32 <_strtod_l+0x1a>
 800caae:	292d      	cmp	r1, #45	@ 0x2d
 800cab0:	d1ca      	bne.n	800ca48 <_strtod_l+0x30>
 800cab2:	2101      	movs	r1, #1
 800cab4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800cab6:	1c51      	adds	r1, r2, #1
 800cab8:	9119      	str	r1, [sp, #100]	@ 0x64
 800caba:	7852      	ldrb	r2, [r2, #1]
 800cabc:	2a00      	cmp	r2, #0
 800cabe:	d1c5      	bne.n	800ca4c <_strtod_l+0x34>
 800cac0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cac2:	9419      	str	r4, [sp, #100]	@ 0x64
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	f040 8570 	bne.w	800d5aa <_strtod_l+0xb92>
 800caca:	4652      	mov	r2, sl
 800cacc:	465b      	mov	r3, fp
 800cace:	e7e5      	b.n	800ca9c <_strtod_l+0x84>
 800cad0:	2100      	movs	r1, #0
 800cad2:	e7ef      	b.n	800cab4 <_strtod_l+0x9c>
 800cad4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cad6:	b13a      	cbz	r2, 800cae8 <_strtod_l+0xd0>
 800cad8:	2135      	movs	r1, #53	@ 0x35
 800cada:	a81c      	add	r0, sp, #112	@ 0x70
 800cadc:	f003 fe16 	bl	801070c <__copybits>
 800cae0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cae2:	9805      	ldr	r0, [sp, #20]
 800cae4:	f003 f9e4 	bl	800feb0 <_Bfree>
 800cae8:	3e01      	subs	r6, #1
 800caea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800caec:	2e04      	cmp	r6, #4
 800caee:	d806      	bhi.n	800cafe <_strtod_l+0xe6>
 800caf0:	e8df f006 	tbb	[pc, r6]
 800caf4:	201d0314 	.word	0x201d0314
 800caf8:	14          	.byte	0x14
 800caf9:	00          	.byte	0x00
 800cafa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cafe:	05e1      	lsls	r1, r4, #23
 800cb00:	bf48      	it	mi
 800cb02:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cb06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cb0a:	0d1b      	lsrs	r3, r3, #20
 800cb0c:	051b      	lsls	r3, r3, #20
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d1bb      	bne.n	800ca8a <_strtod_l+0x72>
 800cb12:	f001 fe8b 	bl	800e82c <__errno>
 800cb16:	2322      	movs	r3, #34	@ 0x22
 800cb18:	6003      	str	r3, [r0, #0]
 800cb1a:	e7b6      	b.n	800ca8a <_strtod_l+0x72>
 800cb1c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cb20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cb24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cb28:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cb2c:	e7e7      	b.n	800cafe <_strtod_l+0xe6>
 800cb2e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ccac <_strtod_l+0x294>
 800cb32:	e7e4      	b.n	800cafe <_strtod_l+0xe6>
 800cb34:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cb38:	f04f 3aff 	mov.w	sl, #4294967295
 800cb3c:	e7df      	b.n	800cafe <_strtod_l+0xe6>
 800cb3e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb40:	1c5a      	adds	r2, r3, #1
 800cb42:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb44:	785b      	ldrb	r3, [r3, #1]
 800cb46:	2b30      	cmp	r3, #48	@ 0x30
 800cb48:	d0f9      	beq.n	800cb3e <_strtod_l+0x126>
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d09d      	beq.n	800ca8a <_strtod_l+0x72>
 800cb4e:	2301      	movs	r3, #1
 800cb50:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb54:	930c      	str	r3, [sp, #48]	@ 0x30
 800cb56:	2300      	movs	r3, #0
 800cb58:	9308      	str	r3, [sp, #32]
 800cb5a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb5c:	461f      	mov	r7, r3
 800cb5e:	220a      	movs	r2, #10
 800cb60:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cb62:	7805      	ldrb	r5, [r0, #0]
 800cb64:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cb68:	b2d9      	uxtb	r1, r3
 800cb6a:	2909      	cmp	r1, #9
 800cb6c:	d928      	bls.n	800cbc0 <_strtod_l+0x1a8>
 800cb6e:	494e      	ldr	r1, [pc, #312]	@ (800cca8 <_strtod_l+0x290>)
 800cb70:	2201      	movs	r2, #1
 800cb72:	f001 fdfe 	bl	800e772 <strncmp>
 800cb76:	2800      	cmp	r0, #0
 800cb78:	d032      	beq.n	800cbe0 <_strtod_l+0x1c8>
 800cb7a:	2000      	movs	r0, #0
 800cb7c:	462a      	mov	r2, r5
 800cb7e:	4681      	mov	r9, r0
 800cb80:	463d      	mov	r5, r7
 800cb82:	4603      	mov	r3, r0
 800cb84:	2a65      	cmp	r2, #101	@ 0x65
 800cb86:	d001      	beq.n	800cb8c <_strtod_l+0x174>
 800cb88:	2a45      	cmp	r2, #69	@ 0x45
 800cb8a:	d114      	bne.n	800cbb6 <_strtod_l+0x19e>
 800cb8c:	b91d      	cbnz	r5, 800cb96 <_strtod_l+0x17e>
 800cb8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb90:	4302      	orrs	r2, r0
 800cb92:	d095      	beq.n	800cac0 <_strtod_l+0xa8>
 800cb94:	2500      	movs	r5, #0
 800cb96:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cb98:	1c62      	adds	r2, r4, #1
 800cb9a:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb9c:	7862      	ldrb	r2, [r4, #1]
 800cb9e:	2a2b      	cmp	r2, #43	@ 0x2b
 800cba0:	d077      	beq.n	800cc92 <_strtod_l+0x27a>
 800cba2:	2a2d      	cmp	r2, #45	@ 0x2d
 800cba4:	d07b      	beq.n	800cc9e <_strtod_l+0x286>
 800cba6:	f04f 0c00 	mov.w	ip, #0
 800cbaa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cbae:	2909      	cmp	r1, #9
 800cbb0:	f240 8082 	bls.w	800ccb8 <_strtod_l+0x2a0>
 800cbb4:	9419      	str	r4, [sp, #100]	@ 0x64
 800cbb6:	f04f 0800 	mov.w	r8, #0
 800cbba:	e0a2      	b.n	800cd02 <_strtod_l+0x2ea>
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	e7c7      	b.n	800cb50 <_strtod_l+0x138>
 800cbc0:	2f08      	cmp	r7, #8
 800cbc2:	bfd5      	itete	le
 800cbc4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800cbc6:	9908      	ldrgt	r1, [sp, #32]
 800cbc8:	fb02 3301 	mlale	r3, r2, r1, r3
 800cbcc:	fb02 3301 	mlagt	r3, r2, r1, r3
 800cbd0:	f100 0001 	add.w	r0, r0, #1
 800cbd4:	bfd4      	ite	le
 800cbd6:	930a      	strle	r3, [sp, #40]	@ 0x28
 800cbd8:	9308      	strgt	r3, [sp, #32]
 800cbda:	3701      	adds	r7, #1
 800cbdc:	9019      	str	r0, [sp, #100]	@ 0x64
 800cbde:	e7bf      	b.n	800cb60 <_strtod_l+0x148>
 800cbe0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbe2:	1c5a      	adds	r2, r3, #1
 800cbe4:	9219      	str	r2, [sp, #100]	@ 0x64
 800cbe6:	785a      	ldrb	r2, [r3, #1]
 800cbe8:	b37f      	cbz	r7, 800cc4a <_strtod_l+0x232>
 800cbea:	4681      	mov	r9, r0
 800cbec:	463d      	mov	r5, r7
 800cbee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800cbf2:	2b09      	cmp	r3, #9
 800cbf4:	d912      	bls.n	800cc1c <_strtod_l+0x204>
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	e7c4      	b.n	800cb84 <_strtod_l+0x16c>
 800cbfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cbfc:	1c5a      	adds	r2, r3, #1
 800cbfe:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc00:	785a      	ldrb	r2, [r3, #1]
 800cc02:	3001      	adds	r0, #1
 800cc04:	2a30      	cmp	r2, #48	@ 0x30
 800cc06:	d0f8      	beq.n	800cbfa <_strtod_l+0x1e2>
 800cc08:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800cc0c:	2b08      	cmp	r3, #8
 800cc0e:	f200 84d3 	bhi.w	800d5b8 <_strtod_l+0xba0>
 800cc12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc14:	930c      	str	r3, [sp, #48]	@ 0x30
 800cc16:	4681      	mov	r9, r0
 800cc18:	2000      	movs	r0, #0
 800cc1a:	4605      	mov	r5, r0
 800cc1c:	3a30      	subs	r2, #48	@ 0x30
 800cc1e:	f100 0301 	add.w	r3, r0, #1
 800cc22:	d02a      	beq.n	800cc7a <_strtod_l+0x262>
 800cc24:	4499      	add	r9, r3
 800cc26:	eb00 0c05 	add.w	ip, r0, r5
 800cc2a:	462b      	mov	r3, r5
 800cc2c:	210a      	movs	r1, #10
 800cc2e:	4563      	cmp	r3, ip
 800cc30:	d10d      	bne.n	800cc4e <_strtod_l+0x236>
 800cc32:	1c69      	adds	r1, r5, #1
 800cc34:	4401      	add	r1, r0
 800cc36:	4428      	add	r0, r5
 800cc38:	2808      	cmp	r0, #8
 800cc3a:	dc16      	bgt.n	800cc6a <_strtod_l+0x252>
 800cc3c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cc3e:	230a      	movs	r3, #10
 800cc40:	fb03 2300 	mla	r3, r3, r0, r2
 800cc44:	930a      	str	r3, [sp, #40]	@ 0x28
 800cc46:	2300      	movs	r3, #0
 800cc48:	e018      	b.n	800cc7c <_strtod_l+0x264>
 800cc4a:	4638      	mov	r0, r7
 800cc4c:	e7da      	b.n	800cc04 <_strtod_l+0x1ec>
 800cc4e:	2b08      	cmp	r3, #8
 800cc50:	f103 0301 	add.w	r3, r3, #1
 800cc54:	dc03      	bgt.n	800cc5e <_strtod_l+0x246>
 800cc56:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800cc58:	434e      	muls	r6, r1
 800cc5a:	960a      	str	r6, [sp, #40]	@ 0x28
 800cc5c:	e7e7      	b.n	800cc2e <_strtod_l+0x216>
 800cc5e:	2b10      	cmp	r3, #16
 800cc60:	bfde      	ittt	le
 800cc62:	9e08      	ldrle	r6, [sp, #32]
 800cc64:	434e      	mulle	r6, r1
 800cc66:	9608      	strle	r6, [sp, #32]
 800cc68:	e7e1      	b.n	800cc2e <_strtod_l+0x216>
 800cc6a:	280f      	cmp	r0, #15
 800cc6c:	dceb      	bgt.n	800cc46 <_strtod_l+0x22e>
 800cc6e:	9808      	ldr	r0, [sp, #32]
 800cc70:	230a      	movs	r3, #10
 800cc72:	fb03 2300 	mla	r3, r3, r0, r2
 800cc76:	9308      	str	r3, [sp, #32]
 800cc78:	e7e5      	b.n	800cc46 <_strtod_l+0x22e>
 800cc7a:	4629      	mov	r1, r5
 800cc7c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cc7e:	1c50      	adds	r0, r2, #1
 800cc80:	9019      	str	r0, [sp, #100]	@ 0x64
 800cc82:	7852      	ldrb	r2, [r2, #1]
 800cc84:	4618      	mov	r0, r3
 800cc86:	460d      	mov	r5, r1
 800cc88:	e7b1      	b.n	800cbee <_strtod_l+0x1d6>
 800cc8a:	f04f 0900 	mov.w	r9, #0
 800cc8e:	2301      	movs	r3, #1
 800cc90:	e77d      	b.n	800cb8e <_strtod_l+0x176>
 800cc92:	f04f 0c00 	mov.w	ip, #0
 800cc96:	1ca2      	adds	r2, r4, #2
 800cc98:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc9a:	78a2      	ldrb	r2, [r4, #2]
 800cc9c:	e785      	b.n	800cbaa <_strtod_l+0x192>
 800cc9e:	f04f 0c01 	mov.w	ip, #1
 800cca2:	e7f8      	b.n	800cc96 <_strtod_l+0x27e>
 800cca4:	08011a24 	.word	0x08011a24
 800cca8:	08011a0c 	.word	0x08011a0c
 800ccac:	7ff00000 	.word	0x7ff00000
 800ccb0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ccb2:	1c51      	adds	r1, r2, #1
 800ccb4:	9119      	str	r1, [sp, #100]	@ 0x64
 800ccb6:	7852      	ldrb	r2, [r2, #1]
 800ccb8:	2a30      	cmp	r2, #48	@ 0x30
 800ccba:	d0f9      	beq.n	800ccb0 <_strtod_l+0x298>
 800ccbc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ccc0:	2908      	cmp	r1, #8
 800ccc2:	f63f af78 	bhi.w	800cbb6 <_strtod_l+0x19e>
 800ccc6:	3a30      	subs	r2, #48	@ 0x30
 800ccc8:	920e      	str	r2, [sp, #56]	@ 0x38
 800ccca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cccc:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ccce:	f04f 080a 	mov.w	r8, #10
 800ccd2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ccd4:	1c56      	adds	r6, r2, #1
 800ccd6:	9619      	str	r6, [sp, #100]	@ 0x64
 800ccd8:	7852      	ldrb	r2, [r2, #1]
 800ccda:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ccde:	f1be 0f09 	cmp.w	lr, #9
 800cce2:	d939      	bls.n	800cd58 <_strtod_l+0x340>
 800cce4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cce6:	1a76      	subs	r6, r6, r1
 800cce8:	2e08      	cmp	r6, #8
 800ccea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800ccee:	dc03      	bgt.n	800ccf8 <_strtod_l+0x2e0>
 800ccf0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ccf2:	4588      	cmp	r8, r1
 800ccf4:	bfa8      	it	ge
 800ccf6:	4688      	movge	r8, r1
 800ccf8:	f1bc 0f00 	cmp.w	ip, #0
 800ccfc:	d001      	beq.n	800cd02 <_strtod_l+0x2ea>
 800ccfe:	f1c8 0800 	rsb	r8, r8, #0
 800cd02:	2d00      	cmp	r5, #0
 800cd04:	d14e      	bne.n	800cda4 <_strtod_l+0x38c>
 800cd06:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cd08:	4308      	orrs	r0, r1
 800cd0a:	f47f aebe 	bne.w	800ca8a <_strtod_l+0x72>
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	f47f aed6 	bne.w	800cac0 <_strtod_l+0xa8>
 800cd14:	2a69      	cmp	r2, #105	@ 0x69
 800cd16:	d028      	beq.n	800cd6a <_strtod_l+0x352>
 800cd18:	dc25      	bgt.n	800cd66 <_strtod_l+0x34e>
 800cd1a:	2a49      	cmp	r2, #73	@ 0x49
 800cd1c:	d025      	beq.n	800cd6a <_strtod_l+0x352>
 800cd1e:	2a4e      	cmp	r2, #78	@ 0x4e
 800cd20:	f47f aece 	bne.w	800cac0 <_strtod_l+0xa8>
 800cd24:	499b      	ldr	r1, [pc, #620]	@ (800cf94 <_strtod_l+0x57c>)
 800cd26:	a819      	add	r0, sp, #100	@ 0x64
 800cd28:	f002 ff0a 	bl	800fb40 <__match>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	f43f aec7 	beq.w	800cac0 <_strtod_l+0xa8>
 800cd32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	2b28      	cmp	r3, #40	@ 0x28
 800cd38:	d12e      	bne.n	800cd98 <_strtod_l+0x380>
 800cd3a:	4997      	ldr	r1, [pc, #604]	@ (800cf98 <_strtod_l+0x580>)
 800cd3c:	aa1c      	add	r2, sp, #112	@ 0x70
 800cd3e:	a819      	add	r0, sp, #100	@ 0x64
 800cd40:	f002 ff12 	bl	800fb68 <__hexnan>
 800cd44:	2805      	cmp	r0, #5
 800cd46:	d127      	bne.n	800cd98 <_strtod_l+0x380>
 800cd48:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cd4a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cd4e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cd52:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cd56:	e698      	b.n	800ca8a <_strtod_l+0x72>
 800cd58:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cd5a:	fb08 2101 	mla	r1, r8, r1, r2
 800cd5e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cd62:	920e      	str	r2, [sp, #56]	@ 0x38
 800cd64:	e7b5      	b.n	800ccd2 <_strtod_l+0x2ba>
 800cd66:	2a6e      	cmp	r2, #110	@ 0x6e
 800cd68:	e7da      	b.n	800cd20 <_strtod_l+0x308>
 800cd6a:	498c      	ldr	r1, [pc, #560]	@ (800cf9c <_strtod_l+0x584>)
 800cd6c:	a819      	add	r0, sp, #100	@ 0x64
 800cd6e:	f002 fee7 	bl	800fb40 <__match>
 800cd72:	2800      	cmp	r0, #0
 800cd74:	f43f aea4 	beq.w	800cac0 <_strtod_l+0xa8>
 800cd78:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd7a:	4989      	ldr	r1, [pc, #548]	@ (800cfa0 <_strtod_l+0x588>)
 800cd7c:	3b01      	subs	r3, #1
 800cd7e:	a819      	add	r0, sp, #100	@ 0x64
 800cd80:	9319      	str	r3, [sp, #100]	@ 0x64
 800cd82:	f002 fedd 	bl	800fb40 <__match>
 800cd86:	b910      	cbnz	r0, 800cd8e <_strtod_l+0x376>
 800cd88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	9319      	str	r3, [sp, #100]	@ 0x64
 800cd8e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800cfb0 <_strtod_l+0x598>
 800cd92:	f04f 0a00 	mov.w	sl, #0
 800cd96:	e678      	b.n	800ca8a <_strtod_l+0x72>
 800cd98:	4882      	ldr	r0, [pc, #520]	@ (800cfa4 <_strtod_l+0x58c>)
 800cd9a:	f001 fd85 	bl	800e8a8 <nan>
 800cd9e:	ec5b ab10 	vmov	sl, fp, d0
 800cda2:	e672      	b.n	800ca8a <_strtod_l+0x72>
 800cda4:	eba8 0309 	sub.w	r3, r8, r9
 800cda8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cdaa:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdac:	2f00      	cmp	r7, #0
 800cdae:	bf08      	it	eq
 800cdb0:	462f      	moveq	r7, r5
 800cdb2:	2d10      	cmp	r5, #16
 800cdb4:	462c      	mov	r4, r5
 800cdb6:	bfa8      	it	ge
 800cdb8:	2410      	movge	r4, #16
 800cdba:	f7f3 fbab 	bl	8000514 <__aeabi_ui2d>
 800cdbe:	2d09      	cmp	r5, #9
 800cdc0:	4682      	mov	sl, r0
 800cdc2:	468b      	mov	fp, r1
 800cdc4:	dc13      	bgt.n	800cdee <_strtod_l+0x3d6>
 800cdc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	f43f ae5e 	beq.w	800ca8a <_strtod_l+0x72>
 800cdce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cdd0:	dd78      	ble.n	800cec4 <_strtod_l+0x4ac>
 800cdd2:	2b16      	cmp	r3, #22
 800cdd4:	dc5f      	bgt.n	800ce96 <_strtod_l+0x47e>
 800cdd6:	4974      	ldr	r1, [pc, #464]	@ (800cfa8 <_strtod_l+0x590>)
 800cdd8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cde0:	4652      	mov	r2, sl
 800cde2:	465b      	mov	r3, fp
 800cde4:	f7f3 fc10 	bl	8000608 <__aeabi_dmul>
 800cde8:	4682      	mov	sl, r0
 800cdea:	468b      	mov	fp, r1
 800cdec:	e64d      	b.n	800ca8a <_strtod_l+0x72>
 800cdee:	4b6e      	ldr	r3, [pc, #440]	@ (800cfa8 <_strtod_l+0x590>)
 800cdf0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cdf4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cdf8:	f7f3 fc06 	bl	8000608 <__aeabi_dmul>
 800cdfc:	4682      	mov	sl, r0
 800cdfe:	9808      	ldr	r0, [sp, #32]
 800ce00:	468b      	mov	fp, r1
 800ce02:	f7f3 fb87 	bl	8000514 <__aeabi_ui2d>
 800ce06:	4602      	mov	r2, r0
 800ce08:	460b      	mov	r3, r1
 800ce0a:	4650      	mov	r0, sl
 800ce0c:	4659      	mov	r1, fp
 800ce0e:	f7f3 fa45 	bl	800029c <__adddf3>
 800ce12:	2d0f      	cmp	r5, #15
 800ce14:	4682      	mov	sl, r0
 800ce16:	468b      	mov	fp, r1
 800ce18:	ddd5      	ble.n	800cdc6 <_strtod_l+0x3ae>
 800ce1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ce1c:	1b2c      	subs	r4, r5, r4
 800ce1e:	441c      	add	r4, r3
 800ce20:	2c00      	cmp	r4, #0
 800ce22:	f340 8096 	ble.w	800cf52 <_strtod_l+0x53a>
 800ce26:	f014 030f 	ands.w	r3, r4, #15
 800ce2a:	d00a      	beq.n	800ce42 <_strtod_l+0x42a>
 800ce2c:	495e      	ldr	r1, [pc, #376]	@ (800cfa8 <_strtod_l+0x590>)
 800ce2e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ce32:	4652      	mov	r2, sl
 800ce34:	465b      	mov	r3, fp
 800ce36:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce3a:	f7f3 fbe5 	bl	8000608 <__aeabi_dmul>
 800ce3e:	4682      	mov	sl, r0
 800ce40:	468b      	mov	fp, r1
 800ce42:	f034 040f 	bics.w	r4, r4, #15
 800ce46:	d073      	beq.n	800cf30 <_strtod_l+0x518>
 800ce48:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ce4c:	dd48      	ble.n	800cee0 <_strtod_l+0x4c8>
 800ce4e:	2400      	movs	r4, #0
 800ce50:	46a0      	mov	r8, r4
 800ce52:	940a      	str	r4, [sp, #40]	@ 0x28
 800ce54:	46a1      	mov	r9, r4
 800ce56:	9a05      	ldr	r2, [sp, #20]
 800ce58:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cfb0 <_strtod_l+0x598>
 800ce5c:	2322      	movs	r3, #34	@ 0x22
 800ce5e:	6013      	str	r3, [r2, #0]
 800ce60:	f04f 0a00 	mov.w	sl, #0
 800ce64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	f43f ae0f 	beq.w	800ca8a <_strtod_l+0x72>
 800ce6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ce6e:	9805      	ldr	r0, [sp, #20]
 800ce70:	f003 f81e 	bl	800feb0 <_Bfree>
 800ce74:	9805      	ldr	r0, [sp, #20]
 800ce76:	4649      	mov	r1, r9
 800ce78:	f003 f81a 	bl	800feb0 <_Bfree>
 800ce7c:	9805      	ldr	r0, [sp, #20]
 800ce7e:	4641      	mov	r1, r8
 800ce80:	f003 f816 	bl	800feb0 <_Bfree>
 800ce84:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ce86:	9805      	ldr	r0, [sp, #20]
 800ce88:	f003 f812 	bl	800feb0 <_Bfree>
 800ce8c:	9805      	ldr	r0, [sp, #20]
 800ce8e:	4621      	mov	r1, r4
 800ce90:	f003 f80e 	bl	800feb0 <_Bfree>
 800ce94:	e5f9      	b.n	800ca8a <_strtod_l+0x72>
 800ce96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce98:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ce9c:	4293      	cmp	r3, r2
 800ce9e:	dbbc      	blt.n	800ce1a <_strtod_l+0x402>
 800cea0:	4c41      	ldr	r4, [pc, #260]	@ (800cfa8 <_strtod_l+0x590>)
 800cea2:	f1c5 050f 	rsb	r5, r5, #15
 800cea6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ceaa:	4652      	mov	r2, sl
 800ceac:	465b      	mov	r3, fp
 800ceae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ceb2:	f7f3 fba9 	bl	8000608 <__aeabi_dmul>
 800ceb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceb8:	1b5d      	subs	r5, r3, r5
 800ceba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cebe:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cec2:	e78f      	b.n	800cde4 <_strtod_l+0x3cc>
 800cec4:	3316      	adds	r3, #22
 800cec6:	dba8      	blt.n	800ce1a <_strtod_l+0x402>
 800cec8:	4b37      	ldr	r3, [pc, #220]	@ (800cfa8 <_strtod_l+0x590>)
 800ceca:	eba9 0808 	sub.w	r8, r9, r8
 800cece:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800ced2:	e9d8 2300 	ldrd	r2, r3, [r8]
 800ced6:	4650      	mov	r0, sl
 800ced8:	4659      	mov	r1, fp
 800ceda:	f7f3 fcbf 	bl	800085c <__aeabi_ddiv>
 800cede:	e783      	b.n	800cde8 <_strtod_l+0x3d0>
 800cee0:	4b32      	ldr	r3, [pc, #200]	@ (800cfac <_strtod_l+0x594>)
 800cee2:	9308      	str	r3, [sp, #32]
 800cee4:	2300      	movs	r3, #0
 800cee6:	1124      	asrs	r4, r4, #4
 800cee8:	4650      	mov	r0, sl
 800ceea:	4659      	mov	r1, fp
 800ceec:	461e      	mov	r6, r3
 800ceee:	2c01      	cmp	r4, #1
 800cef0:	dc21      	bgt.n	800cf36 <_strtod_l+0x51e>
 800cef2:	b10b      	cbz	r3, 800cef8 <_strtod_l+0x4e0>
 800cef4:	4682      	mov	sl, r0
 800cef6:	468b      	mov	fp, r1
 800cef8:	492c      	ldr	r1, [pc, #176]	@ (800cfac <_strtod_l+0x594>)
 800cefa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cefe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cf02:	4652      	mov	r2, sl
 800cf04:	465b      	mov	r3, fp
 800cf06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf0a:	f7f3 fb7d 	bl	8000608 <__aeabi_dmul>
 800cf0e:	4b28      	ldr	r3, [pc, #160]	@ (800cfb0 <_strtod_l+0x598>)
 800cf10:	460a      	mov	r2, r1
 800cf12:	400b      	ands	r3, r1
 800cf14:	4927      	ldr	r1, [pc, #156]	@ (800cfb4 <_strtod_l+0x59c>)
 800cf16:	428b      	cmp	r3, r1
 800cf18:	4682      	mov	sl, r0
 800cf1a:	d898      	bhi.n	800ce4e <_strtod_l+0x436>
 800cf1c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800cf20:	428b      	cmp	r3, r1
 800cf22:	bf86      	itte	hi
 800cf24:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800cfb8 <_strtod_l+0x5a0>
 800cf28:	f04f 3aff 	movhi.w	sl, #4294967295
 800cf2c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cf30:	2300      	movs	r3, #0
 800cf32:	9308      	str	r3, [sp, #32]
 800cf34:	e07a      	b.n	800d02c <_strtod_l+0x614>
 800cf36:	07e2      	lsls	r2, r4, #31
 800cf38:	d505      	bpl.n	800cf46 <_strtod_l+0x52e>
 800cf3a:	9b08      	ldr	r3, [sp, #32]
 800cf3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf40:	f7f3 fb62 	bl	8000608 <__aeabi_dmul>
 800cf44:	2301      	movs	r3, #1
 800cf46:	9a08      	ldr	r2, [sp, #32]
 800cf48:	3208      	adds	r2, #8
 800cf4a:	3601      	adds	r6, #1
 800cf4c:	1064      	asrs	r4, r4, #1
 800cf4e:	9208      	str	r2, [sp, #32]
 800cf50:	e7cd      	b.n	800ceee <_strtod_l+0x4d6>
 800cf52:	d0ed      	beq.n	800cf30 <_strtod_l+0x518>
 800cf54:	4264      	negs	r4, r4
 800cf56:	f014 020f 	ands.w	r2, r4, #15
 800cf5a:	d00a      	beq.n	800cf72 <_strtod_l+0x55a>
 800cf5c:	4b12      	ldr	r3, [pc, #72]	@ (800cfa8 <_strtod_l+0x590>)
 800cf5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf62:	4650      	mov	r0, sl
 800cf64:	4659      	mov	r1, fp
 800cf66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf6a:	f7f3 fc77 	bl	800085c <__aeabi_ddiv>
 800cf6e:	4682      	mov	sl, r0
 800cf70:	468b      	mov	fp, r1
 800cf72:	1124      	asrs	r4, r4, #4
 800cf74:	d0dc      	beq.n	800cf30 <_strtod_l+0x518>
 800cf76:	2c1f      	cmp	r4, #31
 800cf78:	dd20      	ble.n	800cfbc <_strtod_l+0x5a4>
 800cf7a:	2400      	movs	r4, #0
 800cf7c:	46a0      	mov	r8, r4
 800cf7e:	940a      	str	r4, [sp, #40]	@ 0x28
 800cf80:	46a1      	mov	r9, r4
 800cf82:	9a05      	ldr	r2, [sp, #20]
 800cf84:	2322      	movs	r3, #34	@ 0x22
 800cf86:	f04f 0a00 	mov.w	sl, #0
 800cf8a:	f04f 0b00 	mov.w	fp, #0
 800cf8e:	6013      	str	r3, [r2, #0]
 800cf90:	e768      	b.n	800ce64 <_strtod_l+0x44c>
 800cf92:	bf00      	nop
 800cf94:	08011b6e 	.word	0x08011b6e
 800cf98:	08011a10 	.word	0x08011a10
 800cf9c:	08011b66 	.word	0x08011b66
 800cfa0:	08011be1 	.word	0x08011be1
 800cfa4:	08011bdd 	.word	0x08011bdd
 800cfa8:	08011d58 	.word	0x08011d58
 800cfac:	08011d30 	.word	0x08011d30
 800cfb0:	7ff00000 	.word	0x7ff00000
 800cfb4:	7ca00000 	.word	0x7ca00000
 800cfb8:	7fefffff 	.word	0x7fefffff
 800cfbc:	f014 0310 	ands.w	r3, r4, #16
 800cfc0:	bf18      	it	ne
 800cfc2:	236a      	movne	r3, #106	@ 0x6a
 800cfc4:	4ea9      	ldr	r6, [pc, #676]	@ (800d26c <_strtod_l+0x854>)
 800cfc6:	9308      	str	r3, [sp, #32]
 800cfc8:	4650      	mov	r0, sl
 800cfca:	4659      	mov	r1, fp
 800cfcc:	2300      	movs	r3, #0
 800cfce:	07e2      	lsls	r2, r4, #31
 800cfd0:	d504      	bpl.n	800cfdc <_strtod_l+0x5c4>
 800cfd2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cfd6:	f7f3 fb17 	bl	8000608 <__aeabi_dmul>
 800cfda:	2301      	movs	r3, #1
 800cfdc:	1064      	asrs	r4, r4, #1
 800cfde:	f106 0608 	add.w	r6, r6, #8
 800cfe2:	d1f4      	bne.n	800cfce <_strtod_l+0x5b6>
 800cfe4:	b10b      	cbz	r3, 800cfea <_strtod_l+0x5d2>
 800cfe6:	4682      	mov	sl, r0
 800cfe8:	468b      	mov	fp, r1
 800cfea:	9b08      	ldr	r3, [sp, #32]
 800cfec:	b1b3      	cbz	r3, 800d01c <_strtod_l+0x604>
 800cfee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cff2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	4659      	mov	r1, fp
 800cffa:	dd0f      	ble.n	800d01c <_strtod_l+0x604>
 800cffc:	2b1f      	cmp	r3, #31
 800cffe:	dd55      	ble.n	800d0ac <_strtod_l+0x694>
 800d000:	2b34      	cmp	r3, #52	@ 0x34
 800d002:	bfde      	ittt	le
 800d004:	f04f 33ff 	movle.w	r3, #4294967295
 800d008:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d00c:	4093      	lslle	r3, r2
 800d00e:	f04f 0a00 	mov.w	sl, #0
 800d012:	bfcc      	ite	gt
 800d014:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d018:	ea03 0b01 	andle.w	fp, r3, r1
 800d01c:	2200      	movs	r2, #0
 800d01e:	2300      	movs	r3, #0
 800d020:	4650      	mov	r0, sl
 800d022:	4659      	mov	r1, fp
 800d024:	f7f3 fd58 	bl	8000ad8 <__aeabi_dcmpeq>
 800d028:	2800      	cmp	r0, #0
 800d02a:	d1a6      	bne.n	800cf7a <_strtod_l+0x562>
 800d02c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d02e:	9300      	str	r3, [sp, #0]
 800d030:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d032:	9805      	ldr	r0, [sp, #20]
 800d034:	462b      	mov	r3, r5
 800d036:	463a      	mov	r2, r7
 800d038:	f002 ffa2 	bl	800ff80 <__s2b>
 800d03c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d03e:	2800      	cmp	r0, #0
 800d040:	f43f af05 	beq.w	800ce4e <_strtod_l+0x436>
 800d044:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d046:	2a00      	cmp	r2, #0
 800d048:	eba9 0308 	sub.w	r3, r9, r8
 800d04c:	bfa8      	it	ge
 800d04e:	2300      	movge	r3, #0
 800d050:	9312      	str	r3, [sp, #72]	@ 0x48
 800d052:	2400      	movs	r4, #0
 800d054:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d058:	9316      	str	r3, [sp, #88]	@ 0x58
 800d05a:	46a0      	mov	r8, r4
 800d05c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d05e:	9805      	ldr	r0, [sp, #20]
 800d060:	6859      	ldr	r1, [r3, #4]
 800d062:	f002 fee5 	bl	800fe30 <_Balloc>
 800d066:	4681      	mov	r9, r0
 800d068:	2800      	cmp	r0, #0
 800d06a:	f43f aef4 	beq.w	800ce56 <_strtod_l+0x43e>
 800d06e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d070:	691a      	ldr	r2, [r3, #16]
 800d072:	3202      	adds	r2, #2
 800d074:	f103 010c 	add.w	r1, r3, #12
 800d078:	0092      	lsls	r2, r2, #2
 800d07a:	300c      	adds	r0, #12
 800d07c:	f001 fc03 	bl	800e886 <memcpy>
 800d080:	ec4b ab10 	vmov	d0, sl, fp
 800d084:	9805      	ldr	r0, [sp, #20]
 800d086:	aa1c      	add	r2, sp, #112	@ 0x70
 800d088:	a91b      	add	r1, sp, #108	@ 0x6c
 800d08a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d08e:	f003 fab3 	bl	80105f8 <__d2b>
 800d092:	901a      	str	r0, [sp, #104]	@ 0x68
 800d094:	2800      	cmp	r0, #0
 800d096:	f43f aede 	beq.w	800ce56 <_strtod_l+0x43e>
 800d09a:	9805      	ldr	r0, [sp, #20]
 800d09c:	2101      	movs	r1, #1
 800d09e:	f003 f805 	bl	80100ac <__i2b>
 800d0a2:	4680      	mov	r8, r0
 800d0a4:	b948      	cbnz	r0, 800d0ba <_strtod_l+0x6a2>
 800d0a6:	f04f 0800 	mov.w	r8, #0
 800d0aa:	e6d4      	b.n	800ce56 <_strtod_l+0x43e>
 800d0ac:	f04f 32ff 	mov.w	r2, #4294967295
 800d0b0:	fa02 f303 	lsl.w	r3, r2, r3
 800d0b4:	ea03 0a0a 	and.w	sl, r3, sl
 800d0b8:	e7b0      	b.n	800d01c <_strtod_l+0x604>
 800d0ba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d0bc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d0be:	2d00      	cmp	r5, #0
 800d0c0:	bfab      	itete	ge
 800d0c2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d0c4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d0c6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d0c8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d0ca:	bfac      	ite	ge
 800d0cc:	18ef      	addge	r7, r5, r3
 800d0ce:	1b5e      	sublt	r6, r3, r5
 800d0d0:	9b08      	ldr	r3, [sp, #32]
 800d0d2:	1aed      	subs	r5, r5, r3
 800d0d4:	4415      	add	r5, r2
 800d0d6:	4b66      	ldr	r3, [pc, #408]	@ (800d270 <_strtod_l+0x858>)
 800d0d8:	3d01      	subs	r5, #1
 800d0da:	429d      	cmp	r5, r3
 800d0dc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d0e0:	da50      	bge.n	800d184 <_strtod_l+0x76c>
 800d0e2:	1b5b      	subs	r3, r3, r5
 800d0e4:	2b1f      	cmp	r3, #31
 800d0e6:	eba2 0203 	sub.w	r2, r2, r3
 800d0ea:	f04f 0101 	mov.w	r1, #1
 800d0ee:	dc3d      	bgt.n	800d16c <_strtod_l+0x754>
 800d0f0:	fa01 f303 	lsl.w	r3, r1, r3
 800d0f4:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	9310      	str	r3, [sp, #64]	@ 0x40
 800d0fa:	18bd      	adds	r5, r7, r2
 800d0fc:	9b08      	ldr	r3, [sp, #32]
 800d0fe:	42af      	cmp	r7, r5
 800d100:	4416      	add	r6, r2
 800d102:	441e      	add	r6, r3
 800d104:	463b      	mov	r3, r7
 800d106:	bfa8      	it	ge
 800d108:	462b      	movge	r3, r5
 800d10a:	42b3      	cmp	r3, r6
 800d10c:	bfa8      	it	ge
 800d10e:	4633      	movge	r3, r6
 800d110:	2b00      	cmp	r3, #0
 800d112:	bfc2      	ittt	gt
 800d114:	1aed      	subgt	r5, r5, r3
 800d116:	1af6      	subgt	r6, r6, r3
 800d118:	1aff      	subgt	r7, r7, r3
 800d11a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	dd16      	ble.n	800d14e <_strtod_l+0x736>
 800d120:	4641      	mov	r1, r8
 800d122:	9805      	ldr	r0, [sp, #20]
 800d124:	461a      	mov	r2, r3
 800d126:	f003 f881 	bl	801022c <__pow5mult>
 800d12a:	4680      	mov	r8, r0
 800d12c:	2800      	cmp	r0, #0
 800d12e:	d0ba      	beq.n	800d0a6 <_strtod_l+0x68e>
 800d130:	4601      	mov	r1, r0
 800d132:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d134:	9805      	ldr	r0, [sp, #20]
 800d136:	f002 ffcf 	bl	80100d8 <__multiply>
 800d13a:	900e      	str	r0, [sp, #56]	@ 0x38
 800d13c:	2800      	cmp	r0, #0
 800d13e:	f43f ae8a 	beq.w	800ce56 <_strtod_l+0x43e>
 800d142:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d144:	9805      	ldr	r0, [sp, #20]
 800d146:	f002 feb3 	bl	800feb0 <_Bfree>
 800d14a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d14c:	931a      	str	r3, [sp, #104]	@ 0x68
 800d14e:	2d00      	cmp	r5, #0
 800d150:	dc1d      	bgt.n	800d18e <_strtod_l+0x776>
 800d152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d154:	2b00      	cmp	r3, #0
 800d156:	dd23      	ble.n	800d1a0 <_strtod_l+0x788>
 800d158:	4649      	mov	r1, r9
 800d15a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d15c:	9805      	ldr	r0, [sp, #20]
 800d15e:	f003 f865 	bl	801022c <__pow5mult>
 800d162:	4681      	mov	r9, r0
 800d164:	b9e0      	cbnz	r0, 800d1a0 <_strtod_l+0x788>
 800d166:	f04f 0900 	mov.w	r9, #0
 800d16a:	e674      	b.n	800ce56 <_strtod_l+0x43e>
 800d16c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d170:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d174:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d178:	35e2      	adds	r5, #226	@ 0xe2
 800d17a:	fa01 f305 	lsl.w	r3, r1, r5
 800d17e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d180:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d182:	e7ba      	b.n	800d0fa <_strtod_l+0x6e2>
 800d184:	2300      	movs	r3, #0
 800d186:	9310      	str	r3, [sp, #64]	@ 0x40
 800d188:	2301      	movs	r3, #1
 800d18a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d18c:	e7b5      	b.n	800d0fa <_strtod_l+0x6e2>
 800d18e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d190:	9805      	ldr	r0, [sp, #20]
 800d192:	462a      	mov	r2, r5
 800d194:	f003 f8a4 	bl	80102e0 <__lshift>
 800d198:	901a      	str	r0, [sp, #104]	@ 0x68
 800d19a:	2800      	cmp	r0, #0
 800d19c:	d1d9      	bne.n	800d152 <_strtod_l+0x73a>
 800d19e:	e65a      	b.n	800ce56 <_strtod_l+0x43e>
 800d1a0:	2e00      	cmp	r6, #0
 800d1a2:	dd07      	ble.n	800d1b4 <_strtod_l+0x79c>
 800d1a4:	4649      	mov	r1, r9
 800d1a6:	9805      	ldr	r0, [sp, #20]
 800d1a8:	4632      	mov	r2, r6
 800d1aa:	f003 f899 	bl	80102e0 <__lshift>
 800d1ae:	4681      	mov	r9, r0
 800d1b0:	2800      	cmp	r0, #0
 800d1b2:	d0d8      	beq.n	800d166 <_strtod_l+0x74e>
 800d1b4:	2f00      	cmp	r7, #0
 800d1b6:	dd08      	ble.n	800d1ca <_strtod_l+0x7b2>
 800d1b8:	4641      	mov	r1, r8
 800d1ba:	9805      	ldr	r0, [sp, #20]
 800d1bc:	463a      	mov	r2, r7
 800d1be:	f003 f88f 	bl	80102e0 <__lshift>
 800d1c2:	4680      	mov	r8, r0
 800d1c4:	2800      	cmp	r0, #0
 800d1c6:	f43f ae46 	beq.w	800ce56 <_strtod_l+0x43e>
 800d1ca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1cc:	9805      	ldr	r0, [sp, #20]
 800d1ce:	464a      	mov	r2, r9
 800d1d0:	f003 f90e 	bl	80103f0 <__mdiff>
 800d1d4:	4604      	mov	r4, r0
 800d1d6:	2800      	cmp	r0, #0
 800d1d8:	f43f ae3d 	beq.w	800ce56 <_strtod_l+0x43e>
 800d1dc:	68c3      	ldr	r3, [r0, #12]
 800d1de:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	60c3      	str	r3, [r0, #12]
 800d1e4:	4641      	mov	r1, r8
 800d1e6:	f003 f8e7 	bl	80103b8 <__mcmp>
 800d1ea:	2800      	cmp	r0, #0
 800d1ec:	da46      	bge.n	800d27c <_strtod_l+0x864>
 800d1ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d1f0:	ea53 030a 	orrs.w	r3, r3, sl
 800d1f4:	d16c      	bne.n	800d2d0 <_strtod_l+0x8b8>
 800d1f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d168      	bne.n	800d2d0 <_strtod_l+0x8b8>
 800d1fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d202:	0d1b      	lsrs	r3, r3, #20
 800d204:	051b      	lsls	r3, r3, #20
 800d206:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d20a:	d961      	bls.n	800d2d0 <_strtod_l+0x8b8>
 800d20c:	6963      	ldr	r3, [r4, #20]
 800d20e:	b913      	cbnz	r3, 800d216 <_strtod_l+0x7fe>
 800d210:	6923      	ldr	r3, [r4, #16]
 800d212:	2b01      	cmp	r3, #1
 800d214:	dd5c      	ble.n	800d2d0 <_strtod_l+0x8b8>
 800d216:	4621      	mov	r1, r4
 800d218:	2201      	movs	r2, #1
 800d21a:	9805      	ldr	r0, [sp, #20]
 800d21c:	f003 f860 	bl	80102e0 <__lshift>
 800d220:	4641      	mov	r1, r8
 800d222:	4604      	mov	r4, r0
 800d224:	f003 f8c8 	bl	80103b8 <__mcmp>
 800d228:	2800      	cmp	r0, #0
 800d22a:	dd51      	ble.n	800d2d0 <_strtod_l+0x8b8>
 800d22c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d230:	9a08      	ldr	r2, [sp, #32]
 800d232:	0d1b      	lsrs	r3, r3, #20
 800d234:	051b      	lsls	r3, r3, #20
 800d236:	2a00      	cmp	r2, #0
 800d238:	d06b      	beq.n	800d312 <_strtod_l+0x8fa>
 800d23a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d23e:	d868      	bhi.n	800d312 <_strtod_l+0x8fa>
 800d240:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d244:	f67f ae9d 	bls.w	800cf82 <_strtod_l+0x56a>
 800d248:	4b0a      	ldr	r3, [pc, #40]	@ (800d274 <_strtod_l+0x85c>)
 800d24a:	4650      	mov	r0, sl
 800d24c:	4659      	mov	r1, fp
 800d24e:	2200      	movs	r2, #0
 800d250:	f7f3 f9da 	bl	8000608 <__aeabi_dmul>
 800d254:	4b08      	ldr	r3, [pc, #32]	@ (800d278 <_strtod_l+0x860>)
 800d256:	400b      	ands	r3, r1
 800d258:	4682      	mov	sl, r0
 800d25a:	468b      	mov	fp, r1
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	f47f ae05 	bne.w	800ce6c <_strtod_l+0x454>
 800d262:	9a05      	ldr	r2, [sp, #20]
 800d264:	2322      	movs	r3, #34	@ 0x22
 800d266:	6013      	str	r3, [r2, #0]
 800d268:	e600      	b.n	800ce6c <_strtod_l+0x454>
 800d26a:	bf00      	nop
 800d26c:	08011a38 	.word	0x08011a38
 800d270:	fffffc02 	.word	0xfffffc02
 800d274:	39500000 	.word	0x39500000
 800d278:	7ff00000 	.word	0x7ff00000
 800d27c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d280:	d165      	bne.n	800d34e <_strtod_l+0x936>
 800d282:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d284:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d288:	b35a      	cbz	r2, 800d2e2 <_strtod_l+0x8ca>
 800d28a:	4a9f      	ldr	r2, [pc, #636]	@ (800d508 <_strtod_l+0xaf0>)
 800d28c:	4293      	cmp	r3, r2
 800d28e:	d12b      	bne.n	800d2e8 <_strtod_l+0x8d0>
 800d290:	9b08      	ldr	r3, [sp, #32]
 800d292:	4651      	mov	r1, sl
 800d294:	b303      	cbz	r3, 800d2d8 <_strtod_l+0x8c0>
 800d296:	4b9d      	ldr	r3, [pc, #628]	@ (800d50c <_strtod_l+0xaf4>)
 800d298:	465a      	mov	r2, fp
 800d29a:	4013      	ands	r3, r2
 800d29c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d2a0:	f04f 32ff 	mov.w	r2, #4294967295
 800d2a4:	d81b      	bhi.n	800d2de <_strtod_l+0x8c6>
 800d2a6:	0d1b      	lsrs	r3, r3, #20
 800d2a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d2ac:	fa02 f303 	lsl.w	r3, r2, r3
 800d2b0:	4299      	cmp	r1, r3
 800d2b2:	d119      	bne.n	800d2e8 <_strtod_l+0x8d0>
 800d2b4:	4b96      	ldr	r3, [pc, #600]	@ (800d510 <_strtod_l+0xaf8>)
 800d2b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d102      	bne.n	800d2c2 <_strtod_l+0x8aa>
 800d2bc:	3101      	adds	r1, #1
 800d2be:	f43f adca 	beq.w	800ce56 <_strtod_l+0x43e>
 800d2c2:	4b92      	ldr	r3, [pc, #584]	@ (800d50c <_strtod_l+0xaf4>)
 800d2c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2c6:	401a      	ands	r2, r3
 800d2c8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d2cc:	f04f 0a00 	mov.w	sl, #0
 800d2d0:	9b08      	ldr	r3, [sp, #32]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d1b8      	bne.n	800d248 <_strtod_l+0x830>
 800d2d6:	e5c9      	b.n	800ce6c <_strtod_l+0x454>
 800d2d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d2dc:	e7e8      	b.n	800d2b0 <_strtod_l+0x898>
 800d2de:	4613      	mov	r3, r2
 800d2e0:	e7e6      	b.n	800d2b0 <_strtod_l+0x898>
 800d2e2:	ea53 030a 	orrs.w	r3, r3, sl
 800d2e6:	d0a1      	beq.n	800d22c <_strtod_l+0x814>
 800d2e8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d2ea:	b1db      	cbz	r3, 800d324 <_strtod_l+0x90c>
 800d2ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d2ee:	4213      	tst	r3, r2
 800d2f0:	d0ee      	beq.n	800d2d0 <_strtod_l+0x8b8>
 800d2f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2f4:	9a08      	ldr	r2, [sp, #32]
 800d2f6:	4650      	mov	r0, sl
 800d2f8:	4659      	mov	r1, fp
 800d2fa:	b1bb      	cbz	r3, 800d32c <_strtod_l+0x914>
 800d2fc:	f7ff fb6c 	bl	800c9d8 <sulp>
 800d300:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d304:	ec53 2b10 	vmov	r2, r3, d0
 800d308:	f7f2 ffc8 	bl	800029c <__adddf3>
 800d30c:	4682      	mov	sl, r0
 800d30e:	468b      	mov	fp, r1
 800d310:	e7de      	b.n	800d2d0 <_strtod_l+0x8b8>
 800d312:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d316:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d31a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d31e:	f04f 3aff 	mov.w	sl, #4294967295
 800d322:	e7d5      	b.n	800d2d0 <_strtod_l+0x8b8>
 800d324:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d326:	ea13 0f0a 	tst.w	r3, sl
 800d32a:	e7e1      	b.n	800d2f0 <_strtod_l+0x8d8>
 800d32c:	f7ff fb54 	bl	800c9d8 <sulp>
 800d330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d334:	ec53 2b10 	vmov	r2, r3, d0
 800d338:	f7f2 ffae 	bl	8000298 <__aeabi_dsub>
 800d33c:	2200      	movs	r2, #0
 800d33e:	2300      	movs	r3, #0
 800d340:	4682      	mov	sl, r0
 800d342:	468b      	mov	fp, r1
 800d344:	f7f3 fbc8 	bl	8000ad8 <__aeabi_dcmpeq>
 800d348:	2800      	cmp	r0, #0
 800d34a:	d0c1      	beq.n	800d2d0 <_strtod_l+0x8b8>
 800d34c:	e619      	b.n	800cf82 <_strtod_l+0x56a>
 800d34e:	4641      	mov	r1, r8
 800d350:	4620      	mov	r0, r4
 800d352:	f003 f9a9 	bl	80106a8 <__ratio>
 800d356:	ec57 6b10 	vmov	r6, r7, d0
 800d35a:	2200      	movs	r2, #0
 800d35c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d360:	4630      	mov	r0, r6
 800d362:	4639      	mov	r1, r7
 800d364:	f7f3 fbcc 	bl	8000b00 <__aeabi_dcmple>
 800d368:	2800      	cmp	r0, #0
 800d36a:	d06f      	beq.n	800d44c <_strtod_l+0xa34>
 800d36c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d17a      	bne.n	800d468 <_strtod_l+0xa50>
 800d372:	f1ba 0f00 	cmp.w	sl, #0
 800d376:	d158      	bne.n	800d42a <_strtod_l+0xa12>
 800d378:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d37a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d15a      	bne.n	800d438 <_strtod_l+0xa20>
 800d382:	4b64      	ldr	r3, [pc, #400]	@ (800d514 <_strtod_l+0xafc>)
 800d384:	2200      	movs	r2, #0
 800d386:	4630      	mov	r0, r6
 800d388:	4639      	mov	r1, r7
 800d38a:	f7f3 fbaf 	bl	8000aec <__aeabi_dcmplt>
 800d38e:	2800      	cmp	r0, #0
 800d390:	d159      	bne.n	800d446 <_strtod_l+0xa2e>
 800d392:	4630      	mov	r0, r6
 800d394:	4639      	mov	r1, r7
 800d396:	4b60      	ldr	r3, [pc, #384]	@ (800d518 <_strtod_l+0xb00>)
 800d398:	2200      	movs	r2, #0
 800d39a:	f7f3 f935 	bl	8000608 <__aeabi_dmul>
 800d39e:	4606      	mov	r6, r0
 800d3a0:	460f      	mov	r7, r1
 800d3a2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d3a6:	9606      	str	r6, [sp, #24]
 800d3a8:	9307      	str	r3, [sp, #28]
 800d3aa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3ae:	4d57      	ldr	r5, [pc, #348]	@ (800d50c <_strtod_l+0xaf4>)
 800d3b0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d3b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3b6:	401d      	ands	r5, r3
 800d3b8:	4b58      	ldr	r3, [pc, #352]	@ (800d51c <_strtod_l+0xb04>)
 800d3ba:	429d      	cmp	r5, r3
 800d3bc:	f040 80b2 	bne.w	800d524 <_strtod_l+0xb0c>
 800d3c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d3c2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d3c6:	ec4b ab10 	vmov	d0, sl, fp
 800d3ca:	f003 f8a5 	bl	8010518 <__ulp>
 800d3ce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d3d2:	ec51 0b10 	vmov	r0, r1, d0
 800d3d6:	f7f3 f917 	bl	8000608 <__aeabi_dmul>
 800d3da:	4652      	mov	r2, sl
 800d3dc:	465b      	mov	r3, fp
 800d3de:	f7f2 ff5d 	bl	800029c <__adddf3>
 800d3e2:	460b      	mov	r3, r1
 800d3e4:	4949      	ldr	r1, [pc, #292]	@ (800d50c <_strtod_l+0xaf4>)
 800d3e6:	4a4e      	ldr	r2, [pc, #312]	@ (800d520 <_strtod_l+0xb08>)
 800d3e8:	4019      	ands	r1, r3
 800d3ea:	4291      	cmp	r1, r2
 800d3ec:	4682      	mov	sl, r0
 800d3ee:	d942      	bls.n	800d476 <_strtod_l+0xa5e>
 800d3f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d3f2:	4b47      	ldr	r3, [pc, #284]	@ (800d510 <_strtod_l+0xaf8>)
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d103      	bne.n	800d400 <_strtod_l+0x9e8>
 800d3f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d3fa:	3301      	adds	r3, #1
 800d3fc:	f43f ad2b 	beq.w	800ce56 <_strtod_l+0x43e>
 800d400:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d510 <_strtod_l+0xaf8>
 800d404:	f04f 3aff 	mov.w	sl, #4294967295
 800d408:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d40a:	9805      	ldr	r0, [sp, #20]
 800d40c:	f002 fd50 	bl	800feb0 <_Bfree>
 800d410:	9805      	ldr	r0, [sp, #20]
 800d412:	4649      	mov	r1, r9
 800d414:	f002 fd4c 	bl	800feb0 <_Bfree>
 800d418:	9805      	ldr	r0, [sp, #20]
 800d41a:	4641      	mov	r1, r8
 800d41c:	f002 fd48 	bl	800feb0 <_Bfree>
 800d420:	9805      	ldr	r0, [sp, #20]
 800d422:	4621      	mov	r1, r4
 800d424:	f002 fd44 	bl	800feb0 <_Bfree>
 800d428:	e618      	b.n	800d05c <_strtod_l+0x644>
 800d42a:	f1ba 0f01 	cmp.w	sl, #1
 800d42e:	d103      	bne.n	800d438 <_strtod_l+0xa20>
 800d430:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d432:	2b00      	cmp	r3, #0
 800d434:	f43f ada5 	beq.w	800cf82 <_strtod_l+0x56a>
 800d438:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d4e8 <_strtod_l+0xad0>
 800d43c:	4f35      	ldr	r7, [pc, #212]	@ (800d514 <_strtod_l+0xafc>)
 800d43e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d442:	2600      	movs	r6, #0
 800d444:	e7b1      	b.n	800d3aa <_strtod_l+0x992>
 800d446:	4f34      	ldr	r7, [pc, #208]	@ (800d518 <_strtod_l+0xb00>)
 800d448:	2600      	movs	r6, #0
 800d44a:	e7aa      	b.n	800d3a2 <_strtod_l+0x98a>
 800d44c:	4b32      	ldr	r3, [pc, #200]	@ (800d518 <_strtod_l+0xb00>)
 800d44e:	4630      	mov	r0, r6
 800d450:	4639      	mov	r1, r7
 800d452:	2200      	movs	r2, #0
 800d454:	f7f3 f8d8 	bl	8000608 <__aeabi_dmul>
 800d458:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d45a:	4606      	mov	r6, r0
 800d45c:	460f      	mov	r7, r1
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d09f      	beq.n	800d3a2 <_strtod_l+0x98a>
 800d462:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d466:	e7a0      	b.n	800d3aa <_strtod_l+0x992>
 800d468:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d4f0 <_strtod_l+0xad8>
 800d46c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d470:	ec57 6b17 	vmov	r6, r7, d7
 800d474:	e799      	b.n	800d3aa <_strtod_l+0x992>
 800d476:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d47a:	9b08      	ldr	r3, [sp, #32]
 800d47c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d480:	2b00      	cmp	r3, #0
 800d482:	d1c1      	bne.n	800d408 <_strtod_l+0x9f0>
 800d484:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d488:	0d1b      	lsrs	r3, r3, #20
 800d48a:	051b      	lsls	r3, r3, #20
 800d48c:	429d      	cmp	r5, r3
 800d48e:	d1bb      	bne.n	800d408 <_strtod_l+0x9f0>
 800d490:	4630      	mov	r0, r6
 800d492:	4639      	mov	r1, r7
 800d494:	f7f3 fc18 	bl	8000cc8 <__aeabi_d2lz>
 800d498:	f7f3 f888 	bl	80005ac <__aeabi_l2d>
 800d49c:	4602      	mov	r2, r0
 800d49e:	460b      	mov	r3, r1
 800d4a0:	4630      	mov	r0, r6
 800d4a2:	4639      	mov	r1, r7
 800d4a4:	f7f2 fef8 	bl	8000298 <__aeabi_dsub>
 800d4a8:	460b      	mov	r3, r1
 800d4aa:	4602      	mov	r2, r0
 800d4ac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d4b0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d4b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4b6:	ea46 060a 	orr.w	r6, r6, sl
 800d4ba:	431e      	orrs	r6, r3
 800d4bc:	d06f      	beq.n	800d59e <_strtod_l+0xb86>
 800d4be:	a30e      	add	r3, pc, #56	@ (adr r3, 800d4f8 <_strtod_l+0xae0>)
 800d4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c4:	f7f3 fb12 	bl	8000aec <__aeabi_dcmplt>
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	f47f accf 	bne.w	800ce6c <_strtod_l+0x454>
 800d4ce:	a30c      	add	r3, pc, #48	@ (adr r3, 800d500 <_strtod_l+0xae8>)
 800d4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d4d8:	f7f3 fb26 	bl	8000b28 <__aeabi_dcmpgt>
 800d4dc:	2800      	cmp	r0, #0
 800d4de:	d093      	beq.n	800d408 <_strtod_l+0x9f0>
 800d4e0:	e4c4      	b.n	800ce6c <_strtod_l+0x454>
 800d4e2:	bf00      	nop
 800d4e4:	f3af 8000 	nop.w
 800d4e8:	00000000 	.word	0x00000000
 800d4ec:	bff00000 	.word	0xbff00000
 800d4f0:	00000000 	.word	0x00000000
 800d4f4:	3ff00000 	.word	0x3ff00000
 800d4f8:	94a03595 	.word	0x94a03595
 800d4fc:	3fdfffff 	.word	0x3fdfffff
 800d500:	35afe535 	.word	0x35afe535
 800d504:	3fe00000 	.word	0x3fe00000
 800d508:	000fffff 	.word	0x000fffff
 800d50c:	7ff00000 	.word	0x7ff00000
 800d510:	7fefffff 	.word	0x7fefffff
 800d514:	3ff00000 	.word	0x3ff00000
 800d518:	3fe00000 	.word	0x3fe00000
 800d51c:	7fe00000 	.word	0x7fe00000
 800d520:	7c9fffff 	.word	0x7c9fffff
 800d524:	9b08      	ldr	r3, [sp, #32]
 800d526:	b323      	cbz	r3, 800d572 <_strtod_l+0xb5a>
 800d528:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d52c:	d821      	bhi.n	800d572 <_strtod_l+0xb5a>
 800d52e:	a328      	add	r3, pc, #160	@ (adr r3, 800d5d0 <_strtod_l+0xbb8>)
 800d530:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d534:	4630      	mov	r0, r6
 800d536:	4639      	mov	r1, r7
 800d538:	f7f3 fae2 	bl	8000b00 <__aeabi_dcmple>
 800d53c:	b1a0      	cbz	r0, 800d568 <_strtod_l+0xb50>
 800d53e:	4639      	mov	r1, r7
 800d540:	4630      	mov	r0, r6
 800d542:	f7f3 fb39 	bl	8000bb8 <__aeabi_d2uiz>
 800d546:	2801      	cmp	r0, #1
 800d548:	bf38      	it	cc
 800d54a:	2001      	movcc	r0, #1
 800d54c:	f7f2 ffe2 	bl	8000514 <__aeabi_ui2d>
 800d550:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d552:	4606      	mov	r6, r0
 800d554:	460f      	mov	r7, r1
 800d556:	b9fb      	cbnz	r3, 800d598 <_strtod_l+0xb80>
 800d558:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d55c:	9014      	str	r0, [sp, #80]	@ 0x50
 800d55e:	9315      	str	r3, [sp, #84]	@ 0x54
 800d560:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d564:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d568:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d56a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d56e:	1b5b      	subs	r3, r3, r5
 800d570:	9311      	str	r3, [sp, #68]	@ 0x44
 800d572:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d576:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d57a:	f002 ffcd 	bl	8010518 <__ulp>
 800d57e:	4650      	mov	r0, sl
 800d580:	ec53 2b10 	vmov	r2, r3, d0
 800d584:	4659      	mov	r1, fp
 800d586:	f7f3 f83f 	bl	8000608 <__aeabi_dmul>
 800d58a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d58e:	f7f2 fe85 	bl	800029c <__adddf3>
 800d592:	4682      	mov	sl, r0
 800d594:	468b      	mov	fp, r1
 800d596:	e770      	b.n	800d47a <_strtod_l+0xa62>
 800d598:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d59c:	e7e0      	b.n	800d560 <_strtod_l+0xb48>
 800d59e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d5d8 <_strtod_l+0xbc0>)
 800d5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a4:	f7f3 faa2 	bl	8000aec <__aeabi_dcmplt>
 800d5a8:	e798      	b.n	800d4dc <_strtod_l+0xac4>
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d5ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d5b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5b2:	6013      	str	r3, [r2, #0]
 800d5b4:	f7ff ba6d 	b.w	800ca92 <_strtod_l+0x7a>
 800d5b8:	2a65      	cmp	r2, #101	@ 0x65
 800d5ba:	f43f ab66 	beq.w	800cc8a <_strtod_l+0x272>
 800d5be:	2a45      	cmp	r2, #69	@ 0x45
 800d5c0:	f43f ab63 	beq.w	800cc8a <_strtod_l+0x272>
 800d5c4:	2301      	movs	r3, #1
 800d5c6:	f7ff bb9e 	b.w	800cd06 <_strtod_l+0x2ee>
 800d5ca:	bf00      	nop
 800d5cc:	f3af 8000 	nop.w
 800d5d0:	ffc00000 	.word	0xffc00000
 800d5d4:	41dfffff 	.word	0x41dfffff
 800d5d8:	94a03595 	.word	0x94a03595
 800d5dc:	3fcfffff 	.word	0x3fcfffff

0800d5e0 <_strtod_r>:
 800d5e0:	4b01      	ldr	r3, [pc, #4]	@ (800d5e8 <_strtod_r+0x8>)
 800d5e2:	f7ff ba19 	b.w	800ca18 <_strtod_l>
 800d5e6:	bf00      	nop
 800d5e8:	20000034 	.word	0x20000034

0800d5ec <strtof>:
 800d5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5f0:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 800d6b0 <strtof+0xc4>
 800d5f4:	4b29      	ldr	r3, [pc, #164]	@ (800d69c <strtof+0xb0>)
 800d5f6:	460a      	mov	r2, r1
 800d5f8:	ed2d 8b02 	vpush	{d8}
 800d5fc:	4601      	mov	r1, r0
 800d5fe:	f8d8 0000 	ldr.w	r0, [r8]
 800d602:	f7ff fa09 	bl	800ca18 <_strtod_l>
 800d606:	ec55 4b10 	vmov	r4, r5, d0
 800d60a:	4622      	mov	r2, r4
 800d60c:	462b      	mov	r3, r5
 800d60e:	4620      	mov	r0, r4
 800d610:	4629      	mov	r1, r5
 800d612:	f7f3 fa93 	bl	8000b3c <__aeabi_dcmpun>
 800d616:	b190      	cbz	r0, 800d63e <strtof+0x52>
 800d618:	2d00      	cmp	r5, #0
 800d61a:	4821      	ldr	r0, [pc, #132]	@ (800d6a0 <strtof+0xb4>)
 800d61c:	da09      	bge.n	800d632 <strtof+0x46>
 800d61e:	f001 f94b 	bl	800e8b8 <nanf>
 800d622:	eeb1 8a40 	vneg.f32	s16, s0
 800d626:	eeb0 0a48 	vmov.f32	s0, s16
 800d62a:	ecbd 8b02 	vpop	{d8}
 800d62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d632:	ecbd 8b02 	vpop	{d8}
 800d636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d63a:	f001 b93d 	b.w	800e8b8 <nanf>
 800d63e:	4620      	mov	r0, r4
 800d640:	4629      	mov	r1, r5
 800d642:	f7f3 fad9 	bl	8000bf8 <__aeabi_d2f>
 800d646:	ee08 0a10 	vmov	s16, r0
 800d64a:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800d6a4 <strtof+0xb8>
 800d64e:	eeb0 7ac8 	vabs.f32	s14, s16
 800d652:	eeb4 7a67 	vcmp.f32	s14, s15
 800d656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d65a:	dd11      	ble.n	800d680 <strtof+0x94>
 800d65c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 800d660:	4b11      	ldr	r3, [pc, #68]	@ (800d6a8 <strtof+0xbc>)
 800d662:	f04f 32ff 	mov.w	r2, #4294967295
 800d666:	4620      	mov	r0, r4
 800d668:	4639      	mov	r1, r7
 800d66a:	f7f3 fa67 	bl	8000b3c <__aeabi_dcmpun>
 800d66e:	b980      	cbnz	r0, 800d692 <strtof+0xa6>
 800d670:	4b0d      	ldr	r3, [pc, #52]	@ (800d6a8 <strtof+0xbc>)
 800d672:	f04f 32ff 	mov.w	r2, #4294967295
 800d676:	4620      	mov	r0, r4
 800d678:	4639      	mov	r1, r7
 800d67a:	f7f3 fa41 	bl	8000b00 <__aeabi_dcmple>
 800d67e:	b940      	cbnz	r0, 800d692 <strtof+0xa6>
 800d680:	ee18 3a10 	vmov	r3, s16
 800d684:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800d688:	d1cd      	bne.n	800d626 <strtof+0x3a>
 800d68a:	4b08      	ldr	r3, [pc, #32]	@ (800d6ac <strtof+0xc0>)
 800d68c:	402b      	ands	r3, r5
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d0c9      	beq.n	800d626 <strtof+0x3a>
 800d692:	f8d8 3000 	ldr.w	r3, [r8]
 800d696:	2222      	movs	r2, #34	@ 0x22
 800d698:	601a      	str	r2, [r3, #0]
 800d69a:	e7c4      	b.n	800d626 <strtof+0x3a>
 800d69c:	20000034 	.word	0x20000034
 800d6a0:	08011bdd 	.word	0x08011bdd
 800d6a4:	7f7fffff 	.word	0x7f7fffff
 800d6a8:	7fefffff 	.word	0x7fefffff
 800d6ac:	7ff00000 	.word	0x7ff00000
 800d6b0:	200001a0 	.word	0x200001a0

0800d6b4 <_strtoul_l.constprop.0>:
 800d6b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d6b8:	4e34      	ldr	r6, [pc, #208]	@ (800d78c <_strtoul_l.constprop.0+0xd8>)
 800d6ba:	4686      	mov	lr, r0
 800d6bc:	460d      	mov	r5, r1
 800d6be:	4628      	mov	r0, r5
 800d6c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d6c4:	5d37      	ldrb	r7, [r6, r4]
 800d6c6:	f017 0708 	ands.w	r7, r7, #8
 800d6ca:	d1f8      	bne.n	800d6be <_strtoul_l.constprop.0+0xa>
 800d6cc:	2c2d      	cmp	r4, #45	@ 0x2d
 800d6ce:	d12f      	bne.n	800d730 <_strtoul_l.constprop.0+0x7c>
 800d6d0:	782c      	ldrb	r4, [r5, #0]
 800d6d2:	2701      	movs	r7, #1
 800d6d4:	1c85      	adds	r5, r0, #2
 800d6d6:	f033 0010 	bics.w	r0, r3, #16
 800d6da:	d109      	bne.n	800d6f0 <_strtoul_l.constprop.0+0x3c>
 800d6dc:	2c30      	cmp	r4, #48	@ 0x30
 800d6de:	d12c      	bne.n	800d73a <_strtoul_l.constprop.0+0x86>
 800d6e0:	7828      	ldrb	r0, [r5, #0]
 800d6e2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800d6e6:	2858      	cmp	r0, #88	@ 0x58
 800d6e8:	d127      	bne.n	800d73a <_strtoul_l.constprop.0+0x86>
 800d6ea:	786c      	ldrb	r4, [r5, #1]
 800d6ec:	2310      	movs	r3, #16
 800d6ee:	3502      	adds	r5, #2
 800d6f0:	f04f 38ff 	mov.w	r8, #4294967295
 800d6f4:	2600      	movs	r6, #0
 800d6f6:	fbb8 f8f3 	udiv	r8, r8, r3
 800d6fa:	fb03 f908 	mul.w	r9, r3, r8
 800d6fe:	ea6f 0909 	mvn.w	r9, r9
 800d702:	4630      	mov	r0, r6
 800d704:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800d708:	f1bc 0f09 	cmp.w	ip, #9
 800d70c:	d81c      	bhi.n	800d748 <_strtoul_l.constprop.0+0x94>
 800d70e:	4664      	mov	r4, ip
 800d710:	42a3      	cmp	r3, r4
 800d712:	dd2a      	ble.n	800d76a <_strtoul_l.constprop.0+0xb6>
 800d714:	f1b6 3fff 	cmp.w	r6, #4294967295
 800d718:	d007      	beq.n	800d72a <_strtoul_l.constprop.0+0x76>
 800d71a:	4580      	cmp	r8, r0
 800d71c:	d322      	bcc.n	800d764 <_strtoul_l.constprop.0+0xb0>
 800d71e:	d101      	bne.n	800d724 <_strtoul_l.constprop.0+0x70>
 800d720:	45a1      	cmp	r9, r4
 800d722:	db1f      	blt.n	800d764 <_strtoul_l.constprop.0+0xb0>
 800d724:	fb00 4003 	mla	r0, r0, r3, r4
 800d728:	2601      	movs	r6, #1
 800d72a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d72e:	e7e9      	b.n	800d704 <_strtoul_l.constprop.0+0x50>
 800d730:	2c2b      	cmp	r4, #43	@ 0x2b
 800d732:	bf04      	itt	eq
 800d734:	782c      	ldrbeq	r4, [r5, #0]
 800d736:	1c85      	addeq	r5, r0, #2
 800d738:	e7cd      	b.n	800d6d6 <_strtoul_l.constprop.0+0x22>
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d1d8      	bne.n	800d6f0 <_strtoul_l.constprop.0+0x3c>
 800d73e:	2c30      	cmp	r4, #48	@ 0x30
 800d740:	bf0c      	ite	eq
 800d742:	2308      	moveq	r3, #8
 800d744:	230a      	movne	r3, #10
 800d746:	e7d3      	b.n	800d6f0 <_strtoul_l.constprop.0+0x3c>
 800d748:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800d74c:	f1bc 0f19 	cmp.w	ip, #25
 800d750:	d801      	bhi.n	800d756 <_strtoul_l.constprop.0+0xa2>
 800d752:	3c37      	subs	r4, #55	@ 0x37
 800d754:	e7dc      	b.n	800d710 <_strtoul_l.constprop.0+0x5c>
 800d756:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800d75a:	f1bc 0f19 	cmp.w	ip, #25
 800d75e:	d804      	bhi.n	800d76a <_strtoul_l.constprop.0+0xb6>
 800d760:	3c57      	subs	r4, #87	@ 0x57
 800d762:	e7d5      	b.n	800d710 <_strtoul_l.constprop.0+0x5c>
 800d764:	f04f 36ff 	mov.w	r6, #4294967295
 800d768:	e7df      	b.n	800d72a <_strtoul_l.constprop.0+0x76>
 800d76a:	1c73      	adds	r3, r6, #1
 800d76c:	d106      	bne.n	800d77c <_strtoul_l.constprop.0+0xc8>
 800d76e:	2322      	movs	r3, #34	@ 0x22
 800d770:	f8ce 3000 	str.w	r3, [lr]
 800d774:	4630      	mov	r0, r6
 800d776:	b932      	cbnz	r2, 800d786 <_strtoul_l.constprop.0+0xd2>
 800d778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d77c:	b107      	cbz	r7, 800d780 <_strtoul_l.constprop.0+0xcc>
 800d77e:	4240      	negs	r0, r0
 800d780:	2a00      	cmp	r2, #0
 800d782:	d0f9      	beq.n	800d778 <_strtoul_l.constprop.0+0xc4>
 800d784:	b106      	cbz	r6, 800d788 <_strtoul_l.constprop.0+0xd4>
 800d786:	1e69      	subs	r1, r5, #1
 800d788:	6011      	str	r1, [r2, #0]
 800d78a:	e7f5      	b.n	800d778 <_strtoul_l.constprop.0+0xc4>
 800d78c:	08011a61 	.word	0x08011a61

0800d790 <strtoul>:
 800d790:	4613      	mov	r3, r2
 800d792:	460a      	mov	r2, r1
 800d794:	4601      	mov	r1, r0
 800d796:	4802      	ldr	r0, [pc, #8]	@ (800d7a0 <strtoul+0x10>)
 800d798:	6800      	ldr	r0, [r0, #0]
 800d79a:	f7ff bf8b 	b.w	800d6b4 <_strtoul_l.constprop.0>
 800d79e:	bf00      	nop
 800d7a0:	200001a0 	.word	0x200001a0

0800d7a4 <__cvt>:
 800d7a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7a8:	ec57 6b10 	vmov	r6, r7, d0
 800d7ac:	2f00      	cmp	r7, #0
 800d7ae:	460c      	mov	r4, r1
 800d7b0:	4619      	mov	r1, r3
 800d7b2:	463b      	mov	r3, r7
 800d7b4:	bfbb      	ittet	lt
 800d7b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d7ba:	461f      	movlt	r7, r3
 800d7bc:	2300      	movge	r3, #0
 800d7be:	232d      	movlt	r3, #45	@ 0x2d
 800d7c0:	700b      	strb	r3, [r1, #0]
 800d7c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d7c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d7c8:	4691      	mov	r9, r2
 800d7ca:	f023 0820 	bic.w	r8, r3, #32
 800d7ce:	bfbc      	itt	lt
 800d7d0:	4632      	movlt	r2, r6
 800d7d2:	4616      	movlt	r6, r2
 800d7d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d7d8:	d005      	beq.n	800d7e6 <__cvt+0x42>
 800d7da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d7de:	d100      	bne.n	800d7e2 <__cvt+0x3e>
 800d7e0:	3401      	adds	r4, #1
 800d7e2:	2102      	movs	r1, #2
 800d7e4:	e000      	b.n	800d7e8 <__cvt+0x44>
 800d7e6:	2103      	movs	r1, #3
 800d7e8:	ab03      	add	r3, sp, #12
 800d7ea:	9301      	str	r3, [sp, #4]
 800d7ec:	ab02      	add	r3, sp, #8
 800d7ee:	9300      	str	r3, [sp, #0]
 800d7f0:	ec47 6b10 	vmov	d0, r6, r7
 800d7f4:	4653      	mov	r3, sl
 800d7f6:	4622      	mov	r2, r4
 800d7f8:	f001 f90a 	bl	800ea10 <_dtoa_r>
 800d7fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d800:	4605      	mov	r5, r0
 800d802:	d119      	bne.n	800d838 <__cvt+0x94>
 800d804:	f019 0f01 	tst.w	r9, #1
 800d808:	d00e      	beq.n	800d828 <__cvt+0x84>
 800d80a:	eb00 0904 	add.w	r9, r0, r4
 800d80e:	2200      	movs	r2, #0
 800d810:	2300      	movs	r3, #0
 800d812:	4630      	mov	r0, r6
 800d814:	4639      	mov	r1, r7
 800d816:	f7f3 f95f 	bl	8000ad8 <__aeabi_dcmpeq>
 800d81a:	b108      	cbz	r0, 800d820 <__cvt+0x7c>
 800d81c:	f8cd 900c 	str.w	r9, [sp, #12]
 800d820:	2230      	movs	r2, #48	@ 0x30
 800d822:	9b03      	ldr	r3, [sp, #12]
 800d824:	454b      	cmp	r3, r9
 800d826:	d31e      	bcc.n	800d866 <__cvt+0xc2>
 800d828:	9b03      	ldr	r3, [sp, #12]
 800d82a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d82c:	1b5b      	subs	r3, r3, r5
 800d82e:	4628      	mov	r0, r5
 800d830:	6013      	str	r3, [r2, #0]
 800d832:	b004      	add	sp, #16
 800d834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d838:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d83c:	eb00 0904 	add.w	r9, r0, r4
 800d840:	d1e5      	bne.n	800d80e <__cvt+0x6a>
 800d842:	7803      	ldrb	r3, [r0, #0]
 800d844:	2b30      	cmp	r3, #48	@ 0x30
 800d846:	d10a      	bne.n	800d85e <__cvt+0xba>
 800d848:	2200      	movs	r2, #0
 800d84a:	2300      	movs	r3, #0
 800d84c:	4630      	mov	r0, r6
 800d84e:	4639      	mov	r1, r7
 800d850:	f7f3 f942 	bl	8000ad8 <__aeabi_dcmpeq>
 800d854:	b918      	cbnz	r0, 800d85e <__cvt+0xba>
 800d856:	f1c4 0401 	rsb	r4, r4, #1
 800d85a:	f8ca 4000 	str.w	r4, [sl]
 800d85e:	f8da 3000 	ldr.w	r3, [sl]
 800d862:	4499      	add	r9, r3
 800d864:	e7d3      	b.n	800d80e <__cvt+0x6a>
 800d866:	1c59      	adds	r1, r3, #1
 800d868:	9103      	str	r1, [sp, #12]
 800d86a:	701a      	strb	r2, [r3, #0]
 800d86c:	e7d9      	b.n	800d822 <__cvt+0x7e>

0800d86e <__exponent>:
 800d86e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d870:	2900      	cmp	r1, #0
 800d872:	bfba      	itte	lt
 800d874:	4249      	neglt	r1, r1
 800d876:	232d      	movlt	r3, #45	@ 0x2d
 800d878:	232b      	movge	r3, #43	@ 0x2b
 800d87a:	2909      	cmp	r1, #9
 800d87c:	7002      	strb	r2, [r0, #0]
 800d87e:	7043      	strb	r3, [r0, #1]
 800d880:	dd29      	ble.n	800d8d6 <__exponent+0x68>
 800d882:	f10d 0307 	add.w	r3, sp, #7
 800d886:	461d      	mov	r5, r3
 800d888:	270a      	movs	r7, #10
 800d88a:	461a      	mov	r2, r3
 800d88c:	fbb1 f6f7 	udiv	r6, r1, r7
 800d890:	fb07 1416 	mls	r4, r7, r6, r1
 800d894:	3430      	adds	r4, #48	@ 0x30
 800d896:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d89a:	460c      	mov	r4, r1
 800d89c:	2c63      	cmp	r4, #99	@ 0x63
 800d89e:	f103 33ff 	add.w	r3, r3, #4294967295
 800d8a2:	4631      	mov	r1, r6
 800d8a4:	dcf1      	bgt.n	800d88a <__exponent+0x1c>
 800d8a6:	3130      	adds	r1, #48	@ 0x30
 800d8a8:	1e94      	subs	r4, r2, #2
 800d8aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d8ae:	1c41      	adds	r1, r0, #1
 800d8b0:	4623      	mov	r3, r4
 800d8b2:	42ab      	cmp	r3, r5
 800d8b4:	d30a      	bcc.n	800d8cc <__exponent+0x5e>
 800d8b6:	f10d 0309 	add.w	r3, sp, #9
 800d8ba:	1a9b      	subs	r3, r3, r2
 800d8bc:	42ac      	cmp	r4, r5
 800d8be:	bf88      	it	hi
 800d8c0:	2300      	movhi	r3, #0
 800d8c2:	3302      	adds	r3, #2
 800d8c4:	4403      	add	r3, r0
 800d8c6:	1a18      	subs	r0, r3, r0
 800d8c8:	b003      	add	sp, #12
 800d8ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d8d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d8d4:	e7ed      	b.n	800d8b2 <__exponent+0x44>
 800d8d6:	2330      	movs	r3, #48	@ 0x30
 800d8d8:	3130      	adds	r1, #48	@ 0x30
 800d8da:	7083      	strb	r3, [r0, #2]
 800d8dc:	70c1      	strb	r1, [r0, #3]
 800d8de:	1d03      	adds	r3, r0, #4
 800d8e0:	e7f1      	b.n	800d8c6 <__exponent+0x58>
	...

0800d8e4 <_printf_float>:
 800d8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8e8:	b08d      	sub	sp, #52	@ 0x34
 800d8ea:	460c      	mov	r4, r1
 800d8ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d8f0:	4616      	mov	r6, r2
 800d8f2:	461f      	mov	r7, r3
 800d8f4:	4605      	mov	r5, r0
 800d8f6:	f000 ff4f 	bl	800e798 <_localeconv_r>
 800d8fa:	6803      	ldr	r3, [r0, #0]
 800d8fc:	9304      	str	r3, [sp, #16]
 800d8fe:	4618      	mov	r0, r3
 800d900:	f7f2 fcbe 	bl	8000280 <strlen>
 800d904:	2300      	movs	r3, #0
 800d906:	930a      	str	r3, [sp, #40]	@ 0x28
 800d908:	f8d8 3000 	ldr.w	r3, [r8]
 800d90c:	9005      	str	r0, [sp, #20]
 800d90e:	3307      	adds	r3, #7
 800d910:	f023 0307 	bic.w	r3, r3, #7
 800d914:	f103 0208 	add.w	r2, r3, #8
 800d918:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d91c:	f8d4 b000 	ldr.w	fp, [r4]
 800d920:	f8c8 2000 	str.w	r2, [r8]
 800d924:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d928:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d92c:	9307      	str	r3, [sp, #28]
 800d92e:	f8cd 8018 	str.w	r8, [sp, #24]
 800d932:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d936:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d93a:	4b9c      	ldr	r3, [pc, #624]	@ (800dbac <_printf_float+0x2c8>)
 800d93c:	f04f 32ff 	mov.w	r2, #4294967295
 800d940:	f7f3 f8fc 	bl	8000b3c <__aeabi_dcmpun>
 800d944:	bb70      	cbnz	r0, 800d9a4 <_printf_float+0xc0>
 800d946:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d94a:	4b98      	ldr	r3, [pc, #608]	@ (800dbac <_printf_float+0x2c8>)
 800d94c:	f04f 32ff 	mov.w	r2, #4294967295
 800d950:	f7f3 f8d6 	bl	8000b00 <__aeabi_dcmple>
 800d954:	bb30      	cbnz	r0, 800d9a4 <_printf_float+0xc0>
 800d956:	2200      	movs	r2, #0
 800d958:	2300      	movs	r3, #0
 800d95a:	4640      	mov	r0, r8
 800d95c:	4649      	mov	r1, r9
 800d95e:	f7f3 f8c5 	bl	8000aec <__aeabi_dcmplt>
 800d962:	b110      	cbz	r0, 800d96a <_printf_float+0x86>
 800d964:	232d      	movs	r3, #45	@ 0x2d
 800d966:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d96a:	4a91      	ldr	r2, [pc, #580]	@ (800dbb0 <_printf_float+0x2cc>)
 800d96c:	4b91      	ldr	r3, [pc, #580]	@ (800dbb4 <_printf_float+0x2d0>)
 800d96e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d972:	bf94      	ite	ls
 800d974:	4690      	movls	r8, r2
 800d976:	4698      	movhi	r8, r3
 800d978:	2303      	movs	r3, #3
 800d97a:	6123      	str	r3, [r4, #16]
 800d97c:	f02b 0304 	bic.w	r3, fp, #4
 800d980:	6023      	str	r3, [r4, #0]
 800d982:	f04f 0900 	mov.w	r9, #0
 800d986:	9700      	str	r7, [sp, #0]
 800d988:	4633      	mov	r3, r6
 800d98a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d98c:	4621      	mov	r1, r4
 800d98e:	4628      	mov	r0, r5
 800d990:	f000 f9d2 	bl	800dd38 <_printf_common>
 800d994:	3001      	adds	r0, #1
 800d996:	f040 808d 	bne.w	800dab4 <_printf_float+0x1d0>
 800d99a:	f04f 30ff 	mov.w	r0, #4294967295
 800d99e:	b00d      	add	sp, #52	@ 0x34
 800d9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9a4:	4642      	mov	r2, r8
 800d9a6:	464b      	mov	r3, r9
 800d9a8:	4640      	mov	r0, r8
 800d9aa:	4649      	mov	r1, r9
 800d9ac:	f7f3 f8c6 	bl	8000b3c <__aeabi_dcmpun>
 800d9b0:	b140      	cbz	r0, 800d9c4 <_printf_float+0xe0>
 800d9b2:	464b      	mov	r3, r9
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	bfbc      	itt	lt
 800d9b8:	232d      	movlt	r3, #45	@ 0x2d
 800d9ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d9be:	4a7e      	ldr	r2, [pc, #504]	@ (800dbb8 <_printf_float+0x2d4>)
 800d9c0:	4b7e      	ldr	r3, [pc, #504]	@ (800dbbc <_printf_float+0x2d8>)
 800d9c2:	e7d4      	b.n	800d96e <_printf_float+0x8a>
 800d9c4:	6863      	ldr	r3, [r4, #4]
 800d9c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d9ca:	9206      	str	r2, [sp, #24]
 800d9cc:	1c5a      	adds	r2, r3, #1
 800d9ce:	d13b      	bne.n	800da48 <_printf_float+0x164>
 800d9d0:	2306      	movs	r3, #6
 800d9d2:	6063      	str	r3, [r4, #4]
 800d9d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d9d8:	2300      	movs	r3, #0
 800d9da:	6022      	str	r2, [r4, #0]
 800d9dc:	9303      	str	r3, [sp, #12]
 800d9de:	ab0a      	add	r3, sp, #40	@ 0x28
 800d9e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d9e4:	ab09      	add	r3, sp, #36	@ 0x24
 800d9e6:	9300      	str	r3, [sp, #0]
 800d9e8:	6861      	ldr	r1, [r4, #4]
 800d9ea:	ec49 8b10 	vmov	d0, r8, r9
 800d9ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d9f2:	4628      	mov	r0, r5
 800d9f4:	f7ff fed6 	bl	800d7a4 <__cvt>
 800d9f8:	9b06      	ldr	r3, [sp, #24]
 800d9fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d9fc:	2b47      	cmp	r3, #71	@ 0x47
 800d9fe:	4680      	mov	r8, r0
 800da00:	d129      	bne.n	800da56 <_printf_float+0x172>
 800da02:	1cc8      	adds	r0, r1, #3
 800da04:	db02      	blt.n	800da0c <_printf_float+0x128>
 800da06:	6863      	ldr	r3, [r4, #4]
 800da08:	4299      	cmp	r1, r3
 800da0a:	dd41      	ble.n	800da90 <_printf_float+0x1ac>
 800da0c:	f1aa 0a02 	sub.w	sl, sl, #2
 800da10:	fa5f fa8a 	uxtb.w	sl, sl
 800da14:	3901      	subs	r1, #1
 800da16:	4652      	mov	r2, sl
 800da18:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800da1c:	9109      	str	r1, [sp, #36]	@ 0x24
 800da1e:	f7ff ff26 	bl	800d86e <__exponent>
 800da22:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da24:	1813      	adds	r3, r2, r0
 800da26:	2a01      	cmp	r2, #1
 800da28:	4681      	mov	r9, r0
 800da2a:	6123      	str	r3, [r4, #16]
 800da2c:	dc02      	bgt.n	800da34 <_printf_float+0x150>
 800da2e:	6822      	ldr	r2, [r4, #0]
 800da30:	07d2      	lsls	r2, r2, #31
 800da32:	d501      	bpl.n	800da38 <_printf_float+0x154>
 800da34:	3301      	adds	r3, #1
 800da36:	6123      	str	r3, [r4, #16]
 800da38:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d0a2      	beq.n	800d986 <_printf_float+0xa2>
 800da40:	232d      	movs	r3, #45	@ 0x2d
 800da42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da46:	e79e      	b.n	800d986 <_printf_float+0xa2>
 800da48:	9a06      	ldr	r2, [sp, #24]
 800da4a:	2a47      	cmp	r2, #71	@ 0x47
 800da4c:	d1c2      	bne.n	800d9d4 <_printf_float+0xf0>
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d1c0      	bne.n	800d9d4 <_printf_float+0xf0>
 800da52:	2301      	movs	r3, #1
 800da54:	e7bd      	b.n	800d9d2 <_printf_float+0xee>
 800da56:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800da5a:	d9db      	bls.n	800da14 <_printf_float+0x130>
 800da5c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800da60:	d118      	bne.n	800da94 <_printf_float+0x1b0>
 800da62:	2900      	cmp	r1, #0
 800da64:	6863      	ldr	r3, [r4, #4]
 800da66:	dd0b      	ble.n	800da80 <_printf_float+0x19c>
 800da68:	6121      	str	r1, [r4, #16]
 800da6a:	b913      	cbnz	r3, 800da72 <_printf_float+0x18e>
 800da6c:	6822      	ldr	r2, [r4, #0]
 800da6e:	07d0      	lsls	r0, r2, #31
 800da70:	d502      	bpl.n	800da78 <_printf_float+0x194>
 800da72:	3301      	adds	r3, #1
 800da74:	440b      	add	r3, r1
 800da76:	6123      	str	r3, [r4, #16]
 800da78:	65a1      	str	r1, [r4, #88]	@ 0x58
 800da7a:	f04f 0900 	mov.w	r9, #0
 800da7e:	e7db      	b.n	800da38 <_printf_float+0x154>
 800da80:	b913      	cbnz	r3, 800da88 <_printf_float+0x1a4>
 800da82:	6822      	ldr	r2, [r4, #0]
 800da84:	07d2      	lsls	r2, r2, #31
 800da86:	d501      	bpl.n	800da8c <_printf_float+0x1a8>
 800da88:	3302      	adds	r3, #2
 800da8a:	e7f4      	b.n	800da76 <_printf_float+0x192>
 800da8c:	2301      	movs	r3, #1
 800da8e:	e7f2      	b.n	800da76 <_printf_float+0x192>
 800da90:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800da94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da96:	4299      	cmp	r1, r3
 800da98:	db05      	blt.n	800daa6 <_printf_float+0x1c2>
 800da9a:	6823      	ldr	r3, [r4, #0]
 800da9c:	6121      	str	r1, [r4, #16]
 800da9e:	07d8      	lsls	r0, r3, #31
 800daa0:	d5ea      	bpl.n	800da78 <_printf_float+0x194>
 800daa2:	1c4b      	adds	r3, r1, #1
 800daa4:	e7e7      	b.n	800da76 <_printf_float+0x192>
 800daa6:	2900      	cmp	r1, #0
 800daa8:	bfd4      	ite	le
 800daaa:	f1c1 0202 	rsble	r2, r1, #2
 800daae:	2201      	movgt	r2, #1
 800dab0:	4413      	add	r3, r2
 800dab2:	e7e0      	b.n	800da76 <_printf_float+0x192>
 800dab4:	6823      	ldr	r3, [r4, #0]
 800dab6:	055a      	lsls	r2, r3, #21
 800dab8:	d407      	bmi.n	800daca <_printf_float+0x1e6>
 800daba:	6923      	ldr	r3, [r4, #16]
 800dabc:	4642      	mov	r2, r8
 800dabe:	4631      	mov	r1, r6
 800dac0:	4628      	mov	r0, r5
 800dac2:	47b8      	blx	r7
 800dac4:	3001      	adds	r0, #1
 800dac6:	d12b      	bne.n	800db20 <_printf_float+0x23c>
 800dac8:	e767      	b.n	800d99a <_printf_float+0xb6>
 800daca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800dace:	f240 80dd 	bls.w	800dc8c <_printf_float+0x3a8>
 800dad2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dad6:	2200      	movs	r2, #0
 800dad8:	2300      	movs	r3, #0
 800dada:	f7f2 fffd 	bl	8000ad8 <__aeabi_dcmpeq>
 800dade:	2800      	cmp	r0, #0
 800dae0:	d033      	beq.n	800db4a <_printf_float+0x266>
 800dae2:	4a37      	ldr	r2, [pc, #220]	@ (800dbc0 <_printf_float+0x2dc>)
 800dae4:	2301      	movs	r3, #1
 800dae6:	4631      	mov	r1, r6
 800dae8:	4628      	mov	r0, r5
 800daea:	47b8      	blx	r7
 800daec:	3001      	adds	r0, #1
 800daee:	f43f af54 	beq.w	800d99a <_printf_float+0xb6>
 800daf2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800daf6:	4543      	cmp	r3, r8
 800daf8:	db02      	blt.n	800db00 <_printf_float+0x21c>
 800dafa:	6823      	ldr	r3, [r4, #0]
 800dafc:	07d8      	lsls	r0, r3, #31
 800dafe:	d50f      	bpl.n	800db20 <_printf_float+0x23c>
 800db00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db04:	4631      	mov	r1, r6
 800db06:	4628      	mov	r0, r5
 800db08:	47b8      	blx	r7
 800db0a:	3001      	adds	r0, #1
 800db0c:	f43f af45 	beq.w	800d99a <_printf_float+0xb6>
 800db10:	f04f 0900 	mov.w	r9, #0
 800db14:	f108 38ff 	add.w	r8, r8, #4294967295
 800db18:	f104 0a1a 	add.w	sl, r4, #26
 800db1c:	45c8      	cmp	r8, r9
 800db1e:	dc09      	bgt.n	800db34 <_printf_float+0x250>
 800db20:	6823      	ldr	r3, [r4, #0]
 800db22:	079b      	lsls	r3, r3, #30
 800db24:	f100 8103 	bmi.w	800dd2e <_printf_float+0x44a>
 800db28:	68e0      	ldr	r0, [r4, #12]
 800db2a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db2c:	4298      	cmp	r0, r3
 800db2e:	bfb8      	it	lt
 800db30:	4618      	movlt	r0, r3
 800db32:	e734      	b.n	800d99e <_printf_float+0xba>
 800db34:	2301      	movs	r3, #1
 800db36:	4652      	mov	r2, sl
 800db38:	4631      	mov	r1, r6
 800db3a:	4628      	mov	r0, r5
 800db3c:	47b8      	blx	r7
 800db3e:	3001      	adds	r0, #1
 800db40:	f43f af2b 	beq.w	800d99a <_printf_float+0xb6>
 800db44:	f109 0901 	add.w	r9, r9, #1
 800db48:	e7e8      	b.n	800db1c <_printf_float+0x238>
 800db4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	dc39      	bgt.n	800dbc4 <_printf_float+0x2e0>
 800db50:	4a1b      	ldr	r2, [pc, #108]	@ (800dbc0 <_printf_float+0x2dc>)
 800db52:	2301      	movs	r3, #1
 800db54:	4631      	mov	r1, r6
 800db56:	4628      	mov	r0, r5
 800db58:	47b8      	blx	r7
 800db5a:	3001      	adds	r0, #1
 800db5c:	f43f af1d 	beq.w	800d99a <_printf_float+0xb6>
 800db60:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800db64:	ea59 0303 	orrs.w	r3, r9, r3
 800db68:	d102      	bne.n	800db70 <_printf_float+0x28c>
 800db6a:	6823      	ldr	r3, [r4, #0]
 800db6c:	07d9      	lsls	r1, r3, #31
 800db6e:	d5d7      	bpl.n	800db20 <_printf_float+0x23c>
 800db70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db74:	4631      	mov	r1, r6
 800db76:	4628      	mov	r0, r5
 800db78:	47b8      	blx	r7
 800db7a:	3001      	adds	r0, #1
 800db7c:	f43f af0d 	beq.w	800d99a <_printf_float+0xb6>
 800db80:	f04f 0a00 	mov.w	sl, #0
 800db84:	f104 0b1a 	add.w	fp, r4, #26
 800db88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db8a:	425b      	negs	r3, r3
 800db8c:	4553      	cmp	r3, sl
 800db8e:	dc01      	bgt.n	800db94 <_printf_float+0x2b0>
 800db90:	464b      	mov	r3, r9
 800db92:	e793      	b.n	800dabc <_printf_float+0x1d8>
 800db94:	2301      	movs	r3, #1
 800db96:	465a      	mov	r2, fp
 800db98:	4631      	mov	r1, r6
 800db9a:	4628      	mov	r0, r5
 800db9c:	47b8      	blx	r7
 800db9e:	3001      	adds	r0, #1
 800dba0:	f43f aefb 	beq.w	800d99a <_printf_float+0xb6>
 800dba4:	f10a 0a01 	add.w	sl, sl, #1
 800dba8:	e7ee      	b.n	800db88 <_printf_float+0x2a4>
 800dbaa:	bf00      	nop
 800dbac:	7fefffff 	.word	0x7fefffff
 800dbb0:	08011b61 	.word	0x08011b61
 800dbb4:	08011b65 	.word	0x08011b65
 800dbb8:	08011b69 	.word	0x08011b69
 800dbbc:	08011b6d 	.word	0x08011b6d
 800dbc0:	08011b71 	.word	0x08011b71
 800dbc4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dbc6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dbca:	4553      	cmp	r3, sl
 800dbcc:	bfa8      	it	ge
 800dbce:	4653      	movge	r3, sl
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	4699      	mov	r9, r3
 800dbd4:	dc36      	bgt.n	800dc44 <_printf_float+0x360>
 800dbd6:	f04f 0b00 	mov.w	fp, #0
 800dbda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dbde:	f104 021a 	add.w	r2, r4, #26
 800dbe2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dbe4:	9306      	str	r3, [sp, #24]
 800dbe6:	eba3 0309 	sub.w	r3, r3, r9
 800dbea:	455b      	cmp	r3, fp
 800dbec:	dc31      	bgt.n	800dc52 <_printf_float+0x36e>
 800dbee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbf0:	459a      	cmp	sl, r3
 800dbf2:	dc3a      	bgt.n	800dc6a <_printf_float+0x386>
 800dbf4:	6823      	ldr	r3, [r4, #0]
 800dbf6:	07da      	lsls	r2, r3, #31
 800dbf8:	d437      	bmi.n	800dc6a <_printf_float+0x386>
 800dbfa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbfc:	ebaa 0903 	sub.w	r9, sl, r3
 800dc00:	9b06      	ldr	r3, [sp, #24]
 800dc02:	ebaa 0303 	sub.w	r3, sl, r3
 800dc06:	4599      	cmp	r9, r3
 800dc08:	bfa8      	it	ge
 800dc0a:	4699      	movge	r9, r3
 800dc0c:	f1b9 0f00 	cmp.w	r9, #0
 800dc10:	dc33      	bgt.n	800dc7a <_printf_float+0x396>
 800dc12:	f04f 0800 	mov.w	r8, #0
 800dc16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc1a:	f104 0b1a 	add.w	fp, r4, #26
 800dc1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc20:	ebaa 0303 	sub.w	r3, sl, r3
 800dc24:	eba3 0309 	sub.w	r3, r3, r9
 800dc28:	4543      	cmp	r3, r8
 800dc2a:	f77f af79 	ble.w	800db20 <_printf_float+0x23c>
 800dc2e:	2301      	movs	r3, #1
 800dc30:	465a      	mov	r2, fp
 800dc32:	4631      	mov	r1, r6
 800dc34:	4628      	mov	r0, r5
 800dc36:	47b8      	blx	r7
 800dc38:	3001      	adds	r0, #1
 800dc3a:	f43f aeae 	beq.w	800d99a <_printf_float+0xb6>
 800dc3e:	f108 0801 	add.w	r8, r8, #1
 800dc42:	e7ec      	b.n	800dc1e <_printf_float+0x33a>
 800dc44:	4642      	mov	r2, r8
 800dc46:	4631      	mov	r1, r6
 800dc48:	4628      	mov	r0, r5
 800dc4a:	47b8      	blx	r7
 800dc4c:	3001      	adds	r0, #1
 800dc4e:	d1c2      	bne.n	800dbd6 <_printf_float+0x2f2>
 800dc50:	e6a3      	b.n	800d99a <_printf_float+0xb6>
 800dc52:	2301      	movs	r3, #1
 800dc54:	4631      	mov	r1, r6
 800dc56:	4628      	mov	r0, r5
 800dc58:	9206      	str	r2, [sp, #24]
 800dc5a:	47b8      	blx	r7
 800dc5c:	3001      	adds	r0, #1
 800dc5e:	f43f ae9c 	beq.w	800d99a <_printf_float+0xb6>
 800dc62:	9a06      	ldr	r2, [sp, #24]
 800dc64:	f10b 0b01 	add.w	fp, fp, #1
 800dc68:	e7bb      	b.n	800dbe2 <_printf_float+0x2fe>
 800dc6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc6e:	4631      	mov	r1, r6
 800dc70:	4628      	mov	r0, r5
 800dc72:	47b8      	blx	r7
 800dc74:	3001      	adds	r0, #1
 800dc76:	d1c0      	bne.n	800dbfa <_printf_float+0x316>
 800dc78:	e68f      	b.n	800d99a <_printf_float+0xb6>
 800dc7a:	9a06      	ldr	r2, [sp, #24]
 800dc7c:	464b      	mov	r3, r9
 800dc7e:	4442      	add	r2, r8
 800dc80:	4631      	mov	r1, r6
 800dc82:	4628      	mov	r0, r5
 800dc84:	47b8      	blx	r7
 800dc86:	3001      	adds	r0, #1
 800dc88:	d1c3      	bne.n	800dc12 <_printf_float+0x32e>
 800dc8a:	e686      	b.n	800d99a <_printf_float+0xb6>
 800dc8c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dc90:	f1ba 0f01 	cmp.w	sl, #1
 800dc94:	dc01      	bgt.n	800dc9a <_printf_float+0x3b6>
 800dc96:	07db      	lsls	r3, r3, #31
 800dc98:	d536      	bpl.n	800dd08 <_printf_float+0x424>
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	4642      	mov	r2, r8
 800dc9e:	4631      	mov	r1, r6
 800dca0:	4628      	mov	r0, r5
 800dca2:	47b8      	blx	r7
 800dca4:	3001      	adds	r0, #1
 800dca6:	f43f ae78 	beq.w	800d99a <_printf_float+0xb6>
 800dcaa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dcae:	4631      	mov	r1, r6
 800dcb0:	4628      	mov	r0, r5
 800dcb2:	47b8      	blx	r7
 800dcb4:	3001      	adds	r0, #1
 800dcb6:	f43f ae70 	beq.w	800d99a <_printf_float+0xb6>
 800dcba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dcc6:	f7f2 ff07 	bl	8000ad8 <__aeabi_dcmpeq>
 800dcca:	b9c0      	cbnz	r0, 800dcfe <_printf_float+0x41a>
 800dccc:	4653      	mov	r3, sl
 800dcce:	f108 0201 	add.w	r2, r8, #1
 800dcd2:	4631      	mov	r1, r6
 800dcd4:	4628      	mov	r0, r5
 800dcd6:	47b8      	blx	r7
 800dcd8:	3001      	adds	r0, #1
 800dcda:	d10c      	bne.n	800dcf6 <_printf_float+0x412>
 800dcdc:	e65d      	b.n	800d99a <_printf_float+0xb6>
 800dcde:	2301      	movs	r3, #1
 800dce0:	465a      	mov	r2, fp
 800dce2:	4631      	mov	r1, r6
 800dce4:	4628      	mov	r0, r5
 800dce6:	47b8      	blx	r7
 800dce8:	3001      	adds	r0, #1
 800dcea:	f43f ae56 	beq.w	800d99a <_printf_float+0xb6>
 800dcee:	f108 0801 	add.w	r8, r8, #1
 800dcf2:	45d0      	cmp	r8, sl
 800dcf4:	dbf3      	blt.n	800dcde <_printf_float+0x3fa>
 800dcf6:	464b      	mov	r3, r9
 800dcf8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800dcfc:	e6df      	b.n	800dabe <_printf_float+0x1da>
 800dcfe:	f04f 0800 	mov.w	r8, #0
 800dd02:	f104 0b1a 	add.w	fp, r4, #26
 800dd06:	e7f4      	b.n	800dcf2 <_printf_float+0x40e>
 800dd08:	2301      	movs	r3, #1
 800dd0a:	4642      	mov	r2, r8
 800dd0c:	e7e1      	b.n	800dcd2 <_printf_float+0x3ee>
 800dd0e:	2301      	movs	r3, #1
 800dd10:	464a      	mov	r2, r9
 800dd12:	4631      	mov	r1, r6
 800dd14:	4628      	mov	r0, r5
 800dd16:	47b8      	blx	r7
 800dd18:	3001      	adds	r0, #1
 800dd1a:	f43f ae3e 	beq.w	800d99a <_printf_float+0xb6>
 800dd1e:	f108 0801 	add.w	r8, r8, #1
 800dd22:	68e3      	ldr	r3, [r4, #12]
 800dd24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dd26:	1a5b      	subs	r3, r3, r1
 800dd28:	4543      	cmp	r3, r8
 800dd2a:	dcf0      	bgt.n	800dd0e <_printf_float+0x42a>
 800dd2c:	e6fc      	b.n	800db28 <_printf_float+0x244>
 800dd2e:	f04f 0800 	mov.w	r8, #0
 800dd32:	f104 0919 	add.w	r9, r4, #25
 800dd36:	e7f4      	b.n	800dd22 <_printf_float+0x43e>

0800dd38 <_printf_common>:
 800dd38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd3c:	4616      	mov	r6, r2
 800dd3e:	4698      	mov	r8, r3
 800dd40:	688a      	ldr	r2, [r1, #8]
 800dd42:	690b      	ldr	r3, [r1, #16]
 800dd44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	bfb8      	it	lt
 800dd4c:	4613      	movlt	r3, r2
 800dd4e:	6033      	str	r3, [r6, #0]
 800dd50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dd54:	4607      	mov	r7, r0
 800dd56:	460c      	mov	r4, r1
 800dd58:	b10a      	cbz	r2, 800dd5e <_printf_common+0x26>
 800dd5a:	3301      	adds	r3, #1
 800dd5c:	6033      	str	r3, [r6, #0]
 800dd5e:	6823      	ldr	r3, [r4, #0]
 800dd60:	0699      	lsls	r1, r3, #26
 800dd62:	bf42      	ittt	mi
 800dd64:	6833      	ldrmi	r3, [r6, #0]
 800dd66:	3302      	addmi	r3, #2
 800dd68:	6033      	strmi	r3, [r6, #0]
 800dd6a:	6825      	ldr	r5, [r4, #0]
 800dd6c:	f015 0506 	ands.w	r5, r5, #6
 800dd70:	d106      	bne.n	800dd80 <_printf_common+0x48>
 800dd72:	f104 0a19 	add.w	sl, r4, #25
 800dd76:	68e3      	ldr	r3, [r4, #12]
 800dd78:	6832      	ldr	r2, [r6, #0]
 800dd7a:	1a9b      	subs	r3, r3, r2
 800dd7c:	42ab      	cmp	r3, r5
 800dd7e:	dc26      	bgt.n	800ddce <_printf_common+0x96>
 800dd80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dd84:	6822      	ldr	r2, [r4, #0]
 800dd86:	3b00      	subs	r3, #0
 800dd88:	bf18      	it	ne
 800dd8a:	2301      	movne	r3, #1
 800dd8c:	0692      	lsls	r2, r2, #26
 800dd8e:	d42b      	bmi.n	800dde8 <_printf_common+0xb0>
 800dd90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dd94:	4641      	mov	r1, r8
 800dd96:	4638      	mov	r0, r7
 800dd98:	47c8      	blx	r9
 800dd9a:	3001      	adds	r0, #1
 800dd9c:	d01e      	beq.n	800dddc <_printf_common+0xa4>
 800dd9e:	6823      	ldr	r3, [r4, #0]
 800dda0:	6922      	ldr	r2, [r4, #16]
 800dda2:	f003 0306 	and.w	r3, r3, #6
 800dda6:	2b04      	cmp	r3, #4
 800dda8:	bf02      	ittt	eq
 800ddaa:	68e5      	ldreq	r5, [r4, #12]
 800ddac:	6833      	ldreq	r3, [r6, #0]
 800ddae:	1aed      	subeq	r5, r5, r3
 800ddb0:	68a3      	ldr	r3, [r4, #8]
 800ddb2:	bf0c      	ite	eq
 800ddb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ddb8:	2500      	movne	r5, #0
 800ddba:	4293      	cmp	r3, r2
 800ddbc:	bfc4      	itt	gt
 800ddbe:	1a9b      	subgt	r3, r3, r2
 800ddc0:	18ed      	addgt	r5, r5, r3
 800ddc2:	2600      	movs	r6, #0
 800ddc4:	341a      	adds	r4, #26
 800ddc6:	42b5      	cmp	r5, r6
 800ddc8:	d11a      	bne.n	800de00 <_printf_common+0xc8>
 800ddca:	2000      	movs	r0, #0
 800ddcc:	e008      	b.n	800dde0 <_printf_common+0xa8>
 800ddce:	2301      	movs	r3, #1
 800ddd0:	4652      	mov	r2, sl
 800ddd2:	4641      	mov	r1, r8
 800ddd4:	4638      	mov	r0, r7
 800ddd6:	47c8      	blx	r9
 800ddd8:	3001      	adds	r0, #1
 800ddda:	d103      	bne.n	800dde4 <_printf_common+0xac>
 800dddc:	f04f 30ff 	mov.w	r0, #4294967295
 800dde0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dde4:	3501      	adds	r5, #1
 800dde6:	e7c6      	b.n	800dd76 <_printf_common+0x3e>
 800dde8:	18e1      	adds	r1, r4, r3
 800ddea:	1c5a      	adds	r2, r3, #1
 800ddec:	2030      	movs	r0, #48	@ 0x30
 800ddee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ddf2:	4422      	add	r2, r4
 800ddf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ddf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ddfc:	3302      	adds	r3, #2
 800ddfe:	e7c7      	b.n	800dd90 <_printf_common+0x58>
 800de00:	2301      	movs	r3, #1
 800de02:	4622      	mov	r2, r4
 800de04:	4641      	mov	r1, r8
 800de06:	4638      	mov	r0, r7
 800de08:	47c8      	blx	r9
 800de0a:	3001      	adds	r0, #1
 800de0c:	d0e6      	beq.n	800dddc <_printf_common+0xa4>
 800de0e:	3601      	adds	r6, #1
 800de10:	e7d9      	b.n	800ddc6 <_printf_common+0x8e>
	...

0800de14 <_printf_i>:
 800de14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de18:	7e0f      	ldrb	r7, [r1, #24]
 800de1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800de1c:	2f78      	cmp	r7, #120	@ 0x78
 800de1e:	4691      	mov	r9, r2
 800de20:	4680      	mov	r8, r0
 800de22:	460c      	mov	r4, r1
 800de24:	469a      	mov	sl, r3
 800de26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800de2a:	d807      	bhi.n	800de3c <_printf_i+0x28>
 800de2c:	2f62      	cmp	r7, #98	@ 0x62
 800de2e:	d80a      	bhi.n	800de46 <_printf_i+0x32>
 800de30:	2f00      	cmp	r7, #0
 800de32:	f000 80d2 	beq.w	800dfda <_printf_i+0x1c6>
 800de36:	2f58      	cmp	r7, #88	@ 0x58
 800de38:	f000 80b9 	beq.w	800dfae <_printf_i+0x19a>
 800de3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800de40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800de44:	e03a      	b.n	800debc <_printf_i+0xa8>
 800de46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800de4a:	2b15      	cmp	r3, #21
 800de4c:	d8f6      	bhi.n	800de3c <_printf_i+0x28>
 800de4e:	a101      	add	r1, pc, #4	@ (adr r1, 800de54 <_printf_i+0x40>)
 800de50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800de54:	0800dead 	.word	0x0800dead
 800de58:	0800dec1 	.word	0x0800dec1
 800de5c:	0800de3d 	.word	0x0800de3d
 800de60:	0800de3d 	.word	0x0800de3d
 800de64:	0800de3d 	.word	0x0800de3d
 800de68:	0800de3d 	.word	0x0800de3d
 800de6c:	0800dec1 	.word	0x0800dec1
 800de70:	0800de3d 	.word	0x0800de3d
 800de74:	0800de3d 	.word	0x0800de3d
 800de78:	0800de3d 	.word	0x0800de3d
 800de7c:	0800de3d 	.word	0x0800de3d
 800de80:	0800dfc1 	.word	0x0800dfc1
 800de84:	0800deeb 	.word	0x0800deeb
 800de88:	0800df7b 	.word	0x0800df7b
 800de8c:	0800de3d 	.word	0x0800de3d
 800de90:	0800de3d 	.word	0x0800de3d
 800de94:	0800dfe3 	.word	0x0800dfe3
 800de98:	0800de3d 	.word	0x0800de3d
 800de9c:	0800deeb 	.word	0x0800deeb
 800dea0:	0800de3d 	.word	0x0800de3d
 800dea4:	0800de3d 	.word	0x0800de3d
 800dea8:	0800df83 	.word	0x0800df83
 800deac:	6833      	ldr	r3, [r6, #0]
 800deae:	1d1a      	adds	r2, r3, #4
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	6032      	str	r2, [r6, #0]
 800deb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800deb8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800debc:	2301      	movs	r3, #1
 800debe:	e09d      	b.n	800dffc <_printf_i+0x1e8>
 800dec0:	6833      	ldr	r3, [r6, #0]
 800dec2:	6820      	ldr	r0, [r4, #0]
 800dec4:	1d19      	adds	r1, r3, #4
 800dec6:	6031      	str	r1, [r6, #0]
 800dec8:	0606      	lsls	r6, r0, #24
 800deca:	d501      	bpl.n	800ded0 <_printf_i+0xbc>
 800decc:	681d      	ldr	r5, [r3, #0]
 800dece:	e003      	b.n	800ded8 <_printf_i+0xc4>
 800ded0:	0645      	lsls	r5, r0, #25
 800ded2:	d5fb      	bpl.n	800decc <_printf_i+0xb8>
 800ded4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ded8:	2d00      	cmp	r5, #0
 800deda:	da03      	bge.n	800dee4 <_printf_i+0xd0>
 800dedc:	232d      	movs	r3, #45	@ 0x2d
 800dede:	426d      	negs	r5, r5
 800dee0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dee4:	4859      	ldr	r0, [pc, #356]	@ (800e04c <_printf_i+0x238>)
 800dee6:	230a      	movs	r3, #10
 800dee8:	e011      	b.n	800df0e <_printf_i+0xfa>
 800deea:	6821      	ldr	r1, [r4, #0]
 800deec:	6833      	ldr	r3, [r6, #0]
 800deee:	0608      	lsls	r0, r1, #24
 800def0:	f853 5b04 	ldr.w	r5, [r3], #4
 800def4:	d402      	bmi.n	800defc <_printf_i+0xe8>
 800def6:	0649      	lsls	r1, r1, #25
 800def8:	bf48      	it	mi
 800defa:	b2ad      	uxthmi	r5, r5
 800defc:	2f6f      	cmp	r7, #111	@ 0x6f
 800defe:	4853      	ldr	r0, [pc, #332]	@ (800e04c <_printf_i+0x238>)
 800df00:	6033      	str	r3, [r6, #0]
 800df02:	bf14      	ite	ne
 800df04:	230a      	movne	r3, #10
 800df06:	2308      	moveq	r3, #8
 800df08:	2100      	movs	r1, #0
 800df0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800df0e:	6866      	ldr	r6, [r4, #4]
 800df10:	60a6      	str	r6, [r4, #8]
 800df12:	2e00      	cmp	r6, #0
 800df14:	bfa2      	ittt	ge
 800df16:	6821      	ldrge	r1, [r4, #0]
 800df18:	f021 0104 	bicge.w	r1, r1, #4
 800df1c:	6021      	strge	r1, [r4, #0]
 800df1e:	b90d      	cbnz	r5, 800df24 <_printf_i+0x110>
 800df20:	2e00      	cmp	r6, #0
 800df22:	d04b      	beq.n	800dfbc <_printf_i+0x1a8>
 800df24:	4616      	mov	r6, r2
 800df26:	fbb5 f1f3 	udiv	r1, r5, r3
 800df2a:	fb03 5711 	mls	r7, r3, r1, r5
 800df2e:	5dc7      	ldrb	r7, [r0, r7]
 800df30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800df34:	462f      	mov	r7, r5
 800df36:	42bb      	cmp	r3, r7
 800df38:	460d      	mov	r5, r1
 800df3a:	d9f4      	bls.n	800df26 <_printf_i+0x112>
 800df3c:	2b08      	cmp	r3, #8
 800df3e:	d10b      	bne.n	800df58 <_printf_i+0x144>
 800df40:	6823      	ldr	r3, [r4, #0]
 800df42:	07df      	lsls	r7, r3, #31
 800df44:	d508      	bpl.n	800df58 <_printf_i+0x144>
 800df46:	6923      	ldr	r3, [r4, #16]
 800df48:	6861      	ldr	r1, [r4, #4]
 800df4a:	4299      	cmp	r1, r3
 800df4c:	bfde      	ittt	le
 800df4e:	2330      	movle	r3, #48	@ 0x30
 800df50:	f806 3c01 	strble.w	r3, [r6, #-1]
 800df54:	f106 36ff 	addle.w	r6, r6, #4294967295
 800df58:	1b92      	subs	r2, r2, r6
 800df5a:	6122      	str	r2, [r4, #16]
 800df5c:	f8cd a000 	str.w	sl, [sp]
 800df60:	464b      	mov	r3, r9
 800df62:	aa03      	add	r2, sp, #12
 800df64:	4621      	mov	r1, r4
 800df66:	4640      	mov	r0, r8
 800df68:	f7ff fee6 	bl	800dd38 <_printf_common>
 800df6c:	3001      	adds	r0, #1
 800df6e:	d14a      	bne.n	800e006 <_printf_i+0x1f2>
 800df70:	f04f 30ff 	mov.w	r0, #4294967295
 800df74:	b004      	add	sp, #16
 800df76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df7a:	6823      	ldr	r3, [r4, #0]
 800df7c:	f043 0320 	orr.w	r3, r3, #32
 800df80:	6023      	str	r3, [r4, #0]
 800df82:	4833      	ldr	r0, [pc, #204]	@ (800e050 <_printf_i+0x23c>)
 800df84:	2778      	movs	r7, #120	@ 0x78
 800df86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800df8a:	6823      	ldr	r3, [r4, #0]
 800df8c:	6831      	ldr	r1, [r6, #0]
 800df8e:	061f      	lsls	r7, r3, #24
 800df90:	f851 5b04 	ldr.w	r5, [r1], #4
 800df94:	d402      	bmi.n	800df9c <_printf_i+0x188>
 800df96:	065f      	lsls	r7, r3, #25
 800df98:	bf48      	it	mi
 800df9a:	b2ad      	uxthmi	r5, r5
 800df9c:	6031      	str	r1, [r6, #0]
 800df9e:	07d9      	lsls	r1, r3, #31
 800dfa0:	bf44      	itt	mi
 800dfa2:	f043 0320 	orrmi.w	r3, r3, #32
 800dfa6:	6023      	strmi	r3, [r4, #0]
 800dfa8:	b11d      	cbz	r5, 800dfb2 <_printf_i+0x19e>
 800dfaa:	2310      	movs	r3, #16
 800dfac:	e7ac      	b.n	800df08 <_printf_i+0xf4>
 800dfae:	4827      	ldr	r0, [pc, #156]	@ (800e04c <_printf_i+0x238>)
 800dfb0:	e7e9      	b.n	800df86 <_printf_i+0x172>
 800dfb2:	6823      	ldr	r3, [r4, #0]
 800dfb4:	f023 0320 	bic.w	r3, r3, #32
 800dfb8:	6023      	str	r3, [r4, #0]
 800dfba:	e7f6      	b.n	800dfaa <_printf_i+0x196>
 800dfbc:	4616      	mov	r6, r2
 800dfbe:	e7bd      	b.n	800df3c <_printf_i+0x128>
 800dfc0:	6833      	ldr	r3, [r6, #0]
 800dfc2:	6825      	ldr	r5, [r4, #0]
 800dfc4:	6961      	ldr	r1, [r4, #20]
 800dfc6:	1d18      	adds	r0, r3, #4
 800dfc8:	6030      	str	r0, [r6, #0]
 800dfca:	062e      	lsls	r6, r5, #24
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	d501      	bpl.n	800dfd4 <_printf_i+0x1c0>
 800dfd0:	6019      	str	r1, [r3, #0]
 800dfd2:	e002      	b.n	800dfda <_printf_i+0x1c6>
 800dfd4:	0668      	lsls	r0, r5, #25
 800dfd6:	d5fb      	bpl.n	800dfd0 <_printf_i+0x1bc>
 800dfd8:	8019      	strh	r1, [r3, #0]
 800dfda:	2300      	movs	r3, #0
 800dfdc:	6123      	str	r3, [r4, #16]
 800dfde:	4616      	mov	r6, r2
 800dfe0:	e7bc      	b.n	800df5c <_printf_i+0x148>
 800dfe2:	6833      	ldr	r3, [r6, #0]
 800dfe4:	1d1a      	adds	r2, r3, #4
 800dfe6:	6032      	str	r2, [r6, #0]
 800dfe8:	681e      	ldr	r6, [r3, #0]
 800dfea:	6862      	ldr	r2, [r4, #4]
 800dfec:	2100      	movs	r1, #0
 800dfee:	4630      	mov	r0, r6
 800dff0:	f7f2 f8f6 	bl	80001e0 <memchr>
 800dff4:	b108      	cbz	r0, 800dffa <_printf_i+0x1e6>
 800dff6:	1b80      	subs	r0, r0, r6
 800dff8:	6060      	str	r0, [r4, #4]
 800dffa:	6863      	ldr	r3, [r4, #4]
 800dffc:	6123      	str	r3, [r4, #16]
 800dffe:	2300      	movs	r3, #0
 800e000:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e004:	e7aa      	b.n	800df5c <_printf_i+0x148>
 800e006:	6923      	ldr	r3, [r4, #16]
 800e008:	4632      	mov	r2, r6
 800e00a:	4649      	mov	r1, r9
 800e00c:	4640      	mov	r0, r8
 800e00e:	47d0      	blx	sl
 800e010:	3001      	adds	r0, #1
 800e012:	d0ad      	beq.n	800df70 <_printf_i+0x15c>
 800e014:	6823      	ldr	r3, [r4, #0]
 800e016:	079b      	lsls	r3, r3, #30
 800e018:	d413      	bmi.n	800e042 <_printf_i+0x22e>
 800e01a:	68e0      	ldr	r0, [r4, #12]
 800e01c:	9b03      	ldr	r3, [sp, #12]
 800e01e:	4298      	cmp	r0, r3
 800e020:	bfb8      	it	lt
 800e022:	4618      	movlt	r0, r3
 800e024:	e7a6      	b.n	800df74 <_printf_i+0x160>
 800e026:	2301      	movs	r3, #1
 800e028:	4632      	mov	r2, r6
 800e02a:	4649      	mov	r1, r9
 800e02c:	4640      	mov	r0, r8
 800e02e:	47d0      	blx	sl
 800e030:	3001      	adds	r0, #1
 800e032:	d09d      	beq.n	800df70 <_printf_i+0x15c>
 800e034:	3501      	adds	r5, #1
 800e036:	68e3      	ldr	r3, [r4, #12]
 800e038:	9903      	ldr	r1, [sp, #12]
 800e03a:	1a5b      	subs	r3, r3, r1
 800e03c:	42ab      	cmp	r3, r5
 800e03e:	dcf2      	bgt.n	800e026 <_printf_i+0x212>
 800e040:	e7eb      	b.n	800e01a <_printf_i+0x206>
 800e042:	2500      	movs	r5, #0
 800e044:	f104 0619 	add.w	r6, r4, #25
 800e048:	e7f5      	b.n	800e036 <_printf_i+0x222>
 800e04a:	bf00      	nop
 800e04c:	08011b73 	.word	0x08011b73
 800e050:	08011b84 	.word	0x08011b84

0800e054 <_scanf_float>:
 800e054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e058:	b087      	sub	sp, #28
 800e05a:	4617      	mov	r7, r2
 800e05c:	9303      	str	r3, [sp, #12]
 800e05e:	688b      	ldr	r3, [r1, #8]
 800e060:	1e5a      	subs	r2, r3, #1
 800e062:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e066:	bf81      	itttt	hi
 800e068:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e06c:	eb03 0b05 	addhi.w	fp, r3, r5
 800e070:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e074:	608b      	strhi	r3, [r1, #8]
 800e076:	680b      	ldr	r3, [r1, #0]
 800e078:	460a      	mov	r2, r1
 800e07a:	f04f 0500 	mov.w	r5, #0
 800e07e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e082:	f842 3b1c 	str.w	r3, [r2], #28
 800e086:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e08a:	4680      	mov	r8, r0
 800e08c:	460c      	mov	r4, r1
 800e08e:	bf98      	it	ls
 800e090:	f04f 0b00 	movls.w	fp, #0
 800e094:	9201      	str	r2, [sp, #4]
 800e096:	4616      	mov	r6, r2
 800e098:	46aa      	mov	sl, r5
 800e09a:	46a9      	mov	r9, r5
 800e09c:	9502      	str	r5, [sp, #8]
 800e09e:	68a2      	ldr	r2, [r4, #8]
 800e0a0:	b152      	cbz	r2, 800e0b8 <_scanf_float+0x64>
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	781b      	ldrb	r3, [r3, #0]
 800e0a6:	2b4e      	cmp	r3, #78	@ 0x4e
 800e0a8:	d864      	bhi.n	800e174 <_scanf_float+0x120>
 800e0aa:	2b40      	cmp	r3, #64	@ 0x40
 800e0ac:	d83c      	bhi.n	800e128 <_scanf_float+0xd4>
 800e0ae:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e0b2:	b2c8      	uxtb	r0, r1
 800e0b4:	280e      	cmp	r0, #14
 800e0b6:	d93a      	bls.n	800e12e <_scanf_float+0xda>
 800e0b8:	f1b9 0f00 	cmp.w	r9, #0
 800e0bc:	d003      	beq.n	800e0c6 <_scanf_float+0x72>
 800e0be:	6823      	ldr	r3, [r4, #0]
 800e0c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e0c4:	6023      	str	r3, [r4, #0]
 800e0c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e0ca:	f1ba 0f01 	cmp.w	sl, #1
 800e0ce:	f200 8117 	bhi.w	800e300 <_scanf_float+0x2ac>
 800e0d2:	9b01      	ldr	r3, [sp, #4]
 800e0d4:	429e      	cmp	r6, r3
 800e0d6:	f200 8108 	bhi.w	800e2ea <_scanf_float+0x296>
 800e0da:	2001      	movs	r0, #1
 800e0dc:	b007      	add	sp, #28
 800e0de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0e2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e0e6:	2a0d      	cmp	r2, #13
 800e0e8:	d8e6      	bhi.n	800e0b8 <_scanf_float+0x64>
 800e0ea:	a101      	add	r1, pc, #4	@ (adr r1, 800e0f0 <_scanf_float+0x9c>)
 800e0ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e0f0:	0800e237 	.word	0x0800e237
 800e0f4:	0800e0b9 	.word	0x0800e0b9
 800e0f8:	0800e0b9 	.word	0x0800e0b9
 800e0fc:	0800e0b9 	.word	0x0800e0b9
 800e100:	0800e297 	.word	0x0800e297
 800e104:	0800e26f 	.word	0x0800e26f
 800e108:	0800e0b9 	.word	0x0800e0b9
 800e10c:	0800e0b9 	.word	0x0800e0b9
 800e110:	0800e245 	.word	0x0800e245
 800e114:	0800e0b9 	.word	0x0800e0b9
 800e118:	0800e0b9 	.word	0x0800e0b9
 800e11c:	0800e0b9 	.word	0x0800e0b9
 800e120:	0800e0b9 	.word	0x0800e0b9
 800e124:	0800e1fd 	.word	0x0800e1fd
 800e128:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e12c:	e7db      	b.n	800e0e6 <_scanf_float+0x92>
 800e12e:	290e      	cmp	r1, #14
 800e130:	d8c2      	bhi.n	800e0b8 <_scanf_float+0x64>
 800e132:	a001      	add	r0, pc, #4	@ (adr r0, 800e138 <_scanf_float+0xe4>)
 800e134:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e138:	0800e1ed 	.word	0x0800e1ed
 800e13c:	0800e0b9 	.word	0x0800e0b9
 800e140:	0800e1ed 	.word	0x0800e1ed
 800e144:	0800e283 	.word	0x0800e283
 800e148:	0800e0b9 	.word	0x0800e0b9
 800e14c:	0800e195 	.word	0x0800e195
 800e150:	0800e1d3 	.word	0x0800e1d3
 800e154:	0800e1d3 	.word	0x0800e1d3
 800e158:	0800e1d3 	.word	0x0800e1d3
 800e15c:	0800e1d3 	.word	0x0800e1d3
 800e160:	0800e1d3 	.word	0x0800e1d3
 800e164:	0800e1d3 	.word	0x0800e1d3
 800e168:	0800e1d3 	.word	0x0800e1d3
 800e16c:	0800e1d3 	.word	0x0800e1d3
 800e170:	0800e1d3 	.word	0x0800e1d3
 800e174:	2b6e      	cmp	r3, #110	@ 0x6e
 800e176:	d809      	bhi.n	800e18c <_scanf_float+0x138>
 800e178:	2b60      	cmp	r3, #96	@ 0x60
 800e17a:	d8b2      	bhi.n	800e0e2 <_scanf_float+0x8e>
 800e17c:	2b54      	cmp	r3, #84	@ 0x54
 800e17e:	d07b      	beq.n	800e278 <_scanf_float+0x224>
 800e180:	2b59      	cmp	r3, #89	@ 0x59
 800e182:	d199      	bne.n	800e0b8 <_scanf_float+0x64>
 800e184:	2d07      	cmp	r5, #7
 800e186:	d197      	bne.n	800e0b8 <_scanf_float+0x64>
 800e188:	2508      	movs	r5, #8
 800e18a:	e02c      	b.n	800e1e6 <_scanf_float+0x192>
 800e18c:	2b74      	cmp	r3, #116	@ 0x74
 800e18e:	d073      	beq.n	800e278 <_scanf_float+0x224>
 800e190:	2b79      	cmp	r3, #121	@ 0x79
 800e192:	e7f6      	b.n	800e182 <_scanf_float+0x12e>
 800e194:	6821      	ldr	r1, [r4, #0]
 800e196:	05c8      	lsls	r0, r1, #23
 800e198:	d51b      	bpl.n	800e1d2 <_scanf_float+0x17e>
 800e19a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e19e:	6021      	str	r1, [r4, #0]
 800e1a0:	f109 0901 	add.w	r9, r9, #1
 800e1a4:	f1bb 0f00 	cmp.w	fp, #0
 800e1a8:	d003      	beq.n	800e1b2 <_scanf_float+0x15e>
 800e1aa:	3201      	adds	r2, #1
 800e1ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e1b0:	60a2      	str	r2, [r4, #8]
 800e1b2:	68a3      	ldr	r3, [r4, #8]
 800e1b4:	3b01      	subs	r3, #1
 800e1b6:	60a3      	str	r3, [r4, #8]
 800e1b8:	6923      	ldr	r3, [r4, #16]
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	6123      	str	r3, [r4, #16]
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	3b01      	subs	r3, #1
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	607b      	str	r3, [r7, #4]
 800e1c6:	f340 8087 	ble.w	800e2d8 <_scanf_float+0x284>
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	3301      	adds	r3, #1
 800e1ce:	603b      	str	r3, [r7, #0]
 800e1d0:	e765      	b.n	800e09e <_scanf_float+0x4a>
 800e1d2:	eb1a 0105 	adds.w	r1, sl, r5
 800e1d6:	f47f af6f 	bne.w	800e0b8 <_scanf_float+0x64>
 800e1da:	6822      	ldr	r2, [r4, #0]
 800e1dc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e1e0:	6022      	str	r2, [r4, #0]
 800e1e2:	460d      	mov	r5, r1
 800e1e4:	468a      	mov	sl, r1
 800e1e6:	f806 3b01 	strb.w	r3, [r6], #1
 800e1ea:	e7e2      	b.n	800e1b2 <_scanf_float+0x15e>
 800e1ec:	6822      	ldr	r2, [r4, #0]
 800e1ee:	0610      	lsls	r0, r2, #24
 800e1f0:	f57f af62 	bpl.w	800e0b8 <_scanf_float+0x64>
 800e1f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e1f8:	6022      	str	r2, [r4, #0]
 800e1fa:	e7f4      	b.n	800e1e6 <_scanf_float+0x192>
 800e1fc:	f1ba 0f00 	cmp.w	sl, #0
 800e200:	d10e      	bne.n	800e220 <_scanf_float+0x1cc>
 800e202:	f1b9 0f00 	cmp.w	r9, #0
 800e206:	d10e      	bne.n	800e226 <_scanf_float+0x1d2>
 800e208:	6822      	ldr	r2, [r4, #0]
 800e20a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e20e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e212:	d108      	bne.n	800e226 <_scanf_float+0x1d2>
 800e214:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e218:	6022      	str	r2, [r4, #0]
 800e21a:	f04f 0a01 	mov.w	sl, #1
 800e21e:	e7e2      	b.n	800e1e6 <_scanf_float+0x192>
 800e220:	f1ba 0f02 	cmp.w	sl, #2
 800e224:	d055      	beq.n	800e2d2 <_scanf_float+0x27e>
 800e226:	2d01      	cmp	r5, #1
 800e228:	d002      	beq.n	800e230 <_scanf_float+0x1dc>
 800e22a:	2d04      	cmp	r5, #4
 800e22c:	f47f af44 	bne.w	800e0b8 <_scanf_float+0x64>
 800e230:	3501      	adds	r5, #1
 800e232:	b2ed      	uxtb	r5, r5
 800e234:	e7d7      	b.n	800e1e6 <_scanf_float+0x192>
 800e236:	f1ba 0f01 	cmp.w	sl, #1
 800e23a:	f47f af3d 	bne.w	800e0b8 <_scanf_float+0x64>
 800e23e:	f04f 0a02 	mov.w	sl, #2
 800e242:	e7d0      	b.n	800e1e6 <_scanf_float+0x192>
 800e244:	b97d      	cbnz	r5, 800e266 <_scanf_float+0x212>
 800e246:	f1b9 0f00 	cmp.w	r9, #0
 800e24a:	f47f af38 	bne.w	800e0be <_scanf_float+0x6a>
 800e24e:	6822      	ldr	r2, [r4, #0]
 800e250:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e254:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e258:	f040 8108 	bne.w	800e46c <_scanf_float+0x418>
 800e25c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e260:	6022      	str	r2, [r4, #0]
 800e262:	2501      	movs	r5, #1
 800e264:	e7bf      	b.n	800e1e6 <_scanf_float+0x192>
 800e266:	2d03      	cmp	r5, #3
 800e268:	d0e2      	beq.n	800e230 <_scanf_float+0x1dc>
 800e26a:	2d05      	cmp	r5, #5
 800e26c:	e7de      	b.n	800e22c <_scanf_float+0x1d8>
 800e26e:	2d02      	cmp	r5, #2
 800e270:	f47f af22 	bne.w	800e0b8 <_scanf_float+0x64>
 800e274:	2503      	movs	r5, #3
 800e276:	e7b6      	b.n	800e1e6 <_scanf_float+0x192>
 800e278:	2d06      	cmp	r5, #6
 800e27a:	f47f af1d 	bne.w	800e0b8 <_scanf_float+0x64>
 800e27e:	2507      	movs	r5, #7
 800e280:	e7b1      	b.n	800e1e6 <_scanf_float+0x192>
 800e282:	6822      	ldr	r2, [r4, #0]
 800e284:	0591      	lsls	r1, r2, #22
 800e286:	f57f af17 	bpl.w	800e0b8 <_scanf_float+0x64>
 800e28a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e28e:	6022      	str	r2, [r4, #0]
 800e290:	f8cd 9008 	str.w	r9, [sp, #8]
 800e294:	e7a7      	b.n	800e1e6 <_scanf_float+0x192>
 800e296:	6822      	ldr	r2, [r4, #0]
 800e298:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e29c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e2a0:	d006      	beq.n	800e2b0 <_scanf_float+0x25c>
 800e2a2:	0550      	lsls	r0, r2, #21
 800e2a4:	f57f af08 	bpl.w	800e0b8 <_scanf_float+0x64>
 800e2a8:	f1b9 0f00 	cmp.w	r9, #0
 800e2ac:	f000 80de 	beq.w	800e46c <_scanf_float+0x418>
 800e2b0:	0591      	lsls	r1, r2, #22
 800e2b2:	bf58      	it	pl
 800e2b4:	9902      	ldrpl	r1, [sp, #8]
 800e2b6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e2ba:	bf58      	it	pl
 800e2bc:	eba9 0101 	subpl.w	r1, r9, r1
 800e2c0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e2c4:	bf58      	it	pl
 800e2c6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e2ca:	6022      	str	r2, [r4, #0]
 800e2cc:	f04f 0900 	mov.w	r9, #0
 800e2d0:	e789      	b.n	800e1e6 <_scanf_float+0x192>
 800e2d2:	f04f 0a03 	mov.w	sl, #3
 800e2d6:	e786      	b.n	800e1e6 <_scanf_float+0x192>
 800e2d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e2dc:	4639      	mov	r1, r7
 800e2de:	4640      	mov	r0, r8
 800e2e0:	4798      	blx	r3
 800e2e2:	2800      	cmp	r0, #0
 800e2e4:	f43f aedb 	beq.w	800e09e <_scanf_float+0x4a>
 800e2e8:	e6e6      	b.n	800e0b8 <_scanf_float+0x64>
 800e2ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e2ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e2f2:	463a      	mov	r2, r7
 800e2f4:	4640      	mov	r0, r8
 800e2f6:	4798      	blx	r3
 800e2f8:	6923      	ldr	r3, [r4, #16]
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	6123      	str	r3, [r4, #16]
 800e2fe:	e6e8      	b.n	800e0d2 <_scanf_float+0x7e>
 800e300:	1e6b      	subs	r3, r5, #1
 800e302:	2b06      	cmp	r3, #6
 800e304:	d824      	bhi.n	800e350 <_scanf_float+0x2fc>
 800e306:	2d02      	cmp	r5, #2
 800e308:	d836      	bhi.n	800e378 <_scanf_float+0x324>
 800e30a:	9b01      	ldr	r3, [sp, #4]
 800e30c:	429e      	cmp	r6, r3
 800e30e:	f67f aee4 	bls.w	800e0da <_scanf_float+0x86>
 800e312:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e316:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e31a:	463a      	mov	r2, r7
 800e31c:	4640      	mov	r0, r8
 800e31e:	4798      	blx	r3
 800e320:	6923      	ldr	r3, [r4, #16]
 800e322:	3b01      	subs	r3, #1
 800e324:	6123      	str	r3, [r4, #16]
 800e326:	e7f0      	b.n	800e30a <_scanf_float+0x2b6>
 800e328:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e32c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e330:	463a      	mov	r2, r7
 800e332:	4640      	mov	r0, r8
 800e334:	4798      	blx	r3
 800e336:	6923      	ldr	r3, [r4, #16]
 800e338:	3b01      	subs	r3, #1
 800e33a:	6123      	str	r3, [r4, #16]
 800e33c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e340:	fa5f fa8a 	uxtb.w	sl, sl
 800e344:	f1ba 0f02 	cmp.w	sl, #2
 800e348:	d1ee      	bne.n	800e328 <_scanf_float+0x2d4>
 800e34a:	3d03      	subs	r5, #3
 800e34c:	b2ed      	uxtb	r5, r5
 800e34e:	1b76      	subs	r6, r6, r5
 800e350:	6823      	ldr	r3, [r4, #0]
 800e352:	05da      	lsls	r2, r3, #23
 800e354:	d530      	bpl.n	800e3b8 <_scanf_float+0x364>
 800e356:	055b      	lsls	r3, r3, #21
 800e358:	d511      	bpl.n	800e37e <_scanf_float+0x32a>
 800e35a:	9b01      	ldr	r3, [sp, #4]
 800e35c:	429e      	cmp	r6, r3
 800e35e:	f67f aebc 	bls.w	800e0da <_scanf_float+0x86>
 800e362:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e366:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e36a:	463a      	mov	r2, r7
 800e36c:	4640      	mov	r0, r8
 800e36e:	4798      	blx	r3
 800e370:	6923      	ldr	r3, [r4, #16]
 800e372:	3b01      	subs	r3, #1
 800e374:	6123      	str	r3, [r4, #16]
 800e376:	e7f0      	b.n	800e35a <_scanf_float+0x306>
 800e378:	46aa      	mov	sl, r5
 800e37a:	46b3      	mov	fp, r6
 800e37c:	e7de      	b.n	800e33c <_scanf_float+0x2e8>
 800e37e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e382:	6923      	ldr	r3, [r4, #16]
 800e384:	2965      	cmp	r1, #101	@ 0x65
 800e386:	f103 33ff 	add.w	r3, r3, #4294967295
 800e38a:	f106 35ff 	add.w	r5, r6, #4294967295
 800e38e:	6123      	str	r3, [r4, #16]
 800e390:	d00c      	beq.n	800e3ac <_scanf_float+0x358>
 800e392:	2945      	cmp	r1, #69	@ 0x45
 800e394:	d00a      	beq.n	800e3ac <_scanf_float+0x358>
 800e396:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e39a:	463a      	mov	r2, r7
 800e39c:	4640      	mov	r0, r8
 800e39e:	4798      	blx	r3
 800e3a0:	6923      	ldr	r3, [r4, #16]
 800e3a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e3a6:	3b01      	subs	r3, #1
 800e3a8:	1eb5      	subs	r5, r6, #2
 800e3aa:	6123      	str	r3, [r4, #16]
 800e3ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e3b0:	463a      	mov	r2, r7
 800e3b2:	4640      	mov	r0, r8
 800e3b4:	4798      	blx	r3
 800e3b6:	462e      	mov	r6, r5
 800e3b8:	6822      	ldr	r2, [r4, #0]
 800e3ba:	f012 0210 	ands.w	r2, r2, #16
 800e3be:	d001      	beq.n	800e3c4 <_scanf_float+0x370>
 800e3c0:	2000      	movs	r0, #0
 800e3c2:	e68b      	b.n	800e0dc <_scanf_float+0x88>
 800e3c4:	7032      	strb	r2, [r6, #0]
 800e3c6:	6823      	ldr	r3, [r4, #0]
 800e3c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e3cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e3d0:	d11c      	bne.n	800e40c <_scanf_float+0x3b8>
 800e3d2:	9b02      	ldr	r3, [sp, #8]
 800e3d4:	454b      	cmp	r3, r9
 800e3d6:	eba3 0209 	sub.w	r2, r3, r9
 800e3da:	d123      	bne.n	800e424 <_scanf_float+0x3d0>
 800e3dc:	9901      	ldr	r1, [sp, #4]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	4640      	mov	r0, r8
 800e3e2:	f7ff f8fd 	bl	800d5e0 <_strtod_r>
 800e3e6:	9b03      	ldr	r3, [sp, #12]
 800e3e8:	6821      	ldr	r1, [r4, #0]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f011 0f02 	tst.w	r1, #2
 800e3f0:	ec57 6b10 	vmov	r6, r7, d0
 800e3f4:	f103 0204 	add.w	r2, r3, #4
 800e3f8:	d01f      	beq.n	800e43a <_scanf_float+0x3e6>
 800e3fa:	9903      	ldr	r1, [sp, #12]
 800e3fc:	600a      	str	r2, [r1, #0]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	e9c3 6700 	strd	r6, r7, [r3]
 800e404:	68e3      	ldr	r3, [r4, #12]
 800e406:	3301      	adds	r3, #1
 800e408:	60e3      	str	r3, [r4, #12]
 800e40a:	e7d9      	b.n	800e3c0 <_scanf_float+0x36c>
 800e40c:	9b04      	ldr	r3, [sp, #16]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d0e4      	beq.n	800e3dc <_scanf_float+0x388>
 800e412:	9905      	ldr	r1, [sp, #20]
 800e414:	230a      	movs	r3, #10
 800e416:	3101      	adds	r1, #1
 800e418:	4640      	mov	r0, r8
 800e41a:	f002 fa35 	bl	8010888 <_strtol_r>
 800e41e:	9b04      	ldr	r3, [sp, #16]
 800e420:	9e05      	ldr	r6, [sp, #20]
 800e422:	1ac2      	subs	r2, r0, r3
 800e424:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e428:	429e      	cmp	r6, r3
 800e42a:	bf28      	it	cs
 800e42c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e430:	4910      	ldr	r1, [pc, #64]	@ (800e474 <_scanf_float+0x420>)
 800e432:	4630      	mov	r0, r6
 800e434:	f000 f918 	bl	800e668 <siprintf>
 800e438:	e7d0      	b.n	800e3dc <_scanf_float+0x388>
 800e43a:	f011 0f04 	tst.w	r1, #4
 800e43e:	9903      	ldr	r1, [sp, #12]
 800e440:	600a      	str	r2, [r1, #0]
 800e442:	d1dc      	bne.n	800e3fe <_scanf_float+0x3aa>
 800e444:	681d      	ldr	r5, [r3, #0]
 800e446:	4632      	mov	r2, r6
 800e448:	463b      	mov	r3, r7
 800e44a:	4630      	mov	r0, r6
 800e44c:	4639      	mov	r1, r7
 800e44e:	f7f2 fb75 	bl	8000b3c <__aeabi_dcmpun>
 800e452:	b128      	cbz	r0, 800e460 <_scanf_float+0x40c>
 800e454:	4808      	ldr	r0, [pc, #32]	@ (800e478 <_scanf_float+0x424>)
 800e456:	f000 fa2f 	bl	800e8b8 <nanf>
 800e45a:	ed85 0a00 	vstr	s0, [r5]
 800e45e:	e7d1      	b.n	800e404 <_scanf_float+0x3b0>
 800e460:	4630      	mov	r0, r6
 800e462:	4639      	mov	r1, r7
 800e464:	f7f2 fbc8 	bl	8000bf8 <__aeabi_d2f>
 800e468:	6028      	str	r0, [r5, #0]
 800e46a:	e7cb      	b.n	800e404 <_scanf_float+0x3b0>
 800e46c:	f04f 0900 	mov.w	r9, #0
 800e470:	e629      	b.n	800e0c6 <_scanf_float+0x72>
 800e472:	bf00      	nop
 800e474:	08011b95 	.word	0x08011b95
 800e478:	08011bdd 	.word	0x08011bdd

0800e47c <std>:
 800e47c:	2300      	movs	r3, #0
 800e47e:	b510      	push	{r4, lr}
 800e480:	4604      	mov	r4, r0
 800e482:	e9c0 3300 	strd	r3, r3, [r0]
 800e486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e48a:	6083      	str	r3, [r0, #8]
 800e48c:	8181      	strh	r1, [r0, #12]
 800e48e:	6643      	str	r3, [r0, #100]	@ 0x64
 800e490:	81c2      	strh	r2, [r0, #14]
 800e492:	6183      	str	r3, [r0, #24]
 800e494:	4619      	mov	r1, r3
 800e496:	2208      	movs	r2, #8
 800e498:	305c      	adds	r0, #92	@ 0x5c
 800e49a:	f000 f962 	bl	800e762 <memset>
 800e49e:	4b0d      	ldr	r3, [pc, #52]	@ (800e4d4 <std+0x58>)
 800e4a0:	6263      	str	r3, [r4, #36]	@ 0x24
 800e4a2:	4b0d      	ldr	r3, [pc, #52]	@ (800e4d8 <std+0x5c>)
 800e4a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e4a6:	4b0d      	ldr	r3, [pc, #52]	@ (800e4dc <std+0x60>)
 800e4a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e4aa:	4b0d      	ldr	r3, [pc, #52]	@ (800e4e0 <std+0x64>)
 800e4ac:	6323      	str	r3, [r4, #48]	@ 0x30
 800e4ae:	4b0d      	ldr	r3, [pc, #52]	@ (800e4e4 <std+0x68>)
 800e4b0:	6224      	str	r4, [r4, #32]
 800e4b2:	429c      	cmp	r4, r3
 800e4b4:	d006      	beq.n	800e4c4 <std+0x48>
 800e4b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e4ba:	4294      	cmp	r4, r2
 800e4bc:	d002      	beq.n	800e4c4 <std+0x48>
 800e4be:	33d0      	adds	r3, #208	@ 0xd0
 800e4c0:	429c      	cmp	r4, r3
 800e4c2:	d105      	bne.n	800e4d0 <std+0x54>
 800e4c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e4cc:	f000 b9d8 	b.w	800e880 <__retarget_lock_init_recursive>
 800e4d0:	bd10      	pop	{r4, pc}
 800e4d2:	bf00      	nop
 800e4d4:	0800e6a9 	.word	0x0800e6a9
 800e4d8:	0800e6cb 	.word	0x0800e6cb
 800e4dc:	0800e703 	.word	0x0800e703
 800e4e0:	0800e727 	.word	0x0800e727
 800e4e4:	200065d4 	.word	0x200065d4

0800e4e8 <stdio_exit_handler>:
 800e4e8:	4a02      	ldr	r2, [pc, #8]	@ (800e4f4 <stdio_exit_handler+0xc>)
 800e4ea:	4903      	ldr	r1, [pc, #12]	@ (800e4f8 <stdio_exit_handler+0x10>)
 800e4ec:	4803      	ldr	r0, [pc, #12]	@ (800e4fc <stdio_exit_handler+0x14>)
 800e4ee:	f000 b869 	b.w	800e5c4 <_fwalk_sglue>
 800e4f2:	bf00      	nop
 800e4f4:	20000028 	.word	0x20000028
 800e4f8:	08010c5d 	.word	0x08010c5d
 800e4fc:	200001a4 	.word	0x200001a4

0800e500 <cleanup_stdio>:
 800e500:	6841      	ldr	r1, [r0, #4]
 800e502:	4b0c      	ldr	r3, [pc, #48]	@ (800e534 <cleanup_stdio+0x34>)
 800e504:	4299      	cmp	r1, r3
 800e506:	b510      	push	{r4, lr}
 800e508:	4604      	mov	r4, r0
 800e50a:	d001      	beq.n	800e510 <cleanup_stdio+0x10>
 800e50c:	f002 fba6 	bl	8010c5c <_fflush_r>
 800e510:	68a1      	ldr	r1, [r4, #8]
 800e512:	4b09      	ldr	r3, [pc, #36]	@ (800e538 <cleanup_stdio+0x38>)
 800e514:	4299      	cmp	r1, r3
 800e516:	d002      	beq.n	800e51e <cleanup_stdio+0x1e>
 800e518:	4620      	mov	r0, r4
 800e51a:	f002 fb9f 	bl	8010c5c <_fflush_r>
 800e51e:	68e1      	ldr	r1, [r4, #12]
 800e520:	4b06      	ldr	r3, [pc, #24]	@ (800e53c <cleanup_stdio+0x3c>)
 800e522:	4299      	cmp	r1, r3
 800e524:	d004      	beq.n	800e530 <cleanup_stdio+0x30>
 800e526:	4620      	mov	r0, r4
 800e528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e52c:	f002 bb96 	b.w	8010c5c <_fflush_r>
 800e530:	bd10      	pop	{r4, pc}
 800e532:	bf00      	nop
 800e534:	200065d4 	.word	0x200065d4
 800e538:	2000663c 	.word	0x2000663c
 800e53c:	200066a4 	.word	0x200066a4

0800e540 <global_stdio_init.part.0>:
 800e540:	b510      	push	{r4, lr}
 800e542:	4b0b      	ldr	r3, [pc, #44]	@ (800e570 <global_stdio_init.part.0+0x30>)
 800e544:	4c0b      	ldr	r4, [pc, #44]	@ (800e574 <global_stdio_init.part.0+0x34>)
 800e546:	4a0c      	ldr	r2, [pc, #48]	@ (800e578 <global_stdio_init.part.0+0x38>)
 800e548:	601a      	str	r2, [r3, #0]
 800e54a:	4620      	mov	r0, r4
 800e54c:	2200      	movs	r2, #0
 800e54e:	2104      	movs	r1, #4
 800e550:	f7ff ff94 	bl	800e47c <std>
 800e554:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e558:	2201      	movs	r2, #1
 800e55a:	2109      	movs	r1, #9
 800e55c:	f7ff ff8e 	bl	800e47c <std>
 800e560:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e564:	2202      	movs	r2, #2
 800e566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e56a:	2112      	movs	r1, #18
 800e56c:	f7ff bf86 	b.w	800e47c <std>
 800e570:	2000670c 	.word	0x2000670c
 800e574:	200065d4 	.word	0x200065d4
 800e578:	0800e4e9 	.word	0x0800e4e9

0800e57c <__sfp_lock_acquire>:
 800e57c:	4801      	ldr	r0, [pc, #4]	@ (800e584 <__sfp_lock_acquire+0x8>)
 800e57e:	f000 b980 	b.w	800e882 <__retarget_lock_acquire_recursive>
 800e582:	bf00      	nop
 800e584:	20006715 	.word	0x20006715

0800e588 <__sfp_lock_release>:
 800e588:	4801      	ldr	r0, [pc, #4]	@ (800e590 <__sfp_lock_release+0x8>)
 800e58a:	f000 b97b 	b.w	800e884 <__retarget_lock_release_recursive>
 800e58e:	bf00      	nop
 800e590:	20006715 	.word	0x20006715

0800e594 <__sinit>:
 800e594:	b510      	push	{r4, lr}
 800e596:	4604      	mov	r4, r0
 800e598:	f7ff fff0 	bl	800e57c <__sfp_lock_acquire>
 800e59c:	6a23      	ldr	r3, [r4, #32]
 800e59e:	b11b      	cbz	r3, 800e5a8 <__sinit+0x14>
 800e5a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5a4:	f7ff bff0 	b.w	800e588 <__sfp_lock_release>
 800e5a8:	4b04      	ldr	r3, [pc, #16]	@ (800e5bc <__sinit+0x28>)
 800e5aa:	6223      	str	r3, [r4, #32]
 800e5ac:	4b04      	ldr	r3, [pc, #16]	@ (800e5c0 <__sinit+0x2c>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d1f5      	bne.n	800e5a0 <__sinit+0xc>
 800e5b4:	f7ff ffc4 	bl	800e540 <global_stdio_init.part.0>
 800e5b8:	e7f2      	b.n	800e5a0 <__sinit+0xc>
 800e5ba:	bf00      	nop
 800e5bc:	0800e501 	.word	0x0800e501
 800e5c0:	2000670c 	.word	0x2000670c

0800e5c4 <_fwalk_sglue>:
 800e5c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5c8:	4607      	mov	r7, r0
 800e5ca:	4688      	mov	r8, r1
 800e5cc:	4614      	mov	r4, r2
 800e5ce:	2600      	movs	r6, #0
 800e5d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e5d4:	f1b9 0901 	subs.w	r9, r9, #1
 800e5d8:	d505      	bpl.n	800e5e6 <_fwalk_sglue+0x22>
 800e5da:	6824      	ldr	r4, [r4, #0]
 800e5dc:	2c00      	cmp	r4, #0
 800e5de:	d1f7      	bne.n	800e5d0 <_fwalk_sglue+0xc>
 800e5e0:	4630      	mov	r0, r6
 800e5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5e6:	89ab      	ldrh	r3, [r5, #12]
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	d907      	bls.n	800e5fc <_fwalk_sglue+0x38>
 800e5ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	d003      	beq.n	800e5fc <_fwalk_sglue+0x38>
 800e5f4:	4629      	mov	r1, r5
 800e5f6:	4638      	mov	r0, r7
 800e5f8:	47c0      	blx	r8
 800e5fa:	4306      	orrs	r6, r0
 800e5fc:	3568      	adds	r5, #104	@ 0x68
 800e5fe:	e7e9      	b.n	800e5d4 <_fwalk_sglue+0x10>

0800e600 <sniprintf>:
 800e600:	b40c      	push	{r2, r3}
 800e602:	b530      	push	{r4, r5, lr}
 800e604:	4b17      	ldr	r3, [pc, #92]	@ (800e664 <sniprintf+0x64>)
 800e606:	1e0c      	subs	r4, r1, #0
 800e608:	681d      	ldr	r5, [r3, #0]
 800e60a:	b09d      	sub	sp, #116	@ 0x74
 800e60c:	da08      	bge.n	800e620 <sniprintf+0x20>
 800e60e:	238b      	movs	r3, #139	@ 0x8b
 800e610:	602b      	str	r3, [r5, #0]
 800e612:	f04f 30ff 	mov.w	r0, #4294967295
 800e616:	b01d      	add	sp, #116	@ 0x74
 800e618:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e61c:	b002      	add	sp, #8
 800e61e:	4770      	bx	lr
 800e620:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e624:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e628:	bf14      	ite	ne
 800e62a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e62e:	4623      	moveq	r3, r4
 800e630:	9304      	str	r3, [sp, #16]
 800e632:	9307      	str	r3, [sp, #28]
 800e634:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e638:	9002      	str	r0, [sp, #8]
 800e63a:	9006      	str	r0, [sp, #24]
 800e63c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e640:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e642:	ab21      	add	r3, sp, #132	@ 0x84
 800e644:	a902      	add	r1, sp, #8
 800e646:	4628      	mov	r0, r5
 800e648:	9301      	str	r3, [sp, #4]
 800e64a:	f002 f987 	bl	801095c <_svfiprintf_r>
 800e64e:	1c43      	adds	r3, r0, #1
 800e650:	bfbc      	itt	lt
 800e652:	238b      	movlt	r3, #139	@ 0x8b
 800e654:	602b      	strlt	r3, [r5, #0]
 800e656:	2c00      	cmp	r4, #0
 800e658:	d0dd      	beq.n	800e616 <sniprintf+0x16>
 800e65a:	9b02      	ldr	r3, [sp, #8]
 800e65c:	2200      	movs	r2, #0
 800e65e:	701a      	strb	r2, [r3, #0]
 800e660:	e7d9      	b.n	800e616 <sniprintf+0x16>
 800e662:	bf00      	nop
 800e664:	200001a0 	.word	0x200001a0

0800e668 <siprintf>:
 800e668:	b40e      	push	{r1, r2, r3}
 800e66a:	b500      	push	{lr}
 800e66c:	b09c      	sub	sp, #112	@ 0x70
 800e66e:	ab1d      	add	r3, sp, #116	@ 0x74
 800e670:	9002      	str	r0, [sp, #8]
 800e672:	9006      	str	r0, [sp, #24]
 800e674:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e678:	4809      	ldr	r0, [pc, #36]	@ (800e6a0 <siprintf+0x38>)
 800e67a:	9107      	str	r1, [sp, #28]
 800e67c:	9104      	str	r1, [sp, #16]
 800e67e:	4909      	ldr	r1, [pc, #36]	@ (800e6a4 <siprintf+0x3c>)
 800e680:	f853 2b04 	ldr.w	r2, [r3], #4
 800e684:	9105      	str	r1, [sp, #20]
 800e686:	6800      	ldr	r0, [r0, #0]
 800e688:	9301      	str	r3, [sp, #4]
 800e68a:	a902      	add	r1, sp, #8
 800e68c:	f002 f966 	bl	801095c <_svfiprintf_r>
 800e690:	9b02      	ldr	r3, [sp, #8]
 800e692:	2200      	movs	r2, #0
 800e694:	701a      	strb	r2, [r3, #0]
 800e696:	b01c      	add	sp, #112	@ 0x70
 800e698:	f85d eb04 	ldr.w	lr, [sp], #4
 800e69c:	b003      	add	sp, #12
 800e69e:	4770      	bx	lr
 800e6a0:	200001a0 	.word	0x200001a0
 800e6a4:	ffff0208 	.word	0xffff0208

0800e6a8 <__sread>:
 800e6a8:	b510      	push	{r4, lr}
 800e6aa:	460c      	mov	r4, r1
 800e6ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6b0:	f000 f898 	bl	800e7e4 <_read_r>
 800e6b4:	2800      	cmp	r0, #0
 800e6b6:	bfab      	itete	ge
 800e6b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e6ba:	89a3      	ldrhlt	r3, [r4, #12]
 800e6bc:	181b      	addge	r3, r3, r0
 800e6be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e6c2:	bfac      	ite	ge
 800e6c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e6c6:	81a3      	strhlt	r3, [r4, #12]
 800e6c8:	bd10      	pop	{r4, pc}

0800e6ca <__swrite>:
 800e6ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6ce:	461f      	mov	r7, r3
 800e6d0:	898b      	ldrh	r3, [r1, #12]
 800e6d2:	05db      	lsls	r3, r3, #23
 800e6d4:	4605      	mov	r5, r0
 800e6d6:	460c      	mov	r4, r1
 800e6d8:	4616      	mov	r6, r2
 800e6da:	d505      	bpl.n	800e6e8 <__swrite+0x1e>
 800e6dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6e0:	2302      	movs	r3, #2
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	f000 f86c 	bl	800e7c0 <_lseek_r>
 800e6e8:	89a3      	ldrh	r3, [r4, #12]
 800e6ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e6f2:	81a3      	strh	r3, [r4, #12]
 800e6f4:	4632      	mov	r2, r6
 800e6f6:	463b      	mov	r3, r7
 800e6f8:	4628      	mov	r0, r5
 800e6fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6fe:	f000 b883 	b.w	800e808 <_write_r>

0800e702 <__sseek>:
 800e702:	b510      	push	{r4, lr}
 800e704:	460c      	mov	r4, r1
 800e706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e70a:	f000 f859 	bl	800e7c0 <_lseek_r>
 800e70e:	1c43      	adds	r3, r0, #1
 800e710:	89a3      	ldrh	r3, [r4, #12]
 800e712:	bf15      	itete	ne
 800e714:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e716:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e71a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e71e:	81a3      	strheq	r3, [r4, #12]
 800e720:	bf18      	it	ne
 800e722:	81a3      	strhne	r3, [r4, #12]
 800e724:	bd10      	pop	{r4, pc}

0800e726 <__sclose>:
 800e726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e72a:	f000 b839 	b.w	800e7a0 <_close_r>

0800e72e <memmove>:
 800e72e:	4288      	cmp	r0, r1
 800e730:	b510      	push	{r4, lr}
 800e732:	eb01 0402 	add.w	r4, r1, r2
 800e736:	d902      	bls.n	800e73e <memmove+0x10>
 800e738:	4284      	cmp	r4, r0
 800e73a:	4623      	mov	r3, r4
 800e73c:	d807      	bhi.n	800e74e <memmove+0x20>
 800e73e:	1e43      	subs	r3, r0, #1
 800e740:	42a1      	cmp	r1, r4
 800e742:	d008      	beq.n	800e756 <memmove+0x28>
 800e744:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e748:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e74c:	e7f8      	b.n	800e740 <memmove+0x12>
 800e74e:	4402      	add	r2, r0
 800e750:	4601      	mov	r1, r0
 800e752:	428a      	cmp	r2, r1
 800e754:	d100      	bne.n	800e758 <memmove+0x2a>
 800e756:	bd10      	pop	{r4, pc}
 800e758:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e75c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e760:	e7f7      	b.n	800e752 <memmove+0x24>

0800e762 <memset>:
 800e762:	4402      	add	r2, r0
 800e764:	4603      	mov	r3, r0
 800e766:	4293      	cmp	r3, r2
 800e768:	d100      	bne.n	800e76c <memset+0xa>
 800e76a:	4770      	bx	lr
 800e76c:	f803 1b01 	strb.w	r1, [r3], #1
 800e770:	e7f9      	b.n	800e766 <memset+0x4>

0800e772 <strncmp>:
 800e772:	b510      	push	{r4, lr}
 800e774:	b16a      	cbz	r2, 800e792 <strncmp+0x20>
 800e776:	3901      	subs	r1, #1
 800e778:	1884      	adds	r4, r0, r2
 800e77a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e77e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e782:	429a      	cmp	r2, r3
 800e784:	d103      	bne.n	800e78e <strncmp+0x1c>
 800e786:	42a0      	cmp	r0, r4
 800e788:	d001      	beq.n	800e78e <strncmp+0x1c>
 800e78a:	2a00      	cmp	r2, #0
 800e78c:	d1f5      	bne.n	800e77a <strncmp+0x8>
 800e78e:	1ad0      	subs	r0, r2, r3
 800e790:	bd10      	pop	{r4, pc}
 800e792:	4610      	mov	r0, r2
 800e794:	e7fc      	b.n	800e790 <strncmp+0x1e>
	...

0800e798 <_localeconv_r>:
 800e798:	4800      	ldr	r0, [pc, #0]	@ (800e79c <_localeconv_r+0x4>)
 800e79a:	4770      	bx	lr
 800e79c:	20000124 	.word	0x20000124

0800e7a0 <_close_r>:
 800e7a0:	b538      	push	{r3, r4, r5, lr}
 800e7a2:	4d06      	ldr	r5, [pc, #24]	@ (800e7bc <_close_r+0x1c>)
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	4604      	mov	r4, r0
 800e7a8:	4608      	mov	r0, r1
 800e7aa:	602b      	str	r3, [r5, #0]
 800e7ac:	f7f3 fa00 	bl	8001bb0 <_close>
 800e7b0:	1c43      	adds	r3, r0, #1
 800e7b2:	d102      	bne.n	800e7ba <_close_r+0x1a>
 800e7b4:	682b      	ldr	r3, [r5, #0]
 800e7b6:	b103      	cbz	r3, 800e7ba <_close_r+0x1a>
 800e7b8:	6023      	str	r3, [r4, #0]
 800e7ba:	bd38      	pop	{r3, r4, r5, pc}
 800e7bc:	20006710 	.word	0x20006710

0800e7c0 <_lseek_r>:
 800e7c0:	b538      	push	{r3, r4, r5, lr}
 800e7c2:	4d07      	ldr	r5, [pc, #28]	@ (800e7e0 <_lseek_r+0x20>)
 800e7c4:	4604      	mov	r4, r0
 800e7c6:	4608      	mov	r0, r1
 800e7c8:	4611      	mov	r1, r2
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	602a      	str	r2, [r5, #0]
 800e7ce:	461a      	mov	r2, r3
 800e7d0:	f7f3 fa15 	bl	8001bfe <_lseek>
 800e7d4:	1c43      	adds	r3, r0, #1
 800e7d6:	d102      	bne.n	800e7de <_lseek_r+0x1e>
 800e7d8:	682b      	ldr	r3, [r5, #0]
 800e7da:	b103      	cbz	r3, 800e7de <_lseek_r+0x1e>
 800e7dc:	6023      	str	r3, [r4, #0]
 800e7de:	bd38      	pop	{r3, r4, r5, pc}
 800e7e0:	20006710 	.word	0x20006710

0800e7e4 <_read_r>:
 800e7e4:	b538      	push	{r3, r4, r5, lr}
 800e7e6:	4d07      	ldr	r5, [pc, #28]	@ (800e804 <_read_r+0x20>)
 800e7e8:	4604      	mov	r4, r0
 800e7ea:	4608      	mov	r0, r1
 800e7ec:	4611      	mov	r1, r2
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	602a      	str	r2, [r5, #0]
 800e7f2:	461a      	mov	r2, r3
 800e7f4:	f7f3 f9a3 	bl	8001b3e <_read>
 800e7f8:	1c43      	adds	r3, r0, #1
 800e7fa:	d102      	bne.n	800e802 <_read_r+0x1e>
 800e7fc:	682b      	ldr	r3, [r5, #0]
 800e7fe:	b103      	cbz	r3, 800e802 <_read_r+0x1e>
 800e800:	6023      	str	r3, [r4, #0]
 800e802:	bd38      	pop	{r3, r4, r5, pc}
 800e804:	20006710 	.word	0x20006710

0800e808 <_write_r>:
 800e808:	b538      	push	{r3, r4, r5, lr}
 800e80a:	4d07      	ldr	r5, [pc, #28]	@ (800e828 <_write_r+0x20>)
 800e80c:	4604      	mov	r4, r0
 800e80e:	4608      	mov	r0, r1
 800e810:	4611      	mov	r1, r2
 800e812:	2200      	movs	r2, #0
 800e814:	602a      	str	r2, [r5, #0]
 800e816:	461a      	mov	r2, r3
 800e818:	f7f3 f9ae 	bl	8001b78 <_write>
 800e81c:	1c43      	adds	r3, r0, #1
 800e81e:	d102      	bne.n	800e826 <_write_r+0x1e>
 800e820:	682b      	ldr	r3, [r5, #0]
 800e822:	b103      	cbz	r3, 800e826 <_write_r+0x1e>
 800e824:	6023      	str	r3, [r4, #0]
 800e826:	bd38      	pop	{r3, r4, r5, pc}
 800e828:	20006710 	.word	0x20006710

0800e82c <__errno>:
 800e82c:	4b01      	ldr	r3, [pc, #4]	@ (800e834 <__errno+0x8>)
 800e82e:	6818      	ldr	r0, [r3, #0]
 800e830:	4770      	bx	lr
 800e832:	bf00      	nop
 800e834:	200001a0 	.word	0x200001a0

0800e838 <__libc_init_array>:
 800e838:	b570      	push	{r4, r5, r6, lr}
 800e83a:	4d0d      	ldr	r5, [pc, #52]	@ (800e870 <__libc_init_array+0x38>)
 800e83c:	4c0d      	ldr	r4, [pc, #52]	@ (800e874 <__libc_init_array+0x3c>)
 800e83e:	1b64      	subs	r4, r4, r5
 800e840:	10a4      	asrs	r4, r4, #2
 800e842:	2600      	movs	r6, #0
 800e844:	42a6      	cmp	r6, r4
 800e846:	d109      	bne.n	800e85c <__libc_init_array+0x24>
 800e848:	4d0b      	ldr	r5, [pc, #44]	@ (800e878 <__libc_init_array+0x40>)
 800e84a:	4c0c      	ldr	r4, [pc, #48]	@ (800e87c <__libc_init_array+0x44>)
 800e84c:	f002 fd3e 	bl	80112cc <_init>
 800e850:	1b64      	subs	r4, r4, r5
 800e852:	10a4      	asrs	r4, r4, #2
 800e854:	2600      	movs	r6, #0
 800e856:	42a6      	cmp	r6, r4
 800e858:	d105      	bne.n	800e866 <__libc_init_array+0x2e>
 800e85a:	bd70      	pop	{r4, r5, r6, pc}
 800e85c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e860:	4798      	blx	r3
 800e862:	3601      	adds	r6, #1
 800e864:	e7ee      	b.n	800e844 <__libc_init_array+0xc>
 800e866:	f855 3b04 	ldr.w	r3, [r5], #4
 800e86a:	4798      	blx	r3
 800e86c:	3601      	adds	r6, #1
 800e86e:	e7f2      	b.n	800e856 <__libc_init_array+0x1e>
 800e870:	08011e3c 	.word	0x08011e3c
 800e874:	08011e3c 	.word	0x08011e3c
 800e878:	08011e3c 	.word	0x08011e3c
 800e87c:	08011e40 	.word	0x08011e40

0800e880 <__retarget_lock_init_recursive>:
 800e880:	4770      	bx	lr

0800e882 <__retarget_lock_acquire_recursive>:
 800e882:	4770      	bx	lr

0800e884 <__retarget_lock_release_recursive>:
 800e884:	4770      	bx	lr

0800e886 <memcpy>:
 800e886:	440a      	add	r2, r1
 800e888:	4291      	cmp	r1, r2
 800e88a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e88e:	d100      	bne.n	800e892 <memcpy+0xc>
 800e890:	4770      	bx	lr
 800e892:	b510      	push	{r4, lr}
 800e894:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e898:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e89c:	4291      	cmp	r1, r2
 800e89e:	d1f9      	bne.n	800e894 <memcpy+0xe>
 800e8a0:	bd10      	pop	{r4, pc}
 800e8a2:	0000      	movs	r0, r0
 800e8a4:	0000      	movs	r0, r0
	...

0800e8a8 <nan>:
 800e8a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e8b0 <nan+0x8>
 800e8ac:	4770      	bx	lr
 800e8ae:	bf00      	nop
 800e8b0:	00000000 	.word	0x00000000
 800e8b4:	7ff80000 	.word	0x7ff80000

0800e8b8 <nanf>:
 800e8b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e8c0 <nanf+0x8>
 800e8bc:	4770      	bx	lr
 800e8be:	bf00      	nop
 800e8c0:	7fc00000 	.word	0x7fc00000

0800e8c4 <__assert_func>:
 800e8c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8c6:	4614      	mov	r4, r2
 800e8c8:	461a      	mov	r2, r3
 800e8ca:	4b09      	ldr	r3, [pc, #36]	@ (800e8f0 <__assert_func+0x2c>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	4605      	mov	r5, r0
 800e8d0:	68d8      	ldr	r0, [r3, #12]
 800e8d2:	b954      	cbnz	r4, 800e8ea <__assert_func+0x26>
 800e8d4:	4b07      	ldr	r3, [pc, #28]	@ (800e8f4 <__assert_func+0x30>)
 800e8d6:	461c      	mov	r4, r3
 800e8d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e8dc:	9100      	str	r1, [sp, #0]
 800e8de:	462b      	mov	r3, r5
 800e8e0:	4905      	ldr	r1, [pc, #20]	@ (800e8f8 <__assert_func+0x34>)
 800e8e2:	f002 f9e3 	bl	8010cac <fiprintf>
 800e8e6:	f002 fa03 	bl	8010cf0 <abort>
 800e8ea:	4b04      	ldr	r3, [pc, #16]	@ (800e8fc <__assert_func+0x38>)
 800e8ec:	e7f4      	b.n	800e8d8 <__assert_func+0x14>
 800e8ee:	bf00      	nop
 800e8f0:	200001a0 	.word	0x200001a0
 800e8f4:	08011bdd 	.word	0x08011bdd
 800e8f8:	08011baf 	.word	0x08011baf
 800e8fc:	08011ba2 	.word	0x08011ba2

0800e900 <quorem>:
 800e900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e904:	6903      	ldr	r3, [r0, #16]
 800e906:	690c      	ldr	r4, [r1, #16]
 800e908:	42a3      	cmp	r3, r4
 800e90a:	4607      	mov	r7, r0
 800e90c:	db7e      	blt.n	800ea0c <quorem+0x10c>
 800e90e:	3c01      	subs	r4, #1
 800e910:	f101 0814 	add.w	r8, r1, #20
 800e914:	00a3      	lsls	r3, r4, #2
 800e916:	f100 0514 	add.w	r5, r0, #20
 800e91a:	9300      	str	r3, [sp, #0]
 800e91c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e920:	9301      	str	r3, [sp, #4]
 800e922:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e926:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e92a:	3301      	adds	r3, #1
 800e92c:	429a      	cmp	r2, r3
 800e92e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e932:	fbb2 f6f3 	udiv	r6, r2, r3
 800e936:	d32e      	bcc.n	800e996 <quorem+0x96>
 800e938:	f04f 0a00 	mov.w	sl, #0
 800e93c:	46c4      	mov	ip, r8
 800e93e:	46ae      	mov	lr, r5
 800e940:	46d3      	mov	fp, sl
 800e942:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e946:	b298      	uxth	r0, r3
 800e948:	fb06 a000 	mla	r0, r6, r0, sl
 800e94c:	0c02      	lsrs	r2, r0, #16
 800e94e:	0c1b      	lsrs	r3, r3, #16
 800e950:	fb06 2303 	mla	r3, r6, r3, r2
 800e954:	f8de 2000 	ldr.w	r2, [lr]
 800e958:	b280      	uxth	r0, r0
 800e95a:	b292      	uxth	r2, r2
 800e95c:	1a12      	subs	r2, r2, r0
 800e95e:	445a      	add	r2, fp
 800e960:	f8de 0000 	ldr.w	r0, [lr]
 800e964:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e968:	b29b      	uxth	r3, r3
 800e96a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e96e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e972:	b292      	uxth	r2, r2
 800e974:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e978:	45e1      	cmp	r9, ip
 800e97a:	f84e 2b04 	str.w	r2, [lr], #4
 800e97e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e982:	d2de      	bcs.n	800e942 <quorem+0x42>
 800e984:	9b00      	ldr	r3, [sp, #0]
 800e986:	58eb      	ldr	r3, [r5, r3]
 800e988:	b92b      	cbnz	r3, 800e996 <quorem+0x96>
 800e98a:	9b01      	ldr	r3, [sp, #4]
 800e98c:	3b04      	subs	r3, #4
 800e98e:	429d      	cmp	r5, r3
 800e990:	461a      	mov	r2, r3
 800e992:	d32f      	bcc.n	800e9f4 <quorem+0xf4>
 800e994:	613c      	str	r4, [r7, #16]
 800e996:	4638      	mov	r0, r7
 800e998:	f001 fd0e 	bl	80103b8 <__mcmp>
 800e99c:	2800      	cmp	r0, #0
 800e99e:	db25      	blt.n	800e9ec <quorem+0xec>
 800e9a0:	4629      	mov	r1, r5
 800e9a2:	2000      	movs	r0, #0
 800e9a4:	f858 2b04 	ldr.w	r2, [r8], #4
 800e9a8:	f8d1 c000 	ldr.w	ip, [r1]
 800e9ac:	fa1f fe82 	uxth.w	lr, r2
 800e9b0:	fa1f f38c 	uxth.w	r3, ip
 800e9b4:	eba3 030e 	sub.w	r3, r3, lr
 800e9b8:	4403      	add	r3, r0
 800e9ba:	0c12      	lsrs	r2, r2, #16
 800e9bc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e9c0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9ca:	45c1      	cmp	r9, r8
 800e9cc:	f841 3b04 	str.w	r3, [r1], #4
 800e9d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e9d4:	d2e6      	bcs.n	800e9a4 <quorem+0xa4>
 800e9d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e9da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e9de:	b922      	cbnz	r2, 800e9ea <quorem+0xea>
 800e9e0:	3b04      	subs	r3, #4
 800e9e2:	429d      	cmp	r5, r3
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	d30b      	bcc.n	800ea00 <quorem+0x100>
 800e9e8:	613c      	str	r4, [r7, #16]
 800e9ea:	3601      	adds	r6, #1
 800e9ec:	4630      	mov	r0, r6
 800e9ee:	b003      	add	sp, #12
 800e9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9f4:	6812      	ldr	r2, [r2, #0]
 800e9f6:	3b04      	subs	r3, #4
 800e9f8:	2a00      	cmp	r2, #0
 800e9fa:	d1cb      	bne.n	800e994 <quorem+0x94>
 800e9fc:	3c01      	subs	r4, #1
 800e9fe:	e7c6      	b.n	800e98e <quorem+0x8e>
 800ea00:	6812      	ldr	r2, [r2, #0]
 800ea02:	3b04      	subs	r3, #4
 800ea04:	2a00      	cmp	r2, #0
 800ea06:	d1ef      	bne.n	800e9e8 <quorem+0xe8>
 800ea08:	3c01      	subs	r4, #1
 800ea0a:	e7ea      	b.n	800e9e2 <quorem+0xe2>
 800ea0c:	2000      	movs	r0, #0
 800ea0e:	e7ee      	b.n	800e9ee <quorem+0xee>

0800ea10 <_dtoa_r>:
 800ea10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea14:	69c7      	ldr	r7, [r0, #28]
 800ea16:	b099      	sub	sp, #100	@ 0x64
 800ea18:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ea1c:	ec55 4b10 	vmov	r4, r5, d0
 800ea20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ea22:	9109      	str	r1, [sp, #36]	@ 0x24
 800ea24:	4683      	mov	fp, r0
 800ea26:	920e      	str	r2, [sp, #56]	@ 0x38
 800ea28:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ea2a:	b97f      	cbnz	r7, 800ea4c <_dtoa_r+0x3c>
 800ea2c:	2010      	movs	r0, #16
 800ea2e:	f001 f937 	bl	800fca0 <malloc>
 800ea32:	4602      	mov	r2, r0
 800ea34:	f8cb 001c 	str.w	r0, [fp, #28]
 800ea38:	b920      	cbnz	r0, 800ea44 <_dtoa_r+0x34>
 800ea3a:	4ba7      	ldr	r3, [pc, #668]	@ (800ecd8 <_dtoa_r+0x2c8>)
 800ea3c:	21ef      	movs	r1, #239	@ 0xef
 800ea3e:	48a7      	ldr	r0, [pc, #668]	@ (800ecdc <_dtoa_r+0x2cc>)
 800ea40:	f7ff ff40 	bl	800e8c4 <__assert_func>
 800ea44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800ea48:	6007      	str	r7, [r0, #0]
 800ea4a:	60c7      	str	r7, [r0, #12]
 800ea4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ea50:	6819      	ldr	r1, [r3, #0]
 800ea52:	b159      	cbz	r1, 800ea6c <_dtoa_r+0x5c>
 800ea54:	685a      	ldr	r2, [r3, #4]
 800ea56:	604a      	str	r2, [r1, #4]
 800ea58:	2301      	movs	r3, #1
 800ea5a:	4093      	lsls	r3, r2
 800ea5c:	608b      	str	r3, [r1, #8]
 800ea5e:	4658      	mov	r0, fp
 800ea60:	f001 fa26 	bl	800feb0 <_Bfree>
 800ea64:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ea68:	2200      	movs	r2, #0
 800ea6a:	601a      	str	r2, [r3, #0]
 800ea6c:	1e2b      	subs	r3, r5, #0
 800ea6e:	bfb9      	ittee	lt
 800ea70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ea74:	9303      	strlt	r3, [sp, #12]
 800ea76:	2300      	movge	r3, #0
 800ea78:	6033      	strge	r3, [r6, #0]
 800ea7a:	9f03      	ldr	r7, [sp, #12]
 800ea7c:	4b98      	ldr	r3, [pc, #608]	@ (800ece0 <_dtoa_r+0x2d0>)
 800ea7e:	bfbc      	itt	lt
 800ea80:	2201      	movlt	r2, #1
 800ea82:	6032      	strlt	r2, [r6, #0]
 800ea84:	43bb      	bics	r3, r7
 800ea86:	d112      	bne.n	800eaae <_dtoa_r+0x9e>
 800ea88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ea8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ea8e:	6013      	str	r3, [r2, #0]
 800ea90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ea94:	4323      	orrs	r3, r4
 800ea96:	f000 854d 	beq.w	800f534 <_dtoa_r+0xb24>
 800ea9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ea9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ecf4 <_dtoa_r+0x2e4>
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	f000 854f 	beq.w	800f544 <_dtoa_r+0xb34>
 800eaa6:	f10a 0303 	add.w	r3, sl, #3
 800eaaa:	f000 bd49 	b.w	800f540 <_dtoa_r+0xb30>
 800eaae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800eab2:	2200      	movs	r2, #0
 800eab4:	ec51 0b17 	vmov	r0, r1, d7
 800eab8:	2300      	movs	r3, #0
 800eaba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800eabe:	f7f2 f80b 	bl	8000ad8 <__aeabi_dcmpeq>
 800eac2:	4680      	mov	r8, r0
 800eac4:	b158      	cbz	r0, 800eade <_dtoa_r+0xce>
 800eac6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800eac8:	2301      	movs	r3, #1
 800eaca:	6013      	str	r3, [r2, #0]
 800eacc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800eace:	b113      	cbz	r3, 800ead6 <_dtoa_r+0xc6>
 800ead0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ead2:	4b84      	ldr	r3, [pc, #528]	@ (800ece4 <_dtoa_r+0x2d4>)
 800ead4:	6013      	str	r3, [r2, #0]
 800ead6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ecf8 <_dtoa_r+0x2e8>
 800eada:	f000 bd33 	b.w	800f544 <_dtoa_r+0xb34>
 800eade:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800eae2:	aa16      	add	r2, sp, #88	@ 0x58
 800eae4:	a917      	add	r1, sp, #92	@ 0x5c
 800eae6:	4658      	mov	r0, fp
 800eae8:	f001 fd86 	bl	80105f8 <__d2b>
 800eaec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800eaf0:	4681      	mov	r9, r0
 800eaf2:	2e00      	cmp	r6, #0
 800eaf4:	d077      	beq.n	800ebe6 <_dtoa_r+0x1d6>
 800eaf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eaf8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800eafc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eb00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eb04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800eb08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800eb0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800eb10:	4619      	mov	r1, r3
 800eb12:	2200      	movs	r2, #0
 800eb14:	4b74      	ldr	r3, [pc, #464]	@ (800ece8 <_dtoa_r+0x2d8>)
 800eb16:	f7f1 fbbf 	bl	8000298 <__aeabi_dsub>
 800eb1a:	a369      	add	r3, pc, #420	@ (adr r3, 800ecc0 <_dtoa_r+0x2b0>)
 800eb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb20:	f7f1 fd72 	bl	8000608 <__aeabi_dmul>
 800eb24:	a368      	add	r3, pc, #416	@ (adr r3, 800ecc8 <_dtoa_r+0x2b8>)
 800eb26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb2a:	f7f1 fbb7 	bl	800029c <__adddf3>
 800eb2e:	4604      	mov	r4, r0
 800eb30:	4630      	mov	r0, r6
 800eb32:	460d      	mov	r5, r1
 800eb34:	f7f1 fcfe 	bl	8000534 <__aeabi_i2d>
 800eb38:	a365      	add	r3, pc, #404	@ (adr r3, 800ecd0 <_dtoa_r+0x2c0>)
 800eb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb3e:	f7f1 fd63 	bl	8000608 <__aeabi_dmul>
 800eb42:	4602      	mov	r2, r0
 800eb44:	460b      	mov	r3, r1
 800eb46:	4620      	mov	r0, r4
 800eb48:	4629      	mov	r1, r5
 800eb4a:	f7f1 fba7 	bl	800029c <__adddf3>
 800eb4e:	4604      	mov	r4, r0
 800eb50:	460d      	mov	r5, r1
 800eb52:	f7f2 f809 	bl	8000b68 <__aeabi_d2iz>
 800eb56:	2200      	movs	r2, #0
 800eb58:	4607      	mov	r7, r0
 800eb5a:	2300      	movs	r3, #0
 800eb5c:	4620      	mov	r0, r4
 800eb5e:	4629      	mov	r1, r5
 800eb60:	f7f1 ffc4 	bl	8000aec <__aeabi_dcmplt>
 800eb64:	b140      	cbz	r0, 800eb78 <_dtoa_r+0x168>
 800eb66:	4638      	mov	r0, r7
 800eb68:	f7f1 fce4 	bl	8000534 <__aeabi_i2d>
 800eb6c:	4622      	mov	r2, r4
 800eb6e:	462b      	mov	r3, r5
 800eb70:	f7f1 ffb2 	bl	8000ad8 <__aeabi_dcmpeq>
 800eb74:	b900      	cbnz	r0, 800eb78 <_dtoa_r+0x168>
 800eb76:	3f01      	subs	r7, #1
 800eb78:	2f16      	cmp	r7, #22
 800eb7a:	d851      	bhi.n	800ec20 <_dtoa_r+0x210>
 800eb7c:	4b5b      	ldr	r3, [pc, #364]	@ (800ecec <_dtoa_r+0x2dc>)
 800eb7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800eb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800eb8a:	f7f1 ffaf 	bl	8000aec <__aeabi_dcmplt>
 800eb8e:	2800      	cmp	r0, #0
 800eb90:	d048      	beq.n	800ec24 <_dtoa_r+0x214>
 800eb92:	3f01      	subs	r7, #1
 800eb94:	2300      	movs	r3, #0
 800eb96:	9312      	str	r3, [sp, #72]	@ 0x48
 800eb98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800eb9a:	1b9b      	subs	r3, r3, r6
 800eb9c:	1e5a      	subs	r2, r3, #1
 800eb9e:	bf44      	itt	mi
 800eba0:	f1c3 0801 	rsbmi	r8, r3, #1
 800eba4:	2300      	movmi	r3, #0
 800eba6:	9208      	str	r2, [sp, #32]
 800eba8:	bf54      	ite	pl
 800ebaa:	f04f 0800 	movpl.w	r8, #0
 800ebae:	9308      	strmi	r3, [sp, #32]
 800ebb0:	2f00      	cmp	r7, #0
 800ebb2:	db39      	blt.n	800ec28 <_dtoa_r+0x218>
 800ebb4:	9b08      	ldr	r3, [sp, #32]
 800ebb6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ebb8:	443b      	add	r3, r7
 800ebba:	9308      	str	r3, [sp, #32]
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	930a      	str	r3, [sp, #40]	@ 0x28
 800ebc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebc2:	2b09      	cmp	r3, #9
 800ebc4:	d864      	bhi.n	800ec90 <_dtoa_r+0x280>
 800ebc6:	2b05      	cmp	r3, #5
 800ebc8:	bfc4      	itt	gt
 800ebca:	3b04      	subgt	r3, #4
 800ebcc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ebce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebd0:	f1a3 0302 	sub.w	r3, r3, #2
 800ebd4:	bfcc      	ite	gt
 800ebd6:	2400      	movgt	r4, #0
 800ebd8:	2401      	movle	r4, #1
 800ebda:	2b03      	cmp	r3, #3
 800ebdc:	d863      	bhi.n	800eca6 <_dtoa_r+0x296>
 800ebde:	e8df f003 	tbb	[pc, r3]
 800ebe2:	372a      	.short	0x372a
 800ebe4:	5535      	.short	0x5535
 800ebe6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ebea:	441e      	add	r6, r3
 800ebec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ebf0:	2b20      	cmp	r3, #32
 800ebf2:	bfc1      	itttt	gt
 800ebf4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ebf8:	409f      	lslgt	r7, r3
 800ebfa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ebfe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ec02:	bfd6      	itet	le
 800ec04:	f1c3 0320 	rsble	r3, r3, #32
 800ec08:	ea47 0003 	orrgt.w	r0, r7, r3
 800ec0c:	fa04 f003 	lslle.w	r0, r4, r3
 800ec10:	f7f1 fc80 	bl	8000514 <__aeabi_ui2d>
 800ec14:	2201      	movs	r2, #1
 800ec16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ec1a:	3e01      	subs	r6, #1
 800ec1c:	9214      	str	r2, [sp, #80]	@ 0x50
 800ec1e:	e777      	b.n	800eb10 <_dtoa_r+0x100>
 800ec20:	2301      	movs	r3, #1
 800ec22:	e7b8      	b.n	800eb96 <_dtoa_r+0x186>
 800ec24:	9012      	str	r0, [sp, #72]	@ 0x48
 800ec26:	e7b7      	b.n	800eb98 <_dtoa_r+0x188>
 800ec28:	427b      	negs	r3, r7
 800ec2a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	eba8 0807 	sub.w	r8, r8, r7
 800ec32:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ec34:	e7c4      	b.n	800ebc0 <_dtoa_r+0x1b0>
 800ec36:	2300      	movs	r3, #0
 800ec38:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ec3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	dc35      	bgt.n	800ecac <_dtoa_r+0x29c>
 800ec40:	2301      	movs	r3, #1
 800ec42:	9300      	str	r3, [sp, #0]
 800ec44:	9307      	str	r3, [sp, #28]
 800ec46:	461a      	mov	r2, r3
 800ec48:	920e      	str	r2, [sp, #56]	@ 0x38
 800ec4a:	e00b      	b.n	800ec64 <_dtoa_r+0x254>
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	e7f3      	b.n	800ec38 <_dtoa_r+0x228>
 800ec50:	2300      	movs	r3, #0
 800ec52:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ec54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ec56:	18fb      	adds	r3, r7, r3
 800ec58:	9300      	str	r3, [sp, #0]
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	2b01      	cmp	r3, #1
 800ec5e:	9307      	str	r3, [sp, #28]
 800ec60:	bfb8      	it	lt
 800ec62:	2301      	movlt	r3, #1
 800ec64:	f8db 001c 	ldr.w	r0, [fp, #28]
 800ec68:	2100      	movs	r1, #0
 800ec6a:	2204      	movs	r2, #4
 800ec6c:	f102 0514 	add.w	r5, r2, #20
 800ec70:	429d      	cmp	r5, r3
 800ec72:	d91f      	bls.n	800ecb4 <_dtoa_r+0x2a4>
 800ec74:	6041      	str	r1, [r0, #4]
 800ec76:	4658      	mov	r0, fp
 800ec78:	f001 f8da 	bl	800fe30 <_Balloc>
 800ec7c:	4682      	mov	sl, r0
 800ec7e:	2800      	cmp	r0, #0
 800ec80:	d13c      	bne.n	800ecfc <_dtoa_r+0x2ec>
 800ec82:	4b1b      	ldr	r3, [pc, #108]	@ (800ecf0 <_dtoa_r+0x2e0>)
 800ec84:	4602      	mov	r2, r0
 800ec86:	f240 11af 	movw	r1, #431	@ 0x1af
 800ec8a:	e6d8      	b.n	800ea3e <_dtoa_r+0x2e>
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	e7e0      	b.n	800ec52 <_dtoa_r+0x242>
 800ec90:	2401      	movs	r4, #1
 800ec92:	2300      	movs	r3, #0
 800ec94:	9309      	str	r3, [sp, #36]	@ 0x24
 800ec96:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ec98:	f04f 33ff 	mov.w	r3, #4294967295
 800ec9c:	9300      	str	r3, [sp, #0]
 800ec9e:	9307      	str	r3, [sp, #28]
 800eca0:	2200      	movs	r2, #0
 800eca2:	2312      	movs	r3, #18
 800eca4:	e7d0      	b.n	800ec48 <_dtoa_r+0x238>
 800eca6:	2301      	movs	r3, #1
 800eca8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ecaa:	e7f5      	b.n	800ec98 <_dtoa_r+0x288>
 800ecac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecae:	9300      	str	r3, [sp, #0]
 800ecb0:	9307      	str	r3, [sp, #28]
 800ecb2:	e7d7      	b.n	800ec64 <_dtoa_r+0x254>
 800ecb4:	3101      	adds	r1, #1
 800ecb6:	0052      	lsls	r2, r2, #1
 800ecb8:	e7d8      	b.n	800ec6c <_dtoa_r+0x25c>
 800ecba:	bf00      	nop
 800ecbc:	f3af 8000 	nop.w
 800ecc0:	636f4361 	.word	0x636f4361
 800ecc4:	3fd287a7 	.word	0x3fd287a7
 800ecc8:	8b60c8b3 	.word	0x8b60c8b3
 800eccc:	3fc68a28 	.word	0x3fc68a28
 800ecd0:	509f79fb 	.word	0x509f79fb
 800ecd4:	3fd34413 	.word	0x3fd34413
 800ecd8:	08011beb 	.word	0x08011beb
 800ecdc:	08011c02 	.word	0x08011c02
 800ece0:	7ff00000 	.word	0x7ff00000
 800ece4:	08011b72 	.word	0x08011b72
 800ece8:	3ff80000 	.word	0x3ff80000
 800ecec:	08011d58 	.word	0x08011d58
 800ecf0:	08011c5a 	.word	0x08011c5a
 800ecf4:	08011be7 	.word	0x08011be7
 800ecf8:	08011b71 	.word	0x08011b71
 800ecfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ed00:	6018      	str	r0, [r3, #0]
 800ed02:	9b07      	ldr	r3, [sp, #28]
 800ed04:	2b0e      	cmp	r3, #14
 800ed06:	f200 80a4 	bhi.w	800ee52 <_dtoa_r+0x442>
 800ed0a:	2c00      	cmp	r4, #0
 800ed0c:	f000 80a1 	beq.w	800ee52 <_dtoa_r+0x442>
 800ed10:	2f00      	cmp	r7, #0
 800ed12:	dd33      	ble.n	800ed7c <_dtoa_r+0x36c>
 800ed14:	4bad      	ldr	r3, [pc, #692]	@ (800efcc <_dtoa_r+0x5bc>)
 800ed16:	f007 020f 	and.w	r2, r7, #15
 800ed1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed1e:	ed93 7b00 	vldr	d7, [r3]
 800ed22:	05f8      	lsls	r0, r7, #23
 800ed24:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ed28:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ed2c:	d516      	bpl.n	800ed5c <_dtoa_r+0x34c>
 800ed2e:	4ba8      	ldr	r3, [pc, #672]	@ (800efd0 <_dtoa_r+0x5c0>)
 800ed30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ed34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ed38:	f7f1 fd90 	bl	800085c <__aeabi_ddiv>
 800ed3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed40:	f004 040f 	and.w	r4, r4, #15
 800ed44:	2603      	movs	r6, #3
 800ed46:	4da2      	ldr	r5, [pc, #648]	@ (800efd0 <_dtoa_r+0x5c0>)
 800ed48:	b954      	cbnz	r4, 800ed60 <_dtoa_r+0x350>
 800ed4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ed4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed52:	f7f1 fd83 	bl	800085c <__aeabi_ddiv>
 800ed56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed5a:	e028      	b.n	800edae <_dtoa_r+0x39e>
 800ed5c:	2602      	movs	r6, #2
 800ed5e:	e7f2      	b.n	800ed46 <_dtoa_r+0x336>
 800ed60:	07e1      	lsls	r1, r4, #31
 800ed62:	d508      	bpl.n	800ed76 <_dtoa_r+0x366>
 800ed64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed68:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ed6c:	f7f1 fc4c 	bl	8000608 <__aeabi_dmul>
 800ed70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed74:	3601      	adds	r6, #1
 800ed76:	1064      	asrs	r4, r4, #1
 800ed78:	3508      	adds	r5, #8
 800ed7a:	e7e5      	b.n	800ed48 <_dtoa_r+0x338>
 800ed7c:	f000 80d2 	beq.w	800ef24 <_dtoa_r+0x514>
 800ed80:	427c      	negs	r4, r7
 800ed82:	4b92      	ldr	r3, [pc, #584]	@ (800efcc <_dtoa_r+0x5bc>)
 800ed84:	4d92      	ldr	r5, [pc, #584]	@ (800efd0 <_dtoa_r+0x5c0>)
 800ed86:	f004 020f 	and.w	r2, r4, #15
 800ed8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ed96:	f7f1 fc37 	bl	8000608 <__aeabi_dmul>
 800ed9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ed9e:	1124      	asrs	r4, r4, #4
 800eda0:	2300      	movs	r3, #0
 800eda2:	2602      	movs	r6, #2
 800eda4:	2c00      	cmp	r4, #0
 800eda6:	f040 80b2 	bne.w	800ef0e <_dtoa_r+0x4fe>
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d1d3      	bne.n	800ed56 <_dtoa_r+0x346>
 800edae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800edb0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	f000 80b7 	beq.w	800ef28 <_dtoa_r+0x518>
 800edba:	4b86      	ldr	r3, [pc, #536]	@ (800efd4 <_dtoa_r+0x5c4>)
 800edbc:	2200      	movs	r2, #0
 800edbe:	4620      	mov	r0, r4
 800edc0:	4629      	mov	r1, r5
 800edc2:	f7f1 fe93 	bl	8000aec <__aeabi_dcmplt>
 800edc6:	2800      	cmp	r0, #0
 800edc8:	f000 80ae 	beq.w	800ef28 <_dtoa_r+0x518>
 800edcc:	9b07      	ldr	r3, [sp, #28]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	f000 80aa 	beq.w	800ef28 <_dtoa_r+0x518>
 800edd4:	9b00      	ldr	r3, [sp, #0]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	dd37      	ble.n	800ee4a <_dtoa_r+0x43a>
 800edda:	1e7b      	subs	r3, r7, #1
 800eddc:	9304      	str	r3, [sp, #16]
 800edde:	4620      	mov	r0, r4
 800ede0:	4b7d      	ldr	r3, [pc, #500]	@ (800efd8 <_dtoa_r+0x5c8>)
 800ede2:	2200      	movs	r2, #0
 800ede4:	4629      	mov	r1, r5
 800ede6:	f7f1 fc0f 	bl	8000608 <__aeabi_dmul>
 800edea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800edee:	9c00      	ldr	r4, [sp, #0]
 800edf0:	3601      	adds	r6, #1
 800edf2:	4630      	mov	r0, r6
 800edf4:	f7f1 fb9e 	bl	8000534 <__aeabi_i2d>
 800edf8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800edfc:	f7f1 fc04 	bl	8000608 <__aeabi_dmul>
 800ee00:	4b76      	ldr	r3, [pc, #472]	@ (800efdc <_dtoa_r+0x5cc>)
 800ee02:	2200      	movs	r2, #0
 800ee04:	f7f1 fa4a 	bl	800029c <__adddf3>
 800ee08:	4605      	mov	r5, r0
 800ee0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ee0e:	2c00      	cmp	r4, #0
 800ee10:	f040 808d 	bne.w	800ef2e <_dtoa_r+0x51e>
 800ee14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee18:	4b71      	ldr	r3, [pc, #452]	@ (800efe0 <_dtoa_r+0x5d0>)
 800ee1a:	2200      	movs	r2, #0
 800ee1c:	f7f1 fa3c 	bl	8000298 <__aeabi_dsub>
 800ee20:	4602      	mov	r2, r0
 800ee22:	460b      	mov	r3, r1
 800ee24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ee28:	462a      	mov	r2, r5
 800ee2a:	4633      	mov	r3, r6
 800ee2c:	f7f1 fe7c 	bl	8000b28 <__aeabi_dcmpgt>
 800ee30:	2800      	cmp	r0, #0
 800ee32:	f040 828b 	bne.w	800f34c <_dtoa_r+0x93c>
 800ee36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee3a:	462a      	mov	r2, r5
 800ee3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ee40:	f7f1 fe54 	bl	8000aec <__aeabi_dcmplt>
 800ee44:	2800      	cmp	r0, #0
 800ee46:	f040 8128 	bne.w	800f09a <_dtoa_r+0x68a>
 800ee4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800ee4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800ee52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	f2c0 815a 	blt.w	800f10e <_dtoa_r+0x6fe>
 800ee5a:	2f0e      	cmp	r7, #14
 800ee5c:	f300 8157 	bgt.w	800f10e <_dtoa_r+0x6fe>
 800ee60:	4b5a      	ldr	r3, [pc, #360]	@ (800efcc <_dtoa_r+0x5bc>)
 800ee62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ee66:	ed93 7b00 	vldr	d7, [r3]
 800ee6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	ed8d 7b00 	vstr	d7, [sp]
 800ee72:	da03      	bge.n	800ee7c <_dtoa_r+0x46c>
 800ee74:	9b07      	ldr	r3, [sp, #28]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	f340 8101 	ble.w	800f07e <_dtoa_r+0x66e>
 800ee7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ee80:	4656      	mov	r6, sl
 800ee82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee86:	4620      	mov	r0, r4
 800ee88:	4629      	mov	r1, r5
 800ee8a:	f7f1 fce7 	bl	800085c <__aeabi_ddiv>
 800ee8e:	f7f1 fe6b 	bl	8000b68 <__aeabi_d2iz>
 800ee92:	4680      	mov	r8, r0
 800ee94:	f7f1 fb4e 	bl	8000534 <__aeabi_i2d>
 800ee98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee9c:	f7f1 fbb4 	bl	8000608 <__aeabi_dmul>
 800eea0:	4602      	mov	r2, r0
 800eea2:	460b      	mov	r3, r1
 800eea4:	4620      	mov	r0, r4
 800eea6:	4629      	mov	r1, r5
 800eea8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800eeac:	f7f1 f9f4 	bl	8000298 <__aeabi_dsub>
 800eeb0:	f806 4b01 	strb.w	r4, [r6], #1
 800eeb4:	9d07      	ldr	r5, [sp, #28]
 800eeb6:	eba6 040a 	sub.w	r4, r6, sl
 800eeba:	42a5      	cmp	r5, r4
 800eebc:	4602      	mov	r2, r0
 800eebe:	460b      	mov	r3, r1
 800eec0:	f040 8117 	bne.w	800f0f2 <_dtoa_r+0x6e2>
 800eec4:	f7f1 f9ea 	bl	800029c <__adddf3>
 800eec8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eecc:	4604      	mov	r4, r0
 800eece:	460d      	mov	r5, r1
 800eed0:	f7f1 fe2a 	bl	8000b28 <__aeabi_dcmpgt>
 800eed4:	2800      	cmp	r0, #0
 800eed6:	f040 80f9 	bne.w	800f0cc <_dtoa_r+0x6bc>
 800eeda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eede:	4620      	mov	r0, r4
 800eee0:	4629      	mov	r1, r5
 800eee2:	f7f1 fdf9 	bl	8000ad8 <__aeabi_dcmpeq>
 800eee6:	b118      	cbz	r0, 800eef0 <_dtoa_r+0x4e0>
 800eee8:	f018 0f01 	tst.w	r8, #1
 800eeec:	f040 80ee 	bne.w	800f0cc <_dtoa_r+0x6bc>
 800eef0:	4649      	mov	r1, r9
 800eef2:	4658      	mov	r0, fp
 800eef4:	f000 ffdc 	bl	800feb0 <_Bfree>
 800eef8:	2300      	movs	r3, #0
 800eefa:	7033      	strb	r3, [r6, #0]
 800eefc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eefe:	3701      	adds	r7, #1
 800ef00:	601f      	str	r7, [r3, #0]
 800ef02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	f000 831d 	beq.w	800f544 <_dtoa_r+0xb34>
 800ef0a:	601e      	str	r6, [r3, #0]
 800ef0c:	e31a      	b.n	800f544 <_dtoa_r+0xb34>
 800ef0e:	07e2      	lsls	r2, r4, #31
 800ef10:	d505      	bpl.n	800ef1e <_dtoa_r+0x50e>
 800ef12:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ef16:	f7f1 fb77 	bl	8000608 <__aeabi_dmul>
 800ef1a:	3601      	adds	r6, #1
 800ef1c:	2301      	movs	r3, #1
 800ef1e:	1064      	asrs	r4, r4, #1
 800ef20:	3508      	adds	r5, #8
 800ef22:	e73f      	b.n	800eda4 <_dtoa_r+0x394>
 800ef24:	2602      	movs	r6, #2
 800ef26:	e742      	b.n	800edae <_dtoa_r+0x39e>
 800ef28:	9c07      	ldr	r4, [sp, #28]
 800ef2a:	9704      	str	r7, [sp, #16]
 800ef2c:	e761      	b.n	800edf2 <_dtoa_r+0x3e2>
 800ef2e:	4b27      	ldr	r3, [pc, #156]	@ (800efcc <_dtoa_r+0x5bc>)
 800ef30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ef32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef36:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ef3a:	4454      	add	r4, sl
 800ef3c:	2900      	cmp	r1, #0
 800ef3e:	d053      	beq.n	800efe8 <_dtoa_r+0x5d8>
 800ef40:	4928      	ldr	r1, [pc, #160]	@ (800efe4 <_dtoa_r+0x5d4>)
 800ef42:	2000      	movs	r0, #0
 800ef44:	f7f1 fc8a 	bl	800085c <__aeabi_ddiv>
 800ef48:	4633      	mov	r3, r6
 800ef4a:	462a      	mov	r2, r5
 800ef4c:	f7f1 f9a4 	bl	8000298 <__aeabi_dsub>
 800ef50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ef54:	4656      	mov	r6, sl
 800ef56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef5a:	f7f1 fe05 	bl	8000b68 <__aeabi_d2iz>
 800ef5e:	4605      	mov	r5, r0
 800ef60:	f7f1 fae8 	bl	8000534 <__aeabi_i2d>
 800ef64:	4602      	mov	r2, r0
 800ef66:	460b      	mov	r3, r1
 800ef68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ef6c:	f7f1 f994 	bl	8000298 <__aeabi_dsub>
 800ef70:	3530      	adds	r5, #48	@ 0x30
 800ef72:	4602      	mov	r2, r0
 800ef74:	460b      	mov	r3, r1
 800ef76:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ef7a:	f806 5b01 	strb.w	r5, [r6], #1
 800ef7e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ef82:	f7f1 fdb3 	bl	8000aec <__aeabi_dcmplt>
 800ef86:	2800      	cmp	r0, #0
 800ef88:	d171      	bne.n	800f06e <_dtoa_r+0x65e>
 800ef8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ef8e:	4911      	ldr	r1, [pc, #68]	@ (800efd4 <_dtoa_r+0x5c4>)
 800ef90:	2000      	movs	r0, #0
 800ef92:	f7f1 f981 	bl	8000298 <__aeabi_dsub>
 800ef96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ef9a:	f7f1 fda7 	bl	8000aec <__aeabi_dcmplt>
 800ef9e:	2800      	cmp	r0, #0
 800efa0:	f040 8095 	bne.w	800f0ce <_dtoa_r+0x6be>
 800efa4:	42a6      	cmp	r6, r4
 800efa6:	f43f af50 	beq.w	800ee4a <_dtoa_r+0x43a>
 800efaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800efae:	4b0a      	ldr	r3, [pc, #40]	@ (800efd8 <_dtoa_r+0x5c8>)
 800efb0:	2200      	movs	r2, #0
 800efb2:	f7f1 fb29 	bl	8000608 <__aeabi_dmul>
 800efb6:	4b08      	ldr	r3, [pc, #32]	@ (800efd8 <_dtoa_r+0x5c8>)
 800efb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800efbc:	2200      	movs	r2, #0
 800efbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efc2:	f7f1 fb21 	bl	8000608 <__aeabi_dmul>
 800efc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800efca:	e7c4      	b.n	800ef56 <_dtoa_r+0x546>
 800efcc:	08011d58 	.word	0x08011d58
 800efd0:	08011d30 	.word	0x08011d30
 800efd4:	3ff00000 	.word	0x3ff00000
 800efd8:	40240000 	.word	0x40240000
 800efdc:	401c0000 	.word	0x401c0000
 800efe0:	40140000 	.word	0x40140000
 800efe4:	3fe00000 	.word	0x3fe00000
 800efe8:	4631      	mov	r1, r6
 800efea:	4628      	mov	r0, r5
 800efec:	f7f1 fb0c 	bl	8000608 <__aeabi_dmul>
 800eff0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800eff4:	9415      	str	r4, [sp, #84]	@ 0x54
 800eff6:	4656      	mov	r6, sl
 800eff8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800effc:	f7f1 fdb4 	bl	8000b68 <__aeabi_d2iz>
 800f000:	4605      	mov	r5, r0
 800f002:	f7f1 fa97 	bl	8000534 <__aeabi_i2d>
 800f006:	4602      	mov	r2, r0
 800f008:	460b      	mov	r3, r1
 800f00a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f00e:	f7f1 f943 	bl	8000298 <__aeabi_dsub>
 800f012:	3530      	adds	r5, #48	@ 0x30
 800f014:	f806 5b01 	strb.w	r5, [r6], #1
 800f018:	4602      	mov	r2, r0
 800f01a:	460b      	mov	r3, r1
 800f01c:	42a6      	cmp	r6, r4
 800f01e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f022:	f04f 0200 	mov.w	r2, #0
 800f026:	d124      	bne.n	800f072 <_dtoa_r+0x662>
 800f028:	4bac      	ldr	r3, [pc, #688]	@ (800f2dc <_dtoa_r+0x8cc>)
 800f02a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f02e:	f7f1 f935 	bl	800029c <__adddf3>
 800f032:	4602      	mov	r2, r0
 800f034:	460b      	mov	r3, r1
 800f036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f03a:	f7f1 fd75 	bl	8000b28 <__aeabi_dcmpgt>
 800f03e:	2800      	cmp	r0, #0
 800f040:	d145      	bne.n	800f0ce <_dtoa_r+0x6be>
 800f042:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f046:	49a5      	ldr	r1, [pc, #660]	@ (800f2dc <_dtoa_r+0x8cc>)
 800f048:	2000      	movs	r0, #0
 800f04a:	f7f1 f925 	bl	8000298 <__aeabi_dsub>
 800f04e:	4602      	mov	r2, r0
 800f050:	460b      	mov	r3, r1
 800f052:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f056:	f7f1 fd49 	bl	8000aec <__aeabi_dcmplt>
 800f05a:	2800      	cmp	r0, #0
 800f05c:	f43f aef5 	beq.w	800ee4a <_dtoa_r+0x43a>
 800f060:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f062:	1e73      	subs	r3, r6, #1
 800f064:	9315      	str	r3, [sp, #84]	@ 0x54
 800f066:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f06a:	2b30      	cmp	r3, #48	@ 0x30
 800f06c:	d0f8      	beq.n	800f060 <_dtoa_r+0x650>
 800f06e:	9f04      	ldr	r7, [sp, #16]
 800f070:	e73e      	b.n	800eef0 <_dtoa_r+0x4e0>
 800f072:	4b9b      	ldr	r3, [pc, #620]	@ (800f2e0 <_dtoa_r+0x8d0>)
 800f074:	f7f1 fac8 	bl	8000608 <__aeabi_dmul>
 800f078:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f07c:	e7bc      	b.n	800eff8 <_dtoa_r+0x5e8>
 800f07e:	d10c      	bne.n	800f09a <_dtoa_r+0x68a>
 800f080:	4b98      	ldr	r3, [pc, #608]	@ (800f2e4 <_dtoa_r+0x8d4>)
 800f082:	2200      	movs	r2, #0
 800f084:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f088:	f7f1 fabe 	bl	8000608 <__aeabi_dmul>
 800f08c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f090:	f7f1 fd40 	bl	8000b14 <__aeabi_dcmpge>
 800f094:	2800      	cmp	r0, #0
 800f096:	f000 8157 	beq.w	800f348 <_dtoa_r+0x938>
 800f09a:	2400      	movs	r4, #0
 800f09c:	4625      	mov	r5, r4
 800f09e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0a0:	43db      	mvns	r3, r3
 800f0a2:	9304      	str	r3, [sp, #16]
 800f0a4:	4656      	mov	r6, sl
 800f0a6:	2700      	movs	r7, #0
 800f0a8:	4621      	mov	r1, r4
 800f0aa:	4658      	mov	r0, fp
 800f0ac:	f000 ff00 	bl	800feb0 <_Bfree>
 800f0b0:	2d00      	cmp	r5, #0
 800f0b2:	d0dc      	beq.n	800f06e <_dtoa_r+0x65e>
 800f0b4:	b12f      	cbz	r7, 800f0c2 <_dtoa_r+0x6b2>
 800f0b6:	42af      	cmp	r7, r5
 800f0b8:	d003      	beq.n	800f0c2 <_dtoa_r+0x6b2>
 800f0ba:	4639      	mov	r1, r7
 800f0bc:	4658      	mov	r0, fp
 800f0be:	f000 fef7 	bl	800feb0 <_Bfree>
 800f0c2:	4629      	mov	r1, r5
 800f0c4:	4658      	mov	r0, fp
 800f0c6:	f000 fef3 	bl	800feb0 <_Bfree>
 800f0ca:	e7d0      	b.n	800f06e <_dtoa_r+0x65e>
 800f0cc:	9704      	str	r7, [sp, #16]
 800f0ce:	4633      	mov	r3, r6
 800f0d0:	461e      	mov	r6, r3
 800f0d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f0d6:	2a39      	cmp	r2, #57	@ 0x39
 800f0d8:	d107      	bne.n	800f0ea <_dtoa_r+0x6da>
 800f0da:	459a      	cmp	sl, r3
 800f0dc:	d1f8      	bne.n	800f0d0 <_dtoa_r+0x6c0>
 800f0de:	9a04      	ldr	r2, [sp, #16]
 800f0e0:	3201      	adds	r2, #1
 800f0e2:	9204      	str	r2, [sp, #16]
 800f0e4:	2230      	movs	r2, #48	@ 0x30
 800f0e6:	f88a 2000 	strb.w	r2, [sl]
 800f0ea:	781a      	ldrb	r2, [r3, #0]
 800f0ec:	3201      	adds	r2, #1
 800f0ee:	701a      	strb	r2, [r3, #0]
 800f0f0:	e7bd      	b.n	800f06e <_dtoa_r+0x65e>
 800f0f2:	4b7b      	ldr	r3, [pc, #492]	@ (800f2e0 <_dtoa_r+0x8d0>)
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	f7f1 fa87 	bl	8000608 <__aeabi_dmul>
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	4604      	mov	r4, r0
 800f100:	460d      	mov	r5, r1
 800f102:	f7f1 fce9 	bl	8000ad8 <__aeabi_dcmpeq>
 800f106:	2800      	cmp	r0, #0
 800f108:	f43f aebb 	beq.w	800ee82 <_dtoa_r+0x472>
 800f10c:	e6f0      	b.n	800eef0 <_dtoa_r+0x4e0>
 800f10e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f110:	2a00      	cmp	r2, #0
 800f112:	f000 80db 	beq.w	800f2cc <_dtoa_r+0x8bc>
 800f116:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f118:	2a01      	cmp	r2, #1
 800f11a:	f300 80bf 	bgt.w	800f29c <_dtoa_r+0x88c>
 800f11e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f120:	2a00      	cmp	r2, #0
 800f122:	f000 80b7 	beq.w	800f294 <_dtoa_r+0x884>
 800f126:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800f12a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f12c:	4646      	mov	r6, r8
 800f12e:	9a08      	ldr	r2, [sp, #32]
 800f130:	2101      	movs	r1, #1
 800f132:	441a      	add	r2, r3
 800f134:	4658      	mov	r0, fp
 800f136:	4498      	add	r8, r3
 800f138:	9208      	str	r2, [sp, #32]
 800f13a:	f000 ffb7 	bl	80100ac <__i2b>
 800f13e:	4605      	mov	r5, r0
 800f140:	b15e      	cbz	r6, 800f15a <_dtoa_r+0x74a>
 800f142:	9b08      	ldr	r3, [sp, #32]
 800f144:	2b00      	cmp	r3, #0
 800f146:	dd08      	ble.n	800f15a <_dtoa_r+0x74a>
 800f148:	42b3      	cmp	r3, r6
 800f14a:	9a08      	ldr	r2, [sp, #32]
 800f14c:	bfa8      	it	ge
 800f14e:	4633      	movge	r3, r6
 800f150:	eba8 0803 	sub.w	r8, r8, r3
 800f154:	1af6      	subs	r6, r6, r3
 800f156:	1ad3      	subs	r3, r2, r3
 800f158:	9308      	str	r3, [sp, #32]
 800f15a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f15c:	b1f3      	cbz	r3, 800f19c <_dtoa_r+0x78c>
 800f15e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f160:	2b00      	cmp	r3, #0
 800f162:	f000 80b7 	beq.w	800f2d4 <_dtoa_r+0x8c4>
 800f166:	b18c      	cbz	r4, 800f18c <_dtoa_r+0x77c>
 800f168:	4629      	mov	r1, r5
 800f16a:	4622      	mov	r2, r4
 800f16c:	4658      	mov	r0, fp
 800f16e:	f001 f85d 	bl	801022c <__pow5mult>
 800f172:	464a      	mov	r2, r9
 800f174:	4601      	mov	r1, r0
 800f176:	4605      	mov	r5, r0
 800f178:	4658      	mov	r0, fp
 800f17a:	f000 ffad 	bl	80100d8 <__multiply>
 800f17e:	4649      	mov	r1, r9
 800f180:	9004      	str	r0, [sp, #16]
 800f182:	4658      	mov	r0, fp
 800f184:	f000 fe94 	bl	800feb0 <_Bfree>
 800f188:	9b04      	ldr	r3, [sp, #16]
 800f18a:	4699      	mov	r9, r3
 800f18c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f18e:	1b1a      	subs	r2, r3, r4
 800f190:	d004      	beq.n	800f19c <_dtoa_r+0x78c>
 800f192:	4649      	mov	r1, r9
 800f194:	4658      	mov	r0, fp
 800f196:	f001 f849 	bl	801022c <__pow5mult>
 800f19a:	4681      	mov	r9, r0
 800f19c:	2101      	movs	r1, #1
 800f19e:	4658      	mov	r0, fp
 800f1a0:	f000 ff84 	bl	80100ac <__i2b>
 800f1a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1a6:	4604      	mov	r4, r0
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	f000 81cf 	beq.w	800f54c <_dtoa_r+0xb3c>
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	4601      	mov	r1, r0
 800f1b2:	4658      	mov	r0, fp
 800f1b4:	f001 f83a 	bl	801022c <__pow5mult>
 800f1b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1ba:	2b01      	cmp	r3, #1
 800f1bc:	4604      	mov	r4, r0
 800f1be:	f300 8095 	bgt.w	800f2ec <_dtoa_r+0x8dc>
 800f1c2:	9b02      	ldr	r3, [sp, #8]
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	f040 8087 	bne.w	800f2d8 <_dtoa_r+0x8c8>
 800f1ca:	9b03      	ldr	r3, [sp, #12]
 800f1cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	f040 8089 	bne.w	800f2e8 <_dtoa_r+0x8d8>
 800f1d6:	9b03      	ldr	r3, [sp, #12]
 800f1d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f1dc:	0d1b      	lsrs	r3, r3, #20
 800f1de:	051b      	lsls	r3, r3, #20
 800f1e0:	b12b      	cbz	r3, 800f1ee <_dtoa_r+0x7de>
 800f1e2:	9b08      	ldr	r3, [sp, #32]
 800f1e4:	3301      	adds	r3, #1
 800f1e6:	9308      	str	r3, [sp, #32]
 800f1e8:	f108 0801 	add.w	r8, r8, #1
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800f1f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	f000 81b0 	beq.w	800f558 <_dtoa_r+0xb48>
 800f1f8:	6923      	ldr	r3, [r4, #16]
 800f1fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f1fe:	6918      	ldr	r0, [r3, #16]
 800f200:	f000 ff08 	bl	8010014 <__hi0bits>
 800f204:	f1c0 0020 	rsb	r0, r0, #32
 800f208:	9b08      	ldr	r3, [sp, #32]
 800f20a:	4418      	add	r0, r3
 800f20c:	f010 001f 	ands.w	r0, r0, #31
 800f210:	d077      	beq.n	800f302 <_dtoa_r+0x8f2>
 800f212:	f1c0 0320 	rsb	r3, r0, #32
 800f216:	2b04      	cmp	r3, #4
 800f218:	dd6b      	ble.n	800f2f2 <_dtoa_r+0x8e2>
 800f21a:	9b08      	ldr	r3, [sp, #32]
 800f21c:	f1c0 001c 	rsb	r0, r0, #28
 800f220:	4403      	add	r3, r0
 800f222:	4480      	add	r8, r0
 800f224:	4406      	add	r6, r0
 800f226:	9308      	str	r3, [sp, #32]
 800f228:	f1b8 0f00 	cmp.w	r8, #0
 800f22c:	dd05      	ble.n	800f23a <_dtoa_r+0x82a>
 800f22e:	4649      	mov	r1, r9
 800f230:	4642      	mov	r2, r8
 800f232:	4658      	mov	r0, fp
 800f234:	f001 f854 	bl	80102e0 <__lshift>
 800f238:	4681      	mov	r9, r0
 800f23a:	9b08      	ldr	r3, [sp, #32]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	dd05      	ble.n	800f24c <_dtoa_r+0x83c>
 800f240:	4621      	mov	r1, r4
 800f242:	461a      	mov	r2, r3
 800f244:	4658      	mov	r0, fp
 800f246:	f001 f84b 	bl	80102e0 <__lshift>
 800f24a:	4604      	mov	r4, r0
 800f24c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d059      	beq.n	800f306 <_dtoa_r+0x8f6>
 800f252:	4621      	mov	r1, r4
 800f254:	4648      	mov	r0, r9
 800f256:	f001 f8af 	bl	80103b8 <__mcmp>
 800f25a:	2800      	cmp	r0, #0
 800f25c:	da53      	bge.n	800f306 <_dtoa_r+0x8f6>
 800f25e:	1e7b      	subs	r3, r7, #1
 800f260:	9304      	str	r3, [sp, #16]
 800f262:	4649      	mov	r1, r9
 800f264:	2300      	movs	r3, #0
 800f266:	220a      	movs	r2, #10
 800f268:	4658      	mov	r0, fp
 800f26a:	f000 fe43 	bl	800fef4 <__multadd>
 800f26e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f270:	4681      	mov	r9, r0
 800f272:	2b00      	cmp	r3, #0
 800f274:	f000 8172 	beq.w	800f55c <_dtoa_r+0xb4c>
 800f278:	2300      	movs	r3, #0
 800f27a:	4629      	mov	r1, r5
 800f27c:	220a      	movs	r2, #10
 800f27e:	4658      	mov	r0, fp
 800f280:	f000 fe38 	bl	800fef4 <__multadd>
 800f284:	9b00      	ldr	r3, [sp, #0]
 800f286:	2b00      	cmp	r3, #0
 800f288:	4605      	mov	r5, r0
 800f28a:	dc67      	bgt.n	800f35c <_dtoa_r+0x94c>
 800f28c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f28e:	2b02      	cmp	r3, #2
 800f290:	dc41      	bgt.n	800f316 <_dtoa_r+0x906>
 800f292:	e063      	b.n	800f35c <_dtoa_r+0x94c>
 800f294:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f296:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800f29a:	e746      	b.n	800f12a <_dtoa_r+0x71a>
 800f29c:	9b07      	ldr	r3, [sp, #28]
 800f29e:	1e5c      	subs	r4, r3, #1
 800f2a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f2a2:	42a3      	cmp	r3, r4
 800f2a4:	bfbf      	itttt	lt
 800f2a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800f2a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800f2aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800f2ac:	1ae3      	sublt	r3, r4, r3
 800f2ae:	bfb4      	ite	lt
 800f2b0:	18d2      	addlt	r2, r2, r3
 800f2b2:	1b1c      	subge	r4, r3, r4
 800f2b4:	9b07      	ldr	r3, [sp, #28]
 800f2b6:	bfbc      	itt	lt
 800f2b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800f2ba:	2400      	movlt	r4, #0
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	bfb5      	itete	lt
 800f2c0:	eba8 0603 	sublt.w	r6, r8, r3
 800f2c4:	9b07      	ldrge	r3, [sp, #28]
 800f2c6:	2300      	movlt	r3, #0
 800f2c8:	4646      	movge	r6, r8
 800f2ca:	e730      	b.n	800f12e <_dtoa_r+0x71e>
 800f2cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800f2ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f2d0:	4646      	mov	r6, r8
 800f2d2:	e735      	b.n	800f140 <_dtoa_r+0x730>
 800f2d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f2d6:	e75c      	b.n	800f192 <_dtoa_r+0x782>
 800f2d8:	2300      	movs	r3, #0
 800f2da:	e788      	b.n	800f1ee <_dtoa_r+0x7de>
 800f2dc:	3fe00000 	.word	0x3fe00000
 800f2e0:	40240000 	.word	0x40240000
 800f2e4:	40140000 	.word	0x40140000
 800f2e8:	9b02      	ldr	r3, [sp, #8]
 800f2ea:	e780      	b.n	800f1ee <_dtoa_r+0x7de>
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800f2f0:	e782      	b.n	800f1f8 <_dtoa_r+0x7e8>
 800f2f2:	d099      	beq.n	800f228 <_dtoa_r+0x818>
 800f2f4:	9a08      	ldr	r2, [sp, #32]
 800f2f6:	331c      	adds	r3, #28
 800f2f8:	441a      	add	r2, r3
 800f2fa:	4498      	add	r8, r3
 800f2fc:	441e      	add	r6, r3
 800f2fe:	9208      	str	r2, [sp, #32]
 800f300:	e792      	b.n	800f228 <_dtoa_r+0x818>
 800f302:	4603      	mov	r3, r0
 800f304:	e7f6      	b.n	800f2f4 <_dtoa_r+0x8e4>
 800f306:	9b07      	ldr	r3, [sp, #28]
 800f308:	9704      	str	r7, [sp, #16]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	dc20      	bgt.n	800f350 <_dtoa_r+0x940>
 800f30e:	9300      	str	r3, [sp, #0]
 800f310:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f312:	2b02      	cmp	r3, #2
 800f314:	dd1e      	ble.n	800f354 <_dtoa_r+0x944>
 800f316:	9b00      	ldr	r3, [sp, #0]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	f47f aec0 	bne.w	800f09e <_dtoa_r+0x68e>
 800f31e:	4621      	mov	r1, r4
 800f320:	2205      	movs	r2, #5
 800f322:	4658      	mov	r0, fp
 800f324:	f000 fde6 	bl	800fef4 <__multadd>
 800f328:	4601      	mov	r1, r0
 800f32a:	4604      	mov	r4, r0
 800f32c:	4648      	mov	r0, r9
 800f32e:	f001 f843 	bl	80103b8 <__mcmp>
 800f332:	2800      	cmp	r0, #0
 800f334:	f77f aeb3 	ble.w	800f09e <_dtoa_r+0x68e>
 800f338:	4656      	mov	r6, sl
 800f33a:	2331      	movs	r3, #49	@ 0x31
 800f33c:	f806 3b01 	strb.w	r3, [r6], #1
 800f340:	9b04      	ldr	r3, [sp, #16]
 800f342:	3301      	adds	r3, #1
 800f344:	9304      	str	r3, [sp, #16]
 800f346:	e6ae      	b.n	800f0a6 <_dtoa_r+0x696>
 800f348:	9c07      	ldr	r4, [sp, #28]
 800f34a:	9704      	str	r7, [sp, #16]
 800f34c:	4625      	mov	r5, r4
 800f34e:	e7f3      	b.n	800f338 <_dtoa_r+0x928>
 800f350:	9b07      	ldr	r3, [sp, #28]
 800f352:	9300      	str	r3, [sp, #0]
 800f354:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f356:	2b00      	cmp	r3, #0
 800f358:	f000 8104 	beq.w	800f564 <_dtoa_r+0xb54>
 800f35c:	2e00      	cmp	r6, #0
 800f35e:	dd05      	ble.n	800f36c <_dtoa_r+0x95c>
 800f360:	4629      	mov	r1, r5
 800f362:	4632      	mov	r2, r6
 800f364:	4658      	mov	r0, fp
 800f366:	f000 ffbb 	bl	80102e0 <__lshift>
 800f36a:	4605      	mov	r5, r0
 800f36c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d05a      	beq.n	800f428 <_dtoa_r+0xa18>
 800f372:	6869      	ldr	r1, [r5, #4]
 800f374:	4658      	mov	r0, fp
 800f376:	f000 fd5b 	bl	800fe30 <_Balloc>
 800f37a:	4606      	mov	r6, r0
 800f37c:	b928      	cbnz	r0, 800f38a <_dtoa_r+0x97a>
 800f37e:	4b84      	ldr	r3, [pc, #528]	@ (800f590 <_dtoa_r+0xb80>)
 800f380:	4602      	mov	r2, r0
 800f382:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f386:	f7ff bb5a 	b.w	800ea3e <_dtoa_r+0x2e>
 800f38a:	692a      	ldr	r2, [r5, #16]
 800f38c:	3202      	adds	r2, #2
 800f38e:	0092      	lsls	r2, r2, #2
 800f390:	f105 010c 	add.w	r1, r5, #12
 800f394:	300c      	adds	r0, #12
 800f396:	f7ff fa76 	bl	800e886 <memcpy>
 800f39a:	2201      	movs	r2, #1
 800f39c:	4631      	mov	r1, r6
 800f39e:	4658      	mov	r0, fp
 800f3a0:	f000 ff9e 	bl	80102e0 <__lshift>
 800f3a4:	f10a 0301 	add.w	r3, sl, #1
 800f3a8:	9307      	str	r3, [sp, #28]
 800f3aa:	9b00      	ldr	r3, [sp, #0]
 800f3ac:	4453      	add	r3, sl
 800f3ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f3b0:	9b02      	ldr	r3, [sp, #8]
 800f3b2:	f003 0301 	and.w	r3, r3, #1
 800f3b6:	462f      	mov	r7, r5
 800f3b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800f3ba:	4605      	mov	r5, r0
 800f3bc:	9b07      	ldr	r3, [sp, #28]
 800f3be:	4621      	mov	r1, r4
 800f3c0:	3b01      	subs	r3, #1
 800f3c2:	4648      	mov	r0, r9
 800f3c4:	9300      	str	r3, [sp, #0]
 800f3c6:	f7ff fa9b 	bl	800e900 <quorem>
 800f3ca:	4639      	mov	r1, r7
 800f3cc:	9002      	str	r0, [sp, #8]
 800f3ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f3d2:	4648      	mov	r0, r9
 800f3d4:	f000 fff0 	bl	80103b8 <__mcmp>
 800f3d8:	462a      	mov	r2, r5
 800f3da:	9008      	str	r0, [sp, #32]
 800f3dc:	4621      	mov	r1, r4
 800f3de:	4658      	mov	r0, fp
 800f3e0:	f001 f806 	bl	80103f0 <__mdiff>
 800f3e4:	68c2      	ldr	r2, [r0, #12]
 800f3e6:	4606      	mov	r6, r0
 800f3e8:	bb02      	cbnz	r2, 800f42c <_dtoa_r+0xa1c>
 800f3ea:	4601      	mov	r1, r0
 800f3ec:	4648      	mov	r0, r9
 800f3ee:	f000 ffe3 	bl	80103b8 <__mcmp>
 800f3f2:	4602      	mov	r2, r0
 800f3f4:	4631      	mov	r1, r6
 800f3f6:	4658      	mov	r0, fp
 800f3f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800f3fa:	f000 fd59 	bl	800feb0 <_Bfree>
 800f3fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f400:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f402:	9e07      	ldr	r6, [sp, #28]
 800f404:	ea43 0102 	orr.w	r1, r3, r2
 800f408:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f40a:	4319      	orrs	r1, r3
 800f40c:	d110      	bne.n	800f430 <_dtoa_r+0xa20>
 800f40e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f412:	d029      	beq.n	800f468 <_dtoa_r+0xa58>
 800f414:	9b08      	ldr	r3, [sp, #32]
 800f416:	2b00      	cmp	r3, #0
 800f418:	dd02      	ble.n	800f420 <_dtoa_r+0xa10>
 800f41a:	9b02      	ldr	r3, [sp, #8]
 800f41c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800f420:	9b00      	ldr	r3, [sp, #0]
 800f422:	f883 8000 	strb.w	r8, [r3]
 800f426:	e63f      	b.n	800f0a8 <_dtoa_r+0x698>
 800f428:	4628      	mov	r0, r5
 800f42a:	e7bb      	b.n	800f3a4 <_dtoa_r+0x994>
 800f42c:	2201      	movs	r2, #1
 800f42e:	e7e1      	b.n	800f3f4 <_dtoa_r+0x9e4>
 800f430:	9b08      	ldr	r3, [sp, #32]
 800f432:	2b00      	cmp	r3, #0
 800f434:	db04      	blt.n	800f440 <_dtoa_r+0xa30>
 800f436:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f438:	430b      	orrs	r3, r1
 800f43a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f43c:	430b      	orrs	r3, r1
 800f43e:	d120      	bne.n	800f482 <_dtoa_r+0xa72>
 800f440:	2a00      	cmp	r2, #0
 800f442:	dded      	ble.n	800f420 <_dtoa_r+0xa10>
 800f444:	4649      	mov	r1, r9
 800f446:	2201      	movs	r2, #1
 800f448:	4658      	mov	r0, fp
 800f44a:	f000 ff49 	bl	80102e0 <__lshift>
 800f44e:	4621      	mov	r1, r4
 800f450:	4681      	mov	r9, r0
 800f452:	f000 ffb1 	bl	80103b8 <__mcmp>
 800f456:	2800      	cmp	r0, #0
 800f458:	dc03      	bgt.n	800f462 <_dtoa_r+0xa52>
 800f45a:	d1e1      	bne.n	800f420 <_dtoa_r+0xa10>
 800f45c:	f018 0f01 	tst.w	r8, #1
 800f460:	d0de      	beq.n	800f420 <_dtoa_r+0xa10>
 800f462:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f466:	d1d8      	bne.n	800f41a <_dtoa_r+0xa0a>
 800f468:	9a00      	ldr	r2, [sp, #0]
 800f46a:	2339      	movs	r3, #57	@ 0x39
 800f46c:	7013      	strb	r3, [r2, #0]
 800f46e:	4633      	mov	r3, r6
 800f470:	461e      	mov	r6, r3
 800f472:	3b01      	subs	r3, #1
 800f474:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f478:	2a39      	cmp	r2, #57	@ 0x39
 800f47a:	d052      	beq.n	800f522 <_dtoa_r+0xb12>
 800f47c:	3201      	adds	r2, #1
 800f47e:	701a      	strb	r2, [r3, #0]
 800f480:	e612      	b.n	800f0a8 <_dtoa_r+0x698>
 800f482:	2a00      	cmp	r2, #0
 800f484:	dd07      	ble.n	800f496 <_dtoa_r+0xa86>
 800f486:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800f48a:	d0ed      	beq.n	800f468 <_dtoa_r+0xa58>
 800f48c:	9a00      	ldr	r2, [sp, #0]
 800f48e:	f108 0301 	add.w	r3, r8, #1
 800f492:	7013      	strb	r3, [r2, #0]
 800f494:	e608      	b.n	800f0a8 <_dtoa_r+0x698>
 800f496:	9b07      	ldr	r3, [sp, #28]
 800f498:	9a07      	ldr	r2, [sp, #28]
 800f49a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800f49e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	d028      	beq.n	800f4f6 <_dtoa_r+0xae6>
 800f4a4:	4649      	mov	r1, r9
 800f4a6:	2300      	movs	r3, #0
 800f4a8:	220a      	movs	r2, #10
 800f4aa:	4658      	mov	r0, fp
 800f4ac:	f000 fd22 	bl	800fef4 <__multadd>
 800f4b0:	42af      	cmp	r7, r5
 800f4b2:	4681      	mov	r9, r0
 800f4b4:	f04f 0300 	mov.w	r3, #0
 800f4b8:	f04f 020a 	mov.w	r2, #10
 800f4bc:	4639      	mov	r1, r7
 800f4be:	4658      	mov	r0, fp
 800f4c0:	d107      	bne.n	800f4d2 <_dtoa_r+0xac2>
 800f4c2:	f000 fd17 	bl	800fef4 <__multadd>
 800f4c6:	4607      	mov	r7, r0
 800f4c8:	4605      	mov	r5, r0
 800f4ca:	9b07      	ldr	r3, [sp, #28]
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	9307      	str	r3, [sp, #28]
 800f4d0:	e774      	b.n	800f3bc <_dtoa_r+0x9ac>
 800f4d2:	f000 fd0f 	bl	800fef4 <__multadd>
 800f4d6:	4629      	mov	r1, r5
 800f4d8:	4607      	mov	r7, r0
 800f4da:	2300      	movs	r3, #0
 800f4dc:	220a      	movs	r2, #10
 800f4de:	4658      	mov	r0, fp
 800f4e0:	f000 fd08 	bl	800fef4 <__multadd>
 800f4e4:	4605      	mov	r5, r0
 800f4e6:	e7f0      	b.n	800f4ca <_dtoa_r+0xaba>
 800f4e8:	9b00      	ldr	r3, [sp, #0]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	bfcc      	ite	gt
 800f4ee:	461e      	movgt	r6, r3
 800f4f0:	2601      	movle	r6, #1
 800f4f2:	4456      	add	r6, sl
 800f4f4:	2700      	movs	r7, #0
 800f4f6:	4649      	mov	r1, r9
 800f4f8:	2201      	movs	r2, #1
 800f4fa:	4658      	mov	r0, fp
 800f4fc:	f000 fef0 	bl	80102e0 <__lshift>
 800f500:	4621      	mov	r1, r4
 800f502:	4681      	mov	r9, r0
 800f504:	f000 ff58 	bl	80103b8 <__mcmp>
 800f508:	2800      	cmp	r0, #0
 800f50a:	dcb0      	bgt.n	800f46e <_dtoa_r+0xa5e>
 800f50c:	d102      	bne.n	800f514 <_dtoa_r+0xb04>
 800f50e:	f018 0f01 	tst.w	r8, #1
 800f512:	d1ac      	bne.n	800f46e <_dtoa_r+0xa5e>
 800f514:	4633      	mov	r3, r6
 800f516:	461e      	mov	r6, r3
 800f518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f51c:	2a30      	cmp	r2, #48	@ 0x30
 800f51e:	d0fa      	beq.n	800f516 <_dtoa_r+0xb06>
 800f520:	e5c2      	b.n	800f0a8 <_dtoa_r+0x698>
 800f522:	459a      	cmp	sl, r3
 800f524:	d1a4      	bne.n	800f470 <_dtoa_r+0xa60>
 800f526:	9b04      	ldr	r3, [sp, #16]
 800f528:	3301      	adds	r3, #1
 800f52a:	9304      	str	r3, [sp, #16]
 800f52c:	2331      	movs	r3, #49	@ 0x31
 800f52e:	f88a 3000 	strb.w	r3, [sl]
 800f532:	e5b9      	b.n	800f0a8 <_dtoa_r+0x698>
 800f534:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f536:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800f594 <_dtoa_r+0xb84>
 800f53a:	b11b      	cbz	r3, 800f544 <_dtoa_r+0xb34>
 800f53c:	f10a 0308 	add.w	r3, sl, #8
 800f540:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f542:	6013      	str	r3, [r2, #0]
 800f544:	4650      	mov	r0, sl
 800f546:	b019      	add	sp, #100	@ 0x64
 800f548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f54c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f54e:	2b01      	cmp	r3, #1
 800f550:	f77f ae37 	ble.w	800f1c2 <_dtoa_r+0x7b2>
 800f554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f556:	930a      	str	r3, [sp, #40]	@ 0x28
 800f558:	2001      	movs	r0, #1
 800f55a:	e655      	b.n	800f208 <_dtoa_r+0x7f8>
 800f55c:	9b00      	ldr	r3, [sp, #0]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	f77f aed6 	ble.w	800f310 <_dtoa_r+0x900>
 800f564:	4656      	mov	r6, sl
 800f566:	4621      	mov	r1, r4
 800f568:	4648      	mov	r0, r9
 800f56a:	f7ff f9c9 	bl	800e900 <quorem>
 800f56e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800f572:	f806 8b01 	strb.w	r8, [r6], #1
 800f576:	9b00      	ldr	r3, [sp, #0]
 800f578:	eba6 020a 	sub.w	r2, r6, sl
 800f57c:	4293      	cmp	r3, r2
 800f57e:	ddb3      	ble.n	800f4e8 <_dtoa_r+0xad8>
 800f580:	4649      	mov	r1, r9
 800f582:	2300      	movs	r3, #0
 800f584:	220a      	movs	r2, #10
 800f586:	4658      	mov	r0, fp
 800f588:	f000 fcb4 	bl	800fef4 <__multadd>
 800f58c:	4681      	mov	r9, r0
 800f58e:	e7ea      	b.n	800f566 <_dtoa_r+0xb56>
 800f590:	08011c5a 	.word	0x08011c5a
 800f594:	08011bde 	.word	0x08011bde

0800f598 <_free_r>:
 800f598:	b538      	push	{r3, r4, r5, lr}
 800f59a:	4605      	mov	r5, r0
 800f59c:	2900      	cmp	r1, #0
 800f59e:	d041      	beq.n	800f624 <_free_r+0x8c>
 800f5a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5a4:	1f0c      	subs	r4, r1, #4
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	bfb8      	it	lt
 800f5aa:	18e4      	addlt	r4, r4, r3
 800f5ac:	f000 fc34 	bl	800fe18 <__malloc_lock>
 800f5b0:	4a1d      	ldr	r2, [pc, #116]	@ (800f628 <_free_r+0x90>)
 800f5b2:	6813      	ldr	r3, [r2, #0]
 800f5b4:	b933      	cbnz	r3, 800f5c4 <_free_r+0x2c>
 800f5b6:	6063      	str	r3, [r4, #4]
 800f5b8:	6014      	str	r4, [r2, #0]
 800f5ba:	4628      	mov	r0, r5
 800f5bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5c0:	f000 bc30 	b.w	800fe24 <__malloc_unlock>
 800f5c4:	42a3      	cmp	r3, r4
 800f5c6:	d908      	bls.n	800f5da <_free_r+0x42>
 800f5c8:	6820      	ldr	r0, [r4, #0]
 800f5ca:	1821      	adds	r1, r4, r0
 800f5cc:	428b      	cmp	r3, r1
 800f5ce:	bf01      	itttt	eq
 800f5d0:	6819      	ldreq	r1, [r3, #0]
 800f5d2:	685b      	ldreq	r3, [r3, #4]
 800f5d4:	1809      	addeq	r1, r1, r0
 800f5d6:	6021      	streq	r1, [r4, #0]
 800f5d8:	e7ed      	b.n	800f5b6 <_free_r+0x1e>
 800f5da:	461a      	mov	r2, r3
 800f5dc:	685b      	ldr	r3, [r3, #4]
 800f5de:	b10b      	cbz	r3, 800f5e4 <_free_r+0x4c>
 800f5e0:	42a3      	cmp	r3, r4
 800f5e2:	d9fa      	bls.n	800f5da <_free_r+0x42>
 800f5e4:	6811      	ldr	r1, [r2, #0]
 800f5e6:	1850      	adds	r0, r2, r1
 800f5e8:	42a0      	cmp	r0, r4
 800f5ea:	d10b      	bne.n	800f604 <_free_r+0x6c>
 800f5ec:	6820      	ldr	r0, [r4, #0]
 800f5ee:	4401      	add	r1, r0
 800f5f0:	1850      	adds	r0, r2, r1
 800f5f2:	4283      	cmp	r3, r0
 800f5f4:	6011      	str	r1, [r2, #0]
 800f5f6:	d1e0      	bne.n	800f5ba <_free_r+0x22>
 800f5f8:	6818      	ldr	r0, [r3, #0]
 800f5fa:	685b      	ldr	r3, [r3, #4]
 800f5fc:	6053      	str	r3, [r2, #4]
 800f5fe:	4408      	add	r0, r1
 800f600:	6010      	str	r0, [r2, #0]
 800f602:	e7da      	b.n	800f5ba <_free_r+0x22>
 800f604:	d902      	bls.n	800f60c <_free_r+0x74>
 800f606:	230c      	movs	r3, #12
 800f608:	602b      	str	r3, [r5, #0]
 800f60a:	e7d6      	b.n	800f5ba <_free_r+0x22>
 800f60c:	6820      	ldr	r0, [r4, #0]
 800f60e:	1821      	adds	r1, r4, r0
 800f610:	428b      	cmp	r3, r1
 800f612:	bf04      	itt	eq
 800f614:	6819      	ldreq	r1, [r3, #0]
 800f616:	685b      	ldreq	r3, [r3, #4]
 800f618:	6063      	str	r3, [r4, #4]
 800f61a:	bf04      	itt	eq
 800f61c:	1809      	addeq	r1, r1, r0
 800f61e:	6021      	streq	r1, [r4, #0]
 800f620:	6054      	str	r4, [r2, #4]
 800f622:	e7ca      	b.n	800f5ba <_free_r+0x22>
 800f624:	bd38      	pop	{r3, r4, r5, pc}
 800f626:	bf00      	nop
 800f628:	2000671c 	.word	0x2000671c

0800f62c <rshift>:
 800f62c:	6903      	ldr	r3, [r0, #16]
 800f62e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f632:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f636:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f63a:	f100 0414 	add.w	r4, r0, #20
 800f63e:	dd45      	ble.n	800f6cc <rshift+0xa0>
 800f640:	f011 011f 	ands.w	r1, r1, #31
 800f644:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f648:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f64c:	d10c      	bne.n	800f668 <rshift+0x3c>
 800f64e:	f100 0710 	add.w	r7, r0, #16
 800f652:	4629      	mov	r1, r5
 800f654:	42b1      	cmp	r1, r6
 800f656:	d334      	bcc.n	800f6c2 <rshift+0x96>
 800f658:	1a9b      	subs	r3, r3, r2
 800f65a:	009b      	lsls	r3, r3, #2
 800f65c:	1eea      	subs	r2, r5, #3
 800f65e:	4296      	cmp	r6, r2
 800f660:	bf38      	it	cc
 800f662:	2300      	movcc	r3, #0
 800f664:	4423      	add	r3, r4
 800f666:	e015      	b.n	800f694 <rshift+0x68>
 800f668:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f66c:	f1c1 0820 	rsb	r8, r1, #32
 800f670:	40cf      	lsrs	r7, r1
 800f672:	f105 0e04 	add.w	lr, r5, #4
 800f676:	46a1      	mov	r9, r4
 800f678:	4576      	cmp	r6, lr
 800f67a:	46f4      	mov	ip, lr
 800f67c:	d815      	bhi.n	800f6aa <rshift+0x7e>
 800f67e:	1a9a      	subs	r2, r3, r2
 800f680:	0092      	lsls	r2, r2, #2
 800f682:	3a04      	subs	r2, #4
 800f684:	3501      	adds	r5, #1
 800f686:	42ae      	cmp	r6, r5
 800f688:	bf38      	it	cc
 800f68a:	2200      	movcc	r2, #0
 800f68c:	18a3      	adds	r3, r4, r2
 800f68e:	50a7      	str	r7, [r4, r2]
 800f690:	b107      	cbz	r7, 800f694 <rshift+0x68>
 800f692:	3304      	adds	r3, #4
 800f694:	1b1a      	subs	r2, r3, r4
 800f696:	42a3      	cmp	r3, r4
 800f698:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f69c:	bf08      	it	eq
 800f69e:	2300      	moveq	r3, #0
 800f6a0:	6102      	str	r2, [r0, #16]
 800f6a2:	bf08      	it	eq
 800f6a4:	6143      	streq	r3, [r0, #20]
 800f6a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6aa:	f8dc c000 	ldr.w	ip, [ip]
 800f6ae:	fa0c fc08 	lsl.w	ip, ip, r8
 800f6b2:	ea4c 0707 	orr.w	r7, ip, r7
 800f6b6:	f849 7b04 	str.w	r7, [r9], #4
 800f6ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f6be:	40cf      	lsrs	r7, r1
 800f6c0:	e7da      	b.n	800f678 <rshift+0x4c>
 800f6c2:	f851 cb04 	ldr.w	ip, [r1], #4
 800f6c6:	f847 cf04 	str.w	ip, [r7, #4]!
 800f6ca:	e7c3      	b.n	800f654 <rshift+0x28>
 800f6cc:	4623      	mov	r3, r4
 800f6ce:	e7e1      	b.n	800f694 <rshift+0x68>

0800f6d0 <__hexdig_fun>:
 800f6d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f6d4:	2b09      	cmp	r3, #9
 800f6d6:	d802      	bhi.n	800f6de <__hexdig_fun+0xe>
 800f6d8:	3820      	subs	r0, #32
 800f6da:	b2c0      	uxtb	r0, r0
 800f6dc:	4770      	bx	lr
 800f6de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f6e2:	2b05      	cmp	r3, #5
 800f6e4:	d801      	bhi.n	800f6ea <__hexdig_fun+0x1a>
 800f6e6:	3847      	subs	r0, #71	@ 0x47
 800f6e8:	e7f7      	b.n	800f6da <__hexdig_fun+0xa>
 800f6ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f6ee:	2b05      	cmp	r3, #5
 800f6f0:	d801      	bhi.n	800f6f6 <__hexdig_fun+0x26>
 800f6f2:	3827      	subs	r0, #39	@ 0x27
 800f6f4:	e7f1      	b.n	800f6da <__hexdig_fun+0xa>
 800f6f6:	2000      	movs	r0, #0
 800f6f8:	4770      	bx	lr
	...

0800f6fc <__gethex>:
 800f6fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f700:	b085      	sub	sp, #20
 800f702:	468a      	mov	sl, r1
 800f704:	9302      	str	r3, [sp, #8]
 800f706:	680b      	ldr	r3, [r1, #0]
 800f708:	9001      	str	r0, [sp, #4]
 800f70a:	4690      	mov	r8, r2
 800f70c:	1c9c      	adds	r4, r3, #2
 800f70e:	46a1      	mov	r9, r4
 800f710:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f714:	2830      	cmp	r0, #48	@ 0x30
 800f716:	d0fa      	beq.n	800f70e <__gethex+0x12>
 800f718:	eba9 0303 	sub.w	r3, r9, r3
 800f71c:	f1a3 0b02 	sub.w	fp, r3, #2
 800f720:	f7ff ffd6 	bl	800f6d0 <__hexdig_fun>
 800f724:	4605      	mov	r5, r0
 800f726:	2800      	cmp	r0, #0
 800f728:	d168      	bne.n	800f7fc <__gethex+0x100>
 800f72a:	49a0      	ldr	r1, [pc, #640]	@ (800f9ac <__gethex+0x2b0>)
 800f72c:	2201      	movs	r2, #1
 800f72e:	4648      	mov	r0, r9
 800f730:	f7ff f81f 	bl	800e772 <strncmp>
 800f734:	4607      	mov	r7, r0
 800f736:	2800      	cmp	r0, #0
 800f738:	d167      	bne.n	800f80a <__gethex+0x10e>
 800f73a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f73e:	4626      	mov	r6, r4
 800f740:	f7ff ffc6 	bl	800f6d0 <__hexdig_fun>
 800f744:	2800      	cmp	r0, #0
 800f746:	d062      	beq.n	800f80e <__gethex+0x112>
 800f748:	4623      	mov	r3, r4
 800f74a:	7818      	ldrb	r0, [r3, #0]
 800f74c:	2830      	cmp	r0, #48	@ 0x30
 800f74e:	4699      	mov	r9, r3
 800f750:	f103 0301 	add.w	r3, r3, #1
 800f754:	d0f9      	beq.n	800f74a <__gethex+0x4e>
 800f756:	f7ff ffbb 	bl	800f6d0 <__hexdig_fun>
 800f75a:	fab0 f580 	clz	r5, r0
 800f75e:	096d      	lsrs	r5, r5, #5
 800f760:	f04f 0b01 	mov.w	fp, #1
 800f764:	464a      	mov	r2, r9
 800f766:	4616      	mov	r6, r2
 800f768:	3201      	adds	r2, #1
 800f76a:	7830      	ldrb	r0, [r6, #0]
 800f76c:	f7ff ffb0 	bl	800f6d0 <__hexdig_fun>
 800f770:	2800      	cmp	r0, #0
 800f772:	d1f8      	bne.n	800f766 <__gethex+0x6a>
 800f774:	498d      	ldr	r1, [pc, #564]	@ (800f9ac <__gethex+0x2b0>)
 800f776:	2201      	movs	r2, #1
 800f778:	4630      	mov	r0, r6
 800f77a:	f7fe fffa 	bl	800e772 <strncmp>
 800f77e:	2800      	cmp	r0, #0
 800f780:	d13f      	bne.n	800f802 <__gethex+0x106>
 800f782:	b944      	cbnz	r4, 800f796 <__gethex+0x9a>
 800f784:	1c74      	adds	r4, r6, #1
 800f786:	4622      	mov	r2, r4
 800f788:	4616      	mov	r6, r2
 800f78a:	3201      	adds	r2, #1
 800f78c:	7830      	ldrb	r0, [r6, #0]
 800f78e:	f7ff ff9f 	bl	800f6d0 <__hexdig_fun>
 800f792:	2800      	cmp	r0, #0
 800f794:	d1f8      	bne.n	800f788 <__gethex+0x8c>
 800f796:	1ba4      	subs	r4, r4, r6
 800f798:	00a7      	lsls	r7, r4, #2
 800f79a:	7833      	ldrb	r3, [r6, #0]
 800f79c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f7a0:	2b50      	cmp	r3, #80	@ 0x50
 800f7a2:	d13e      	bne.n	800f822 <__gethex+0x126>
 800f7a4:	7873      	ldrb	r3, [r6, #1]
 800f7a6:	2b2b      	cmp	r3, #43	@ 0x2b
 800f7a8:	d033      	beq.n	800f812 <__gethex+0x116>
 800f7aa:	2b2d      	cmp	r3, #45	@ 0x2d
 800f7ac:	d034      	beq.n	800f818 <__gethex+0x11c>
 800f7ae:	1c71      	adds	r1, r6, #1
 800f7b0:	2400      	movs	r4, #0
 800f7b2:	7808      	ldrb	r0, [r1, #0]
 800f7b4:	f7ff ff8c 	bl	800f6d0 <__hexdig_fun>
 800f7b8:	1e43      	subs	r3, r0, #1
 800f7ba:	b2db      	uxtb	r3, r3
 800f7bc:	2b18      	cmp	r3, #24
 800f7be:	d830      	bhi.n	800f822 <__gethex+0x126>
 800f7c0:	f1a0 0210 	sub.w	r2, r0, #16
 800f7c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f7c8:	f7ff ff82 	bl	800f6d0 <__hexdig_fun>
 800f7cc:	f100 3cff 	add.w	ip, r0, #4294967295
 800f7d0:	fa5f fc8c 	uxtb.w	ip, ip
 800f7d4:	f1bc 0f18 	cmp.w	ip, #24
 800f7d8:	f04f 030a 	mov.w	r3, #10
 800f7dc:	d91e      	bls.n	800f81c <__gethex+0x120>
 800f7de:	b104      	cbz	r4, 800f7e2 <__gethex+0xe6>
 800f7e0:	4252      	negs	r2, r2
 800f7e2:	4417      	add	r7, r2
 800f7e4:	f8ca 1000 	str.w	r1, [sl]
 800f7e8:	b1ed      	cbz	r5, 800f826 <__gethex+0x12a>
 800f7ea:	f1bb 0f00 	cmp.w	fp, #0
 800f7ee:	bf0c      	ite	eq
 800f7f0:	2506      	moveq	r5, #6
 800f7f2:	2500      	movne	r5, #0
 800f7f4:	4628      	mov	r0, r5
 800f7f6:	b005      	add	sp, #20
 800f7f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7fc:	2500      	movs	r5, #0
 800f7fe:	462c      	mov	r4, r5
 800f800:	e7b0      	b.n	800f764 <__gethex+0x68>
 800f802:	2c00      	cmp	r4, #0
 800f804:	d1c7      	bne.n	800f796 <__gethex+0x9a>
 800f806:	4627      	mov	r7, r4
 800f808:	e7c7      	b.n	800f79a <__gethex+0x9e>
 800f80a:	464e      	mov	r6, r9
 800f80c:	462f      	mov	r7, r5
 800f80e:	2501      	movs	r5, #1
 800f810:	e7c3      	b.n	800f79a <__gethex+0x9e>
 800f812:	2400      	movs	r4, #0
 800f814:	1cb1      	adds	r1, r6, #2
 800f816:	e7cc      	b.n	800f7b2 <__gethex+0xb6>
 800f818:	2401      	movs	r4, #1
 800f81a:	e7fb      	b.n	800f814 <__gethex+0x118>
 800f81c:	fb03 0002 	mla	r0, r3, r2, r0
 800f820:	e7ce      	b.n	800f7c0 <__gethex+0xc4>
 800f822:	4631      	mov	r1, r6
 800f824:	e7de      	b.n	800f7e4 <__gethex+0xe8>
 800f826:	eba6 0309 	sub.w	r3, r6, r9
 800f82a:	3b01      	subs	r3, #1
 800f82c:	4629      	mov	r1, r5
 800f82e:	2b07      	cmp	r3, #7
 800f830:	dc0a      	bgt.n	800f848 <__gethex+0x14c>
 800f832:	9801      	ldr	r0, [sp, #4]
 800f834:	f000 fafc 	bl	800fe30 <_Balloc>
 800f838:	4604      	mov	r4, r0
 800f83a:	b940      	cbnz	r0, 800f84e <__gethex+0x152>
 800f83c:	4b5c      	ldr	r3, [pc, #368]	@ (800f9b0 <__gethex+0x2b4>)
 800f83e:	4602      	mov	r2, r0
 800f840:	21e4      	movs	r1, #228	@ 0xe4
 800f842:	485c      	ldr	r0, [pc, #368]	@ (800f9b4 <__gethex+0x2b8>)
 800f844:	f7ff f83e 	bl	800e8c4 <__assert_func>
 800f848:	3101      	adds	r1, #1
 800f84a:	105b      	asrs	r3, r3, #1
 800f84c:	e7ef      	b.n	800f82e <__gethex+0x132>
 800f84e:	f100 0a14 	add.w	sl, r0, #20
 800f852:	2300      	movs	r3, #0
 800f854:	4655      	mov	r5, sl
 800f856:	469b      	mov	fp, r3
 800f858:	45b1      	cmp	r9, r6
 800f85a:	d337      	bcc.n	800f8cc <__gethex+0x1d0>
 800f85c:	f845 bb04 	str.w	fp, [r5], #4
 800f860:	eba5 050a 	sub.w	r5, r5, sl
 800f864:	10ad      	asrs	r5, r5, #2
 800f866:	6125      	str	r5, [r4, #16]
 800f868:	4658      	mov	r0, fp
 800f86a:	f000 fbd3 	bl	8010014 <__hi0bits>
 800f86e:	016d      	lsls	r5, r5, #5
 800f870:	f8d8 6000 	ldr.w	r6, [r8]
 800f874:	1a2d      	subs	r5, r5, r0
 800f876:	42b5      	cmp	r5, r6
 800f878:	dd54      	ble.n	800f924 <__gethex+0x228>
 800f87a:	1bad      	subs	r5, r5, r6
 800f87c:	4629      	mov	r1, r5
 800f87e:	4620      	mov	r0, r4
 800f880:	f000 ff67 	bl	8010752 <__any_on>
 800f884:	4681      	mov	r9, r0
 800f886:	b178      	cbz	r0, 800f8a8 <__gethex+0x1ac>
 800f888:	1e6b      	subs	r3, r5, #1
 800f88a:	1159      	asrs	r1, r3, #5
 800f88c:	f003 021f 	and.w	r2, r3, #31
 800f890:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f894:	f04f 0901 	mov.w	r9, #1
 800f898:	fa09 f202 	lsl.w	r2, r9, r2
 800f89c:	420a      	tst	r2, r1
 800f89e:	d003      	beq.n	800f8a8 <__gethex+0x1ac>
 800f8a0:	454b      	cmp	r3, r9
 800f8a2:	dc36      	bgt.n	800f912 <__gethex+0x216>
 800f8a4:	f04f 0902 	mov.w	r9, #2
 800f8a8:	4629      	mov	r1, r5
 800f8aa:	4620      	mov	r0, r4
 800f8ac:	f7ff febe 	bl	800f62c <rshift>
 800f8b0:	442f      	add	r7, r5
 800f8b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f8b6:	42bb      	cmp	r3, r7
 800f8b8:	da42      	bge.n	800f940 <__gethex+0x244>
 800f8ba:	9801      	ldr	r0, [sp, #4]
 800f8bc:	4621      	mov	r1, r4
 800f8be:	f000 faf7 	bl	800feb0 <_Bfree>
 800f8c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	6013      	str	r3, [r2, #0]
 800f8c8:	25a3      	movs	r5, #163	@ 0xa3
 800f8ca:	e793      	b.n	800f7f4 <__gethex+0xf8>
 800f8cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f8d0:	2a2e      	cmp	r2, #46	@ 0x2e
 800f8d2:	d012      	beq.n	800f8fa <__gethex+0x1fe>
 800f8d4:	2b20      	cmp	r3, #32
 800f8d6:	d104      	bne.n	800f8e2 <__gethex+0x1e6>
 800f8d8:	f845 bb04 	str.w	fp, [r5], #4
 800f8dc:	f04f 0b00 	mov.w	fp, #0
 800f8e0:	465b      	mov	r3, fp
 800f8e2:	7830      	ldrb	r0, [r6, #0]
 800f8e4:	9303      	str	r3, [sp, #12]
 800f8e6:	f7ff fef3 	bl	800f6d0 <__hexdig_fun>
 800f8ea:	9b03      	ldr	r3, [sp, #12]
 800f8ec:	f000 000f 	and.w	r0, r0, #15
 800f8f0:	4098      	lsls	r0, r3
 800f8f2:	ea4b 0b00 	orr.w	fp, fp, r0
 800f8f6:	3304      	adds	r3, #4
 800f8f8:	e7ae      	b.n	800f858 <__gethex+0x15c>
 800f8fa:	45b1      	cmp	r9, r6
 800f8fc:	d8ea      	bhi.n	800f8d4 <__gethex+0x1d8>
 800f8fe:	492b      	ldr	r1, [pc, #172]	@ (800f9ac <__gethex+0x2b0>)
 800f900:	9303      	str	r3, [sp, #12]
 800f902:	2201      	movs	r2, #1
 800f904:	4630      	mov	r0, r6
 800f906:	f7fe ff34 	bl	800e772 <strncmp>
 800f90a:	9b03      	ldr	r3, [sp, #12]
 800f90c:	2800      	cmp	r0, #0
 800f90e:	d1e1      	bne.n	800f8d4 <__gethex+0x1d8>
 800f910:	e7a2      	b.n	800f858 <__gethex+0x15c>
 800f912:	1ea9      	subs	r1, r5, #2
 800f914:	4620      	mov	r0, r4
 800f916:	f000 ff1c 	bl	8010752 <__any_on>
 800f91a:	2800      	cmp	r0, #0
 800f91c:	d0c2      	beq.n	800f8a4 <__gethex+0x1a8>
 800f91e:	f04f 0903 	mov.w	r9, #3
 800f922:	e7c1      	b.n	800f8a8 <__gethex+0x1ac>
 800f924:	da09      	bge.n	800f93a <__gethex+0x23e>
 800f926:	1b75      	subs	r5, r6, r5
 800f928:	4621      	mov	r1, r4
 800f92a:	9801      	ldr	r0, [sp, #4]
 800f92c:	462a      	mov	r2, r5
 800f92e:	f000 fcd7 	bl	80102e0 <__lshift>
 800f932:	1b7f      	subs	r7, r7, r5
 800f934:	4604      	mov	r4, r0
 800f936:	f100 0a14 	add.w	sl, r0, #20
 800f93a:	f04f 0900 	mov.w	r9, #0
 800f93e:	e7b8      	b.n	800f8b2 <__gethex+0x1b6>
 800f940:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f944:	42bd      	cmp	r5, r7
 800f946:	dd6f      	ble.n	800fa28 <__gethex+0x32c>
 800f948:	1bed      	subs	r5, r5, r7
 800f94a:	42ae      	cmp	r6, r5
 800f94c:	dc34      	bgt.n	800f9b8 <__gethex+0x2bc>
 800f94e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f952:	2b02      	cmp	r3, #2
 800f954:	d022      	beq.n	800f99c <__gethex+0x2a0>
 800f956:	2b03      	cmp	r3, #3
 800f958:	d024      	beq.n	800f9a4 <__gethex+0x2a8>
 800f95a:	2b01      	cmp	r3, #1
 800f95c:	d115      	bne.n	800f98a <__gethex+0x28e>
 800f95e:	42ae      	cmp	r6, r5
 800f960:	d113      	bne.n	800f98a <__gethex+0x28e>
 800f962:	2e01      	cmp	r6, #1
 800f964:	d10b      	bne.n	800f97e <__gethex+0x282>
 800f966:	9a02      	ldr	r2, [sp, #8]
 800f968:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f96c:	6013      	str	r3, [r2, #0]
 800f96e:	2301      	movs	r3, #1
 800f970:	6123      	str	r3, [r4, #16]
 800f972:	f8ca 3000 	str.w	r3, [sl]
 800f976:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f978:	2562      	movs	r5, #98	@ 0x62
 800f97a:	601c      	str	r4, [r3, #0]
 800f97c:	e73a      	b.n	800f7f4 <__gethex+0xf8>
 800f97e:	1e71      	subs	r1, r6, #1
 800f980:	4620      	mov	r0, r4
 800f982:	f000 fee6 	bl	8010752 <__any_on>
 800f986:	2800      	cmp	r0, #0
 800f988:	d1ed      	bne.n	800f966 <__gethex+0x26a>
 800f98a:	9801      	ldr	r0, [sp, #4]
 800f98c:	4621      	mov	r1, r4
 800f98e:	f000 fa8f 	bl	800feb0 <_Bfree>
 800f992:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f994:	2300      	movs	r3, #0
 800f996:	6013      	str	r3, [r2, #0]
 800f998:	2550      	movs	r5, #80	@ 0x50
 800f99a:	e72b      	b.n	800f7f4 <__gethex+0xf8>
 800f99c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d1f3      	bne.n	800f98a <__gethex+0x28e>
 800f9a2:	e7e0      	b.n	800f966 <__gethex+0x26a>
 800f9a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d1dd      	bne.n	800f966 <__gethex+0x26a>
 800f9aa:	e7ee      	b.n	800f98a <__gethex+0x28e>
 800f9ac:	08011a0c 	.word	0x08011a0c
 800f9b0:	08011c5a 	.word	0x08011c5a
 800f9b4:	08011c6b 	.word	0x08011c6b
 800f9b8:	1e6f      	subs	r7, r5, #1
 800f9ba:	f1b9 0f00 	cmp.w	r9, #0
 800f9be:	d130      	bne.n	800fa22 <__gethex+0x326>
 800f9c0:	b127      	cbz	r7, 800f9cc <__gethex+0x2d0>
 800f9c2:	4639      	mov	r1, r7
 800f9c4:	4620      	mov	r0, r4
 800f9c6:	f000 fec4 	bl	8010752 <__any_on>
 800f9ca:	4681      	mov	r9, r0
 800f9cc:	117a      	asrs	r2, r7, #5
 800f9ce:	2301      	movs	r3, #1
 800f9d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f9d4:	f007 071f 	and.w	r7, r7, #31
 800f9d8:	40bb      	lsls	r3, r7
 800f9da:	4213      	tst	r3, r2
 800f9dc:	4629      	mov	r1, r5
 800f9de:	4620      	mov	r0, r4
 800f9e0:	bf18      	it	ne
 800f9e2:	f049 0902 	orrne.w	r9, r9, #2
 800f9e6:	f7ff fe21 	bl	800f62c <rshift>
 800f9ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f9ee:	1b76      	subs	r6, r6, r5
 800f9f0:	2502      	movs	r5, #2
 800f9f2:	f1b9 0f00 	cmp.w	r9, #0
 800f9f6:	d047      	beq.n	800fa88 <__gethex+0x38c>
 800f9f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f9fc:	2b02      	cmp	r3, #2
 800f9fe:	d015      	beq.n	800fa2c <__gethex+0x330>
 800fa00:	2b03      	cmp	r3, #3
 800fa02:	d017      	beq.n	800fa34 <__gethex+0x338>
 800fa04:	2b01      	cmp	r3, #1
 800fa06:	d109      	bne.n	800fa1c <__gethex+0x320>
 800fa08:	f019 0f02 	tst.w	r9, #2
 800fa0c:	d006      	beq.n	800fa1c <__gethex+0x320>
 800fa0e:	f8da 3000 	ldr.w	r3, [sl]
 800fa12:	ea49 0903 	orr.w	r9, r9, r3
 800fa16:	f019 0f01 	tst.w	r9, #1
 800fa1a:	d10e      	bne.n	800fa3a <__gethex+0x33e>
 800fa1c:	f045 0510 	orr.w	r5, r5, #16
 800fa20:	e032      	b.n	800fa88 <__gethex+0x38c>
 800fa22:	f04f 0901 	mov.w	r9, #1
 800fa26:	e7d1      	b.n	800f9cc <__gethex+0x2d0>
 800fa28:	2501      	movs	r5, #1
 800fa2a:	e7e2      	b.n	800f9f2 <__gethex+0x2f6>
 800fa2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa2e:	f1c3 0301 	rsb	r3, r3, #1
 800fa32:	930f      	str	r3, [sp, #60]	@ 0x3c
 800fa34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d0f0      	beq.n	800fa1c <__gethex+0x320>
 800fa3a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fa3e:	f104 0314 	add.w	r3, r4, #20
 800fa42:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fa46:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fa4a:	f04f 0c00 	mov.w	ip, #0
 800fa4e:	4618      	mov	r0, r3
 800fa50:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa54:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fa58:	d01b      	beq.n	800fa92 <__gethex+0x396>
 800fa5a:	3201      	adds	r2, #1
 800fa5c:	6002      	str	r2, [r0, #0]
 800fa5e:	2d02      	cmp	r5, #2
 800fa60:	f104 0314 	add.w	r3, r4, #20
 800fa64:	d13c      	bne.n	800fae0 <__gethex+0x3e4>
 800fa66:	f8d8 2000 	ldr.w	r2, [r8]
 800fa6a:	3a01      	subs	r2, #1
 800fa6c:	42b2      	cmp	r2, r6
 800fa6e:	d109      	bne.n	800fa84 <__gethex+0x388>
 800fa70:	1171      	asrs	r1, r6, #5
 800fa72:	2201      	movs	r2, #1
 800fa74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fa78:	f006 061f 	and.w	r6, r6, #31
 800fa7c:	fa02 f606 	lsl.w	r6, r2, r6
 800fa80:	421e      	tst	r6, r3
 800fa82:	d13a      	bne.n	800fafa <__gethex+0x3fe>
 800fa84:	f045 0520 	orr.w	r5, r5, #32
 800fa88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa8a:	601c      	str	r4, [r3, #0]
 800fa8c:	9b02      	ldr	r3, [sp, #8]
 800fa8e:	601f      	str	r7, [r3, #0]
 800fa90:	e6b0      	b.n	800f7f4 <__gethex+0xf8>
 800fa92:	4299      	cmp	r1, r3
 800fa94:	f843 cc04 	str.w	ip, [r3, #-4]
 800fa98:	d8d9      	bhi.n	800fa4e <__gethex+0x352>
 800fa9a:	68a3      	ldr	r3, [r4, #8]
 800fa9c:	459b      	cmp	fp, r3
 800fa9e:	db17      	blt.n	800fad0 <__gethex+0x3d4>
 800faa0:	6861      	ldr	r1, [r4, #4]
 800faa2:	9801      	ldr	r0, [sp, #4]
 800faa4:	3101      	adds	r1, #1
 800faa6:	f000 f9c3 	bl	800fe30 <_Balloc>
 800faaa:	4681      	mov	r9, r0
 800faac:	b918      	cbnz	r0, 800fab6 <__gethex+0x3ba>
 800faae:	4b1a      	ldr	r3, [pc, #104]	@ (800fb18 <__gethex+0x41c>)
 800fab0:	4602      	mov	r2, r0
 800fab2:	2184      	movs	r1, #132	@ 0x84
 800fab4:	e6c5      	b.n	800f842 <__gethex+0x146>
 800fab6:	6922      	ldr	r2, [r4, #16]
 800fab8:	3202      	adds	r2, #2
 800faba:	f104 010c 	add.w	r1, r4, #12
 800fabe:	0092      	lsls	r2, r2, #2
 800fac0:	300c      	adds	r0, #12
 800fac2:	f7fe fee0 	bl	800e886 <memcpy>
 800fac6:	4621      	mov	r1, r4
 800fac8:	9801      	ldr	r0, [sp, #4]
 800faca:	f000 f9f1 	bl	800feb0 <_Bfree>
 800face:	464c      	mov	r4, r9
 800fad0:	6923      	ldr	r3, [r4, #16]
 800fad2:	1c5a      	adds	r2, r3, #1
 800fad4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fad8:	6122      	str	r2, [r4, #16]
 800fada:	2201      	movs	r2, #1
 800fadc:	615a      	str	r2, [r3, #20]
 800fade:	e7be      	b.n	800fa5e <__gethex+0x362>
 800fae0:	6922      	ldr	r2, [r4, #16]
 800fae2:	455a      	cmp	r2, fp
 800fae4:	dd0b      	ble.n	800fafe <__gethex+0x402>
 800fae6:	2101      	movs	r1, #1
 800fae8:	4620      	mov	r0, r4
 800faea:	f7ff fd9f 	bl	800f62c <rshift>
 800faee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800faf2:	3701      	adds	r7, #1
 800faf4:	42bb      	cmp	r3, r7
 800faf6:	f6ff aee0 	blt.w	800f8ba <__gethex+0x1be>
 800fafa:	2501      	movs	r5, #1
 800fafc:	e7c2      	b.n	800fa84 <__gethex+0x388>
 800fafe:	f016 061f 	ands.w	r6, r6, #31
 800fb02:	d0fa      	beq.n	800fafa <__gethex+0x3fe>
 800fb04:	4453      	add	r3, sl
 800fb06:	f1c6 0620 	rsb	r6, r6, #32
 800fb0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fb0e:	f000 fa81 	bl	8010014 <__hi0bits>
 800fb12:	42b0      	cmp	r0, r6
 800fb14:	dbe7      	blt.n	800fae6 <__gethex+0x3ea>
 800fb16:	e7f0      	b.n	800fafa <__gethex+0x3fe>
 800fb18:	08011c5a 	.word	0x08011c5a

0800fb1c <L_shift>:
 800fb1c:	f1c2 0208 	rsb	r2, r2, #8
 800fb20:	0092      	lsls	r2, r2, #2
 800fb22:	b570      	push	{r4, r5, r6, lr}
 800fb24:	f1c2 0620 	rsb	r6, r2, #32
 800fb28:	6843      	ldr	r3, [r0, #4]
 800fb2a:	6804      	ldr	r4, [r0, #0]
 800fb2c:	fa03 f506 	lsl.w	r5, r3, r6
 800fb30:	432c      	orrs	r4, r5
 800fb32:	40d3      	lsrs	r3, r2
 800fb34:	6004      	str	r4, [r0, #0]
 800fb36:	f840 3f04 	str.w	r3, [r0, #4]!
 800fb3a:	4288      	cmp	r0, r1
 800fb3c:	d3f4      	bcc.n	800fb28 <L_shift+0xc>
 800fb3e:	bd70      	pop	{r4, r5, r6, pc}

0800fb40 <__match>:
 800fb40:	b530      	push	{r4, r5, lr}
 800fb42:	6803      	ldr	r3, [r0, #0]
 800fb44:	3301      	adds	r3, #1
 800fb46:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb4a:	b914      	cbnz	r4, 800fb52 <__match+0x12>
 800fb4c:	6003      	str	r3, [r0, #0]
 800fb4e:	2001      	movs	r0, #1
 800fb50:	bd30      	pop	{r4, r5, pc}
 800fb52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fb56:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800fb5a:	2d19      	cmp	r5, #25
 800fb5c:	bf98      	it	ls
 800fb5e:	3220      	addls	r2, #32
 800fb60:	42a2      	cmp	r2, r4
 800fb62:	d0f0      	beq.n	800fb46 <__match+0x6>
 800fb64:	2000      	movs	r0, #0
 800fb66:	e7f3      	b.n	800fb50 <__match+0x10>

0800fb68 <__hexnan>:
 800fb68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb6c:	680b      	ldr	r3, [r1, #0]
 800fb6e:	6801      	ldr	r1, [r0, #0]
 800fb70:	115e      	asrs	r6, r3, #5
 800fb72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fb76:	f013 031f 	ands.w	r3, r3, #31
 800fb7a:	b087      	sub	sp, #28
 800fb7c:	bf18      	it	ne
 800fb7e:	3604      	addne	r6, #4
 800fb80:	2500      	movs	r5, #0
 800fb82:	1f37      	subs	r7, r6, #4
 800fb84:	4682      	mov	sl, r0
 800fb86:	4690      	mov	r8, r2
 800fb88:	9301      	str	r3, [sp, #4]
 800fb8a:	f846 5c04 	str.w	r5, [r6, #-4]
 800fb8e:	46b9      	mov	r9, r7
 800fb90:	463c      	mov	r4, r7
 800fb92:	9502      	str	r5, [sp, #8]
 800fb94:	46ab      	mov	fp, r5
 800fb96:	784a      	ldrb	r2, [r1, #1]
 800fb98:	1c4b      	adds	r3, r1, #1
 800fb9a:	9303      	str	r3, [sp, #12]
 800fb9c:	b342      	cbz	r2, 800fbf0 <__hexnan+0x88>
 800fb9e:	4610      	mov	r0, r2
 800fba0:	9105      	str	r1, [sp, #20]
 800fba2:	9204      	str	r2, [sp, #16]
 800fba4:	f7ff fd94 	bl	800f6d0 <__hexdig_fun>
 800fba8:	2800      	cmp	r0, #0
 800fbaa:	d151      	bne.n	800fc50 <__hexnan+0xe8>
 800fbac:	9a04      	ldr	r2, [sp, #16]
 800fbae:	9905      	ldr	r1, [sp, #20]
 800fbb0:	2a20      	cmp	r2, #32
 800fbb2:	d818      	bhi.n	800fbe6 <__hexnan+0x7e>
 800fbb4:	9b02      	ldr	r3, [sp, #8]
 800fbb6:	459b      	cmp	fp, r3
 800fbb8:	dd13      	ble.n	800fbe2 <__hexnan+0x7a>
 800fbba:	454c      	cmp	r4, r9
 800fbbc:	d206      	bcs.n	800fbcc <__hexnan+0x64>
 800fbbe:	2d07      	cmp	r5, #7
 800fbc0:	dc04      	bgt.n	800fbcc <__hexnan+0x64>
 800fbc2:	462a      	mov	r2, r5
 800fbc4:	4649      	mov	r1, r9
 800fbc6:	4620      	mov	r0, r4
 800fbc8:	f7ff ffa8 	bl	800fb1c <L_shift>
 800fbcc:	4544      	cmp	r4, r8
 800fbce:	d952      	bls.n	800fc76 <__hexnan+0x10e>
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	f1a4 0904 	sub.w	r9, r4, #4
 800fbd6:	f844 3c04 	str.w	r3, [r4, #-4]
 800fbda:	f8cd b008 	str.w	fp, [sp, #8]
 800fbde:	464c      	mov	r4, r9
 800fbe0:	461d      	mov	r5, r3
 800fbe2:	9903      	ldr	r1, [sp, #12]
 800fbe4:	e7d7      	b.n	800fb96 <__hexnan+0x2e>
 800fbe6:	2a29      	cmp	r2, #41	@ 0x29
 800fbe8:	d157      	bne.n	800fc9a <__hexnan+0x132>
 800fbea:	3102      	adds	r1, #2
 800fbec:	f8ca 1000 	str.w	r1, [sl]
 800fbf0:	f1bb 0f00 	cmp.w	fp, #0
 800fbf4:	d051      	beq.n	800fc9a <__hexnan+0x132>
 800fbf6:	454c      	cmp	r4, r9
 800fbf8:	d206      	bcs.n	800fc08 <__hexnan+0xa0>
 800fbfa:	2d07      	cmp	r5, #7
 800fbfc:	dc04      	bgt.n	800fc08 <__hexnan+0xa0>
 800fbfe:	462a      	mov	r2, r5
 800fc00:	4649      	mov	r1, r9
 800fc02:	4620      	mov	r0, r4
 800fc04:	f7ff ff8a 	bl	800fb1c <L_shift>
 800fc08:	4544      	cmp	r4, r8
 800fc0a:	d936      	bls.n	800fc7a <__hexnan+0x112>
 800fc0c:	f1a8 0204 	sub.w	r2, r8, #4
 800fc10:	4623      	mov	r3, r4
 800fc12:	f853 1b04 	ldr.w	r1, [r3], #4
 800fc16:	f842 1f04 	str.w	r1, [r2, #4]!
 800fc1a:	429f      	cmp	r7, r3
 800fc1c:	d2f9      	bcs.n	800fc12 <__hexnan+0xaa>
 800fc1e:	1b3b      	subs	r3, r7, r4
 800fc20:	f023 0303 	bic.w	r3, r3, #3
 800fc24:	3304      	adds	r3, #4
 800fc26:	3401      	adds	r4, #1
 800fc28:	3e03      	subs	r6, #3
 800fc2a:	42b4      	cmp	r4, r6
 800fc2c:	bf88      	it	hi
 800fc2e:	2304      	movhi	r3, #4
 800fc30:	4443      	add	r3, r8
 800fc32:	2200      	movs	r2, #0
 800fc34:	f843 2b04 	str.w	r2, [r3], #4
 800fc38:	429f      	cmp	r7, r3
 800fc3a:	d2fb      	bcs.n	800fc34 <__hexnan+0xcc>
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	b91b      	cbnz	r3, 800fc48 <__hexnan+0xe0>
 800fc40:	4547      	cmp	r7, r8
 800fc42:	d128      	bne.n	800fc96 <__hexnan+0x12e>
 800fc44:	2301      	movs	r3, #1
 800fc46:	603b      	str	r3, [r7, #0]
 800fc48:	2005      	movs	r0, #5
 800fc4a:	b007      	add	sp, #28
 800fc4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc50:	3501      	adds	r5, #1
 800fc52:	2d08      	cmp	r5, #8
 800fc54:	f10b 0b01 	add.w	fp, fp, #1
 800fc58:	dd06      	ble.n	800fc68 <__hexnan+0x100>
 800fc5a:	4544      	cmp	r4, r8
 800fc5c:	d9c1      	bls.n	800fbe2 <__hexnan+0x7a>
 800fc5e:	2300      	movs	r3, #0
 800fc60:	f844 3c04 	str.w	r3, [r4, #-4]
 800fc64:	2501      	movs	r5, #1
 800fc66:	3c04      	subs	r4, #4
 800fc68:	6822      	ldr	r2, [r4, #0]
 800fc6a:	f000 000f 	and.w	r0, r0, #15
 800fc6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800fc72:	6020      	str	r0, [r4, #0]
 800fc74:	e7b5      	b.n	800fbe2 <__hexnan+0x7a>
 800fc76:	2508      	movs	r5, #8
 800fc78:	e7b3      	b.n	800fbe2 <__hexnan+0x7a>
 800fc7a:	9b01      	ldr	r3, [sp, #4]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d0dd      	beq.n	800fc3c <__hexnan+0xd4>
 800fc80:	f1c3 0320 	rsb	r3, r3, #32
 800fc84:	f04f 32ff 	mov.w	r2, #4294967295
 800fc88:	40da      	lsrs	r2, r3
 800fc8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800fc8e:	4013      	ands	r3, r2
 800fc90:	f846 3c04 	str.w	r3, [r6, #-4]
 800fc94:	e7d2      	b.n	800fc3c <__hexnan+0xd4>
 800fc96:	3f04      	subs	r7, #4
 800fc98:	e7d0      	b.n	800fc3c <__hexnan+0xd4>
 800fc9a:	2004      	movs	r0, #4
 800fc9c:	e7d5      	b.n	800fc4a <__hexnan+0xe2>
	...

0800fca0 <malloc>:
 800fca0:	4b02      	ldr	r3, [pc, #8]	@ (800fcac <malloc+0xc>)
 800fca2:	4601      	mov	r1, r0
 800fca4:	6818      	ldr	r0, [r3, #0]
 800fca6:	f000 b825 	b.w	800fcf4 <_malloc_r>
 800fcaa:	bf00      	nop
 800fcac:	200001a0 	.word	0x200001a0

0800fcb0 <sbrk_aligned>:
 800fcb0:	b570      	push	{r4, r5, r6, lr}
 800fcb2:	4e0f      	ldr	r6, [pc, #60]	@ (800fcf0 <sbrk_aligned+0x40>)
 800fcb4:	460c      	mov	r4, r1
 800fcb6:	6831      	ldr	r1, [r6, #0]
 800fcb8:	4605      	mov	r5, r0
 800fcba:	b911      	cbnz	r1, 800fcc2 <sbrk_aligned+0x12>
 800fcbc:	f001 f808 	bl	8010cd0 <_sbrk_r>
 800fcc0:	6030      	str	r0, [r6, #0]
 800fcc2:	4621      	mov	r1, r4
 800fcc4:	4628      	mov	r0, r5
 800fcc6:	f001 f803 	bl	8010cd0 <_sbrk_r>
 800fcca:	1c43      	adds	r3, r0, #1
 800fccc:	d103      	bne.n	800fcd6 <sbrk_aligned+0x26>
 800fcce:	f04f 34ff 	mov.w	r4, #4294967295
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	bd70      	pop	{r4, r5, r6, pc}
 800fcd6:	1cc4      	adds	r4, r0, #3
 800fcd8:	f024 0403 	bic.w	r4, r4, #3
 800fcdc:	42a0      	cmp	r0, r4
 800fcde:	d0f8      	beq.n	800fcd2 <sbrk_aligned+0x22>
 800fce0:	1a21      	subs	r1, r4, r0
 800fce2:	4628      	mov	r0, r5
 800fce4:	f000 fff4 	bl	8010cd0 <_sbrk_r>
 800fce8:	3001      	adds	r0, #1
 800fcea:	d1f2      	bne.n	800fcd2 <sbrk_aligned+0x22>
 800fcec:	e7ef      	b.n	800fcce <sbrk_aligned+0x1e>
 800fcee:	bf00      	nop
 800fcf0:	20006718 	.word	0x20006718

0800fcf4 <_malloc_r>:
 800fcf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcf8:	1ccd      	adds	r5, r1, #3
 800fcfa:	f025 0503 	bic.w	r5, r5, #3
 800fcfe:	3508      	adds	r5, #8
 800fd00:	2d0c      	cmp	r5, #12
 800fd02:	bf38      	it	cc
 800fd04:	250c      	movcc	r5, #12
 800fd06:	2d00      	cmp	r5, #0
 800fd08:	4606      	mov	r6, r0
 800fd0a:	db01      	blt.n	800fd10 <_malloc_r+0x1c>
 800fd0c:	42a9      	cmp	r1, r5
 800fd0e:	d904      	bls.n	800fd1a <_malloc_r+0x26>
 800fd10:	230c      	movs	r3, #12
 800fd12:	6033      	str	r3, [r6, #0]
 800fd14:	2000      	movs	r0, #0
 800fd16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fdf0 <_malloc_r+0xfc>
 800fd1e:	f000 f87b 	bl	800fe18 <__malloc_lock>
 800fd22:	f8d8 3000 	ldr.w	r3, [r8]
 800fd26:	461c      	mov	r4, r3
 800fd28:	bb44      	cbnz	r4, 800fd7c <_malloc_r+0x88>
 800fd2a:	4629      	mov	r1, r5
 800fd2c:	4630      	mov	r0, r6
 800fd2e:	f7ff ffbf 	bl	800fcb0 <sbrk_aligned>
 800fd32:	1c43      	adds	r3, r0, #1
 800fd34:	4604      	mov	r4, r0
 800fd36:	d158      	bne.n	800fdea <_malloc_r+0xf6>
 800fd38:	f8d8 4000 	ldr.w	r4, [r8]
 800fd3c:	4627      	mov	r7, r4
 800fd3e:	2f00      	cmp	r7, #0
 800fd40:	d143      	bne.n	800fdca <_malloc_r+0xd6>
 800fd42:	2c00      	cmp	r4, #0
 800fd44:	d04b      	beq.n	800fdde <_malloc_r+0xea>
 800fd46:	6823      	ldr	r3, [r4, #0]
 800fd48:	4639      	mov	r1, r7
 800fd4a:	4630      	mov	r0, r6
 800fd4c:	eb04 0903 	add.w	r9, r4, r3
 800fd50:	f000 ffbe 	bl	8010cd0 <_sbrk_r>
 800fd54:	4581      	cmp	r9, r0
 800fd56:	d142      	bne.n	800fdde <_malloc_r+0xea>
 800fd58:	6821      	ldr	r1, [r4, #0]
 800fd5a:	1a6d      	subs	r5, r5, r1
 800fd5c:	4629      	mov	r1, r5
 800fd5e:	4630      	mov	r0, r6
 800fd60:	f7ff ffa6 	bl	800fcb0 <sbrk_aligned>
 800fd64:	3001      	adds	r0, #1
 800fd66:	d03a      	beq.n	800fdde <_malloc_r+0xea>
 800fd68:	6823      	ldr	r3, [r4, #0]
 800fd6a:	442b      	add	r3, r5
 800fd6c:	6023      	str	r3, [r4, #0]
 800fd6e:	f8d8 3000 	ldr.w	r3, [r8]
 800fd72:	685a      	ldr	r2, [r3, #4]
 800fd74:	bb62      	cbnz	r2, 800fdd0 <_malloc_r+0xdc>
 800fd76:	f8c8 7000 	str.w	r7, [r8]
 800fd7a:	e00f      	b.n	800fd9c <_malloc_r+0xa8>
 800fd7c:	6822      	ldr	r2, [r4, #0]
 800fd7e:	1b52      	subs	r2, r2, r5
 800fd80:	d420      	bmi.n	800fdc4 <_malloc_r+0xd0>
 800fd82:	2a0b      	cmp	r2, #11
 800fd84:	d917      	bls.n	800fdb6 <_malloc_r+0xc2>
 800fd86:	1961      	adds	r1, r4, r5
 800fd88:	42a3      	cmp	r3, r4
 800fd8a:	6025      	str	r5, [r4, #0]
 800fd8c:	bf18      	it	ne
 800fd8e:	6059      	strne	r1, [r3, #4]
 800fd90:	6863      	ldr	r3, [r4, #4]
 800fd92:	bf08      	it	eq
 800fd94:	f8c8 1000 	streq.w	r1, [r8]
 800fd98:	5162      	str	r2, [r4, r5]
 800fd9a:	604b      	str	r3, [r1, #4]
 800fd9c:	4630      	mov	r0, r6
 800fd9e:	f000 f841 	bl	800fe24 <__malloc_unlock>
 800fda2:	f104 000b 	add.w	r0, r4, #11
 800fda6:	1d23      	adds	r3, r4, #4
 800fda8:	f020 0007 	bic.w	r0, r0, #7
 800fdac:	1ac2      	subs	r2, r0, r3
 800fdae:	bf1c      	itt	ne
 800fdb0:	1a1b      	subne	r3, r3, r0
 800fdb2:	50a3      	strne	r3, [r4, r2]
 800fdb4:	e7af      	b.n	800fd16 <_malloc_r+0x22>
 800fdb6:	6862      	ldr	r2, [r4, #4]
 800fdb8:	42a3      	cmp	r3, r4
 800fdba:	bf0c      	ite	eq
 800fdbc:	f8c8 2000 	streq.w	r2, [r8]
 800fdc0:	605a      	strne	r2, [r3, #4]
 800fdc2:	e7eb      	b.n	800fd9c <_malloc_r+0xa8>
 800fdc4:	4623      	mov	r3, r4
 800fdc6:	6864      	ldr	r4, [r4, #4]
 800fdc8:	e7ae      	b.n	800fd28 <_malloc_r+0x34>
 800fdca:	463c      	mov	r4, r7
 800fdcc:	687f      	ldr	r7, [r7, #4]
 800fdce:	e7b6      	b.n	800fd3e <_malloc_r+0x4a>
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	685b      	ldr	r3, [r3, #4]
 800fdd4:	42a3      	cmp	r3, r4
 800fdd6:	d1fb      	bne.n	800fdd0 <_malloc_r+0xdc>
 800fdd8:	2300      	movs	r3, #0
 800fdda:	6053      	str	r3, [r2, #4]
 800fddc:	e7de      	b.n	800fd9c <_malloc_r+0xa8>
 800fdde:	230c      	movs	r3, #12
 800fde0:	6033      	str	r3, [r6, #0]
 800fde2:	4630      	mov	r0, r6
 800fde4:	f000 f81e 	bl	800fe24 <__malloc_unlock>
 800fde8:	e794      	b.n	800fd14 <_malloc_r+0x20>
 800fdea:	6005      	str	r5, [r0, #0]
 800fdec:	e7d6      	b.n	800fd9c <_malloc_r+0xa8>
 800fdee:	bf00      	nop
 800fdf0:	2000671c 	.word	0x2000671c

0800fdf4 <__ascii_mbtowc>:
 800fdf4:	b082      	sub	sp, #8
 800fdf6:	b901      	cbnz	r1, 800fdfa <__ascii_mbtowc+0x6>
 800fdf8:	a901      	add	r1, sp, #4
 800fdfa:	b142      	cbz	r2, 800fe0e <__ascii_mbtowc+0x1a>
 800fdfc:	b14b      	cbz	r3, 800fe12 <__ascii_mbtowc+0x1e>
 800fdfe:	7813      	ldrb	r3, [r2, #0]
 800fe00:	600b      	str	r3, [r1, #0]
 800fe02:	7812      	ldrb	r2, [r2, #0]
 800fe04:	1e10      	subs	r0, r2, #0
 800fe06:	bf18      	it	ne
 800fe08:	2001      	movne	r0, #1
 800fe0a:	b002      	add	sp, #8
 800fe0c:	4770      	bx	lr
 800fe0e:	4610      	mov	r0, r2
 800fe10:	e7fb      	b.n	800fe0a <__ascii_mbtowc+0x16>
 800fe12:	f06f 0001 	mvn.w	r0, #1
 800fe16:	e7f8      	b.n	800fe0a <__ascii_mbtowc+0x16>

0800fe18 <__malloc_lock>:
 800fe18:	4801      	ldr	r0, [pc, #4]	@ (800fe20 <__malloc_lock+0x8>)
 800fe1a:	f7fe bd32 	b.w	800e882 <__retarget_lock_acquire_recursive>
 800fe1e:	bf00      	nop
 800fe20:	20006714 	.word	0x20006714

0800fe24 <__malloc_unlock>:
 800fe24:	4801      	ldr	r0, [pc, #4]	@ (800fe2c <__malloc_unlock+0x8>)
 800fe26:	f7fe bd2d 	b.w	800e884 <__retarget_lock_release_recursive>
 800fe2a:	bf00      	nop
 800fe2c:	20006714 	.word	0x20006714

0800fe30 <_Balloc>:
 800fe30:	b570      	push	{r4, r5, r6, lr}
 800fe32:	69c6      	ldr	r6, [r0, #28]
 800fe34:	4604      	mov	r4, r0
 800fe36:	460d      	mov	r5, r1
 800fe38:	b976      	cbnz	r6, 800fe58 <_Balloc+0x28>
 800fe3a:	2010      	movs	r0, #16
 800fe3c:	f7ff ff30 	bl	800fca0 <malloc>
 800fe40:	4602      	mov	r2, r0
 800fe42:	61e0      	str	r0, [r4, #28]
 800fe44:	b920      	cbnz	r0, 800fe50 <_Balloc+0x20>
 800fe46:	4b18      	ldr	r3, [pc, #96]	@ (800fea8 <_Balloc+0x78>)
 800fe48:	4818      	ldr	r0, [pc, #96]	@ (800feac <_Balloc+0x7c>)
 800fe4a:	216b      	movs	r1, #107	@ 0x6b
 800fe4c:	f7fe fd3a 	bl	800e8c4 <__assert_func>
 800fe50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fe54:	6006      	str	r6, [r0, #0]
 800fe56:	60c6      	str	r6, [r0, #12]
 800fe58:	69e6      	ldr	r6, [r4, #28]
 800fe5a:	68f3      	ldr	r3, [r6, #12]
 800fe5c:	b183      	cbz	r3, 800fe80 <_Balloc+0x50>
 800fe5e:	69e3      	ldr	r3, [r4, #28]
 800fe60:	68db      	ldr	r3, [r3, #12]
 800fe62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fe66:	b9b8      	cbnz	r0, 800fe98 <_Balloc+0x68>
 800fe68:	2101      	movs	r1, #1
 800fe6a:	fa01 f605 	lsl.w	r6, r1, r5
 800fe6e:	1d72      	adds	r2, r6, #5
 800fe70:	0092      	lsls	r2, r2, #2
 800fe72:	4620      	mov	r0, r4
 800fe74:	f000 ff43 	bl	8010cfe <_calloc_r>
 800fe78:	b160      	cbz	r0, 800fe94 <_Balloc+0x64>
 800fe7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fe7e:	e00e      	b.n	800fe9e <_Balloc+0x6e>
 800fe80:	2221      	movs	r2, #33	@ 0x21
 800fe82:	2104      	movs	r1, #4
 800fe84:	4620      	mov	r0, r4
 800fe86:	f000 ff3a 	bl	8010cfe <_calloc_r>
 800fe8a:	69e3      	ldr	r3, [r4, #28]
 800fe8c:	60f0      	str	r0, [r6, #12]
 800fe8e:	68db      	ldr	r3, [r3, #12]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d1e4      	bne.n	800fe5e <_Balloc+0x2e>
 800fe94:	2000      	movs	r0, #0
 800fe96:	bd70      	pop	{r4, r5, r6, pc}
 800fe98:	6802      	ldr	r2, [r0, #0]
 800fe9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fe9e:	2300      	movs	r3, #0
 800fea0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fea4:	e7f7      	b.n	800fe96 <_Balloc+0x66>
 800fea6:	bf00      	nop
 800fea8:	08011beb 	.word	0x08011beb
 800feac:	08011ccb 	.word	0x08011ccb

0800feb0 <_Bfree>:
 800feb0:	b570      	push	{r4, r5, r6, lr}
 800feb2:	69c6      	ldr	r6, [r0, #28]
 800feb4:	4605      	mov	r5, r0
 800feb6:	460c      	mov	r4, r1
 800feb8:	b976      	cbnz	r6, 800fed8 <_Bfree+0x28>
 800feba:	2010      	movs	r0, #16
 800febc:	f7ff fef0 	bl	800fca0 <malloc>
 800fec0:	4602      	mov	r2, r0
 800fec2:	61e8      	str	r0, [r5, #28]
 800fec4:	b920      	cbnz	r0, 800fed0 <_Bfree+0x20>
 800fec6:	4b09      	ldr	r3, [pc, #36]	@ (800feec <_Bfree+0x3c>)
 800fec8:	4809      	ldr	r0, [pc, #36]	@ (800fef0 <_Bfree+0x40>)
 800feca:	218f      	movs	r1, #143	@ 0x8f
 800fecc:	f7fe fcfa 	bl	800e8c4 <__assert_func>
 800fed0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fed4:	6006      	str	r6, [r0, #0]
 800fed6:	60c6      	str	r6, [r0, #12]
 800fed8:	b13c      	cbz	r4, 800feea <_Bfree+0x3a>
 800feda:	69eb      	ldr	r3, [r5, #28]
 800fedc:	6862      	ldr	r2, [r4, #4]
 800fede:	68db      	ldr	r3, [r3, #12]
 800fee0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fee4:	6021      	str	r1, [r4, #0]
 800fee6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800feea:	bd70      	pop	{r4, r5, r6, pc}
 800feec:	08011beb 	.word	0x08011beb
 800fef0:	08011ccb 	.word	0x08011ccb

0800fef4 <__multadd>:
 800fef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fef8:	690d      	ldr	r5, [r1, #16]
 800fefa:	4607      	mov	r7, r0
 800fefc:	460c      	mov	r4, r1
 800fefe:	461e      	mov	r6, r3
 800ff00:	f101 0c14 	add.w	ip, r1, #20
 800ff04:	2000      	movs	r0, #0
 800ff06:	f8dc 3000 	ldr.w	r3, [ip]
 800ff0a:	b299      	uxth	r1, r3
 800ff0c:	fb02 6101 	mla	r1, r2, r1, r6
 800ff10:	0c1e      	lsrs	r6, r3, #16
 800ff12:	0c0b      	lsrs	r3, r1, #16
 800ff14:	fb02 3306 	mla	r3, r2, r6, r3
 800ff18:	b289      	uxth	r1, r1
 800ff1a:	3001      	adds	r0, #1
 800ff1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ff20:	4285      	cmp	r5, r0
 800ff22:	f84c 1b04 	str.w	r1, [ip], #4
 800ff26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ff2a:	dcec      	bgt.n	800ff06 <__multadd+0x12>
 800ff2c:	b30e      	cbz	r6, 800ff72 <__multadd+0x7e>
 800ff2e:	68a3      	ldr	r3, [r4, #8]
 800ff30:	42ab      	cmp	r3, r5
 800ff32:	dc19      	bgt.n	800ff68 <__multadd+0x74>
 800ff34:	6861      	ldr	r1, [r4, #4]
 800ff36:	4638      	mov	r0, r7
 800ff38:	3101      	adds	r1, #1
 800ff3a:	f7ff ff79 	bl	800fe30 <_Balloc>
 800ff3e:	4680      	mov	r8, r0
 800ff40:	b928      	cbnz	r0, 800ff4e <__multadd+0x5a>
 800ff42:	4602      	mov	r2, r0
 800ff44:	4b0c      	ldr	r3, [pc, #48]	@ (800ff78 <__multadd+0x84>)
 800ff46:	480d      	ldr	r0, [pc, #52]	@ (800ff7c <__multadd+0x88>)
 800ff48:	21ba      	movs	r1, #186	@ 0xba
 800ff4a:	f7fe fcbb 	bl	800e8c4 <__assert_func>
 800ff4e:	6922      	ldr	r2, [r4, #16]
 800ff50:	3202      	adds	r2, #2
 800ff52:	f104 010c 	add.w	r1, r4, #12
 800ff56:	0092      	lsls	r2, r2, #2
 800ff58:	300c      	adds	r0, #12
 800ff5a:	f7fe fc94 	bl	800e886 <memcpy>
 800ff5e:	4621      	mov	r1, r4
 800ff60:	4638      	mov	r0, r7
 800ff62:	f7ff ffa5 	bl	800feb0 <_Bfree>
 800ff66:	4644      	mov	r4, r8
 800ff68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ff6c:	3501      	adds	r5, #1
 800ff6e:	615e      	str	r6, [r3, #20]
 800ff70:	6125      	str	r5, [r4, #16]
 800ff72:	4620      	mov	r0, r4
 800ff74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff78:	08011c5a 	.word	0x08011c5a
 800ff7c:	08011ccb 	.word	0x08011ccb

0800ff80 <__s2b>:
 800ff80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff84:	460c      	mov	r4, r1
 800ff86:	4615      	mov	r5, r2
 800ff88:	461f      	mov	r7, r3
 800ff8a:	2209      	movs	r2, #9
 800ff8c:	3308      	adds	r3, #8
 800ff8e:	4606      	mov	r6, r0
 800ff90:	fb93 f3f2 	sdiv	r3, r3, r2
 800ff94:	2100      	movs	r1, #0
 800ff96:	2201      	movs	r2, #1
 800ff98:	429a      	cmp	r2, r3
 800ff9a:	db09      	blt.n	800ffb0 <__s2b+0x30>
 800ff9c:	4630      	mov	r0, r6
 800ff9e:	f7ff ff47 	bl	800fe30 <_Balloc>
 800ffa2:	b940      	cbnz	r0, 800ffb6 <__s2b+0x36>
 800ffa4:	4602      	mov	r2, r0
 800ffa6:	4b19      	ldr	r3, [pc, #100]	@ (801000c <__s2b+0x8c>)
 800ffa8:	4819      	ldr	r0, [pc, #100]	@ (8010010 <__s2b+0x90>)
 800ffaa:	21d3      	movs	r1, #211	@ 0xd3
 800ffac:	f7fe fc8a 	bl	800e8c4 <__assert_func>
 800ffb0:	0052      	lsls	r2, r2, #1
 800ffb2:	3101      	adds	r1, #1
 800ffb4:	e7f0      	b.n	800ff98 <__s2b+0x18>
 800ffb6:	9b08      	ldr	r3, [sp, #32]
 800ffb8:	6143      	str	r3, [r0, #20]
 800ffba:	2d09      	cmp	r5, #9
 800ffbc:	f04f 0301 	mov.w	r3, #1
 800ffc0:	6103      	str	r3, [r0, #16]
 800ffc2:	dd16      	ble.n	800fff2 <__s2b+0x72>
 800ffc4:	f104 0909 	add.w	r9, r4, #9
 800ffc8:	46c8      	mov	r8, r9
 800ffca:	442c      	add	r4, r5
 800ffcc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ffd0:	4601      	mov	r1, r0
 800ffd2:	3b30      	subs	r3, #48	@ 0x30
 800ffd4:	220a      	movs	r2, #10
 800ffd6:	4630      	mov	r0, r6
 800ffd8:	f7ff ff8c 	bl	800fef4 <__multadd>
 800ffdc:	45a0      	cmp	r8, r4
 800ffde:	d1f5      	bne.n	800ffcc <__s2b+0x4c>
 800ffe0:	f1a5 0408 	sub.w	r4, r5, #8
 800ffe4:	444c      	add	r4, r9
 800ffe6:	1b2d      	subs	r5, r5, r4
 800ffe8:	1963      	adds	r3, r4, r5
 800ffea:	42bb      	cmp	r3, r7
 800ffec:	db04      	blt.n	800fff8 <__s2b+0x78>
 800ffee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fff2:	340a      	adds	r4, #10
 800fff4:	2509      	movs	r5, #9
 800fff6:	e7f6      	b.n	800ffe6 <__s2b+0x66>
 800fff8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fffc:	4601      	mov	r1, r0
 800fffe:	3b30      	subs	r3, #48	@ 0x30
 8010000:	220a      	movs	r2, #10
 8010002:	4630      	mov	r0, r6
 8010004:	f7ff ff76 	bl	800fef4 <__multadd>
 8010008:	e7ee      	b.n	800ffe8 <__s2b+0x68>
 801000a:	bf00      	nop
 801000c:	08011c5a 	.word	0x08011c5a
 8010010:	08011ccb 	.word	0x08011ccb

08010014 <__hi0bits>:
 8010014:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010018:	4603      	mov	r3, r0
 801001a:	bf36      	itet	cc
 801001c:	0403      	lslcc	r3, r0, #16
 801001e:	2000      	movcs	r0, #0
 8010020:	2010      	movcc	r0, #16
 8010022:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010026:	bf3c      	itt	cc
 8010028:	021b      	lslcc	r3, r3, #8
 801002a:	3008      	addcc	r0, #8
 801002c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010030:	bf3c      	itt	cc
 8010032:	011b      	lslcc	r3, r3, #4
 8010034:	3004      	addcc	r0, #4
 8010036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801003a:	bf3c      	itt	cc
 801003c:	009b      	lslcc	r3, r3, #2
 801003e:	3002      	addcc	r0, #2
 8010040:	2b00      	cmp	r3, #0
 8010042:	db05      	blt.n	8010050 <__hi0bits+0x3c>
 8010044:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010048:	f100 0001 	add.w	r0, r0, #1
 801004c:	bf08      	it	eq
 801004e:	2020      	moveq	r0, #32
 8010050:	4770      	bx	lr

08010052 <__lo0bits>:
 8010052:	6803      	ldr	r3, [r0, #0]
 8010054:	4602      	mov	r2, r0
 8010056:	f013 0007 	ands.w	r0, r3, #7
 801005a:	d00b      	beq.n	8010074 <__lo0bits+0x22>
 801005c:	07d9      	lsls	r1, r3, #31
 801005e:	d421      	bmi.n	80100a4 <__lo0bits+0x52>
 8010060:	0798      	lsls	r0, r3, #30
 8010062:	bf49      	itett	mi
 8010064:	085b      	lsrmi	r3, r3, #1
 8010066:	089b      	lsrpl	r3, r3, #2
 8010068:	2001      	movmi	r0, #1
 801006a:	6013      	strmi	r3, [r2, #0]
 801006c:	bf5c      	itt	pl
 801006e:	6013      	strpl	r3, [r2, #0]
 8010070:	2002      	movpl	r0, #2
 8010072:	4770      	bx	lr
 8010074:	b299      	uxth	r1, r3
 8010076:	b909      	cbnz	r1, 801007c <__lo0bits+0x2a>
 8010078:	0c1b      	lsrs	r3, r3, #16
 801007a:	2010      	movs	r0, #16
 801007c:	b2d9      	uxtb	r1, r3
 801007e:	b909      	cbnz	r1, 8010084 <__lo0bits+0x32>
 8010080:	3008      	adds	r0, #8
 8010082:	0a1b      	lsrs	r3, r3, #8
 8010084:	0719      	lsls	r1, r3, #28
 8010086:	bf04      	itt	eq
 8010088:	091b      	lsreq	r3, r3, #4
 801008a:	3004      	addeq	r0, #4
 801008c:	0799      	lsls	r1, r3, #30
 801008e:	bf04      	itt	eq
 8010090:	089b      	lsreq	r3, r3, #2
 8010092:	3002      	addeq	r0, #2
 8010094:	07d9      	lsls	r1, r3, #31
 8010096:	d403      	bmi.n	80100a0 <__lo0bits+0x4e>
 8010098:	085b      	lsrs	r3, r3, #1
 801009a:	f100 0001 	add.w	r0, r0, #1
 801009e:	d003      	beq.n	80100a8 <__lo0bits+0x56>
 80100a0:	6013      	str	r3, [r2, #0]
 80100a2:	4770      	bx	lr
 80100a4:	2000      	movs	r0, #0
 80100a6:	4770      	bx	lr
 80100a8:	2020      	movs	r0, #32
 80100aa:	4770      	bx	lr

080100ac <__i2b>:
 80100ac:	b510      	push	{r4, lr}
 80100ae:	460c      	mov	r4, r1
 80100b0:	2101      	movs	r1, #1
 80100b2:	f7ff febd 	bl	800fe30 <_Balloc>
 80100b6:	4602      	mov	r2, r0
 80100b8:	b928      	cbnz	r0, 80100c6 <__i2b+0x1a>
 80100ba:	4b05      	ldr	r3, [pc, #20]	@ (80100d0 <__i2b+0x24>)
 80100bc:	4805      	ldr	r0, [pc, #20]	@ (80100d4 <__i2b+0x28>)
 80100be:	f240 1145 	movw	r1, #325	@ 0x145
 80100c2:	f7fe fbff 	bl	800e8c4 <__assert_func>
 80100c6:	2301      	movs	r3, #1
 80100c8:	6144      	str	r4, [r0, #20]
 80100ca:	6103      	str	r3, [r0, #16]
 80100cc:	bd10      	pop	{r4, pc}
 80100ce:	bf00      	nop
 80100d0:	08011c5a 	.word	0x08011c5a
 80100d4:	08011ccb 	.word	0x08011ccb

080100d8 <__multiply>:
 80100d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100dc:	4614      	mov	r4, r2
 80100de:	690a      	ldr	r2, [r1, #16]
 80100e0:	6923      	ldr	r3, [r4, #16]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	bfa8      	it	ge
 80100e6:	4623      	movge	r3, r4
 80100e8:	460f      	mov	r7, r1
 80100ea:	bfa4      	itt	ge
 80100ec:	460c      	movge	r4, r1
 80100ee:	461f      	movge	r7, r3
 80100f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80100f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80100f8:	68a3      	ldr	r3, [r4, #8]
 80100fa:	6861      	ldr	r1, [r4, #4]
 80100fc:	eb0a 0609 	add.w	r6, sl, r9
 8010100:	42b3      	cmp	r3, r6
 8010102:	b085      	sub	sp, #20
 8010104:	bfb8      	it	lt
 8010106:	3101      	addlt	r1, #1
 8010108:	f7ff fe92 	bl	800fe30 <_Balloc>
 801010c:	b930      	cbnz	r0, 801011c <__multiply+0x44>
 801010e:	4602      	mov	r2, r0
 8010110:	4b44      	ldr	r3, [pc, #272]	@ (8010224 <__multiply+0x14c>)
 8010112:	4845      	ldr	r0, [pc, #276]	@ (8010228 <__multiply+0x150>)
 8010114:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010118:	f7fe fbd4 	bl	800e8c4 <__assert_func>
 801011c:	f100 0514 	add.w	r5, r0, #20
 8010120:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010124:	462b      	mov	r3, r5
 8010126:	2200      	movs	r2, #0
 8010128:	4543      	cmp	r3, r8
 801012a:	d321      	bcc.n	8010170 <__multiply+0x98>
 801012c:	f107 0114 	add.w	r1, r7, #20
 8010130:	f104 0214 	add.w	r2, r4, #20
 8010134:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010138:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801013c:	9302      	str	r3, [sp, #8]
 801013e:	1b13      	subs	r3, r2, r4
 8010140:	3b15      	subs	r3, #21
 8010142:	f023 0303 	bic.w	r3, r3, #3
 8010146:	3304      	adds	r3, #4
 8010148:	f104 0715 	add.w	r7, r4, #21
 801014c:	42ba      	cmp	r2, r7
 801014e:	bf38      	it	cc
 8010150:	2304      	movcc	r3, #4
 8010152:	9301      	str	r3, [sp, #4]
 8010154:	9b02      	ldr	r3, [sp, #8]
 8010156:	9103      	str	r1, [sp, #12]
 8010158:	428b      	cmp	r3, r1
 801015a:	d80c      	bhi.n	8010176 <__multiply+0x9e>
 801015c:	2e00      	cmp	r6, #0
 801015e:	dd03      	ble.n	8010168 <__multiply+0x90>
 8010160:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010164:	2b00      	cmp	r3, #0
 8010166:	d05b      	beq.n	8010220 <__multiply+0x148>
 8010168:	6106      	str	r6, [r0, #16]
 801016a:	b005      	add	sp, #20
 801016c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010170:	f843 2b04 	str.w	r2, [r3], #4
 8010174:	e7d8      	b.n	8010128 <__multiply+0x50>
 8010176:	f8b1 a000 	ldrh.w	sl, [r1]
 801017a:	f1ba 0f00 	cmp.w	sl, #0
 801017e:	d024      	beq.n	80101ca <__multiply+0xf2>
 8010180:	f104 0e14 	add.w	lr, r4, #20
 8010184:	46a9      	mov	r9, r5
 8010186:	f04f 0c00 	mov.w	ip, #0
 801018a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801018e:	f8d9 3000 	ldr.w	r3, [r9]
 8010192:	fa1f fb87 	uxth.w	fp, r7
 8010196:	b29b      	uxth	r3, r3
 8010198:	fb0a 330b 	mla	r3, sl, fp, r3
 801019c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80101a0:	f8d9 7000 	ldr.w	r7, [r9]
 80101a4:	4463      	add	r3, ip
 80101a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80101aa:	fb0a c70b 	mla	r7, sl, fp, ip
 80101ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80101b2:	b29b      	uxth	r3, r3
 80101b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80101b8:	4572      	cmp	r2, lr
 80101ba:	f849 3b04 	str.w	r3, [r9], #4
 80101be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80101c2:	d8e2      	bhi.n	801018a <__multiply+0xb2>
 80101c4:	9b01      	ldr	r3, [sp, #4]
 80101c6:	f845 c003 	str.w	ip, [r5, r3]
 80101ca:	9b03      	ldr	r3, [sp, #12]
 80101cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80101d0:	3104      	adds	r1, #4
 80101d2:	f1b9 0f00 	cmp.w	r9, #0
 80101d6:	d021      	beq.n	801021c <__multiply+0x144>
 80101d8:	682b      	ldr	r3, [r5, #0]
 80101da:	f104 0c14 	add.w	ip, r4, #20
 80101de:	46ae      	mov	lr, r5
 80101e0:	f04f 0a00 	mov.w	sl, #0
 80101e4:	f8bc b000 	ldrh.w	fp, [ip]
 80101e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80101ec:	fb09 770b 	mla	r7, r9, fp, r7
 80101f0:	4457      	add	r7, sl
 80101f2:	b29b      	uxth	r3, r3
 80101f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80101f8:	f84e 3b04 	str.w	r3, [lr], #4
 80101fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010200:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010204:	f8be 3000 	ldrh.w	r3, [lr]
 8010208:	fb09 330a 	mla	r3, r9, sl, r3
 801020c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8010210:	4562      	cmp	r2, ip
 8010212:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010216:	d8e5      	bhi.n	80101e4 <__multiply+0x10c>
 8010218:	9f01      	ldr	r7, [sp, #4]
 801021a:	51eb      	str	r3, [r5, r7]
 801021c:	3504      	adds	r5, #4
 801021e:	e799      	b.n	8010154 <__multiply+0x7c>
 8010220:	3e01      	subs	r6, #1
 8010222:	e79b      	b.n	801015c <__multiply+0x84>
 8010224:	08011c5a 	.word	0x08011c5a
 8010228:	08011ccb 	.word	0x08011ccb

0801022c <__pow5mult>:
 801022c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010230:	4615      	mov	r5, r2
 8010232:	f012 0203 	ands.w	r2, r2, #3
 8010236:	4607      	mov	r7, r0
 8010238:	460e      	mov	r6, r1
 801023a:	d007      	beq.n	801024c <__pow5mult+0x20>
 801023c:	4c25      	ldr	r4, [pc, #148]	@ (80102d4 <__pow5mult+0xa8>)
 801023e:	3a01      	subs	r2, #1
 8010240:	2300      	movs	r3, #0
 8010242:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010246:	f7ff fe55 	bl	800fef4 <__multadd>
 801024a:	4606      	mov	r6, r0
 801024c:	10ad      	asrs	r5, r5, #2
 801024e:	d03d      	beq.n	80102cc <__pow5mult+0xa0>
 8010250:	69fc      	ldr	r4, [r7, #28]
 8010252:	b97c      	cbnz	r4, 8010274 <__pow5mult+0x48>
 8010254:	2010      	movs	r0, #16
 8010256:	f7ff fd23 	bl	800fca0 <malloc>
 801025a:	4602      	mov	r2, r0
 801025c:	61f8      	str	r0, [r7, #28]
 801025e:	b928      	cbnz	r0, 801026c <__pow5mult+0x40>
 8010260:	4b1d      	ldr	r3, [pc, #116]	@ (80102d8 <__pow5mult+0xac>)
 8010262:	481e      	ldr	r0, [pc, #120]	@ (80102dc <__pow5mult+0xb0>)
 8010264:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010268:	f7fe fb2c 	bl	800e8c4 <__assert_func>
 801026c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010270:	6004      	str	r4, [r0, #0]
 8010272:	60c4      	str	r4, [r0, #12]
 8010274:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010278:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801027c:	b94c      	cbnz	r4, 8010292 <__pow5mult+0x66>
 801027e:	f240 2171 	movw	r1, #625	@ 0x271
 8010282:	4638      	mov	r0, r7
 8010284:	f7ff ff12 	bl	80100ac <__i2b>
 8010288:	2300      	movs	r3, #0
 801028a:	f8c8 0008 	str.w	r0, [r8, #8]
 801028e:	4604      	mov	r4, r0
 8010290:	6003      	str	r3, [r0, #0]
 8010292:	f04f 0900 	mov.w	r9, #0
 8010296:	07eb      	lsls	r3, r5, #31
 8010298:	d50a      	bpl.n	80102b0 <__pow5mult+0x84>
 801029a:	4631      	mov	r1, r6
 801029c:	4622      	mov	r2, r4
 801029e:	4638      	mov	r0, r7
 80102a0:	f7ff ff1a 	bl	80100d8 <__multiply>
 80102a4:	4631      	mov	r1, r6
 80102a6:	4680      	mov	r8, r0
 80102a8:	4638      	mov	r0, r7
 80102aa:	f7ff fe01 	bl	800feb0 <_Bfree>
 80102ae:	4646      	mov	r6, r8
 80102b0:	106d      	asrs	r5, r5, #1
 80102b2:	d00b      	beq.n	80102cc <__pow5mult+0xa0>
 80102b4:	6820      	ldr	r0, [r4, #0]
 80102b6:	b938      	cbnz	r0, 80102c8 <__pow5mult+0x9c>
 80102b8:	4622      	mov	r2, r4
 80102ba:	4621      	mov	r1, r4
 80102bc:	4638      	mov	r0, r7
 80102be:	f7ff ff0b 	bl	80100d8 <__multiply>
 80102c2:	6020      	str	r0, [r4, #0]
 80102c4:	f8c0 9000 	str.w	r9, [r0]
 80102c8:	4604      	mov	r4, r0
 80102ca:	e7e4      	b.n	8010296 <__pow5mult+0x6a>
 80102cc:	4630      	mov	r0, r6
 80102ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102d2:	bf00      	nop
 80102d4:	08011d24 	.word	0x08011d24
 80102d8:	08011beb 	.word	0x08011beb
 80102dc:	08011ccb 	.word	0x08011ccb

080102e0 <__lshift>:
 80102e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102e4:	460c      	mov	r4, r1
 80102e6:	6849      	ldr	r1, [r1, #4]
 80102e8:	6923      	ldr	r3, [r4, #16]
 80102ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80102ee:	68a3      	ldr	r3, [r4, #8]
 80102f0:	4607      	mov	r7, r0
 80102f2:	4691      	mov	r9, r2
 80102f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80102f8:	f108 0601 	add.w	r6, r8, #1
 80102fc:	42b3      	cmp	r3, r6
 80102fe:	db0b      	blt.n	8010318 <__lshift+0x38>
 8010300:	4638      	mov	r0, r7
 8010302:	f7ff fd95 	bl	800fe30 <_Balloc>
 8010306:	4605      	mov	r5, r0
 8010308:	b948      	cbnz	r0, 801031e <__lshift+0x3e>
 801030a:	4602      	mov	r2, r0
 801030c:	4b28      	ldr	r3, [pc, #160]	@ (80103b0 <__lshift+0xd0>)
 801030e:	4829      	ldr	r0, [pc, #164]	@ (80103b4 <__lshift+0xd4>)
 8010310:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010314:	f7fe fad6 	bl	800e8c4 <__assert_func>
 8010318:	3101      	adds	r1, #1
 801031a:	005b      	lsls	r3, r3, #1
 801031c:	e7ee      	b.n	80102fc <__lshift+0x1c>
 801031e:	2300      	movs	r3, #0
 8010320:	f100 0114 	add.w	r1, r0, #20
 8010324:	f100 0210 	add.w	r2, r0, #16
 8010328:	4618      	mov	r0, r3
 801032a:	4553      	cmp	r3, sl
 801032c:	db33      	blt.n	8010396 <__lshift+0xb6>
 801032e:	6920      	ldr	r0, [r4, #16]
 8010330:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010334:	f104 0314 	add.w	r3, r4, #20
 8010338:	f019 091f 	ands.w	r9, r9, #31
 801033c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010340:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010344:	d02b      	beq.n	801039e <__lshift+0xbe>
 8010346:	f1c9 0e20 	rsb	lr, r9, #32
 801034a:	468a      	mov	sl, r1
 801034c:	2200      	movs	r2, #0
 801034e:	6818      	ldr	r0, [r3, #0]
 8010350:	fa00 f009 	lsl.w	r0, r0, r9
 8010354:	4310      	orrs	r0, r2
 8010356:	f84a 0b04 	str.w	r0, [sl], #4
 801035a:	f853 2b04 	ldr.w	r2, [r3], #4
 801035e:	459c      	cmp	ip, r3
 8010360:	fa22 f20e 	lsr.w	r2, r2, lr
 8010364:	d8f3      	bhi.n	801034e <__lshift+0x6e>
 8010366:	ebac 0304 	sub.w	r3, ip, r4
 801036a:	3b15      	subs	r3, #21
 801036c:	f023 0303 	bic.w	r3, r3, #3
 8010370:	3304      	adds	r3, #4
 8010372:	f104 0015 	add.w	r0, r4, #21
 8010376:	4584      	cmp	ip, r0
 8010378:	bf38      	it	cc
 801037a:	2304      	movcc	r3, #4
 801037c:	50ca      	str	r2, [r1, r3]
 801037e:	b10a      	cbz	r2, 8010384 <__lshift+0xa4>
 8010380:	f108 0602 	add.w	r6, r8, #2
 8010384:	3e01      	subs	r6, #1
 8010386:	4638      	mov	r0, r7
 8010388:	612e      	str	r6, [r5, #16]
 801038a:	4621      	mov	r1, r4
 801038c:	f7ff fd90 	bl	800feb0 <_Bfree>
 8010390:	4628      	mov	r0, r5
 8010392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010396:	f842 0f04 	str.w	r0, [r2, #4]!
 801039a:	3301      	adds	r3, #1
 801039c:	e7c5      	b.n	801032a <__lshift+0x4a>
 801039e:	3904      	subs	r1, #4
 80103a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80103a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80103a8:	459c      	cmp	ip, r3
 80103aa:	d8f9      	bhi.n	80103a0 <__lshift+0xc0>
 80103ac:	e7ea      	b.n	8010384 <__lshift+0xa4>
 80103ae:	bf00      	nop
 80103b0:	08011c5a 	.word	0x08011c5a
 80103b4:	08011ccb 	.word	0x08011ccb

080103b8 <__mcmp>:
 80103b8:	690a      	ldr	r2, [r1, #16]
 80103ba:	4603      	mov	r3, r0
 80103bc:	6900      	ldr	r0, [r0, #16]
 80103be:	1a80      	subs	r0, r0, r2
 80103c0:	b530      	push	{r4, r5, lr}
 80103c2:	d10e      	bne.n	80103e2 <__mcmp+0x2a>
 80103c4:	3314      	adds	r3, #20
 80103c6:	3114      	adds	r1, #20
 80103c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80103cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80103d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80103d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80103d8:	4295      	cmp	r5, r2
 80103da:	d003      	beq.n	80103e4 <__mcmp+0x2c>
 80103dc:	d205      	bcs.n	80103ea <__mcmp+0x32>
 80103de:	f04f 30ff 	mov.w	r0, #4294967295
 80103e2:	bd30      	pop	{r4, r5, pc}
 80103e4:	42a3      	cmp	r3, r4
 80103e6:	d3f3      	bcc.n	80103d0 <__mcmp+0x18>
 80103e8:	e7fb      	b.n	80103e2 <__mcmp+0x2a>
 80103ea:	2001      	movs	r0, #1
 80103ec:	e7f9      	b.n	80103e2 <__mcmp+0x2a>
	...

080103f0 <__mdiff>:
 80103f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103f4:	4689      	mov	r9, r1
 80103f6:	4606      	mov	r6, r0
 80103f8:	4611      	mov	r1, r2
 80103fa:	4648      	mov	r0, r9
 80103fc:	4614      	mov	r4, r2
 80103fe:	f7ff ffdb 	bl	80103b8 <__mcmp>
 8010402:	1e05      	subs	r5, r0, #0
 8010404:	d112      	bne.n	801042c <__mdiff+0x3c>
 8010406:	4629      	mov	r1, r5
 8010408:	4630      	mov	r0, r6
 801040a:	f7ff fd11 	bl	800fe30 <_Balloc>
 801040e:	4602      	mov	r2, r0
 8010410:	b928      	cbnz	r0, 801041e <__mdiff+0x2e>
 8010412:	4b3f      	ldr	r3, [pc, #252]	@ (8010510 <__mdiff+0x120>)
 8010414:	f240 2137 	movw	r1, #567	@ 0x237
 8010418:	483e      	ldr	r0, [pc, #248]	@ (8010514 <__mdiff+0x124>)
 801041a:	f7fe fa53 	bl	800e8c4 <__assert_func>
 801041e:	2301      	movs	r3, #1
 8010420:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010424:	4610      	mov	r0, r2
 8010426:	b003      	add	sp, #12
 8010428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801042c:	bfbc      	itt	lt
 801042e:	464b      	movlt	r3, r9
 8010430:	46a1      	movlt	r9, r4
 8010432:	4630      	mov	r0, r6
 8010434:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010438:	bfba      	itte	lt
 801043a:	461c      	movlt	r4, r3
 801043c:	2501      	movlt	r5, #1
 801043e:	2500      	movge	r5, #0
 8010440:	f7ff fcf6 	bl	800fe30 <_Balloc>
 8010444:	4602      	mov	r2, r0
 8010446:	b918      	cbnz	r0, 8010450 <__mdiff+0x60>
 8010448:	4b31      	ldr	r3, [pc, #196]	@ (8010510 <__mdiff+0x120>)
 801044a:	f240 2145 	movw	r1, #581	@ 0x245
 801044e:	e7e3      	b.n	8010418 <__mdiff+0x28>
 8010450:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010454:	6926      	ldr	r6, [r4, #16]
 8010456:	60c5      	str	r5, [r0, #12]
 8010458:	f109 0310 	add.w	r3, r9, #16
 801045c:	f109 0514 	add.w	r5, r9, #20
 8010460:	f104 0e14 	add.w	lr, r4, #20
 8010464:	f100 0b14 	add.w	fp, r0, #20
 8010468:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801046c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010470:	9301      	str	r3, [sp, #4]
 8010472:	46d9      	mov	r9, fp
 8010474:	f04f 0c00 	mov.w	ip, #0
 8010478:	9b01      	ldr	r3, [sp, #4]
 801047a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801047e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010482:	9301      	str	r3, [sp, #4]
 8010484:	fa1f f38a 	uxth.w	r3, sl
 8010488:	4619      	mov	r1, r3
 801048a:	b283      	uxth	r3, r0
 801048c:	1acb      	subs	r3, r1, r3
 801048e:	0c00      	lsrs	r0, r0, #16
 8010490:	4463      	add	r3, ip
 8010492:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010496:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801049a:	b29b      	uxth	r3, r3
 801049c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80104a0:	4576      	cmp	r6, lr
 80104a2:	f849 3b04 	str.w	r3, [r9], #4
 80104a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80104aa:	d8e5      	bhi.n	8010478 <__mdiff+0x88>
 80104ac:	1b33      	subs	r3, r6, r4
 80104ae:	3b15      	subs	r3, #21
 80104b0:	f023 0303 	bic.w	r3, r3, #3
 80104b4:	3415      	adds	r4, #21
 80104b6:	3304      	adds	r3, #4
 80104b8:	42a6      	cmp	r6, r4
 80104ba:	bf38      	it	cc
 80104bc:	2304      	movcc	r3, #4
 80104be:	441d      	add	r5, r3
 80104c0:	445b      	add	r3, fp
 80104c2:	461e      	mov	r6, r3
 80104c4:	462c      	mov	r4, r5
 80104c6:	4544      	cmp	r4, r8
 80104c8:	d30e      	bcc.n	80104e8 <__mdiff+0xf8>
 80104ca:	f108 0103 	add.w	r1, r8, #3
 80104ce:	1b49      	subs	r1, r1, r5
 80104d0:	f021 0103 	bic.w	r1, r1, #3
 80104d4:	3d03      	subs	r5, #3
 80104d6:	45a8      	cmp	r8, r5
 80104d8:	bf38      	it	cc
 80104da:	2100      	movcc	r1, #0
 80104dc:	440b      	add	r3, r1
 80104de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80104e2:	b191      	cbz	r1, 801050a <__mdiff+0x11a>
 80104e4:	6117      	str	r7, [r2, #16]
 80104e6:	e79d      	b.n	8010424 <__mdiff+0x34>
 80104e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80104ec:	46e6      	mov	lr, ip
 80104ee:	0c08      	lsrs	r0, r1, #16
 80104f0:	fa1c fc81 	uxtah	ip, ip, r1
 80104f4:	4471      	add	r1, lr
 80104f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80104fa:	b289      	uxth	r1, r1
 80104fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010500:	f846 1b04 	str.w	r1, [r6], #4
 8010504:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010508:	e7dd      	b.n	80104c6 <__mdiff+0xd6>
 801050a:	3f01      	subs	r7, #1
 801050c:	e7e7      	b.n	80104de <__mdiff+0xee>
 801050e:	bf00      	nop
 8010510:	08011c5a 	.word	0x08011c5a
 8010514:	08011ccb 	.word	0x08011ccb

08010518 <__ulp>:
 8010518:	b082      	sub	sp, #8
 801051a:	ed8d 0b00 	vstr	d0, [sp]
 801051e:	9a01      	ldr	r2, [sp, #4]
 8010520:	4b0f      	ldr	r3, [pc, #60]	@ (8010560 <__ulp+0x48>)
 8010522:	4013      	ands	r3, r2
 8010524:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010528:	2b00      	cmp	r3, #0
 801052a:	dc08      	bgt.n	801053e <__ulp+0x26>
 801052c:	425b      	negs	r3, r3
 801052e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010532:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010536:	da04      	bge.n	8010542 <__ulp+0x2a>
 8010538:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801053c:	4113      	asrs	r3, r2
 801053e:	2200      	movs	r2, #0
 8010540:	e008      	b.n	8010554 <__ulp+0x3c>
 8010542:	f1a2 0314 	sub.w	r3, r2, #20
 8010546:	2b1e      	cmp	r3, #30
 8010548:	bfda      	itte	le
 801054a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801054e:	40da      	lsrle	r2, r3
 8010550:	2201      	movgt	r2, #1
 8010552:	2300      	movs	r3, #0
 8010554:	4619      	mov	r1, r3
 8010556:	4610      	mov	r0, r2
 8010558:	ec41 0b10 	vmov	d0, r0, r1
 801055c:	b002      	add	sp, #8
 801055e:	4770      	bx	lr
 8010560:	7ff00000 	.word	0x7ff00000

08010564 <__b2d>:
 8010564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010568:	6906      	ldr	r6, [r0, #16]
 801056a:	f100 0814 	add.w	r8, r0, #20
 801056e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010572:	1f37      	subs	r7, r6, #4
 8010574:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010578:	4610      	mov	r0, r2
 801057a:	f7ff fd4b 	bl	8010014 <__hi0bits>
 801057e:	f1c0 0320 	rsb	r3, r0, #32
 8010582:	280a      	cmp	r0, #10
 8010584:	600b      	str	r3, [r1, #0]
 8010586:	491b      	ldr	r1, [pc, #108]	@ (80105f4 <__b2d+0x90>)
 8010588:	dc15      	bgt.n	80105b6 <__b2d+0x52>
 801058a:	f1c0 0c0b 	rsb	ip, r0, #11
 801058e:	fa22 f30c 	lsr.w	r3, r2, ip
 8010592:	45b8      	cmp	r8, r7
 8010594:	ea43 0501 	orr.w	r5, r3, r1
 8010598:	bf34      	ite	cc
 801059a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801059e:	2300      	movcs	r3, #0
 80105a0:	3015      	adds	r0, #21
 80105a2:	fa02 f000 	lsl.w	r0, r2, r0
 80105a6:	fa23 f30c 	lsr.w	r3, r3, ip
 80105aa:	4303      	orrs	r3, r0
 80105ac:	461c      	mov	r4, r3
 80105ae:	ec45 4b10 	vmov	d0, r4, r5
 80105b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105b6:	45b8      	cmp	r8, r7
 80105b8:	bf3a      	itte	cc
 80105ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80105be:	f1a6 0708 	subcc.w	r7, r6, #8
 80105c2:	2300      	movcs	r3, #0
 80105c4:	380b      	subs	r0, #11
 80105c6:	d012      	beq.n	80105ee <__b2d+0x8a>
 80105c8:	f1c0 0120 	rsb	r1, r0, #32
 80105cc:	fa23 f401 	lsr.w	r4, r3, r1
 80105d0:	4082      	lsls	r2, r0
 80105d2:	4322      	orrs	r2, r4
 80105d4:	4547      	cmp	r7, r8
 80105d6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80105da:	bf8c      	ite	hi
 80105dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80105e0:	2200      	movls	r2, #0
 80105e2:	4083      	lsls	r3, r0
 80105e4:	40ca      	lsrs	r2, r1
 80105e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80105ea:	4313      	orrs	r3, r2
 80105ec:	e7de      	b.n	80105ac <__b2d+0x48>
 80105ee:	ea42 0501 	orr.w	r5, r2, r1
 80105f2:	e7db      	b.n	80105ac <__b2d+0x48>
 80105f4:	3ff00000 	.word	0x3ff00000

080105f8 <__d2b>:
 80105f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80105fc:	460f      	mov	r7, r1
 80105fe:	2101      	movs	r1, #1
 8010600:	ec59 8b10 	vmov	r8, r9, d0
 8010604:	4616      	mov	r6, r2
 8010606:	f7ff fc13 	bl	800fe30 <_Balloc>
 801060a:	4604      	mov	r4, r0
 801060c:	b930      	cbnz	r0, 801061c <__d2b+0x24>
 801060e:	4602      	mov	r2, r0
 8010610:	4b23      	ldr	r3, [pc, #140]	@ (80106a0 <__d2b+0xa8>)
 8010612:	4824      	ldr	r0, [pc, #144]	@ (80106a4 <__d2b+0xac>)
 8010614:	f240 310f 	movw	r1, #783	@ 0x30f
 8010618:	f7fe f954 	bl	800e8c4 <__assert_func>
 801061c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010620:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010624:	b10d      	cbz	r5, 801062a <__d2b+0x32>
 8010626:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801062a:	9301      	str	r3, [sp, #4]
 801062c:	f1b8 0300 	subs.w	r3, r8, #0
 8010630:	d023      	beq.n	801067a <__d2b+0x82>
 8010632:	4668      	mov	r0, sp
 8010634:	9300      	str	r3, [sp, #0]
 8010636:	f7ff fd0c 	bl	8010052 <__lo0bits>
 801063a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801063e:	b1d0      	cbz	r0, 8010676 <__d2b+0x7e>
 8010640:	f1c0 0320 	rsb	r3, r0, #32
 8010644:	fa02 f303 	lsl.w	r3, r2, r3
 8010648:	430b      	orrs	r3, r1
 801064a:	40c2      	lsrs	r2, r0
 801064c:	6163      	str	r3, [r4, #20]
 801064e:	9201      	str	r2, [sp, #4]
 8010650:	9b01      	ldr	r3, [sp, #4]
 8010652:	61a3      	str	r3, [r4, #24]
 8010654:	2b00      	cmp	r3, #0
 8010656:	bf0c      	ite	eq
 8010658:	2201      	moveq	r2, #1
 801065a:	2202      	movne	r2, #2
 801065c:	6122      	str	r2, [r4, #16]
 801065e:	b1a5      	cbz	r5, 801068a <__d2b+0x92>
 8010660:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010664:	4405      	add	r5, r0
 8010666:	603d      	str	r5, [r7, #0]
 8010668:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801066c:	6030      	str	r0, [r6, #0]
 801066e:	4620      	mov	r0, r4
 8010670:	b003      	add	sp, #12
 8010672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010676:	6161      	str	r1, [r4, #20]
 8010678:	e7ea      	b.n	8010650 <__d2b+0x58>
 801067a:	a801      	add	r0, sp, #4
 801067c:	f7ff fce9 	bl	8010052 <__lo0bits>
 8010680:	9b01      	ldr	r3, [sp, #4]
 8010682:	6163      	str	r3, [r4, #20]
 8010684:	3020      	adds	r0, #32
 8010686:	2201      	movs	r2, #1
 8010688:	e7e8      	b.n	801065c <__d2b+0x64>
 801068a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801068e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010692:	6038      	str	r0, [r7, #0]
 8010694:	6918      	ldr	r0, [r3, #16]
 8010696:	f7ff fcbd 	bl	8010014 <__hi0bits>
 801069a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801069e:	e7e5      	b.n	801066c <__d2b+0x74>
 80106a0:	08011c5a 	.word	0x08011c5a
 80106a4:	08011ccb 	.word	0x08011ccb

080106a8 <__ratio>:
 80106a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106ac:	b085      	sub	sp, #20
 80106ae:	e9cd 1000 	strd	r1, r0, [sp]
 80106b2:	a902      	add	r1, sp, #8
 80106b4:	f7ff ff56 	bl	8010564 <__b2d>
 80106b8:	9800      	ldr	r0, [sp, #0]
 80106ba:	a903      	add	r1, sp, #12
 80106bc:	ec55 4b10 	vmov	r4, r5, d0
 80106c0:	f7ff ff50 	bl	8010564 <__b2d>
 80106c4:	9b01      	ldr	r3, [sp, #4]
 80106c6:	6919      	ldr	r1, [r3, #16]
 80106c8:	9b00      	ldr	r3, [sp, #0]
 80106ca:	691b      	ldr	r3, [r3, #16]
 80106cc:	1ac9      	subs	r1, r1, r3
 80106ce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80106d2:	1a9b      	subs	r3, r3, r2
 80106d4:	ec5b ab10 	vmov	sl, fp, d0
 80106d8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80106dc:	2b00      	cmp	r3, #0
 80106de:	bfce      	itee	gt
 80106e0:	462a      	movgt	r2, r5
 80106e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80106e6:	465a      	movle	r2, fp
 80106e8:	462f      	mov	r7, r5
 80106ea:	46d9      	mov	r9, fp
 80106ec:	bfcc      	ite	gt
 80106ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80106f2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80106f6:	464b      	mov	r3, r9
 80106f8:	4652      	mov	r2, sl
 80106fa:	4620      	mov	r0, r4
 80106fc:	4639      	mov	r1, r7
 80106fe:	f7f0 f8ad 	bl	800085c <__aeabi_ddiv>
 8010702:	ec41 0b10 	vmov	d0, r0, r1
 8010706:	b005      	add	sp, #20
 8010708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801070c <__copybits>:
 801070c:	3901      	subs	r1, #1
 801070e:	b570      	push	{r4, r5, r6, lr}
 8010710:	1149      	asrs	r1, r1, #5
 8010712:	6914      	ldr	r4, [r2, #16]
 8010714:	3101      	adds	r1, #1
 8010716:	f102 0314 	add.w	r3, r2, #20
 801071a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801071e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010722:	1f05      	subs	r5, r0, #4
 8010724:	42a3      	cmp	r3, r4
 8010726:	d30c      	bcc.n	8010742 <__copybits+0x36>
 8010728:	1aa3      	subs	r3, r4, r2
 801072a:	3b11      	subs	r3, #17
 801072c:	f023 0303 	bic.w	r3, r3, #3
 8010730:	3211      	adds	r2, #17
 8010732:	42a2      	cmp	r2, r4
 8010734:	bf88      	it	hi
 8010736:	2300      	movhi	r3, #0
 8010738:	4418      	add	r0, r3
 801073a:	2300      	movs	r3, #0
 801073c:	4288      	cmp	r0, r1
 801073e:	d305      	bcc.n	801074c <__copybits+0x40>
 8010740:	bd70      	pop	{r4, r5, r6, pc}
 8010742:	f853 6b04 	ldr.w	r6, [r3], #4
 8010746:	f845 6f04 	str.w	r6, [r5, #4]!
 801074a:	e7eb      	b.n	8010724 <__copybits+0x18>
 801074c:	f840 3b04 	str.w	r3, [r0], #4
 8010750:	e7f4      	b.n	801073c <__copybits+0x30>

08010752 <__any_on>:
 8010752:	f100 0214 	add.w	r2, r0, #20
 8010756:	6900      	ldr	r0, [r0, #16]
 8010758:	114b      	asrs	r3, r1, #5
 801075a:	4298      	cmp	r0, r3
 801075c:	b510      	push	{r4, lr}
 801075e:	db11      	blt.n	8010784 <__any_on+0x32>
 8010760:	dd0a      	ble.n	8010778 <__any_on+0x26>
 8010762:	f011 011f 	ands.w	r1, r1, #31
 8010766:	d007      	beq.n	8010778 <__any_on+0x26>
 8010768:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801076c:	fa24 f001 	lsr.w	r0, r4, r1
 8010770:	fa00 f101 	lsl.w	r1, r0, r1
 8010774:	428c      	cmp	r4, r1
 8010776:	d10b      	bne.n	8010790 <__any_on+0x3e>
 8010778:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801077c:	4293      	cmp	r3, r2
 801077e:	d803      	bhi.n	8010788 <__any_on+0x36>
 8010780:	2000      	movs	r0, #0
 8010782:	bd10      	pop	{r4, pc}
 8010784:	4603      	mov	r3, r0
 8010786:	e7f7      	b.n	8010778 <__any_on+0x26>
 8010788:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801078c:	2900      	cmp	r1, #0
 801078e:	d0f5      	beq.n	801077c <__any_on+0x2a>
 8010790:	2001      	movs	r0, #1
 8010792:	e7f6      	b.n	8010782 <__any_on+0x30>

08010794 <_strtol_l.constprop.0>:
 8010794:	2b24      	cmp	r3, #36	@ 0x24
 8010796:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801079a:	4686      	mov	lr, r0
 801079c:	4690      	mov	r8, r2
 801079e:	d801      	bhi.n	80107a4 <_strtol_l.constprop.0+0x10>
 80107a0:	2b01      	cmp	r3, #1
 80107a2:	d106      	bne.n	80107b2 <_strtol_l.constprop.0+0x1e>
 80107a4:	f7fe f842 	bl	800e82c <__errno>
 80107a8:	2316      	movs	r3, #22
 80107aa:	6003      	str	r3, [r0, #0]
 80107ac:	2000      	movs	r0, #0
 80107ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107b2:	4834      	ldr	r0, [pc, #208]	@ (8010884 <_strtol_l.constprop.0+0xf0>)
 80107b4:	460d      	mov	r5, r1
 80107b6:	462a      	mov	r2, r5
 80107b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80107bc:	5d06      	ldrb	r6, [r0, r4]
 80107be:	f016 0608 	ands.w	r6, r6, #8
 80107c2:	d1f8      	bne.n	80107b6 <_strtol_l.constprop.0+0x22>
 80107c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80107c6:	d12d      	bne.n	8010824 <_strtol_l.constprop.0+0x90>
 80107c8:	782c      	ldrb	r4, [r5, #0]
 80107ca:	2601      	movs	r6, #1
 80107cc:	1c95      	adds	r5, r2, #2
 80107ce:	f033 0210 	bics.w	r2, r3, #16
 80107d2:	d109      	bne.n	80107e8 <_strtol_l.constprop.0+0x54>
 80107d4:	2c30      	cmp	r4, #48	@ 0x30
 80107d6:	d12a      	bne.n	801082e <_strtol_l.constprop.0+0x9a>
 80107d8:	782a      	ldrb	r2, [r5, #0]
 80107da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80107de:	2a58      	cmp	r2, #88	@ 0x58
 80107e0:	d125      	bne.n	801082e <_strtol_l.constprop.0+0x9a>
 80107e2:	786c      	ldrb	r4, [r5, #1]
 80107e4:	2310      	movs	r3, #16
 80107e6:	3502      	adds	r5, #2
 80107e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80107ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 80107f0:	2200      	movs	r2, #0
 80107f2:	fbbc f9f3 	udiv	r9, ip, r3
 80107f6:	4610      	mov	r0, r2
 80107f8:	fb03 ca19 	mls	sl, r3, r9, ip
 80107fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8010800:	2f09      	cmp	r7, #9
 8010802:	d81b      	bhi.n	801083c <_strtol_l.constprop.0+0xa8>
 8010804:	463c      	mov	r4, r7
 8010806:	42a3      	cmp	r3, r4
 8010808:	dd27      	ble.n	801085a <_strtol_l.constprop.0+0xc6>
 801080a:	1c57      	adds	r7, r2, #1
 801080c:	d007      	beq.n	801081e <_strtol_l.constprop.0+0x8a>
 801080e:	4581      	cmp	r9, r0
 8010810:	d320      	bcc.n	8010854 <_strtol_l.constprop.0+0xc0>
 8010812:	d101      	bne.n	8010818 <_strtol_l.constprop.0+0x84>
 8010814:	45a2      	cmp	sl, r4
 8010816:	db1d      	blt.n	8010854 <_strtol_l.constprop.0+0xc0>
 8010818:	fb00 4003 	mla	r0, r0, r3, r4
 801081c:	2201      	movs	r2, #1
 801081e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8010822:	e7eb      	b.n	80107fc <_strtol_l.constprop.0+0x68>
 8010824:	2c2b      	cmp	r4, #43	@ 0x2b
 8010826:	bf04      	itt	eq
 8010828:	782c      	ldrbeq	r4, [r5, #0]
 801082a:	1c95      	addeq	r5, r2, #2
 801082c:	e7cf      	b.n	80107ce <_strtol_l.constprop.0+0x3a>
 801082e:	2b00      	cmp	r3, #0
 8010830:	d1da      	bne.n	80107e8 <_strtol_l.constprop.0+0x54>
 8010832:	2c30      	cmp	r4, #48	@ 0x30
 8010834:	bf0c      	ite	eq
 8010836:	2308      	moveq	r3, #8
 8010838:	230a      	movne	r3, #10
 801083a:	e7d5      	b.n	80107e8 <_strtol_l.constprop.0+0x54>
 801083c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8010840:	2f19      	cmp	r7, #25
 8010842:	d801      	bhi.n	8010848 <_strtol_l.constprop.0+0xb4>
 8010844:	3c37      	subs	r4, #55	@ 0x37
 8010846:	e7de      	b.n	8010806 <_strtol_l.constprop.0+0x72>
 8010848:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801084c:	2f19      	cmp	r7, #25
 801084e:	d804      	bhi.n	801085a <_strtol_l.constprop.0+0xc6>
 8010850:	3c57      	subs	r4, #87	@ 0x57
 8010852:	e7d8      	b.n	8010806 <_strtol_l.constprop.0+0x72>
 8010854:	f04f 32ff 	mov.w	r2, #4294967295
 8010858:	e7e1      	b.n	801081e <_strtol_l.constprop.0+0x8a>
 801085a:	1c53      	adds	r3, r2, #1
 801085c:	d108      	bne.n	8010870 <_strtol_l.constprop.0+0xdc>
 801085e:	2322      	movs	r3, #34	@ 0x22
 8010860:	f8ce 3000 	str.w	r3, [lr]
 8010864:	4660      	mov	r0, ip
 8010866:	f1b8 0f00 	cmp.w	r8, #0
 801086a:	d0a0      	beq.n	80107ae <_strtol_l.constprop.0+0x1a>
 801086c:	1e69      	subs	r1, r5, #1
 801086e:	e006      	b.n	801087e <_strtol_l.constprop.0+0xea>
 8010870:	b106      	cbz	r6, 8010874 <_strtol_l.constprop.0+0xe0>
 8010872:	4240      	negs	r0, r0
 8010874:	f1b8 0f00 	cmp.w	r8, #0
 8010878:	d099      	beq.n	80107ae <_strtol_l.constprop.0+0x1a>
 801087a:	2a00      	cmp	r2, #0
 801087c:	d1f6      	bne.n	801086c <_strtol_l.constprop.0+0xd8>
 801087e:	f8c8 1000 	str.w	r1, [r8]
 8010882:	e794      	b.n	80107ae <_strtol_l.constprop.0+0x1a>
 8010884:	08011a61 	.word	0x08011a61

08010888 <_strtol_r>:
 8010888:	f7ff bf84 	b.w	8010794 <_strtol_l.constprop.0>

0801088c <__ascii_wctomb>:
 801088c:	4603      	mov	r3, r0
 801088e:	4608      	mov	r0, r1
 8010890:	b141      	cbz	r1, 80108a4 <__ascii_wctomb+0x18>
 8010892:	2aff      	cmp	r2, #255	@ 0xff
 8010894:	d904      	bls.n	80108a0 <__ascii_wctomb+0x14>
 8010896:	228a      	movs	r2, #138	@ 0x8a
 8010898:	601a      	str	r2, [r3, #0]
 801089a:	f04f 30ff 	mov.w	r0, #4294967295
 801089e:	4770      	bx	lr
 80108a0:	700a      	strb	r2, [r1, #0]
 80108a2:	2001      	movs	r0, #1
 80108a4:	4770      	bx	lr

080108a6 <__ssputs_r>:
 80108a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108aa:	688e      	ldr	r6, [r1, #8]
 80108ac:	461f      	mov	r7, r3
 80108ae:	42be      	cmp	r6, r7
 80108b0:	680b      	ldr	r3, [r1, #0]
 80108b2:	4682      	mov	sl, r0
 80108b4:	460c      	mov	r4, r1
 80108b6:	4690      	mov	r8, r2
 80108b8:	d82d      	bhi.n	8010916 <__ssputs_r+0x70>
 80108ba:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80108be:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80108c2:	d026      	beq.n	8010912 <__ssputs_r+0x6c>
 80108c4:	6965      	ldr	r5, [r4, #20]
 80108c6:	6909      	ldr	r1, [r1, #16]
 80108c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80108cc:	eba3 0901 	sub.w	r9, r3, r1
 80108d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80108d4:	1c7b      	adds	r3, r7, #1
 80108d6:	444b      	add	r3, r9
 80108d8:	106d      	asrs	r5, r5, #1
 80108da:	429d      	cmp	r5, r3
 80108dc:	bf38      	it	cc
 80108de:	461d      	movcc	r5, r3
 80108e0:	0553      	lsls	r3, r2, #21
 80108e2:	d527      	bpl.n	8010934 <__ssputs_r+0x8e>
 80108e4:	4629      	mov	r1, r5
 80108e6:	f7ff fa05 	bl	800fcf4 <_malloc_r>
 80108ea:	4606      	mov	r6, r0
 80108ec:	b360      	cbz	r0, 8010948 <__ssputs_r+0xa2>
 80108ee:	6921      	ldr	r1, [r4, #16]
 80108f0:	464a      	mov	r2, r9
 80108f2:	f7fd ffc8 	bl	800e886 <memcpy>
 80108f6:	89a3      	ldrh	r3, [r4, #12]
 80108f8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80108fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010900:	81a3      	strh	r3, [r4, #12]
 8010902:	6126      	str	r6, [r4, #16]
 8010904:	6165      	str	r5, [r4, #20]
 8010906:	444e      	add	r6, r9
 8010908:	eba5 0509 	sub.w	r5, r5, r9
 801090c:	6026      	str	r6, [r4, #0]
 801090e:	60a5      	str	r5, [r4, #8]
 8010910:	463e      	mov	r6, r7
 8010912:	42be      	cmp	r6, r7
 8010914:	d900      	bls.n	8010918 <__ssputs_r+0x72>
 8010916:	463e      	mov	r6, r7
 8010918:	6820      	ldr	r0, [r4, #0]
 801091a:	4632      	mov	r2, r6
 801091c:	4641      	mov	r1, r8
 801091e:	f7fd ff06 	bl	800e72e <memmove>
 8010922:	68a3      	ldr	r3, [r4, #8]
 8010924:	1b9b      	subs	r3, r3, r6
 8010926:	60a3      	str	r3, [r4, #8]
 8010928:	6823      	ldr	r3, [r4, #0]
 801092a:	4433      	add	r3, r6
 801092c:	6023      	str	r3, [r4, #0]
 801092e:	2000      	movs	r0, #0
 8010930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010934:	462a      	mov	r2, r5
 8010936:	f000 f9f6 	bl	8010d26 <_realloc_r>
 801093a:	4606      	mov	r6, r0
 801093c:	2800      	cmp	r0, #0
 801093e:	d1e0      	bne.n	8010902 <__ssputs_r+0x5c>
 8010940:	6921      	ldr	r1, [r4, #16]
 8010942:	4650      	mov	r0, sl
 8010944:	f7fe fe28 	bl	800f598 <_free_r>
 8010948:	230c      	movs	r3, #12
 801094a:	f8ca 3000 	str.w	r3, [sl]
 801094e:	89a3      	ldrh	r3, [r4, #12]
 8010950:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010954:	81a3      	strh	r3, [r4, #12]
 8010956:	f04f 30ff 	mov.w	r0, #4294967295
 801095a:	e7e9      	b.n	8010930 <__ssputs_r+0x8a>

0801095c <_svfiprintf_r>:
 801095c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010960:	4698      	mov	r8, r3
 8010962:	898b      	ldrh	r3, [r1, #12]
 8010964:	061b      	lsls	r3, r3, #24
 8010966:	b09d      	sub	sp, #116	@ 0x74
 8010968:	4607      	mov	r7, r0
 801096a:	460d      	mov	r5, r1
 801096c:	4614      	mov	r4, r2
 801096e:	d510      	bpl.n	8010992 <_svfiprintf_r+0x36>
 8010970:	690b      	ldr	r3, [r1, #16]
 8010972:	b973      	cbnz	r3, 8010992 <_svfiprintf_r+0x36>
 8010974:	2140      	movs	r1, #64	@ 0x40
 8010976:	f7ff f9bd 	bl	800fcf4 <_malloc_r>
 801097a:	6028      	str	r0, [r5, #0]
 801097c:	6128      	str	r0, [r5, #16]
 801097e:	b930      	cbnz	r0, 801098e <_svfiprintf_r+0x32>
 8010980:	230c      	movs	r3, #12
 8010982:	603b      	str	r3, [r7, #0]
 8010984:	f04f 30ff 	mov.w	r0, #4294967295
 8010988:	b01d      	add	sp, #116	@ 0x74
 801098a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801098e:	2340      	movs	r3, #64	@ 0x40
 8010990:	616b      	str	r3, [r5, #20]
 8010992:	2300      	movs	r3, #0
 8010994:	9309      	str	r3, [sp, #36]	@ 0x24
 8010996:	2320      	movs	r3, #32
 8010998:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801099c:	f8cd 800c 	str.w	r8, [sp, #12]
 80109a0:	2330      	movs	r3, #48	@ 0x30
 80109a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010b40 <_svfiprintf_r+0x1e4>
 80109a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80109aa:	f04f 0901 	mov.w	r9, #1
 80109ae:	4623      	mov	r3, r4
 80109b0:	469a      	mov	sl, r3
 80109b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109b6:	b10a      	cbz	r2, 80109bc <_svfiprintf_r+0x60>
 80109b8:	2a25      	cmp	r2, #37	@ 0x25
 80109ba:	d1f9      	bne.n	80109b0 <_svfiprintf_r+0x54>
 80109bc:	ebba 0b04 	subs.w	fp, sl, r4
 80109c0:	d00b      	beq.n	80109da <_svfiprintf_r+0x7e>
 80109c2:	465b      	mov	r3, fp
 80109c4:	4622      	mov	r2, r4
 80109c6:	4629      	mov	r1, r5
 80109c8:	4638      	mov	r0, r7
 80109ca:	f7ff ff6c 	bl	80108a6 <__ssputs_r>
 80109ce:	3001      	adds	r0, #1
 80109d0:	f000 80a7 	beq.w	8010b22 <_svfiprintf_r+0x1c6>
 80109d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80109d6:	445a      	add	r2, fp
 80109d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80109da:	f89a 3000 	ldrb.w	r3, [sl]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	f000 809f 	beq.w	8010b22 <_svfiprintf_r+0x1c6>
 80109e4:	2300      	movs	r3, #0
 80109e6:	f04f 32ff 	mov.w	r2, #4294967295
 80109ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109ee:	f10a 0a01 	add.w	sl, sl, #1
 80109f2:	9304      	str	r3, [sp, #16]
 80109f4:	9307      	str	r3, [sp, #28]
 80109f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80109fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80109fc:	4654      	mov	r4, sl
 80109fe:	2205      	movs	r2, #5
 8010a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a04:	484e      	ldr	r0, [pc, #312]	@ (8010b40 <_svfiprintf_r+0x1e4>)
 8010a06:	f7ef fbeb 	bl	80001e0 <memchr>
 8010a0a:	9a04      	ldr	r2, [sp, #16]
 8010a0c:	b9d8      	cbnz	r0, 8010a46 <_svfiprintf_r+0xea>
 8010a0e:	06d0      	lsls	r0, r2, #27
 8010a10:	bf44      	itt	mi
 8010a12:	2320      	movmi	r3, #32
 8010a14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a18:	0711      	lsls	r1, r2, #28
 8010a1a:	bf44      	itt	mi
 8010a1c:	232b      	movmi	r3, #43	@ 0x2b
 8010a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a22:	f89a 3000 	ldrb.w	r3, [sl]
 8010a26:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a28:	d015      	beq.n	8010a56 <_svfiprintf_r+0xfa>
 8010a2a:	9a07      	ldr	r2, [sp, #28]
 8010a2c:	4654      	mov	r4, sl
 8010a2e:	2000      	movs	r0, #0
 8010a30:	f04f 0c0a 	mov.w	ip, #10
 8010a34:	4621      	mov	r1, r4
 8010a36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a3a:	3b30      	subs	r3, #48	@ 0x30
 8010a3c:	2b09      	cmp	r3, #9
 8010a3e:	d94b      	bls.n	8010ad8 <_svfiprintf_r+0x17c>
 8010a40:	b1b0      	cbz	r0, 8010a70 <_svfiprintf_r+0x114>
 8010a42:	9207      	str	r2, [sp, #28]
 8010a44:	e014      	b.n	8010a70 <_svfiprintf_r+0x114>
 8010a46:	eba0 0308 	sub.w	r3, r0, r8
 8010a4a:	fa09 f303 	lsl.w	r3, r9, r3
 8010a4e:	4313      	orrs	r3, r2
 8010a50:	9304      	str	r3, [sp, #16]
 8010a52:	46a2      	mov	sl, r4
 8010a54:	e7d2      	b.n	80109fc <_svfiprintf_r+0xa0>
 8010a56:	9b03      	ldr	r3, [sp, #12]
 8010a58:	1d19      	adds	r1, r3, #4
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	9103      	str	r1, [sp, #12]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	bfbb      	ittet	lt
 8010a62:	425b      	neglt	r3, r3
 8010a64:	f042 0202 	orrlt.w	r2, r2, #2
 8010a68:	9307      	strge	r3, [sp, #28]
 8010a6a:	9307      	strlt	r3, [sp, #28]
 8010a6c:	bfb8      	it	lt
 8010a6e:	9204      	strlt	r2, [sp, #16]
 8010a70:	7823      	ldrb	r3, [r4, #0]
 8010a72:	2b2e      	cmp	r3, #46	@ 0x2e
 8010a74:	d10a      	bne.n	8010a8c <_svfiprintf_r+0x130>
 8010a76:	7863      	ldrb	r3, [r4, #1]
 8010a78:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a7a:	d132      	bne.n	8010ae2 <_svfiprintf_r+0x186>
 8010a7c:	9b03      	ldr	r3, [sp, #12]
 8010a7e:	1d1a      	adds	r2, r3, #4
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	9203      	str	r2, [sp, #12]
 8010a84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010a88:	3402      	adds	r4, #2
 8010a8a:	9305      	str	r3, [sp, #20]
 8010a8c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010b50 <_svfiprintf_r+0x1f4>
 8010a90:	7821      	ldrb	r1, [r4, #0]
 8010a92:	2203      	movs	r2, #3
 8010a94:	4650      	mov	r0, sl
 8010a96:	f7ef fba3 	bl	80001e0 <memchr>
 8010a9a:	b138      	cbz	r0, 8010aac <_svfiprintf_r+0x150>
 8010a9c:	9b04      	ldr	r3, [sp, #16]
 8010a9e:	eba0 000a 	sub.w	r0, r0, sl
 8010aa2:	2240      	movs	r2, #64	@ 0x40
 8010aa4:	4082      	lsls	r2, r0
 8010aa6:	4313      	orrs	r3, r2
 8010aa8:	3401      	adds	r4, #1
 8010aaa:	9304      	str	r3, [sp, #16]
 8010aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ab0:	4824      	ldr	r0, [pc, #144]	@ (8010b44 <_svfiprintf_r+0x1e8>)
 8010ab2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010ab6:	2206      	movs	r2, #6
 8010ab8:	f7ef fb92 	bl	80001e0 <memchr>
 8010abc:	2800      	cmp	r0, #0
 8010abe:	d036      	beq.n	8010b2e <_svfiprintf_r+0x1d2>
 8010ac0:	4b21      	ldr	r3, [pc, #132]	@ (8010b48 <_svfiprintf_r+0x1ec>)
 8010ac2:	bb1b      	cbnz	r3, 8010b0c <_svfiprintf_r+0x1b0>
 8010ac4:	9b03      	ldr	r3, [sp, #12]
 8010ac6:	3307      	adds	r3, #7
 8010ac8:	f023 0307 	bic.w	r3, r3, #7
 8010acc:	3308      	adds	r3, #8
 8010ace:	9303      	str	r3, [sp, #12]
 8010ad0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ad2:	4433      	add	r3, r6
 8010ad4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ad6:	e76a      	b.n	80109ae <_svfiprintf_r+0x52>
 8010ad8:	fb0c 3202 	mla	r2, ip, r2, r3
 8010adc:	460c      	mov	r4, r1
 8010ade:	2001      	movs	r0, #1
 8010ae0:	e7a8      	b.n	8010a34 <_svfiprintf_r+0xd8>
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	3401      	adds	r4, #1
 8010ae6:	9305      	str	r3, [sp, #20]
 8010ae8:	4619      	mov	r1, r3
 8010aea:	f04f 0c0a 	mov.w	ip, #10
 8010aee:	4620      	mov	r0, r4
 8010af0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010af4:	3a30      	subs	r2, #48	@ 0x30
 8010af6:	2a09      	cmp	r2, #9
 8010af8:	d903      	bls.n	8010b02 <_svfiprintf_r+0x1a6>
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d0c6      	beq.n	8010a8c <_svfiprintf_r+0x130>
 8010afe:	9105      	str	r1, [sp, #20]
 8010b00:	e7c4      	b.n	8010a8c <_svfiprintf_r+0x130>
 8010b02:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b06:	4604      	mov	r4, r0
 8010b08:	2301      	movs	r3, #1
 8010b0a:	e7f0      	b.n	8010aee <_svfiprintf_r+0x192>
 8010b0c:	ab03      	add	r3, sp, #12
 8010b0e:	9300      	str	r3, [sp, #0]
 8010b10:	462a      	mov	r2, r5
 8010b12:	4b0e      	ldr	r3, [pc, #56]	@ (8010b4c <_svfiprintf_r+0x1f0>)
 8010b14:	a904      	add	r1, sp, #16
 8010b16:	4638      	mov	r0, r7
 8010b18:	f7fc fee4 	bl	800d8e4 <_printf_float>
 8010b1c:	1c42      	adds	r2, r0, #1
 8010b1e:	4606      	mov	r6, r0
 8010b20:	d1d6      	bne.n	8010ad0 <_svfiprintf_r+0x174>
 8010b22:	89ab      	ldrh	r3, [r5, #12]
 8010b24:	065b      	lsls	r3, r3, #25
 8010b26:	f53f af2d 	bmi.w	8010984 <_svfiprintf_r+0x28>
 8010b2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b2c:	e72c      	b.n	8010988 <_svfiprintf_r+0x2c>
 8010b2e:	ab03      	add	r3, sp, #12
 8010b30:	9300      	str	r3, [sp, #0]
 8010b32:	462a      	mov	r2, r5
 8010b34:	4b05      	ldr	r3, [pc, #20]	@ (8010b4c <_svfiprintf_r+0x1f0>)
 8010b36:	a904      	add	r1, sp, #16
 8010b38:	4638      	mov	r0, r7
 8010b3a:	f7fd f96b 	bl	800de14 <_printf_i>
 8010b3e:	e7ed      	b.n	8010b1c <_svfiprintf_r+0x1c0>
 8010b40:	08011e20 	.word	0x08011e20
 8010b44:	08011e2a 	.word	0x08011e2a
 8010b48:	0800d8e5 	.word	0x0800d8e5
 8010b4c:	080108a7 	.word	0x080108a7
 8010b50:	08011e26 	.word	0x08011e26

08010b54 <__sflush_r>:
 8010b54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b5c:	0716      	lsls	r6, r2, #28
 8010b5e:	4605      	mov	r5, r0
 8010b60:	460c      	mov	r4, r1
 8010b62:	d454      	bmi.n	8010c0e <__sflush_r+0xba>
 8010b64:	684b      	ldr	r3, [r1, #4]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	dc02      	bgt.n	8010b70 <__sflush_r+0x1c>
 8010b6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	dd48      	ble.n	8010c02 <__sflush_r+0xae>
 8010b70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b72:	2e00      	cmp	r6, #0
 8010b74:	d045      	beq.n	8010c02 <__sflush_r+0xae>
 8010b76:	2300      	movs	r3, #0
 8010b78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010b7c:	682f      	ldr	r7, [r5, #0]
 8010b7e:	6a21      	ldr	r1, [r4, #32]
 8010b80:	602b      	str	r3, [r5, #0]
 8010b82:	d030      	beq.n	8010be6 <__sflush_r+0x92>
 8010b84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010b86:	89a3      	ldrh	r3, [r4, #12]
 8010b88:	0759      	lsls	r1, r3, #29
 8010b8a:	d505      	bpl.n	8010b98 <__sflush_r+0x44>
 8010b8c:	6863      	ldr	r3, [r4, #4]
 8010b8e:	1ad2      	subs	r2, r2, r3
 8010b90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010b92:	b10b      	cbz	r3, 8010b98 <__sflush_r+0x44>
 8010b94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010b96:	1ad2      	subs	r2, r2, r3
 8010b98:	2300      	movs	r3, #0
 8010b9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b9c:	6a21      	ldr	r1, [r4, #32]
 8010b9e:	4628      	mov	r0, r5
 8010ba0:	47b0      	blx	r6
 8010ba2:	1c43      	adds	r3, r0, #1
 8010ba4:	89a3      	ldrh	r3, [r4, #12]
 8010ba6:	d106      	bne.n	8010bb6 <__sflush_r+0x62>
 8010ba8:	6829      	ldr	r1, [r5, #0]
 8010baa:	291d      	cmp	r1, #29
 8010bac:	d82b      	bhi.n	8010c06 <__sflush_r+0xb2>
 8010bae:	4a2a      	ldr	r2, [pc, #168]	@ (8010c58 <__sflush_r+0x104>)
 8010bb0:	410a      	asrs	r2, r1
 8010bb2:	07d6      	lsls	r6, r2, #31
 8010bb4:	d427      	bmi.n	8010c06 <__sflush_r+0xb2>
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	6062      	str	r2, [r4, #4]
 8010bba:	04d9      	lsls	r1, r3, #19
 8010bbc:	6922      	ldr	r2, [r4, #16]
 8010bbe:	6022      	str	r2, [r4, #0]
 8010bc0:	d504      	bpl.n	8010bcc <__sflush_r+0x78>
 8010bc2:	1c42      	adds	r2, r0, #1
 8010bc4:	d101      	bne.n	8010bca <__sflush_r+0x76>
 8010bc6:	682b      	ldr	r3, [r5, #0]
 8010bc8:	b903      	cbnz	r3, 8010bcc <__sflush_r+0x78>
 8010bca:	6560      	str	r0, [r4, #84]	@ 0x54
 8010bcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010bce:	602f      	str	r7, [r5, #0]
 8010bd0:	b1b9      	cbz	r1, 8010c02 <__sflush_r+0xae>
 8010bd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010bd6:	4299      	cmp	r1, r3
 8010bd8:	d002      	beq.n	8010be0 <__sflush_r+0x8c>
 8010bda:	4628      	mov	r0, r5
 8010bdc:	f7fe fcdc 	bl	800f598 <_free_r>
 8010be0:	2300      	movs	r3, #0
 8010be2:	6363      	str	r3, [r4, #52]	@ 0x34
 8010be4:	e00d      	b.n	8010c02 <__sflush_r+0xae>
 8010be6:	2301      	movs	r3, #1
 8010be8:	4628      	mov	r0, r5
 8010bea:	47b0      	blx	r6
 8010bec:	4602      	mov	r2, r0
 8010bee:	1c50      	adds	r0, r2, #1
 8010bf0:	d1c9      	bne.n	8010b86 <__sflush_r+0x32>
 8010bf2:	682b      	ldr	r3, [r5, #0]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d0c6      	beq.n	8010b86 <__sflush_r+0x32>
 8010bf8:	2b1d      	cmp	r3, #29
 8010bfa:	d001      	beq.n	8010c00 <__sflush_r+0xac>
 8010bfc:	2b16      	cmp	r3, #22
 8010bfe:	d11e      	bne.n	8010c3e <__sflush_r+0xea>
 8010c00:	602f      	str	r7, [r5, #0]
 8010c02:	2000      	movs	r0, #0
 8010c04:	e022      	b.n	8010c4c <__sflush_r+0xf8>
 8010c06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c0a:	b21b      	sxth	r3, r3
 8010c0c:	e01b      	b.n	8010c46 <__sflush_r+0xf2>
 8010c0e:	690f      	ldr	r7, [r1, #16]
 8010c10:	2f00      	cmp	r7, #0
 8010c12:	d0f6      	beq.n	8010c02 <__sflush_r+0xae>
 8010c14:	0793      	lsls	r3, r2, #30
 8010c16:	680e      	ldr	r6, [r1, #0]
 8010c18:	bf08      	it	eq
 8010c1a:	694b      	ldreq	r3, [r1, #20]
 8010c1c:	600f      	str	r7, [r1, #0]
 8010c1e:	bf18      	it	ne
 8010c20:	2300      	movne	r3, #0
 8010c22:	eba6 0807 	sub.w	r8, r6, r7
 8010c26:	608b      	str	r3, [r1, #8]
 8010c28:	f1b8 0f00 	cmp.w	r8, #0
 8010c2c:	dde9      	ble.n	8010c02 <__sflush_r+0xae>
 8010c2e:	6a21      	ldr	r1, [r4, #32]
 8010c30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010c32:	4643      	mov	r3, r8
 8010c34:	463a      	mov	r2, r7
 8010c36:	4628      	mov	r0, r5
 8010c38:	47b0      	blx	r6
 8010c3a:	2800      	cmp	r0, #0
 8010c3c:	dc08      	bgt.n	8010c50 <__sflush_r+0xfc>
 8010c3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c46:	81a3      	strh	r3, [r4, #12]
 8010c48:	f04f 30ff 	mov.w	r0, #4294967295
 8010c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c50:	4407      	add	r7, r0
 8010c52:	eba8 0800 	sub.w	r8, r8, r0
 8010c56:	e7e7      	b.n	8010c28 <__sflush_r+0xd4>
 8010c58:	dfbffffe 	.word	0xdfbffffe

08010c5c <_fflush_r>:
 8010c5c:	b538      	push	{r3, r4, r5, lr}
 8010c5e:	690b      	ldr	r3, [r1, #16]
 8010c60:	4605      	mov	r5, r0
 8010c62:	460c      	mov	r4, r1
 8010c64:	b913      	cbnz	r3, 8010c6c <_fflush_r+0x10>
 8010c66:	2500      	movs	r5, #0
 8010c68:	4628      	mov	r0, r5
 8010c6a:	bd38      	pop	{r3, r4, r5, pc}
 8010c6c:	b118      	cbz	r0, 8010c76 <_fflush_r+0x1a>
 8010c6e:	6a03      	ldr	r3, [r0, #32]
 8010c70:	b90b      	cbnz	r3, 8010c76 <_fflush_r+0x1a>
 8010c72:	f7fd fc8f 	bl	800e594 <__sinit>
 8010c76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d0f3      	beq.n	8010c66 <_fflush_r+0xa>
 8010c7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010c80:	07d0      	lsls	r0, r2, #31
 8010c82:	d404      	bmi.n	8010c8e <_fflush_r+0x32>
 8010c84:	0599      	lsls	r1, r3, #22
 8010c86:	d402      	bmi.n	8010c8e <_fflush_r+0x32>
 8010c88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c8a:	f7fd fdfa 	bl	800e882 <__retarget_lock_acquire_recursive>
 8010c8e:	4628      	mov	r0, r5
 8010c90:	4621      	mov	r1, r4
 8010c92:	f7ff ff5f 	bl	8010b54 <__sflush_r>
 8010c96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010c98:	07da      	lsls	r2, r3, #31
 8010c9a:	4605      	mov	r5, r0
 8010c9c:	d4e4      	bmi.n	8010c68 <_fflush_r+0xc>
 8010c9e:	89a3      	ldrh	r3, [r4, #12]
 8010ca0:	059b      	lsls	r3, r3, #22
 8010ca2:	d4e1      	bmi.n	8010c68 <_fflush_r+0xc>
 8010ca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010ca6:	f7fd fded 	bl	800e884 <__retarget_lock_release_recursive>
 8010caa:	e7dd      	b.n	8010c68 <_fflush_r+0xc>

08010cac <fiprintf>:
 8010cac:	b40e      	push	{r1, r2, r3}
 8010cae:	b503      	push	{r0, r1, lr}
 8010cb0:	4601      	mov	r1, r0
 8010cb2:	ab03      	add	r3, sp, #12
 8010cb4:	4805      	ldr	r0, [pc, #20]	@ (8010ccc <fiprintf+0x20>)
 8010cb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8010cba:	6800      	ldr	r0, [r0, #0]
 8010cbc:	9301      	str	r3, [sp, #4]
 8010cbe:	f000 f889 	bl	8010dd4 <_vfiprintf_r>
 8010cc2:	b002      	add	sp, #8
 8010cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8010cc8:	b003      	add	sp, #12
 8010cca:	4770      	bx	lr
 8010ccc:	200001a0 	.word	0x200001a0

08010cd0 <_sbrk_r>:
 8010cd0:	b538      	push	{r3, r4, r5, lr}
 8010cd2:	4d06      	ldr	r5, [pc, #24]	@ (8010cec <_sbrk_r+0x1c>)
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	4604      	mov	r4, r0
 8010cd8:	4608      	mov	r0, r1
 8010cda:	602b      	str	r3, [r5, #0]
 8010cdc:	f7f0 ff9c 	bl	8001c18 <_sbrk>
 8010ce0:	1c43      	adds	r3, r0, #1
 8010ce2:	d102      	bne.n	8010cea <_sbrk_r+0x1a>
 8010ce4:	682b      	ldr	r3, [r5, #0]
 8010ce6:	b103      	cbz	r3, 8010cea <_sbrk_r+0x1a>
 8010ce8:	6023      	str	r3, [r4, #0]
 8010cea:	bd38      	pop	{r3, r4, r5, pc}
 8010cec:	20006710 	.word	0x20006710

08010cf0 <abort>:
 8010cf0:	b508      	push	{r3, lr}
 8010cf2:	2006      	movs	r0, #6
 8010cf4:	f000 fa42 	bl	801117c <raise>
 8010cf8:	2001      	movs	r0, #1
 8010cfa:	f7f0 ff15 	bl	8001b28 <_exit>

08010cfe <_calloc_r>:
 8010cfe:	b570      	push	{r4, r5, r6, lr}
 8010d00:	fba1 5402 	umull	r5, r4, r1, r2
 8010d04:	b93c      	cbnz	r4, 8010d16 <_calloc_r+0x18>
 8010d06:	4629      	mov	r1, r5
 8010d08:	f7fe fff4 	bl	800fcf4 <_malloc_r>
 8010d0c:	4606      	mov	r6, r0
 8010d0e:	b928      	cbnz	r0, 8010d1c <_calloc_r+0x1e>
 8010d10:	2600      	movs	r6, #0
 8010d12:	4630      	mov	r0, r6
 8010d14:	bd70      	pop	{r4, r5, r6, pc}
 8010d16:	220c      	movs	r2, #12
 8010d18:	6002      	str	r2, [r0, #0]
 8010d1a:	e7f9      	b.n	8010d10 <_calloc_r+0x12>
 8010d1c:	462a      	mov	r2, r5
 8010d1e:	4621      	mov	r1, r4
 8010d20:	f7fd fd1f 	bl	800e762 <memset>
 8010d24:	e7f5      	b.n	8010d12 <_calloc_r+0x14>

08010d26 <_realloc_r>:
 8010d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d2a:	4680      	mov	r8, r0
 8010d2c:	4615      	mov	r5, r2
 8010d2e:	460c      	mov	r4, r1
 8010d30:	b921      	cbnz	r1, 8010d3c <_realloc_r+0x16>
 8010d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d36:	4611      	mov	r1, r2
 8010d38:	f7fe bfdc 	b.w	800fcf4 <_malloc_r>
 8010d3c:	b92a      	cbnz	r2, 8010d4a <_realloc_r+0x24>
 8010d3e:	f7fe fc2b 	bl	800f598 <_free_r>
 8010d42:	2400      	movs	r4, #0
 8010d44:	4620      	mov	r0, r4
 8010d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d4a:	f000 fa33 	bl	80111b4 <_malloc_usable_size_r>
 8010d4e:	4285      	cmp	r5, r0
 8010d50:	4606      	mov	r6, r0
 8010d52:	d802      	bhi.n	8010d5a <_realloc_r+0x34>
 8010d54:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010d58:	d8f4      	bhi.n	8010d44 <_realloc_r+0x1e>
 8010d5a:	4629      	mov	r1, r5
 8010d5c:	4640      	mov	r0, r8
 8010d5e:	f7fe ffc9 	bl	800fcf4 <_malloc_r>
 8010d62:	4607      	mov	r7, r0
 8010d64:	2800      	cmp	r0, #0
 8010d66:	d0ec      	beq.n	8010d42 <_realloc_r+0x1c>
 8010d68:	42b5      	cmp	r5, r6
 8010d6a:	462a      	mov	r2, r5
 8010d6c:	4621      	mov	r1, r4
 8010d6e:	bf28      	it	cs
 8010d70:	4632      	movcs	r2, r6
 8010d72:	f7fd fd88 	bl	800e886 <memcpy>
 8010d76:	4621      	mov	r1, r4
 8010d78:	4640      	mov	r0, r8
 8010d7a:	f7fe fc0d 	bl	800f598 <_free_r>
 8010d7e:	463c      	mov	r4, r7
 8010d80:	e7e0      	b.n	8010d44 <_realloc_r+0x1e>

08010d82 <__sfputc_r>:
 8010d82:	6893      	ldr	r3, [r2, #8]
 8010d84:	3b01      	subs	r3, #1
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	b410      	push	{r4}
 8010d8a:	6093      	str	r3, [r2, #8]
 8010d8c:	da08      	bge.n	8010da0 <__sfputc_r+0x1e>
 8010d8e:	6994      	ldr	r4, [r2, #24]
 8010d90:	42a3      	cmp	r3, r4
 8010d92:	db01      	blt.n	8010d98 <__sfputc_r+0x16>
 8010d94:	290a      	cmp	r1, #10
 8010d96:	d103      	bne.n	8010da0 <__sfputc_r+0x1e>
 8010d98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d9c:	f000 b932 	b.w	8011004 <__swbuf_r>
 8010da0:	6813      	ldr	r3, [r2, #0]
 8010da2:	1c58      	adds	r0, r3, #1
 8010da4:	6010      	str	r0, [r2, #0]
 8010da6:	7019      	strb	r1, [r3, #0]
 8010da8:	4608      	mov	r0, r1
 8010daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010dae:	4770      	bx	lr

08010db0 <__sfputs_r>:
 8010db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010db2:	4606      	mov	r6, r0
 8010db4:	460f      	mov	r7, r1
 8010db6:	4614      	mov	r4, r2
 8010db8:	18d5      	adds	r5, r2, r3
 8010dba:	42ac      	cmp	r4, r5
 8010dbc:	d101      	bne.n	8010dc2 <__sfputs_r+0x12>
 8010dbe:	2000      	movs	r0, #0
 8010dc0:	e007      	b.n	8010dd2 <__sfputs_r+0x22>
 8010dc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dc6:	463a      	mov	r2, r7
 8010dc8:	4630      	mov	r0, r6
 8010dca:	f7ff ffda 	bl	8010d82 <__sfputc_r>
 8010dce:	1c43      	adds	r3, r0, #1
 8010dd0:	d1f3      	bne.n	8010dba <__sfputs_r+0xa>
 8010dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010dd4 <_vfiprintf_r>:
 8010dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dd8:	460d      	mov	r5, r1
 8010dda:	b09d      	sub	sp, #116	@ 0x74
 8010ddc:	4614      	mov	r4, r2
 8010dde:	4698      	mov	r8, r3
 8010de0:	4606      	mov	r6, r0
 8010de2:	b118      	cbz	r0, 8010dec <_vfiprintf_r+0x18>
 8010de4:	6a03      	ldr	r3, [r0, #32]
 8010de6:	b90b      	cbnz	r3, 8010dec <_vfiprintf_r+0x18>
 8010de8:	f7fd fbd4 	bl	800e594 <__sinit>
 8010dec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010dee:	07d9      	lsls	r1, r3, #31
 8010df0:	d405      	bmi.n	8010dfe <_vfiprintf_r+0x2a>
 8010df2:	89ab      	ldrh	r3, [r5, #12]
 8010df4:	059a      	lsls	r2, r3, #22
 8010df6:	d402      	bmi.n	8010dfe <_vfiprintf_r+0x2a>
 8010df8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010dfa:	f7fd fd42 	bl	800e882 <__retarget_lock_acquire_recursive>
 8010dfe:	89ab      	ldrh	r3, [r5, #12]
 8010e00:	071b      	lsls	r3, r3, #28
 8010e02:	d501      	bpl.n	8010e08 <_vfiprintf_r+0x34>
 8010e04:	692b      	ldr	r3, [r5, #16]
 8010e06:	b99b      	cbnz	r3, 8010e30 <_vfiprintf_r+0x5c>
 8010e08:	4629      	mov	r1, r5
 8010e0a:	4630      	mov	r0, r6
 8010e0c:	f000 f938 	bl	8011080 <__swsetup_r>
 8010e10:	b170      	cbz	r0, 8010e30 <_vfiprintf_r+0x5c>
 8010e12:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010e14:	07dc      	lsls	r4, r3, #31
 8010e16:	d504      	bpl.n	8010e22 <_vfiprintf_r+0x4e>
 8010e18:	f04f 30ff 	mov.w	r0, #4294967295
 8010e1c:	b01d      	add	sp, #116	@ 0x74
 8010e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e22:	89ab      	ldrh	r3, [r5, #12]
 8010e24:	0598      	lsls	r0, r3, #22
 8010e26:	d4f7      	bmi.n	8010e18 <_vfiprintf_r+0x44>
 8010e28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010e2a:	f7fd fd2b 	bl	800e884 <__retarget_lock_release_recursive>
 8010e2e:	e7f3      	b.n	8010e18 <_vfiprintf_r+0x44>
 8010e30:	2300      	movs	r3, #0
 8010e32:	9309      	str	r3, [sp, #36]	@ 0x24
 8010e34:	2320      	movs	r3, #32
 8010e36:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010e3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e3e:	2330      	movs	r3, #48	@ 0x30
 8010e40:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010ff0 <_vfiprintf_r+0x21c>
 8010e44:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010e48:	f04f 0901 	mov.w	r9, #1
 8010e4c:	4623      	mov	r3, r4
 8010e4e:	469a      	mov	sl, r3
 8010e50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e54:	b10a      	cbz	r2, 8010e5a <_vfiprintf_r+0x86>
 8010e56:	2a25      	cmp	r2, #37	@ 0x25
 8010e58:	d1f9      	bne.n	8010e4e <_vfiprintf_r+0x7a>
 8010e5a:	ebba 0b04 	subs.w	fp, sl, r4
 8010e5e:	d00b      	beq.n	8010e78 <_vfiprintf_r+0xa4>
 8010e60:	465b      	mov	r3, fp
 8010e62:	4622      	mov	r2, r4
 8010e64:	4629      	mov	r1, r5
 8010e66:	4630      	mov	r0, r6
 8010e68:	f7ff ffa2 	bl	8010db0 <__sfputs_r>
 8010e6c:	3001      	adds	r0, #1
 8010e6e:	f000 80a7 	beq.w	8010fc0 <_vfiprintf_r+0x1ec>
 8010e72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e74:	445a      	add	r2, fp
 8010e76:	9209      	str	r2, [sp, #36]	@ 0x24
 8010e78:	f89a 3000 	ldrb.w	r3, [sl]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	f000 809f 	beq.w	8010fc0 <_vfiprintf_r+0x1ec>
 8010e82:	2300      	movs	r3, #0
 8010e84:	f04f 32ff 	mov.w	r2, #4294967295
 8010e88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e8c:	f10a 0a01 	add.w	sl, sl, #1
 8010e90:	9304      	str	r3, [sp, #16]
 8010e92:	9307      	str	r3, [sp, #28]
 8010e94:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010e98:	931a      	str	r3, [sp, #104]	@ 0x68
 8010e9a:	4654      	mov	r4, sl
 8010e9c:	2205      	movs	r2, #5
 8010e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ea2:	4853      	ldr	r0, [pc, #332]	@ (8010ff0 <_vfiprintf_r+0x21c>)
 8010ea4:	f7ef f99c 	bl	80001e0 <memchr>
 8010ea8:	9a04      	ldr	r2, [sp, #16]
 8010eaa:	b9d8      	cbnz	r0, 8010ee4 <_vfiprintf_r+0x110>
 8010eac:	06d1      	lsls	r1, r2, #27
 8010eae:	bf44      	itt	mi
 8010eb0:	2320      	movmi	r3, #32
 8010eb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010eb6:	0713      	lsls	r3, r2, #28
 8010eb8:	bf44      	itt	mi
 8010eba:	232b      	movmi	r3, #43	@ 0x2b
 8010ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8010ec4:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ec6:	d015      	beq.n	8010ef4 <_vfiprintf_r+0x120>
 8010ec8:	9a07      	ldr	r2, [sp, #28]
 8010eca:	4654      	mov	r4, sl
 8010ecc:	2000      	movs	r0, #0
 8010ece:	f04f 0c0a 	mov.w	ip, #10
 8010ed2:	4621      	mov	r1, r4
 8010ed4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ed8:	3b30      	subs	r3, #48	@ 0x30
 8010eda:	2b09      	cmp	r3, #9
 8010edc:	d94b      	bls.n	8010f76 <_vfiprintf_r+0x1a2>
 8010ede:	b1b0      	cbz	r0, 8010f0e <_vfiprintf_r+0x13a>
 8010ee0:	9207      	str	r2, [sp, #28]
 8010ee2:	e014      	b.n	8010f0e <_vfiprintf_r+0x13a>
 8010ee4:	eba0 0308 	sub.w	r3, r0, r8
 8010ee8:	fa09 f303 	lsl.w	r3, r9, r3
 8010eec:	4313      	orrs	r3, r2
 8010eee:	9304      	str	r3, [sp, #16]
 8010ef0:	46a2      	mov	sl, r4
 8010ef2:	e7d2      	b.n	8010e9a <_vfiprintf_r+0xc6>
 8010ef4:	9b03      	ldr	r3, [sp, #12]
 8010ef6:	1d19      	adds	r1, r3, #4
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	9103      	str	r1, [sp, #12]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	bfbb      	ittet	lt
 8010f00:	425b      	neglt	r3, r3
 8010f02:	f042 0202 	orrlt.w	r2, r2, #2
 8010f06:	9307      	strge	r3, [sp, #28]
 8010f08:	9307      	strlt	r3, [sp, #28]
 8010f0a:	bfb8      	it	lt
 8010f0c:	9204      	strlt	r2, [sp, #16]
 8010f0e:	7823      	ldrb	r3, [r4, #0]
 8010f10:	2b2e      	cmp	r3, #46	@ 0x2e
 8010f12:	d10a      	bne.n	8010f2a <_vfiprintf_r+0x156>
 8010f14:	7863      	ldrb	r3, [r4, #1]
 8010f16:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f18:	d132      	bne.n	8010f80 <_vfiprintf_r+0x1ac>
 8010f1a:	9b03      	ldr	r3, [sp, #12]
 8010f1c:	1d1a      	adds	r2, r3, #4
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	9203      	str	r2, [sp, #12]
 8010f22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010f26:	3402      	adds	r4, #2
 8010f28:	9305      	str	r3, [sp, #20]
 8010f2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011000 <_vfiprintf_r+0x22c>
 8010f2e:	7821      	ldrb	r1, [r4, #0]
 8010f30:	2203      	movs	r2, #3
 8010f32:	4650      	mov	r0, sl
 8010f34:	f7ef f954 	bl	80001e0 <memchr>
 8010f38:	b138      	cbz	r0, 8010f4a <_vfiprintf_r+0x176>
 8010f3a:	9b04      	ldr	r3, [sp, #16]
 8010f3c:	eba0 000a 	sub.w	r0, r0, sl
 8010f40:	2240      	movs	r2, #64	@ 0x40
 8010f42:	4082      	lsls	r2, r0
 8010f44:	4313      	orrs	r3, r2
 8010f46:	3401      	adds	r4, #1
 8010f48:	9304      	str	r3, [sp, #16]
 8010f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f4e:	4829      	ldr	r0, [pc, #164]	@ (8010ff4 <_vfiprintf_r+0x220>)
 8010f50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010f54:	2206      	movs	r2, #6
 8010f56:	f7ef f943 	bl	80001e0 <memchr>
 8010f5a:	2800      	cmp	r0, #0
 8010f5c:	d03f      	beq.n	8010fde <_vfiprintf_r+0x20a>
 8010f5e:	4b26      	ldr	r3, [pc, #152]	@ (8010ff8 <_vfiprintf_r+0x224>)
 8010f60:	bb1b      	cbnz	r3, 8010faa <_vfiprintf_r+0x1d6>
 8010f62:	9b03      	ldr	r3, [sp, #12]
 8010f64:	3307      	adds	r3, #7
 8010f66:	f023 0307 	bic.w	r3, r3, #7
 8010f6a:	3308      	adds	r3, #8
 8010f6c:	9303      	str	r3, [sp, #12]
 8010f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f70:	443b      	add	r3, r7
 8010f72:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f74:	e76a      	b.n	8010e4c <_vfiprintf_r+0x78>
 8010f76:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f7a:	460c      	mov	r4, r1
 8010f7c:	2001      	movs	r0, #1
 8010f7e:	e7a8      	b.n	8010ed2 <_vfiprintf_r+0xfe>
 8010f80:	2300      	movs	r3, #0
 8010f82:	3401      	adds	r4, #1
 8010f84:	9305      	str	r3, [sp, #20]
 8010f86:	4619      	mov	r1, r3
 8010f88:	f04f 0c0a 	mov.w	ip, #10
 8010f8c:	4620      	mov	r0, r4
 8010f8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f92:	3a30      	subs	r2, #48	@ 0x30
 8010f94:	2a09      	cmp	r2, #9
 8010f96:	d903      	bls.n	8010fa0 <_vfiprintf_r+0x1cc>
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d0c6      	beq.n	8010f2a <_vfiprintf_r+0x156>
 8010f9c:	9105      	str	r1, [sp, #20]
 8010f9e:	e7c4      	b.n	8010f2a <_vfiprintf_r+0x156>
 8010fa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8010fa4:	4604      	mov	r4, r0
 8010fa6:	2301      	movs	r3, #1
 8010fa8:	e7f0      	b.n	8010f8c <_vfiprintf_r+0x1b8>
 8010faa:	ab03      	add	r3, sp, #12
 8010fac:	9300      	str	r3, [sp, #0]
 8010fae:	462a      	mov	r2, r5
 8010fb0:	4b12      	ldr	r3, [pc, #72]	@ (8010ffc <_vfiprintf_r+0x228>)
 8010fb2:	a904      	add	r1, sp, #16
 8010fb4:	4630      	mov	r0, r6
 8010fb6:	f7fc fc95 	bl	800d8e4 <_printf_float>
 8010fba:	4607      	mov	r7, r0
 8010fbc:	1c78      	adds	r0, r7, #1
 8010fbe:	d1d6      	bne.n	8010f6e <_vfiprintf_r+0x19a>
 8010fc0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010fc2:	07d9      	lsls	r1, r3, #31
 8010fc4:	d405      	bmi.n	8010fd2 <_vfiprintf_r+0x1fe>
 8010fc6:	89ab      	ldrh	r3, [r5, #12]
 8010fc8:	059a      	lsls	r2, r3, #22
 8010fca:	d402      	bmi.n	8010fd2 <_vfiprintf_r+0x1fe>
 8010fcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010fce:	f7fd fc59 	bl	800e884 <__retarget_lock_release_recursive>
 8010fd2:	89ab      	ldrh	r3, [r5, #12]
 8010fd4:	065b      	lsls	r3, r3, #25
 8010fd6:	f53f af1f 	bmi.w	8010e18 <_vfiprintf_r+0x44>
 8010fda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010fdc:	e71e      	b.n	8010e1c <_vfiprintf_r+0x48>
 8010fde:	ab03      	add	r3, sp, #12
 8010fe0:	9300      	str	r3, [sp, #0]
 8010fe2:	462a      	mov	r2, r5
 8010fe4:	4b05      	ldr	r3, [pc, #20]	@ (8010ffc <_vfiprintf_r+0x228>)
 8010fe6:	a904      	add	r1, sp, #16
 8010fe8:	4630      	mov	r0, r6
 8010fea:	f7fc ff13 	bl	800de14 <_printf_i>
 8010fee:	e7e4      	b.n	8010fba <_vfiprintf_r+0x1e6>
 8010ff0:	08011e20 	.word	0x08011e20
 8010ff4:	08011e2a 	.word	0x08011e2a
 8010ff8:	0800d8e5 	.word	0x0800d8e5
 8010ffc:	08010db1 	.word	0x08010db1
 8011000:	08011e26 	.word	0x08011e26

08011004 <__swbuf_r>:
 8011004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011006:	460e      	mov	r6, r1
 8011008:	4614      	mov	r4, r2
 801100a:	4605      	mov	r5, r0
 801100c:	b118      	cbz	r0, 8011016 <__swbuf_r+0x12>
 801100e:	6a03      	ldr	r3, [r0, #32]
 8011010:	b90b      	cbnz	r3, 8011016 <__swbuf_r+0x12>
 8011012:	f7fd fabf 	bl	800e594 <__sinit>
 8011016:	69a3      	ldr	r3, [r4, #24]
 8011018:	60a3      	str	r3, [r4, #8]
 801101a:	89a3      	ldrh	r3, [r4, #12]
 801101c:	071a      	lsls	r2, r3, #28
 801101e:	d501      	bpl.n	8011024 <__swbuf_r+0x20>
 8011020:	6923      	ldr	r3, [r4, #16]
 8011022:	b943      	cbnz	r3, 8011036 <__swbuf_r+0x32>
 8011024:	4621      	mov	r1, r4
 8011026:	4628      	mov	r0, r5
 8011028:	f000 f82a 	bl	8011080 <__swsetup_r>
 801102c:	b118      	cbz	r0, 8011036 <__swbuf_r+0x32>
 801102e:	f04f 37ff 	mov.w	r7, #4294967295
 8011032:	4638      	mov	r0, r7
 8011034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011036:	6823      	ldr	r3, [r4, #0]
 8011038:	6922      	ldr	r2, [r4, #16]
 801103a:	1a98      	subs	r0, r3, r2
 801103c:	6963      	ldr	r3, [r4, #20]
 801103e:	b2f6      	uxtb	r6, r6
 8011040:	4283      	cmp	r3, r0
 8011042:	4637      	mov	r7, r6
 8011044:	dc05      	bgt.n	8011052 <__swbuf_r+0x4e>
 8011046:	4621      	mov	r1, r4
 8011048:	4628      	mov	r0, r5
 801104a:	f7ff fe07 	bl	8010c5c <_fflush_r>
 801104e:	2800      	cmp	r0, #0
 8011050:	d1ed      	bne.n	801102e <__swbuf_r+0x2a>
 8011052:	68a3      	ldr	r3, [r4, #8]
 8011054:	3b01      	subs	r3, #1
 8011056:	60a3      	str	r3, [r4, #8]
 8011058:	6823      	ldr	r3, [r4, #0]
 801105a:	1c5a      	adds	r2, r3, #1
 801105c:	6022      	str	r2, [r4, #0]
 801105e:	701e      	strb	r6, [r3, #0]
 8011060:	6962      	ldr	r2, [r4, #20]
 8011062:	1c43      	adds	r3, r0, #1
 8011064:	429a      	cmp	r2, r3
 8011066:	d004      	beq.n	8011072 <__swbuf_r+0x6e>
 8011068:	89a3      	ldrh	r3, [r4, #12]
 801106a:	07db      	lsls	r3, r3, #31
 801106c:	d5e1      	bpl.n	8011032 <__swbuf_r+0x2e>
 801106e:	2e0a      	cmp	r6, #10
 8011070:	d1df      	bne.n	8011032 <__swbuf_r+0x2e>
 8011072:	4621      	mov	r1, r4
 8011074:	4628      	mov	r0, r5
 8011076:	f7ff fdf1 	bl	8010c5c <_fflush_r>
 801107a:	2800      	cmp	r0, #0
 801107c:	d0d9      	beq.n	8011032 <__swbuf_r+0x2e>
 801107e:	e7d6      	b.n	801102e <__swbuf_r+0x2a>

08011080 <__swsetup_r>:
 8011080:	b538      	push	{r3, r4, r5, lr}
 8011082:	4b29      	ldr	r3, [pc, #164]	@ (8011128 <__swsetup_r+0xa8>)
 8011084:	4605      	mov	r5, r0
 8011086:	6818      	ldr	r0, [r3, #0]
 8011088:	460c      	mov	r4, r1
 801108a:	b118      	cbz	r0, 8011094 <__swsetup_r+0x14>
 801108c:	6a03      	ldr	r3, [r0, #32]
 801108e:	b90b      	cbnz	r3, 8011094 <__swsetup_r+0x14>
 8011090:	f7fd fa80 	bl	800e594 <__sinit>
 8011094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011098:	0719      	lsls	r1, r3, #28
 801109a:	d422      	bmi.n	80110e2 <__swsetup_r+0x62>
 801109c:	06da      	lsls	r2, r3, #27
 801109e:	d407      	bmi.n	80110b0 <__swsetup_r+0x30>
 80110a0:	2209      	movs	r2, #9
 80110a2:	602a      	str	r2, [r5, #0]
 80110a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110a8:	81a3      	strh	r3, [r4, #12]
 80110aa:	f04f 30ff 	mov.w	r0, #4294967295
 80110ae:	e033      	b.n	8011118 <__swsetup_r+0x98>
 80110b0:	0758      	lsls	r0, r3, #29
 80110b2:	d512      	bpl.n	80110da <__swsetup_r+0x5a>
 80110b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80110b6:	b141      	cbz	r1, 80110ca <__swsetup_r+0x4a>
 80110b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80110bc:	4299      	cmp	r1, r3
 80110be:	d002      	beq.n	80110c6 <__swsetup_r+0x46>
 80110c0:	4628      	mov	r0, r5
 80110c2:	f7fe fa69 	bl	800f598 <_free_r>
 80110c6:	2300      	movs	r3, #0
 80110c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80110ca:	89a3      	ldrh	r3, [r4, #12]
 80110cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80110d0:	81a3      	strh	r3, [r4, #12]
 80110d2:	2300      	movs	r3, #0
 80110d4:	6063      	str	r3, [r4, #4]
 80110d6:	6923      	ldr	r3, [r4, #16]
 80110d8:	6023      	str	r3, [r4, #0]
 80110da:	89a3      	ldrh	r3, [r4, #12]
 80110dc:	f043 0308 	orr.w	r3, r3, #8
 80110e0:	81a3      	strh	r3, [r4, #12]
 80110e2:	6923      	ldr	r3, [r4, #16]
 80110e4:	b94b      	cbnz	r3, 80110fa <__swsetup_r+0x7a>
 80110e6:	89a3      	ldrh	r3, [r4, #12]
 80110e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80110ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80110f0:	d003      	beq.n	80110fa <__swsetup_r+0x7a>
 80110f2:	4621      	mov	r1, r4
 80110f4:	4628      	mov	r0, r5
 80110f6:	f000 f88b 	bl	8011210 <__smakebuf_r>
 80110fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110fe:	f013 0201 	ands.w	r2, r3, #1
 8011102:	d00a      	beq.n	801111a <__swsetup_r+0x9a>
 8011104:	2200      	movs	r2, #0
 8011106:	60a2      	str	r2, [r4, #8]
 8011108:	6962      	ldr	r2, [r4, #20]
 801110a:	4252      	negs	r2, r2
 801110c:	61a2      	str	r2, [r4, #24]
 801110e:	6922      	ldr	r2, [r4, #16]
 8011110:	b942      	cbnz	r2, 8011124 <__swsetup_r+0xa4>
 8011112:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011116:	d1c5      	bne.n	80110a4 <__swsetup_r+0x24>
 8011118:	bd38      	pop	{r3, r4, r5, pc}
 801111a:	0799      	lsls	r1, r3, #30
 801111c:	bf58      	it	pl
 801111e:	6962      	ldrpl	r2, [r4, #20]
 8011120:	60a2      	str	r2, [r4, #8]
 8011122:	e7f4      	b.n	801110e <__swsetup_r+0x8e>
 8011124:	2000      	movs	r0, #0
 8011126:	e7f7      	b.n	8011118 <__swsetup_r+0x98>
 8011128:	200001a0 	.word	0x200001a0

0801112c <_raise_r>:
 801112c:	291f      	cmp	r1, #31
 801112e:	b538      	push	{r3, r4, r5, lr}
 8011130:	4605      	mov	r5, r0
 8011132:	460c      	mov	r4, r1
 8011134:	d904      	bls.n	8011140 <_raise_r+0x14>
 8011136:	2316      	movs	r3, #22
 8011138:	6003      	str	r3, [r0, #0]
 801113a:	f04f 30ff 	mov.w	r0, #4294967295
 801113e:	bd38      	pop	{r3, r4, r5, pc}
 8011140:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011142:	b112      	cbz	r2, 801114a <_raise_r+0x1e>
 8011144:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011148:	b94b      	cbnz	r3, 801115e <_raise_r+0x32>
 801114a:	4628      	mov	r0, r5
 801114c:	f000 f830 	bl	80111b0 <_getpid_r>
 8011150:	4622      	mov	r2, r4
 8011152:	4601      	mov	r1, r0
 8011154:	4628      	mov	r0, r5
 8011156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801115a:	f000 b817 	b.w	801118c <_kill_r>
 801115e:	2b01      	cmp	r3, #1
 8011160:	d00a      	beq.n	8011178 <_raise_r+0x4c>
 8011162:	1c59      	adds	r1, r3, #1
 8011164:	d103      	bne.n	801116e <_raise_r+0x42>
 8011166:	2316      	movs	r3, #22
 8011168:	6003      	str	r3, [r0, #0]
 801116a:	2001      	movs	r0, #1
 801116c:	e7e7      	b.n	801113e <_raise_r+0x12>
 801116e:	2100      	movs	r1, #0
 8011170:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011174:	4620      	mov	r0, r4
 8011176:	4798      	blx	r3
 8011178:	2000      	movs	r0, #0
 801117a:	e7e0      	b.n	801113e <_raise_r+0x12>

0801117c <raise>:
 801117c:	4b02      	ldr	r3, [pc, #8]	@ (8011188 <raise+0xc>)
 801117e:	4601      	mov	r1, r0
 8011180:	6818      	ldr	r0, [r3, #0]
 8011182:	f7ff bfd3 	b.w	801112c <_raise_r>
 8011186:	bf00      	nop
 8011188:	200001a0 	.word	0x200001a0

0801118c <_kill_r>:
 801118c:	b538      	push	{r3, r4, r5, lr}
 801118e:	4d07      	ldr	r5, [pc, #28]	@ (80111ac <_kill_r+0x20>)
 8011190:	2300      	movs	r3, #0
 8011192:	4604      	mov	r4, r0
 8011194:	4608      	mov	r0, r1
 8011196:	4611      	mov	r1, r2
 8011198:	602b      	str	r3, [r5, #0]
 801119a:	f7f0 fcb5 	bl	8001b08 <_kill>
 801119e:	1c43      	adds	r3, r0, #1
 80111a0:	d102      	bne.n	80111a8 <_kill_r+0x1c>
 80111a2:	682b      	ldr	r3, [r5, #0]
 80111a4:	b103      	cbz	r3, 80111a8 <_kill_r+0x1c>
 80111a6:	6023      	str	r3, [r4, #0]
 80111a8:	bd38      	pop	{r3, r4, r5, pc}
 80111aa:	bf00      	nop
 80111ac:	20006710 	.word	0x20006710

080111b0 <_getpid_r>:
 80111b0:	f7f0 bca2 	b.w	8001af8 <_getpid>

080111b4 <_malloc_usable_size_r>:
 80111b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80111b8:	1f18      	subs	r0, r3, #4
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	bfbc      	itt	lt
 80111be:	580b      	ldrlt	r3, [r1, r0]
 80111c0:	18c0      	addlt	r0, r0, r3
 80111c2:	4770      	bx	lr

080111c4 <__swhatbuf_r>:
 80111c4:	b570      	push	{r4, r5, r6, lr}
 80111c6:	460c      	mov	r4, r1
 80111c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111cc:	2900      	cmp	r1, #0
 80111ce:	b096      	sub	sp, #88	@ 0x58
 80111d0:	4615      	mov	r5, r2
 80111d2:	461e      	mov	r6, r3
 80111d4:	da0d      	bge.n	80111f2 <__swhatbuf_r+0x2e>
 80111d6:	89a3      	ldrh	r3, [r4, #12]
 80111d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80111dc:	f04f 0100 	mov.w	r1, #0
 80111e0:	bf14      	ite	ne
 80111e2:	2340      	movne	r3, #64	@ 0x40
 80111e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80111e8:	2000      	movs	r0, #0
 80111ea:	6031      	str	r1, [r6, #0]
 80111ec:	602b      	str	r3, [r5, #0]
 80111ee:	b016      	add	sp, #88	@ 0x58
 80111f0:	bd70      	pop	{r4, r5, r6, pc}
 80111f2:	466a      	mov	r2, sp
 80111f4:	f000 f848 	bl	8011288 <_fstat_r>
 80111f8:	2800      	cmp	r0, #0
 80111fa:	dbec      	blt.n	80111d6 <__swhatbuf_r+0x12>
 80111fc:	9901      	ldr	r1, [sp, #4]
 80111fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011202:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011206:	4259      	negs	r1, r3
 8011208:	4159      	adcs	r1, r3
 801120a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801120e:	e7eb      	b.n	80111e8 <__swhatbuf_r+0x24>

08011210 <__smakebuf_r>:
 8011210:	898b      	ldrh	r3, [r1, #12]
 8011212:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011214:	079d      	lsls	r5, r3, #30
 8011216:	4606      	mov	r6, r0
 8011218:	460c      	mov	r4, r1
 801121a:	d507      	bpl.n	801122c <__smakebuf_r+0x1c>
 801121c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011220:	6023      	str	r3, [r4, #0]
 8011222:	6123      	str	r3, [r4, #16]
 8011224:	2301      	movs	r3, #1
 8011226:	6163      	str	r3, [r4, #20]
 8011228:	b003      	add	sp, #12
 801122a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801122c:	ab01      	add	r3, sp, #4
 801122e:	466a      	mov	r2, sp
 8011230:	f7ff ffc8 	bl	80111c4 <__swhatbuf_r>
 8011234:	9f00      	ldr	r7, [sp, #0]
 8011236:	4605      	mov	r5, r0
 8011238:	4639      	mov	r1, r7
 801123a:	4630      	mov	r0, r6
 801123c:	f7fe fd5a 	bl	800fcf4 <_malloc_r>
 8011240:	b948      	cbnz	r0, 8011256 <__smakebuf_r+0x46>
 8011242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011246:	059a      	lsls	r2, r3, #22
 8011248:	d4ee      	bmi.n	8011228 <__smakebuf_r+0x18>
 801124a:	f023 0303 	bic.w	r3, r3, #3
 801124e:	f043 0302 	orr.w	r3, r3, #2
 8011252:	81a3      	strh	r3, [r4, #12]
 8011254:	e7e2      	b.n	801121c <__smakebuf_r+0xc>
 8011256:	89a3      	ldrh	r3, [r4, #12]
 8011258:	6020      	str	r0, [r4, #0]
 801125a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801125e:	81a3      	strh	r3, [r4, #12]
 8011260:	9b01      	ldr	r3, [sp, #4]
 8011262:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011266:	b15b      	cbz	r3, 8011280 <__smakebuf_r+0x70>
 8011268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801126c:	4630      	mov	r0, r6
 801126e:	f000 f81d 	bl	80112ac <_isatty_r>
 8011272:	b128      	cbz	r0, 8011280 <__smakebuf_r+0x70>
 8011274:	89a3      	ldrh	r3, [r4, #12]
 8011276:	f023 0303 	bic.w	r3, r3, #3
 801127a:	f043 0301 	orr.w	r3, r3, #1
 801127e:	81a3      	strh	r3, [r4, #12]
 8011280:	89a3      	ldrh	r3, [r4, #12]
 8011282:	431d      	orrs	r5, r3
 8011284:	81a5      	strh	r5, [r4, #12]
 8011286:	e7cf      	b.n	8011228 <__smakebuf_r+0x18>

08011288 <_fstat_r>:
 8011288:	b538      	push	{r3, r4, r5, lr}
 801128a:	4d07      	ldr	r5, [pc, #28]	@ (80112a8 <_fstat_r+0x20>)
 801128c:	2300      	movs	r3, #0
 801128e:	4604      	mov	r4, r0
 8011290:	4608      	mov	r0, r1
 8011292:	4611      	mov	r1, r2
 8011294:	602b      	str	r3, [r5, #0]
 8011296:	f7f0 fc97 	bl	8001bc8 <_fstat>
 801129a:	1c43      	adds	r3, r0, #1
 801129c:	d102      	bne.n	80112a4 <_fstat_r+0x1c>
 801129e:	682b      	ldr	r3, [r5, #0]
 80112a0:	b103      	cbz	r3, 80112a4 <_fstat_r+0x1c>
 80112a2:	6023      	str	r3, [r4, #0]
 80112a4:	bd38      	pop	{r3, r4, r5, pc}
 80112a6:	bf00      	nop
 80112a8:	20006710 	.word	0x20006710

080112ac <_isatty_r>:
 80112ac:	b538      	push	{r3, r4, r5, lr}
 80112ae:	4d06      	ldr	r5, [pc, #24]	@ (80112c8 <_isatty_r+0x1c>)
 80112b0:	2300      	movs	r3, #0
 80112b2:	4604      	mov	r4, r0
 80112b4:	4608      	mov	r0, r1
 80112b6:	602b      	str	r3, [r5, #0]
 80112b8:	f7f0 fc96 	bl	8001be8 <_isatty>
 80112bc:	1c43      	adds	r3, r0, #1
 80112be:	d102      	bne.n	80112c6 <_isatty_r+0x1a>
 80112c0:	682b      	ldr	r3, [r5, #0]
 80112c2:	b103      	cbz	r3, 80112c6 <_isatty_r+0x1a>
 80112c4:	6023      	str	r3, [r4, #0]
 80112c6:	bd38      	pop	{r3, r4, r5, pc}
 80112c8:	20006710 	.word	0x20006710

080112cc <_init>:
 80112cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112ce:	bf00      	nop
 80112d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112d2:	bc08      	pop	{r3}
 80112d4:	469e      	mov	lr, r3
 80112d6:	4770      	bx	lr

080112d8 <_fini>:
 80112d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112da:	bf00      	nop
 80112dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80112de:	bc08      	pop	{r3}
 80112e0:	469e      	mov	lr, r3
 80112e2:	4770      	bx	lr
