
EDIII_Control_Acceso.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7b4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028e0  0800d954  0800d954  0000e954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010234  08010234  000120a0  2**0
                  CONTENTS
  4 .ARM          00000008  08010234  08010234  00011234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801023c  0801023c  000120a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801023c  0801023c  0001123c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010240  08010240  00011240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  08010244  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006948  200000a0  080102e4  000120a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200069e8  080102e4  000129e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000120a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000231a3  00000000  00000000  000120d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005971  00000000  00000000  00035273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020b0  00000000  00000000  0003abe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000194b  00000000  00000000  0003cc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020236  00000000  00000000  0003e5e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e97c  00000000  00000000  0005e819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b1e5d  00000000  00000000  0008d195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013eff2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009128  00000000  00000000  0013f038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00148160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000a0 	.word	0x200000a0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d93c 	.word	0x0800d93c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000a4 	.word	0x200000a4
 80001dc:	0800d93c 	.word	0x0800d93c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	4a07      	ldr	r2, [pc, #28]	@ (80005cc <vApplicationGetIdleTaskMemory+0x2c>)
 80005b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	4a06      	ldr	r2, [pc, #24]	@ (80005d0 <vApplicationGetIdleTaskMemory+0x30>)
 80005b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2280      	movs	r2, #128	@ 0x80
 80005bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	200000bc 	.word	0x200000bc
 80005d0:	20000110 	.word	0x20000110

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005da:	f002 fb29 	bl	8002c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005de:	f000 f861 	bl	80006a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e2:	f000 fa25 	bl	8000a30 <MX_GPIO_Init>
  MX_DMA_Init();
 80005e6:	f000 fa03 	bl	80009f0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005ea:	f000 f9d7 	bl	800099c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005ee:	f000 f917 	bl	8000820 <MX_I2C1_Init>
  MX_SPI3_Init();
 80005f2:	f000 f99d 	bl	8000930 <MX_SPI3_Init>
  MX_FATFS_Init();
 80005f6:	f006 fae5 	bl	8006bc4 <MX_FATFS_Init>
  MX_RTC_Init();
 80005fa:	f000 f93f 	bl	800087c <MX_RTC_Init>
  MX_ADC1_Init();
 80005fe:	f000 f8bd 	bl	800077c <MX_ADC1_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  display_queue = xQueueCreate(1, sizeof(display_state_t));
 8000602:	2200      	movs	r2, #0
 8000604:	2101      	movs	r1, #1
 8000606:	2001      	movs	r0, #1
 8000608:	f009 ff67 	bl	800a4da <xQueueGenericCreate>
 800060c:	4603      	mov	r3, r0
 800060e:	4a1b      	ldr	r2, [pc, #108]	@ (800067c <main+0xa8>)
 8000610:	6013      	str	r3, [r2, #0]
  sequence_queue = xQueueCreate(6, sizeof(char));
 8000612:	2200      	movs	r2, #0
 8000614:	2101      	movs	r1, #1
 8000616:	2006      	movs	r0, #6
 8000618:	f009 ff5f 	bl	800a4da <xQueueGenericCreate>
 800061c:	4603      	mov	r3, r0
 800061e:	4a18      	ldr	r2, [pc, #96]	@ (8000680 <main+0xac>)
 8000620:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(display_manager, "Tarea 05", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 4, NULL);
 8000622:	2300      	movs	r3, #0
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2304      	movs	r3, #4
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2300      	movs	r3, #0
 800062c:	2280      	movs	r2, #128	@ 0x80
 800062e:	4915      	ldr	r1, [pc, #84]	@ (8000684 <main+0xb0>)
 8000630:	4815      	ldr	r0, [pc, #84]	@ (8000688 <main+0xb4>)
 8000632:	f00a fd89 	bl	800b148 <xTaskCreate>
  //xTaskCreate(LockControl, "Tarea 04", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL);
  //xTaskCreate(VoiceProcessing, "Tarea 03", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  xTaskCreate(user_check_task, "Tarea 02", 10 * configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
 8000636:	2300      	movs	r3, #0
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	2302      	movs	r3, #2
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2300      	movs	r3, #0
 8000640:	f44f 62a0 	mov.w	r2, #1280	@ 0x500
 8000644:	4911      	ldr	r1, [pc, #68]	@ (800068c <main+0xb8>)
 8000646:	4812      	ldr	r0, [pc, #72]	@ (8000690 <main+0xbc>)
 8000648:	f00a fd7e 	bl	800b148 <xTaskCreate>
  xTaskCreate(input_sequence_scan, "Tarea 01", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 800064c:	2300      	movs	r3, #0
 800064e:	9301      	str	r3, [sp, #4]
 8000650:	2301      	movs	r3, #1
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	2300      	movs	r3, #0
 8000656:	2280      	movs	r2, #128	@ 0x80
 8000658:	490e      	ldr	r1, [pc, #56]	@ (8000694 <main+0xc0>)
 800065a:	480f      	ldr	r0, [pc, #60]	@ (8000698 <main+0xc4>)
 800065c:	f00a fd74 	bl	800b148 <xTaskCreate>
  xTaskCreate(idle_task, "Tarea Idle", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 8000660:	2300      	movs	r3, #0
 8000662:	9301      	str	r3, [sp, #4]
 8000664:	2300      	movs	r3, #0
 8000666:	9300      	str	r3, [sp, #0]
 8000668:	2300      	movs	r3, #0
 800066a:	2280      	movs	r2, #128	@ 0x80
 800066c:	490b      	ldr	r1, [pc, #44]	@ (800069c <main+0xc8>)
 800066e:	480c      	ldr	r0, [pc, #48]	@ (80006a0 <main+0xcc>)
 8000670:	f00a fd6a 	bl	800b148 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 8000674:	f00a fed6 	bl	800b424 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <main+0xa4>
 800067c:	200004d0 	.word	0x200004d0
 8000680:	200004cc 	.word	0x200004cc
 8000684:	0800d954 	.word	0x0800d954
 8000688:	080027b5 	.word	0x080027b5
 800068c:	0800d960 	.word	0x0800d960
 8000690:	08002b9d 	.word	0x08002b9d
 8000694:	0800d96c 	.word	0x0800d96c
 8000698:	08002a45 	.word	0x08002a45
 800069c:	0800d978 	.word	0x0800d978
 80006a0:	08000b95 	.word	0x08000b95

080006a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b094      	sub	sp, #80	@ 0x50
 80006a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006aa:	f107 0320 	add.w	r3, r7, #32
 80006ae:	2230      	movs	r2, #48	@ 0x30
 80006b0:	2100      	movs	r1, #0
 80006b2:	4618      	mov	r0, r3
 80006b4:	f00c fa3d 	bl	800cb32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b8:	f107 030c 	add.w	r3, r7, #12
 80006bc:	2200      	movs	r2, #0
 80006be:	601a      	str	r2, [r3, #0]
 80006c0:	605a      	str	r2, [r3, #4]
 80006c2:	609a      	str	r2, [r3, #8]
 80006c4:	60da      	str	r2, [r3, #12]
 80006c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	4b29      	ldr	r3, [pc, #164]	@ (8000774 <SystemClock_Config+0xd0>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d0:	4a28      	ldr	r2, [pc, #160]	@ (8000774 <SystemClock_Config+0xd0>)
 80006d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d8:	4b26      	ldr	r3, [pc, #152]	@ (8000774 <SystemClock_Config+0xd0>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b23      	ldr	r3, [pc, #140]	@ (8000778 <SystemClock_Config+0xd4>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006f0:	4a21      	ldr	r2, [pc, #132]	@ (8000778 <SystemClock_Config+0xd4>)
 80006f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000778 <SystemClock_Config+0xd4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000700:	607b      	str	r3, [r7, #4]
 8000702:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000704:	2309      	movs	r3, #9
 8000706:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000708:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800070c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800070e:	2301      	movs	r3, #1
 8000710:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000712:	2302      	movs	r3, #2
 8000714:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000716:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800071a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800071c:	2304      	movs	r3, #4
 800071e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000720:	2340      	movs	r3, #64	@ 0x40
 8000722:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000724:	2302      	movs	r3, #2
 8000726:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000728:	2307      	movs	r3, #7
 800072a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072c:	f107 0320 	add.w	r3, r7, #32
 8000730:	4618      	mov	r0, r3
 8000732:	f003 ff75 	bl	8004620 <HAL_RCC_OscConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800073c:	f000 fa3f 	bl	8000bbe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000740:	230f      	movs	r3, #15
 8000742:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000744:	2302      	movs	r3, #2
 8000746:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000750:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	2102      	movs	r1, #2
 800075c:	4618      	mov	r0, r3
 800075e:	f004 f9d7 	bl	8004b10 <HAL_RCC_ClockConfig>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000768:	f000 fa29 	bl	8000bbe <Error_Handler>
  }
}
 800076c:	bf00      	nop
 800076e:	3750      	adds	r7, #80	@ 0x50
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000782:	463b      	mov	r3, r7
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800078e:	4b21      	ldr	r3, [pc, #132]	@ (8000814 <MX_ADC1_Init+0x98>)
 8000790:	4a21      	ldr	r2, [pc, #132]	@ (8000818 <MX_ADC1_Init+0x9c>)
 8000792:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000794:	4b1f      	ldr	r3, [pc, #124]	@ (8000814 <MX_ADC1_Init+0x98>)
 8000796:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800079a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800079c:	4b1d      	ldr	r3, [pc, #116]	@ (8000814 <MX_ADC1_Init+0x98>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000814 <MX_ADC1_Init+0x98>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <MX_ADC1_Init+0x98>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ae:	4b19      	ldr	r3, [pc, #100]	@ (8000814 <MX_ADC1_Init+0x98>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b6:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <MX_ADC1_Init+0x98>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007bc:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <MX_ADC1_Init+0x98>)
 80007be:	4a17      	ldr	r2, [pc, #92]	@ (800081c <MX_ADC1_Init+0xa0>)
 80007c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c2:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <MX_ADC1_Init+0x98>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <MX_ADC1_Init+0x98>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_ADC1_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_ADC1_Init+0x98>)
 80007d8:	2201      	movs	r2, #1
 80007da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007dc:	480d      	ldr	r0, [pc, #52]	@ (8000814 <MX_ADC1_Init+0x98>)
 80007de:	f002 fa8d 	bl	8002cfc <HAL_ADC_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007e8:	f000 f9e9 	bl	8000bbe <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80007ec:	2308      	movs	r3, #8
 80007ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007f0:	2301      	movs	r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80007f4:	2307      	movs	r3, #7
 80007f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f8:	463b      	mov	r3, r7
 80007fa:	4619      	mov	r1, r3
 80007fc:	4805      	ldr	r0, [pc, #20]	@ (8000814 <MX_ADC1_Init+0x98>)
 80007fe:	f002 fac1 	bl	8002d84 <HAL_ADC_ConfigChannel>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000808:	f000 f9d9 	bl	8000bbe <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000310 	.word	0x20000310
 8000818:	40012000 	.word	0x40012000
 800081c:	0f000001 	.word	0x0f000001

08000820 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <MX_I2C1_Init+0x50>)
 8000826:	4a13      	ldr	r2, [pc, #76]	@ (8000874 <MX_I2C1_Init+0x54>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_I2C1_Init+0x50>)
 800082c:	4a12      	ldr	r2, [pc, #72]	@ (8000878 <MX_I2C1_Init+0x58>)
 800082e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_I2C1_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000836:	4b0e      	ldr	r3, [pc, #56]	@ (8000870 <MX_I2C1_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083c:	4b0c      	ldr	r3, [pc, #48]	@ (8000870 <MX_I2C1_Init+0x50>)
 800083e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000842:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000844:	4b0a      	ldr	r3, [pc, #40]	@ (8000870 <MX_I2C1_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800084a:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <MX_I2C1_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000850:	4b07      	ldr	r3, [pc, #28]	@ (8000870 <MX_I2C1_Init+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000856:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <MX_I2C1_Init+0x50>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	@ (8000870 <MX_I2C1_Init+0x50>)
 800085e:	f003 fa31 	bl	8003cc4 <HAL_I2C_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000868:	f000 f9a9 	bl	8000bbe <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200003b8 	.word	0x200003b8
 8000874:	40005400 	.word	0x40005400
 8000878:	00061a80 	.word	0x00061a80

0800087c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000890:	2300      	movs	r3, #0
 8000892:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000894:	4b24      	ldr	r3, [pc, #144]	@ (8000928 <MX_RTC_Init+0xac>)
 8000896:	4a25      	ldr	r2, [pc, #148]	@ (800092c <MX_RTC_Init+0xb0>)
 8000898:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800089a:	4b23      	ldr	r3, [pc, #140]	@ (8000928 <MX_RTC_Init+0xac>)
 800089c:	2200      	movs	r2, #0
 800089e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008a0:	4b21      	ldr	r3, [pc, #132]	@ (8000928 <MX_RTC_Init+0xac>)
 80008a2:	227f      	movs	r2, #127	@ 0x7f
 80008a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008a6:	4b20      	ldr	r3, [pc, #128]	@ (8000928 <MX_RTC_Init+0xac>)
 80008a8:	22ff      	movs	r2, #255	@ 0xff
 80008aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000928 <MX_RTC_Init+0xac>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000928 <MX_RTC_Init+0xac>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000928 <MX_RTC_Init+0xac>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008be:	481a      	ldr	r0, [pc, #104]	@ (8000928 <MX_RTC_Init+0xac>)
 80008c0:	f004 fc66 	bl	8005190 <HAL_RTC_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80008ca:	f000 f978 	bl	8000bbe <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 80008ce:	230f      	movs	r3, #15
 80008d0:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	2200      	movs	r2, #0
 80008e6:	4619      	mov	r1, r3
 80008e8:	480f      	ldr	r0, [pc, #60]	@ (8000928 <MX_RTC_Init+0xac>)
 80008ea:	f004 fcd4 	bl	8005296 <HAL_RTC_SetTime>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80008f4:	f000 f963 	bl	8000bbe <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80008f8:	2306      	movs	r3, #6
 80008fa:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 80008fc:	2307      	movs	r3, #7
 80008fe:	707b      	strb	r3, [r7, #1]
  sDate.Date = 6;
 8000900:	2306      	movs	r3, #6
 8000902:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 8000904:	2318      	movs	r3, #24
 8000906:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000908:	463b      	mov	r3, r7
 800090a:	2200      	movs	r2, #0
 800090c:	4619      	mov	r1, r3
 800090e:	4806      	ldr	r0, [pc, #24]	@ (8000928 <MX_RTC_Init+0xac>)
 8000910:	f004 fd5b 	bl	80053ca <HAL_RTC_SetDate>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800091a:	f000 f950 	bl	8000bbe <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	3718      	adds	r7, #24
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	2000040c 	.word	0x2000040c
 800092c:	40002800 	.word	0x40002800

08000930 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000934:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <MX_SPI3_Init+0x64>)
 8000936:	4a18      	ldr	r2, [pc, #96]	@ (8000998 <MX_SPI3_Init+0x68>)
 8000938:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800093a:	4b16      	ldr	r3, [pc, #88]	@ (8000994 <MX_SPI3_Init+0x64>)
 800093c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000940:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000942:	4b14      	ldr	r3, [pc, #80]	@ (8000994 <MX_SPI3_Init+0x64>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000948:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <MX_SPI3_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800094e:	4b11      	ldr	r3, [pc, #68]	@ (8000994 <MX_SPI3_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000954:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <MX_SPI3_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800095a:	4b0e      	ldr	r3, [pc, #56]	@ (8000994 <MX_SPI3_Init+0x64>)
 800095c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000960:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000962:	4b0c      	ldr	r3, [pc, #48]	@ (8000994 <MX_SPI3_Init+0x64>)
 8000964:	2210      	movs	r2, #16
 8000966:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000968:	4b0a      	ldr	r3, [pc, #40]	@ (8000994 <MX_SPI3_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800096e:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <MX_SPI3_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000974:	4b07      	ldr	r3, [pc, #28]	@ (8000994 <MX_SPI3_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800097a:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <MX_SPI3_Init+0x64>)
 800097c:	220a      	movs	r2, #10
 800097e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000980:	4804      	ldr	r0, [pc, #16]	@ (8000994 <MX_SPI3_Init+0x64>)
 8000982:	f004 fe47 	bl	8005614 <HAL_SPI_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800098c:	f000 f917 	bl	8000bbe <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	2000042c 	.word	0x2000042c
 8000998:	40003c00 	.word	0x40003c00

0800099c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009a0:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009a2:	4a12      	ldr	r2, [pc, #72]	@ (80009ec <MX_USART2_UART_Init+0x50>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009d2:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <MX_USART2_UART_Init+0x4c>)
 80009d4:	f005 fcea 	bl	80063ac <HAL_UART_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009de:	f000 f8ee 	bl	8000bbe <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000484 	.word	0x20000484
 80009ec:	40004400 	.word	0x40004400

080009f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b0c      	ldr	r3, [pc, #48]	@ (8000a2c <MX_DMA_Init+0x3c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a0b      	ldr	r2, [pc, #44]	@ (8000a2c <MX_DMA_Init+0x3c>)
 8000a00:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b09      	ldr	r3, [pc, #36]	@ (8000a2c <MX_DMA_Init+0x3c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000a12:	2200      	movs	r2, #0
 8000a14:	2105      	movs	r1, #5
 8000a16:	2038      	movs	r0, #56	@ 0x38
 8000a18:	f002 fc8a 	bl	8003330 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a1c:	2038      	movs	r0, #56	@ 0x38
 8000a1e:	f002 fca3 	bl	8003368 <HAL_NVIC_EnableIRQ>

}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800

08000a30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	@ 0x28
 8000a34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	4b4e      	ldr	r3, [pc, #312]	@ (8000b84 <MX_GPIO_Init+0x154>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4e:	4a4d      	ldr	r2, [pc, #308]	@ (8000b84 <MX_GPIO_Init+0x154>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a56:	4b4b      	ldr	r3, [pc, #300]	@ (8000b84 <MX_GPIO_Init+0x154>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	613b      	str	r3, [r7, #16]
 8000a60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4b47      	ldr	r3, [pc, #284]	@ (8000b84 <MX_GPIO_Init+0x154>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a46      	ldr	r2, [pc, #280]	@ (8000b84 <MX_GPIO_Init+0x154>)
 8000a6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b44      	ldr	r3, [pc, #272]	@ (8000b84 <MX_GPIO_Init+0x154>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	4b40      	ldr	r3, [pc, #256]	@ (8000b84 <MX_GPIO_Init+0x154>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a3f      	ldr	r2, [pc, #252]	@ (8000b84 <MX_GPIO_Init+0x154>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b84 <MX_GPIO_Init+0x154>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	4b39      	ldr	r3, [pc, #228]	@ (8000b84 <MX_GPIO_Init+0x154>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a38      	ldr	r2, [pc, #224]	@ (8000b84 <MX_GPIO_Init+0x154>)
 8000aa4:	f043 0302 	orr.w	r3, r3, #2
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b36      	ldr	r3, [pc, #216]	@ (8000b84 <MX_GPIO_Init+0x154>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0302 	and.w	r3, r3, #2
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	603b      	str	r3, [r7, #0]
 8000aba:	4b32      	ldr	r3, [pc, #200]	@ (8000b84 <MX_GPIO_Init+0x154>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a31      	ldr	r2, [pc, #196]	@ (8000b84 <MX_GPIO_Init+0x154>)
 8000ac0:	f043 0308 	orr.w	r3, r3, #8
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b2f      	ldr	r3, [pc, #188]	@ (8000b84 <MX_GPIO_Init+0x154>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0308 	and.w	r3, r3, #8
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2120      	movs	r1, #32
 8000ad6:	482c      	ldr	r0, [pc, #176]	@ (8000b88 <MX_GPIO_Init+0x158>)
 8000ad8:	f003 f8da 	bl	8003c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000adc:	2200      	movs	r2, #0
 8000ade:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8000ae2:	482a      	ldr	r0, [pc, #168]	@ (8000b8c <MX_GPIO_Init+0x15c>)
 8000ae4:	f003 f8d4 	bl	8003c90 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_RESET);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	2104      	movs	r1, #4
 8000aec:	4828      	ldr	r0, [pc, #160]	@ (8000b90 <MX_GPIO_Init+0x160>)
 8000aee:	f003 f8cf 	bl	8003c90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000af2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000af8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	4820      	ldr	r0, [pc, #128]	@ (8000b8c <MX_GPIO_Init+0x15c>)
 8000b0a:	f002 ff25 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b0e:	230f      	movs	r3, #15
 8000b10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	481a      	ldr	r0, [pc, #104]	@ (8000b8c <MX_GPIO_Init+0x15c>)
 8000b22:	f002 ff19 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b26:	2320      	movs	r3, #32
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4812      	ldr	r0, [pc, #72]	@ (8000b88 <MX_GPIO_Init+0x158>)
 8000b3e:	f002 ff0b 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lock_Pin PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8000b42:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8000b46:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b50:	2300      	movs	r3, #0
 8000b52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480c      	ldr	r0, [pc, #48]	@ (8000b8c <MX_GPIO_Init+0x15c>)
 8000b5c:	f002 fefc 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SD_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin;
 8000b60:	2304      	movs	r3, #4
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b64:	2301      	movs	r3, #1
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_SD_GPIO_Port, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	4806      	ldr	r0, [pc, #24]	@ (8000b90 <MX_GPIO_Init+0x160>)
 8000b78:	f002 feee 	bl	8003958 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	@ 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020000 	.word	0x40020000
 8000b8c:	40020800 	.word	0x40020800
 8000b90:	40020c00 	.word	0x40020c00

08000b94 <idle_task>:

/* USER CODE BEGIN 4 */
void idle_task(void *pvParameters){
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
	while(1);
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <idle_task+0x8>

08000ba0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bb0:	d101      	bne.n	8000bb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bb2:	f002 f85f 	bl	8002c74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc2:	b672      	cpsid	i
}
 8000bc4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bc6:	bf00      	nop
 8000bc8:	e7fd      	b.n	8000bc6 <Error_Handler+0x8>
	...

08000bcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	607b      	str	r3, [r7, #4]
 8000bd6:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <HAL_MspInit+0x54>)
 8000bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bda:	4a11      	ldr	r2, [pc, #68]	@ (8000c20 <HAL_MspInit+0x54>)
 8000bdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000be2:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <HAL_MspInit+0x54>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	603b      	str	r3, [r7, #0]
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <HAL_MspInit+0x54>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <HAL_MspInit+0x54>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bfe:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <HAL_MspInit+0x54>)
 8000c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	210f      	movs	r1, #15
 8000c0e:	f06f 0001 	mvn.w	r0, #1
 8000c12:	f002 fb8d 	bl	8003330 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40023800 	.word	0x40023800

08000c24 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	@ 0x28
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a2e      	ldr	r2, [pc, #184]	@ (8000cfc <HAL_ADC_MspInit+0xd8>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d156      	bne.n	8000cf4 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4e:	4a2c      	ldr	r2, [pc, #176]	@ (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c54:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c56:	4b2a      	ldr	r3, [pc, #168]	@ (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c5e:	613b      	str	r3, [r7, #16]
 8000c60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
 8000c66:	4b26      	ldr	r3, [pc, #152]	@ (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a25      	ldr	r2, [pc, #148]	@ (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000c6c:	f043 0302 	orr.w	r3, r3, #2
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b23      	ldr	r3, [pc, #140]	@ (8000d00 <HAL_ADC_MspInit+0xdc>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c82:	2303      	movs	r3, #3
 8000c84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	481c      	ldr	r0, [pc, #112]	@ (8000d04 <HAL_ADC_MspInit+0xe0>)
 8000c92:	f002 fe61 	bl	8003958 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000c96:	4b1c      	ldr	r3, [pc, #112]	@ (8000d08 <HAL_ADC_MspInit+0xe4>)
 8000c98:	4a1c      	ldr	r2, [pc, #112]	@ (8000d0c <HAL_ADC_MspInit+0xe8>)
 8000c9a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d08 <HAL_ADC_MspInit+0xe4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ca2:	4b19      	ldr	r3, [pc, #100]	@ (8000d08 <HAL_ADC_MspInit+0xe4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca8:	4b17      	ldr	r3, [pc, #92]	@ (8000d08 <HAL_ADC_MspInit+0xe4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000cae:	4b16      	ldr	r3, [pc, #88]	@ (8000d08 <HAL_ADC_MspInit+0xe4>)
 8000cb0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cb4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cb6:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <HAL_ADC_MspInit+0xe4>)
 8000cb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cbc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cbe:	4b12      	ldr	r3, [pc, #72]	@ (8000d08 <HAL_ADC_MspInit+0xe4>)
 8000cc0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cc4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000cc6:	4b10      	ldr	r3, [pc, #64]	@ (8000d08 <HAL_ADC_MspInit+0xe4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <HAL_ADC_MspInit+0xe4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d08 <HAL_ADC_MspInit+0xe4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000cd8:	480b      	ldr	r0, [pc, #44]	@ (8000d08 <HAL_ADC_MspInit+0xe4>)
 8000cda:	f002 fb53 	bl	8003384 <HAL_DMA_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000ce4:	f7ff ff6b 	bl	8000bbe <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a07      	ldr	r2, [pc, #28]	@ (8000d08 <HAL_ADC_MspInit+0xe4>)
 8000cec:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cee:	4a06      	ldr	r2, [pc, #24]	@ (8000d08 <HAL_ADC_MspInit+0xe4>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cf4:	bf00      	nop
 8000cf6:	3728      	adds	r7, #40	@ 0x28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40012000 	.word	0x40012000
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020400 	.word	0x40020400
 8000d08:	20000358 	.word	0x20000358
 8000d0c:	40026410 	.word	0x40026410

08000d10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	@ 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a19      	ldr	r2, [pc, #100]	@ (8000d94 <HAL_I2C_MspInit+0x84>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d12b      	bne.n	8000d8a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b18      	ldr	r3, [pc, #96]	@ (8000d98 <HAL_I2C_MspInit+0x88>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3a:	4a17      	ldr	r2, [pc, #92]	@ (8000d98 <HAL_I2C_MspInit+0x88>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <HAL_I2C_MspInit+0x88>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d4e:	23c0      	movs	r3, #192	@ 0xc0
 8000d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d52:	2312      	movs	r3, #18
 8000d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	4619      	mov	r1, r3
 8000d68:	480c      	ldr	r0, [pc, #48]	@ (8000d9c <HAL_I2C_MspInit+0x8c>)
 8000d6a:	f002 fdf5 	bl	8003958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b09      	ldr	r3, [pc, #36]	@ (8000d98 <HAL_I2C_MspInit+0x88>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d76:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <HAL_I2C_MspInit+0x88>)
 8000d78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <HAL_I2C_MspInit+0x88>)
 8000d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d82:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	@ 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40005400 	.word	0x40005400
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020400 	.word	0x40020400

08000da0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da8:	f107 030c 	add.w	r3, r7, #12
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8000df0 <HAL_RTC_MspInit+0x50>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d111      	bne.n	8000de6 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000dc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dca:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f004 f8ef 	bl	8004fb4 <HAL_RCCEx_PeriphCLKConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000ddc:	f7ff feef 	bl	8000bbe <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000de0:	4b04      	ldr	r3, [pc, #16]	@ (8000df4 <HAL_RTC_MspInit+0x54>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000de6:	bf00      	nop
 8000de8:	3720      	adds	r7, #32
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40002800 	.word	0x40002800
 8000df4:	42470e3c 	.word	0x42470e3c

08000df8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	@ 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a19      	ldr	r2, [pc, #100]	@ (8000e7c <HAL_SPI_MspInit+0x84>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d12c      	bne.n	8000e74 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	4b18      	ldr	r3, [pc, #96]	@ (8000e80 <HAL_SPI_MspInit+0x88>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e22:	4a17      	ldr	r2, [pc, #92]	@ (8000e80 <HAL_SPI_MspInit+0x88>)
 8000e24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <HAL_SPI_MspInit+0x88>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	4b11      	ldr	r3, [pc, #68]	@ (8000e80 <HAL_SPI_MspInit+0x88>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3e:	4a10      	ldr	r2, [pc, #64]	@ (8000e80 <HAL_SPI_MspInit+0x88>)
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e46:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <HAL_SPI_MspInit+0x88>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000e52:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	2303      	movs	r3, #3
 8000e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e64:	2306      	movs	r3, #6
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4805      	ldr	r0, [pc, #20]	@ (8000e84 <HAL_SPI_MspInit+0x8c>)
 8000e70:	f002 fd72 	bl	8003958 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e74:	bf00      	nop
 8000e76:	3728      	adds	r7, #40	@ 0x28
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40003c00 	.word	0x40003c00
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020800 	.word	0x40020800

08000e88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	@ 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a19      	ldr	r2, [pc, #100]	@ (8000f0c <HAL_UART_MspInit+0x84>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d12b      	bne.n	8000f02 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b18      	ldr	r3, [pc, #96]	@ (8000f10 <HAL_UART_MspInit+0x88>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	4a17      	ldr	r2, [pc, #92]	@ (8000f10 <HAL_UART_MspInit+0x88>)
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eba:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <HAL_UART_MspInit+0x88>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <HAL_UART_MspInit+0x88>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	4a10      	ldr	r2, [pc, #64]	@ (8000f10 <HAL_UART_MspInit+0x88>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <HAL_UART_MspInit+0x88>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ee2:	230c      	movs	r3, #12
 8000ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ef2:	2307      	movs	r3, #7
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	4619      	mov	r1, r3
 8000efc:	4805      	ldr	r0, [pc, #20]	@ (8000f14 <HAL_UART_MspInit+0x8c>)
 8000efe:	f002 fd2b 	bl	8003958 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	@ 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40004400 	.word	0x40004400
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020000 	.word	0x40020000

08000f18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08e      	sub	sp, #56	@ 0x38
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f24:	2300      	movs	r3, #0
 8000f26:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	4b34      	ldr	r3, [pc, #208]	@ (8001000 <HAL_InitTick+0xe8>)
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f30:	4a33      	ldr	r2, [pc, #204]	@ (8001000 <HAL_InitTick+0xe8>)
 8000f32:	f043 0301 	orr.w	r3, r3, #1
 8000f36:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f38:	4b31      	ldr	r3, [pc, #196]	@ (8001000 <HAL_InitTick+0xe8>)
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3c:	f003 0301 	and.w	r3, r3, #1
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f44:	f107 0210 	add.w	r2, r7, #16
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f003 fffe 	bl	8004f50 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f54:	6a3b      	ldr	r3, [r7, #32]
 8000f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d103      	bne.n	8000f66 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f5e:	f003 ffcf 	bl	8004f00 <HAL_RCC_GetPCLK1Freq>
 8000f62:	6378      	str	r0, [r7, #52]	@ 0x34
 8000f64:	e004      	b.n	8000f70 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f66:	f003 ffcb 	bl	8004f00 <HAL_RCC_GetPCLK1Freq>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f72:	4a24      	ldr	r2, [pc, #144]	@ (8001004 <HAL_InitTick+0xec>)
 8000f74:	fba2 2303 	umull	r2, r3, r2, r3
 8000f78:	0c9b      	lsrs	r3, r3, #18
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000f7e:	4b22      	ldr	r3, [pc, #136]	@ (8001008 <HAL_InitTick+0xf0>)
 8000f80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f84:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000f86:	4b20      	ldr	r3, [pc, #128]	@ (8001008 <HAL_InitTick+0xf0>)
 8000f88:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f8c:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001008 <HAL_InitTick+0xf0>)
 8000f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f92:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000f94:	4b1c      	ldr	r3, [pc, #112]	@ (8001008 <HAL_InitTick+0xf0>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001008 <HAL_InitTick+0xf0>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa0:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <HAL_InitTick+0xf0>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000fa6:	4818      	ldr	r0, [pc, #96]	@ (8001008 <HAL_InitTick+0xf0>)
 8000fa8:	f004 ff8c 	bl	8005ec4 <HAL_TIM_Base_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000fb2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d11b      	bne.n	8000ff2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000fba:	4813      	ldr	r0, [pc, #76]	@ (8001008 <HAL_InitTick+0xf0>)
 8000fbc:	f004 ffdc 	bl	8005f78 <HAL_TIM_Base_Start_IT>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000fc6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d111      	bne.n	8000ff2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fce:	201c      	movs	r0, #28
 8000fd0:	f002 f9ca 	bl	8003368 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b0f      	cmp	r3, #15
 8000fd8:	d808      	bhi.n	8000fec <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	6879      	ldr	r1, [r7, #4]
 8000fde:	201c      	movs	r0, #28
 8000fe0:	f002 f9a6 	bl	8003330 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe4:	4a09      	ldr	r2, [pc, #36]	@ (800100c <HAL_InitTick+0xf4>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	e002      	b.n	8000ff2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ff2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3738      	adds	r7, #56	@ 0x38
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40023800 	.word	0x40023800
 8001004:	431bde83 	.word	0x431bde83
 8001008:	200004d4 	.word	0x200004d4
 800100c:	20000024 	.word	0x20000024

08001010 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001014:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <SDTimer_Handler+0x40>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b00      	cmp	r3, #0
 800101c:	d006      	beq.n	800102c <SDTimer_Handler+0x1c>
    Timer1--;
 800101e:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <SDTimer_Handler+0x40>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	3b01      	subs	r3, #1
 8001026:	b2da      	uxtb	r2, r3
 8001028:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <SDTimer_Handler+0x40>)
 800102a:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 800102c:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <SDTimer_Handler+0x44>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d006      	beq.n	8001044 <SDTimer_Handler+0x34>
    Timer2--;
 8001036:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <SDTimer_Handler+0x44>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	3b01      	subs	r3, #1
 800103e:	b2da      	uxtb	r2, r3
 8001040:	4b04      	ldr	r3, [pc, #16]	@ (8001054 <SDTimer_Handler+0x44>)
 8001042:	701a      	strb	r2, [r3, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	2000051d 	.word	0x2000051d
 8001054:	2000051e 	.word	0x2000051e

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <NMI_Handler+0x4>

08001060 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <HardFault_Handler+0x4>

08001068 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800106c:	bf00      	nop
 800106e:	e7fd      	b.n	800106c <MemManage_Handler+0x4>

08001070 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001074:	bf00      	nop
 8001076:	e7fd      	b.n	8001074 <BusFault_Handler+0x4>

08001078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <UsageFault_Handler+0x4>

08001080 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  FatFsCnt++;
 8001094:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <TIM2_IRQHandler+0x30>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	3301      	adds	r3, #1
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <TIM2_IRQHandler+0x30>)
 80010a0:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10){
 80010a2:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <TIM2_IRQHandler+0x30>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b09      	cmp	r3, #9
 80010aa:	d904      	bls.n	80010b6 <TIM2_IRQHandler+0x26>
	  FatFsCnt = 0;
 80010ac:	4b04      	ldr	r3, [pc, #16]	@ (80010c0 <TIM2_IRQHandler+0x30>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 80010b2:	f7ff ffad 	bl	8001010 <SDTimer_Handler>
  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010b6:	4803      	ldr	r0, [pc, #12]	@ (80010c4 <TIM2_IRQHandler+0x34>)
 80010b8:	f004 ffc0 	bl	800603c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	2000051c 	.word	0x2000051c
 80010c4:	200004d4 	.word	0x200004d4

080010c8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010cc:	4802      	ldr	r0, [pc, #8]	@ (80010d8 <DMA2_Stream0_IRQHandler+0x10>)
 80010ce:	f002 fa07 	bl	80034e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000358 	.word	0x20000358

080010dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return 1;
 80010e0:	2301      	movs	r3, #1
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <_kill>:

int _kill(int pid, int sig)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010f6:	f00b fdc7 	bl	800cc88 <__errno>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2216      	movs	r2, #22
 80010fe:	601a      	str	r2, [r3, #0]
  return -1;
 8001100:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001104:	4618      	mov	r0, r3
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <_exit>:

void _exit (int status)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001114:	f04f 31ff 	mov.w	r1, #4294967295
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ffe7 	bl	80010ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800111e:	bf00      	nop
 8001120:	e7fd      	b.n	800111e <_exit+0x12>

08001122 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b086      	sub	sp, #24
 8001126:	af00      	add	r7, sp, #0
 8001128:	60f8      	str	r0, [r7, #12]
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
 8001132:	e00a      	b.n	800114a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001134:	f3af 8000 	nop.w
 8001138:	4601      	mov	r1, r0
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1c5a      	adds	r2, r3, #1
 800113e:	60ba      	str	r2, [r7, #8]
 8001140:	b2ca      	uxtb	r2, r1
 8001142:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	3301      	adds	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	429a      	cmp	r2, r3
 8001150:	dbf0      	blt.n	8001134 <_read+0x12>
  }

  return len;
 8001152:	687b      	ldr	r3, [r7, #4]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b086      	sub	sp, #24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
 800116c:	e009      	b.n	8001182 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	60ba      	str	r2, [r7, #8]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	3301      	adds	r3, #1
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	429a      	cmp	r2, r3
 8001188:	dbf1      	blt.n	800116e <_write+0x12>
  }
  return len;
 800118a:	687b      	ldr	r3, [r7, #4]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <_close>:

int _close(int file)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800119c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011bc:	605a      	str	r2, [r3, #4]
  return 0;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	370c      	adds	r7, #12
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <_isatty>:

int _isatty(int file)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011d4:	2301      	movs	r3, #1
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b085      	sub	sp, #20
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	60f8      	str	r0, [r7, #12]
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001204:	4a14      	ldr	r2, [pc, #80]	@ (8001258 <_sbrk+0x5c>)
 8001206:	4b15      	ldr	r3, [pc, #84]	@ (800125c <_sbrk+0x60>)
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001210:	4b13      	ldr	r3, [pc, #76]	@ (8001260 <_sbrk+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d102      	bne.n	800121e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <_sbrk+0x64>)
 800121a:	4a12      	ldr	r2, [pc, #72]	@ (8001264 <_sbrk+0x68>)
 800121c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <_sbrk+0x64>)
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	429a      	cmp	r2, r3
 800122a:	d207      	bcs.n	800123c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800122c:	f00b fd2c 	bl	800cc88 <__errno>
 8001230:	4603      	mov	r3, r0
 8001232:	220c      	movs	r2, #12
 8001234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001236:	f04f 33ff 	mov.w	r3, #4294967295
 800123a:	e009      	b.n	8001250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800123c:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <_sbrk+0x64>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001242:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	4a05      	ldr	r2, [pc, #20]	@ (8001260 <_sbrk+0x64>)
 800124c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800124e:	68fb      	ldr	r3, [r7, #12]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20018000 	.word	0x20018000
 800125c:	00000400 	.word	0x00000400
 8001260:	20000520 	.word	0x20000520
 8001264:	200069e8 	.word	0x200069e8

08001268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800126c:	4b06      	ldr	r3, [pc, #24]	@ (8001288 <SystemInit+0x20>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001272:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <SystemInit+0x20>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800128c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001290:	f7ff ffea 	bl	8001268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001294:	480c      	ldr	r0, [pc, #48]	@ (80012c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001296:	490d      	ldr	r1, [pc, #52]	@ (80012cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001298:	4a0d      	ldr	r2, [pc, #52]	@ (80012d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800129c:	e002      	b.n	80012a4 <LoopCopyDataInit>

0800129e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a2:	3304      	adds	r3, #4

080012a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a8:	d3f9      	bcc.n	800129e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012aa:	4a0a      	ldr	r2, [pc, #40]	@ (80012d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012ac:	4c0a      	ldr	r4, [pc, #40]	@ (80012d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b0:	e001      	b.n	80012b6 <LoopFillZerobss>

080012b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b4:	3204      	adds	r2, #4

080012b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b8:	d3fb      	bcc.n	80012b2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80012ba:	f00b fceb 	bl	800cc94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012be:	f7ff f989 	bl	80005d4 <main>
  bx  lr    
 80012c2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012cc:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80012d0:	08010244 	.word	0x08010244
  ldr r2, =_sbss
 80012d4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80012d8:	200069e8 	.word	0x200069e8

080012dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012dc:	e7fe      	b.n	80012dc <ADC_IRQHandler>
	...

080012e0 <send_screen_to_display>:
#include <string.h>
#include <stdio.h>
/*================[Extern variables]======================*/
extern QueueHandle_t display_queue;
/*================[Public functions]=====================*/
void send_screen_to_display(display_state_t current_screen){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
	xQueueSend(display_queue, (void * ) &current_screen, portMAX_DELAY);
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <send_screen_to_display+0x24>)
 80012ec:	6818      	ldr	r0, [r3, #0]
 80012ee:	1df9      	adds	r1, r7, #7
 80012f0:	2300      	movs	r3, #0
 80012f2:	f04f 32ff 	mov.w	r2, #4294967295
 80012f6:	f009 f94b 	bl	800a590 <xQueueGenericSend>
	return;
 80012fa:	bf00      	nop
}
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200004d0 	.word	0x200004d0

08001308 <ssd1306_Reset>:
#include "main.h"
#include "cmsis_os.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af04      	add	r7, sp, #16
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	9302      	str	r3, [sp, #8]
 8001328:	2301      	movs	r3, #1
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	1dfb      	adds	r3, r7, #7
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2301      	movs	r3, #1
 8001332:	2200      	movs	r2, #0
 8001334:	2178      	movs	r1, #120	@ 0x78
 8001336:	4803      	ldr	r0, [pc, #12]	@ (8001344 <ssd1306_WriteCommand+0x2c>)
 8001338:	f002 fe08 	bl	8003f4c <HAL_I2C_Mem_Write>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200003b8 	.word	0x200003b8

08001348 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af04      	add	r7, sp, #16
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b29b      	uxth	r3, r3
 8001356:	f04f 32ff 	mov.w	r2, #4294967295
 800135a:	9202      	str	r2, [sp, #8]
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2301      	movs	r3, #1
 8001364:	2240      	movs	r2, #64	@ 0x40
 8001366:	2178      	movs	r1, #120	@ 0x78
 8001368:	4803      	ldr	r0, [pc, #12]	@ (8001378 <ssd1306_WriteData+0x30>)
 800136a:	f002 fdef 	bl	8003f4c <HAL_I2C_Mem_Write>
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	200003b8 	.word	0x200003b8

0800137c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001380:	f7ff ffc2 	bl	8001308 <ssd1306_Reset>

    // Wait for the screen to boot
    vTaskDelay(100 / portTICK_RATE_MS);
 8001384:	2064      	movs	r0, #100	@ 0x64
 8001386:	f00a f817 	bl	800b3b8 <vTaskDelay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800138a:	2000      	movs	r0, #0
 800138c:	f000 f9d6 	bl	800173c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001390:	2020      	movs	r0, #32
 8001392:	f7ff ffc1 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001396:	2000      	movs	r0, #0
 8001398:	f7ff ffbe 	bl	8001318 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800139c:	20b0      	movs	r0, #176	@ 0xb0
 800139e:	f7ff ffbb 	bl	8001318 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80013a2:	20c8      	movs	r0, #200	@ 0xc8
 80013a4:	f7ff ffb8 	bl	8001318 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80013a8:	2000      	movs	r0, #0
 80013aa:	f7ff ffb5 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80013ae:	2010      	movs	r0, #16
 80013b0:	f7ff ffb2 	bl	8001318 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80013b4:	2040      	movs	r0, #64	@ 0x40
 80013b6:	f7ff ffaf 	bl	8001318 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80013ba:	20ff      	movs	r0, #255	@ 0xff
 80013bc:	f000 f9aa 	bl	8001714 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80013c0:	20a1      	movs	r0, #161	@ 0xa1
 80013c2:	f7ff ffa9 	bl	8001318 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80013c6:	20a6      	movs	r0, #166	@ 0xa6
 80013c8:	f7ff ffa6 	bl	8001318 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80013cc:	20a8      	movs	r0, #168	@ 0xa8
 80013ce:	f7ff ffa3 	bl	8001318 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80013d2:	203f      	movs	r0, #63	@ 0x3f
 80013d4:	f7ff ffa0 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80013d8:	20a4      	movs	r0, #164	@ 0xa4
 80013da:	f7ff ff9d 	bl	8001318 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80013de:	20d3      	movs	r0, #211	@ 0xd3
 80013e0:	f7ff ff9a 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff ff97 	bl	8001318 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80013ea:	20d5      	movs	r0, #213	@ 0xd5
 80013ec:	f7ff ff94 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80013f0:	20f0      	movs	r0, #240	@ 0xf0
 80013f2:	f7ff ff91 	bl	8001318 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80013f6:	20d9      	movs	r0, #217	@ 0xd9
 80013f8:	f7ff ff8e 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80013fc:	2022      	movs	r0, #34	@ 0x22
 80013fe:	f7ff ff8b 	bl	8001318 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001402:	20da      	movs	r0, #218	@ 0xda
 8001404:	f7ff ff88 	bl	8001318 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001408:	2012      	movs	r0, #18
 800140a:	f7ff ff85 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800140e:	20db      	movs	r0, #219	@ 0xdb
 8001410:	f7ff ff82 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001414:	2020      	movs	r0, #32
 8001416:	f7ff ff7f 	bl	8001318 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800141a:	208d      	movs	r0, #141	@ 0x8d
 800141c:	f7ff ff7c 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001420:	2014      	movs	r0, #20
 8001422:	f7ff ff79 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001426:	2001      	movs	r0, #1
 8001428:	f000 f988 	bl	800173c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800142c:	2000      	movs	r0, #0
 800142e:	f000 f80f 	bl	8001450 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001432:	f000 f825 	bl	8001480 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001436:	4b05      	ldr	r3, [pc, #20]	@ (800144c <ssd1306_Init+0xd0>)
 8001438:	2200      	movs	r2, #0
 800143a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800143c:	4b03      	ldr	r3, [pc, #12]	@ (800144c <ssd1306_Init+0xd0>)
 800143e:	2200      	movs	r2, #0
 8001440:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001442:	4b02      	ldr	r3, [pc, #8]	@ (800144c <ssd1306_Init+0xd0>)
 8001444:	2201      	movs	r2, #1
 8001446:	711a      	strb	r2, [r3, #4]
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000924 	.word	0x20000924

08001450 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <ssd1306_Fill+0x14>
 8001460:	2300      	movs	r3, #0
 8001462:	e000      	b.n	8001466 <ssd1306_Fill+0x16>
 8001464:	23ff      	movs	r3, #255	@ 0xff
 8001466:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800146a:	4619      	mov	r1, r3
 800146c:	4803      	ldr	r0, [pc, #12]	@ (800147c <ssd1306_Fill+0x2c>)
 800146e:	f00b fb60 	bl	800cb32 <memset>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000524 	.word	0x20000524

08001480 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001486:	2300      	movs	r3, #0
 8001488:	71fb      	strb	r3, [r7, #7]
 800148a:	e016      	b.n	80014ba <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	3b50      	subs	r3, #80	@ 0x50
 8001490:	b2db      	uxtb	r3, r3
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff40 	bl	8001318 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001498:	2000      	movs	r0, #0
 800149a:	f7ff ff3d 	bl	8001318 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800149e:	2010      	movs	r0, #16
 80014a0:	f7ff ff3a 	bl	8001318 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	01db      	lsls	r3, r3, #7
 80014a8:	4a08      	ldr	r2, [pc, #32]	@ (80014cc <ssd1306_UpdateScreen+0x4c>)
 80014aa:	4413      	add	r3, r2
 80014ac:	2180      	movs	r1, #128	@ 0x80
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff4a 	bl	8001348 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	3301      	adds	r3, #1
 80014b8:	71fb      	strb	r3, [r7, #7]
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	2b07      	cmp	r3, #7
 80014be:	d9e5      	bls.n	800148c <ssd1306_UpdateScreen+0xc>
    }
}
 80014c0:	bf00      	nop
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000524 	.word	0x20000524

080014d0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
 80014da:	460b      	mov	r3, r1
 80014dc:	71bb      	strb	r3, [r7, #6]
 80014de:	4613      	mov	r3, r2
 80014e0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	db3d      	blt.n	8001566 <ssd1306_DrawPixel+0x96>
 80014ea:	79bb      	ldrb	r3, [r7, #6]
 80014ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80014ee:	d83a      	bhi.n	8001566 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80014f0:	797b      	ldrb	r3, [r7, #5]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d11a      	bne.n	800152c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80014f6:	79fa      	ldrb	r2, [r7, #7]
 80014f8:	79bb      	ldrb	r3, [r7, #6]
 80014fa:	08db      	lsrs	r3, r3, #3
 80014fc:	b2d8      	uxtb	r0, r3
 80014fe:	4603      	mov	r3, r0
 8001500:	01db      	lsls	r3, r3, #7
 8001502:	4413      	add	r3, r2
 8001504:	4a1b      	ldr	r2, [pc, #108]	@ (8001574 <ssd1306_DrawPixel+0xa4>)
 8001506:	5cd3      	ldrb	r3, [r2, r3]
 8001508:	b25a      	sxtb	r2, r3
 800150a:	79bb      	ldrb	r3, [r7, #6]
 800150c:	f003 0307 	and.w	r3, r3, #7
 8001510:	2101      	movs	r1, #1
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	b25b      	sxtb	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b259      	sxtb	r1, r3
 800151c:	79fa      	ldrb	r2, [r7, #7]
 800151e:	4603      	mov	r3, r0
 8001520:	01db      	lsls	r3, r3, #7
 8001522:	4413      	add	r3, r2
 8001524:	b2c9      	uxtb	r1, r1
 8001526:	4a13      	ldr	r2, [pc, #76]	@ (8001574 <ssd1306_DrawPixel+0xa4>)
 8001528:	54d1      	strb	r1, [r2, r3]
 800152a:	e01d      	b.n	8001568 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800152c:	79fa      	ldrb	r2, [r7, #7]
 800152e:	79bb      	ldrb	r3, [r7, #6]
 8001530:	08db      	lsrs	r3, r3, #3
 8001532:	b2d8      	uxtb	r0, r3
 8001534:	4603      	mov	r3, r0
 8001536:	01db      	lsls	r3, r3, #7
 8001538:	4413      	add	r3, r2
 800153a:	4a0e      	ldr	r2, [pc, #56]	@ (8001574 <ssd1306_DrawPixel+0xa4>)
 800153c:	5cd3      	ldrb	r3, [r2, r3]
 800153e:	b25a      	sxtb	r2, r3
 8001540:	79bb      	ldrb	r3, [r7, #6]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	2101      	movs	r1, #1
 8001548:	fa01 f303 	lsl.w	r3, r1, r3
 800154c:	b25b      	sxtb	r3, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	b25b      	sxtb	r3, r3
 8001552:	4013      	ands	r3, r2
 8001554:	b259      	sxtb	r1, r3
 8001556:	79fa      	ldrb	r2, [r7, #7]
 8001558:	4603      	mov	r3, r0
 800155a:	01db      	lsls	r3, r3, #7
 800155c:	4413      	add	r3, r2
 800155e:	b2c9      	uxtb	r1, r1
 8001560:	4a04      	ldr	r2, [pc, #16]	@ (8001574 <ssd1306_DrawPixel+0xa4>)
 8001562:	54d1      	strb	r1, [r2, r3]
 8001564:	e000      	b.n	8001568 <ssd1306_DrawPixel+0x98>
        return;
 8001566:	bf00      	nop
    }
}
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000524 	.word	0x20000524

08001578 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001578:	b590      	push	{r4, r7, lr}
 800157a:	b089      	sub	sp, #36	@ 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	4604      	mov	r4, r0
 8001580:	4638      	mov	r0, r7
 8001582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001586:	4623      	mov	r3, r4
 8001588:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	2b1f      	cmp	r3, #31
 800158e:	d902      	bls.n	8001596 <ssd1306_WriteChar+0x1e>
 8001590:	7bfb      	ldrb	r3, [r7, #15]
 8001592:	2b7e      	cmp	r3, #126	@ 0x7e
 8001594:	d901      	bls.n	800159a <ssd1306_WriteChar+0x22>
        return 0;
 8001596:	2300      	movs	r3, #0
 8001598:	e077      	b.n	800168a <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800159a:	4b3e      	ldr	r3, [pc, #248]	@ (8001694 <ssd1306_WriteChar+0x11c>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	783b      	ldrb	r3, [r7, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	2b80      	cmp	r3, #128	@ 0x80
 80015a6:	dc06      	bgt.n	80015b6 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80015a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001694 <ssd1306_WriteChar+0x11c>)
 80015aa:	885b      	ldrh	r3, [r3, #2]
 80015ac:	461a      	mov	r2, r3
 80015ae:	787b      	ldrb	r3, [r7, #1]
 80015b0:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80015b2:	2b40      	cmp	r3, #64	@ 0x40
 80015b4:	dd01      	ble.n	80015ba <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e067      	b.n	800168a <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
 80015be:	e04e      	b.n	800165e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	7bfb      	ldrb	r3, [r7, #15]
 80015c4:	3b20      	subs	r3, #32
 80015c6:	7879      	ldrb	r1, [r7, #1]
 80015c8:	fb01 f303 	mul.w	r3, r1, r3
 80015cc:	4619      	mov	r1, r3
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	440b      	add	r3, r1
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80015da:	2300      	movs	r3, #0
 80015dc:	61bb      	str	r3, [r7, #24]
 80015de:	e036      	b.n	800164e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	69bb      	ldr	r3, [r7, #24]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d013      	beq.n	8001618 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80015f0:	4b28      	ldr	r3, [pc, #160]	@ (8001694 <ssd1306_WriteChar+0x11c>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	4413      	add	r3, r2
 80015fc:	b2d8      	uxtb	r0, r3
 80015fe:	4b25      	ldr	r3, [pc, #148]	@ (8001694 <ssd1306_WriteChar+0x11c>)
 8001600:	885b      	ldrh	r3, [r3, #2]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	b2db      	uxtb	r3, r3
 8001608:	4413      	add	r3, r2
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff ff5d 	bl	80014d0 <ssd1306_DrawPixel>
 8001616:	e017      	b.n	8001648 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001618:	4b1e      	ldr	r3, [pc, #120]	@ (8001694 <ssd1306_WriteChar+0x11c>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	b2da      	uxtb	r2, r3
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	b2db      	uxtb	r3, r3
 8001622:	4413      	add	r3, r2
 8001624:	b2d8      	uxtb	r0, r3
 8001626:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <ssd1306_WriteChar+0x11c>)
 8001628:	885b      	ldrh	r3, [r3, #2]
 800162a:	b2da      	uxtb	r2, r3
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	4413      	add	r3, r2
 8001632:	b2d9      	uxtb	r1, r3
 8001634:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf0c      	ite	eq
 800163c:	2301      	moveq	r3, #1
 800163e:	2300      	movne	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	461a      	mov	r2, r3
 8001644:	f7ff ff44 	bl	80014d0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	3301      	adds	r3, #1
 800164c:	61bb      	str	r3, [r7, #24]
 800164e:	783b      	ldrb	r3, [r7, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	4293      	cmp	r3, r2
 8001656:	d3c3      	bcc.n	80015e0 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	3301      	adds	r3, #1
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	787b      	ldrb	r3, [r7, #1]
 8001660:	461a      	mov	r2, r3
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	4293      	cmp	r3, r2
 8001666:	d3ab      	bcc.n	80015c0 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001668:	4b0a      	ldr	r3, [pc, #40]	@ (8001694 <ssd1306_WriteChar+0x11c>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	68ba      	ldr	r2, [r7, #8]
 800166e:	2a00      	cmp	r2, #0
 8001670:	d005      	beq.n	800167e <ssd1306_WriteChar+0x106>
 8001672:	68b9      	ldr	r1, [r7, #8]
 8001674:	7bfa      	ldrb	r2, [r7, #15]
 8001676:	3a20      	subs	r2, #32
 8001678:	440a      	add	r2, r1
 800167a:	7812      	ldrb	r2, [r2, #0]
 800167c:	e000      	b.n	8001680 <ssd1306_WriteChar+0x108>
 800167e:	783a      	ldrb	r2, [r7, #0]
 8001680:	4413      	add	r3, r2
 8001682:	b29a      	uxth	r2, r3
 8001684:	4b03      	ldr	r3, [pc, #12]	@ (8001694 <ssd1306_WriteChar+0x11c>)
 8001686:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001688:	7bfb      	ldrb	r3, [r7, #15]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3724      	adds	r7, #36	@ 0x24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd90      	pop	{r4, r7, pc}
 8001692:	bf00      	nop
 8001694:	20000924 	.word	0x20000924

08001698 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af02      	add	r7, sp, #8
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	4638      	mov	r0, r7
 80016a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80016a6:	e013      	b.n	80016d0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	7818      	ldrb	r0, [r3, #0]
 80016ac:	7e3b      	ldrb	r3, [r7, #24]
 80016ae:	9300      	str	r3, [sp, #0]
 80016b0:	463b      	mov	r3, r7
 80016b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016b4:	f7ff ff60 	bl	8001578 <ssd1306_WriteChar>
 80016b8:	4603      	mov	r3, r0
 80016ba:	461a      	mov	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d002      	beq.n	80016ca <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	e008      	b.n	80016dc <ssd1306_WriteString+0x44>
        }
        str++;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	3301      	adds	r3, #1
 80016ce:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1e7      	bne.n	80016a8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	781b      	ldrb	r3, [r3, #0]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	460a      	mov	r2, r1
 80016ee:	71fb      	strb	r3, [r7, #7]
 80016f0:	4613      	mov	r3, r2
 80016f2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80016f4:	79fb      	ldrb	r3, [r7, #7]
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	4b05      	ldr	r3, [pc, #20]	@ (8001710 <ssd1306_SetCursor+0x2c>)
 80016fa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80016fc:	79bb      	ldrb	r3, [r7, #6]
 80016fe:	b29a      	uxth	r2, r3
 8001700:	4b03      	ldr	r3, [pc, #12]	@ (8001710 <ssd1306_SetCursor+0x2c>)
 8001702:	805a      	strh	r2, [r3, #2]
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	20000924 	.word	0x20000924

08001714 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800171e:	2381      	movs	r3, #129	@ 0x81
 8001720:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fdf7 	bl	8001318 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fdf3 	bl	8001318 <ssd1306_WriteCommand>
}
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800174c:	23af      	movs	r3, #175	@ 0xaf
 800174e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001750:	4b08      	ldr	r3, [pc, #32]	@ (8001774 <ssd1306_SetDisplayOn+0x38>)
 8001752:	2201      	movs	r2, #1
 8001754:	715a      	strb	r2, [r3, #5]
 8001756:	e004      	b.n	8001762 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001758:	23ae      	movs	r3, #174	@ 0xae
 800175a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800175c:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <ssd1306_SetDisplayOn+0x38>)
 800175e:	2200      	movs	r2, #0
 8001760:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fdd7 	bl	8001318 <ssd1306_WriteCommand>
}
 800176a:	bf00      	nop
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000924 	.word	0x20000924

08001778 <set_row>:
	      	  	  	  	  		  	  	  	  {'4', '5', '6', 'B'},
											  {'7', '8', '9', 'C'},
											  {'*', '0', '#', 'D'} };

/*================[Private functions]====================*/
static void set_row(row_t row){
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_ROW, row, GPIO_PIN_SET);
 8001782:	88fb      	ldrh	r3, [r7, #6]
 8001784:	2201      	movs	r2, #1
 8001786:	4619      	mov	r1, r3
 8001788:	4803      	ldr	r0, [pc, #12]	@ (8001798 <set_row+0x20>)
 800178a:	f002 fa81 	bl	8003c90 <HAL_GPIO_WritePin>
	return;
 800178e:	bf00      	nop
}
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40020800 	.word	0x40020800

0800179c <reset_row>:

static void reset_row(row_t row){
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIO_ROW, row, GPIO_PIN_RESET);
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	2200      	movs	r2, #0
 80017aa:	4619      	mov	r1, r3
 80017ac:	4803      	ldr	r0, [pc, #12]	@ (80017bc <reset_row+0x20>)
 80017ae:	f002 fa6f 	bl	8003c90 <HAL_GPIO_WritePin>
	return;
 80017b2:	bf00      	nop
}
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40020800 	.word	0x40020800

080017c0 <read_col>:

static col_state read_col(col_t col){
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	col_state state;
	if(HAL_GPIO_ReadPin(GPIO_COL, col) == GPIO_PIN_SET){
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	4619      	mov	r1, r3
 80017d0:	480f      	ldr	r0, [pc, #60]	@ (8001810 <read_col+0x50>)
 80017d2:	f002 fa45 	bl	8003c60 <HAL_GPIO_ReadPin>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d111      	bne.n	8001800 <read_col+0x40>
		vTaskDelay( 20 /portTICK_RATE_MS);
 80017dc:	2014      	movs	r0, #20
 80017de:	f009 fdeb 	bl	800b3b8 <vTaskDelay>
		if(HAL_GPIO_ReadPin(GPIO_COL, col) == GPIO_PIN_SET){
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	4619      	mov	r1, r3
 80017e8:	4809      	ldr	r0, [pc, #36]	@ (8001810 <read_col+0x50>)
 80017ea:	f002 fa39 	bl	8003c60 <HAL_GPIO_ReadPin>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d102      	bne.n	80017fa <read_col+0x3a>
			state = ACTIVE_COL;
 80017f4:	2301      	movs	r3, #1
 80017f6:	73fb      	strb	r3, [r7, #15]
 80017f8:	e004      	b.n	8001804 <read_col+0x44>
		}
		else{
			state = IDLE_COL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	73fb      	strb	r3, [r7, #15]
 80017fe:	e001      	b.n	8001804 <read_col+0x44>
		}
	}
	else{
		state = IDLE_COL;
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]
	}
	return state;
 8001804:	7bfb      	ldrb	r3, [r7, #15]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40020800 	.word	0x40020800

08001814 <read_keypad>:

/*================[Public functions]=====================*/
uint8_t read_keypad(void){
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
	uint8_t key_pressed = 0;
 800181a:	2300      	movs	r3, #0
 800181c:	717b      	strb	r3, [r7, #5]
	for(uint8_t i = 0; i < ROW_LENGTH; i++){
 800181e:	2300      	movs	r3, #0
 8001820:	71fb      	strb	r3, [r7, #7]
 8001822:	e036      	b.n	8001892 <read_keypad+0x7e>
		set_row(keypad_rows[i]);
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	4a1f      	ldr	r2, [pc, #124]	@ (80018a4 <read_keypad+0x90>)
 8001828:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ffa3 	bl	8001778 <set_row>
		for(uint8_t j = 0; j < COL_LENGTH; j++){
 8001832:	2300      	movs	r3, #0
 8001834:	71bb      	strb	r3, [r7, #6]
 8001836:	e01f      	b.n	8001878 <read_keypad+0x64>
			if(read_col(keypad_cols[j]) == ACTIVE_COL){
 8001838:	79bb      	ldrb	r3, [r7, #6]
 800183a:	4a1b      	ldr	r2, [pc, #108]	@ (80018a8 <read_keypad+0x94>)
 800183c:	5cd3      	ldrb	r3, [r2, r3]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ffbe 	bl	80017c0 <read_col>
 8001844:	4603      	mov	r3, r0
 8001846:	2b01      	cmp	r3, #1
 8001848:	d113      	bne.n	8001872 <read_keypad+0x5e>
				key_pressed = (uint8_t) keypad_chars[i][j];
 800184a:	79fa      	ldrb	r2, [r7, #7]
 800184c:	79bb      	ldrb	r3, [r7, #6]
 800184e:	4917      	ldr	r1, [pc, #92]	@ (80018ac <read_keypad+0x98>)
 8001850:	0092      	lsls	r2, r2, #2
 8001852:	440a      	add	r2, r1
 8001854:	4413      	add	r3, r2
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	717b      	strb	r3, [r7, #5]
				reset_row(keypad_rows[i]);
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	4a11      	ldr	r2, [pc, #68]	@ (80018a4 <read_keypad+0x90>)
 800185e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ff9a 	bl	800179c <reset_row>
				vTaskDelay( 100 /portTICK_RATE_MS);
 8001868:	2064      	movs	r0, #100	@ 0x64
 800186a:	f009 fda5 	bl	800b3b8 <vTaskDelay>
				return key_pressed;
 800186e:	797b      	ldrb	r3, [r7, #5]
 8001870:	e013      	b.n	800189a <read_keypad+0x86>
		for(uint8_t j = 0; j < COL_LENGTH; j++){
 8001872:	79bb      	ldrb	r3, [r7, #6]
 8001874:	3301      	adds	r3, #1
 8001876:	71bb      	strb	r3, [r7, #6]
 8001878:	79bb      	ldrb	r3, [r7, #6]
 800187a:	2b03      	cmp	r3, #3
 800187c:	d9dc      	bls.n	8001838 <read_keypad+0x24>
			}
		}
		reset_row(keypad_rows[i]);
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	4a08      	ldr	r2, [pc, #32]	@ (80018a4 <read_keypad+0x90>)
 8001882:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff88 	bl	800179c <reset_row>
	for(uint8_t i = 0; i < ROW_LENGTH; i++){
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	3301      	adds	r3, #1
 8001890:	71fb      	strb	r3, [r7, #7]
 8001892:	79fb      	ldrb	r3, [r7, #7]
 8001894:	2b03      	cmp	r3, #3
 8001896:	d9c5      	bls.n	8001824 <read_keypad+0x10>
	}
	return key_pressed;
 8001898:	797b      	ldrb	r3, [r7, #5]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000004 	.word	0x20000004
 80018a8:	2000000c 	.word	0x2000000c
 80018ac:	20000010 	.word	0x20000010

080018b0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	2104      	movs	r1, #4
 80018b8:	4803      	ldr	r0, [pc, #12]	@ (80018c8 <SELECT+0x18>)
 80018ba:	f002 f9e9 	bl	8003c90 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80018be:	2001      	movs	r0, #1
 80018c0:	f001 f9f8 	bl	8002cb4 <HAL_Delay>
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40020c00 	.word	0x40020c00

080018cc <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80018d0:	2201      	movs	r2, #1
 80018d2:	2104      	movs	r1, #4
 80018d4:	4803      	ldr	r0, [pc, #12]	@ (80018e4 <DESELECT+0x18>)
 80018d6:	f002 f9db 	bl	8003c90 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80018da:	2001      	movs	r0, #1
 80018dc:	f001 f9ea 	bl	8002cb4 <HAL_Delay>
}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40020c00 	.word	0x40020c00

080018e8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80018f2:	bf00      	nop
 80018f4:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <SPI_TxByte+0x30>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d1f8      	bne.n	80018f4 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8001902:	1df9      	adds	r1, r7, #7
 8001904:	2364      	movs	r3, #100	@ 0x64
 8001906:	2201      	movs	r2, #1
 8001908:	4803      	ldr	r0, [pc, #12]	@ (8001918 <SPI_TxByte+0x30>)
 800190a:	f003 ff0c 	bl	8005726 <HAL_SPI_Transmit>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	2000042c 	.word	0x2000042c

0800191c <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001928:	bf00      	nop
 800192a:	4b08      	ldr	r3, [pc, #32]	@ (800194c <SPI_TxBuffer+0x30>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	2b02      	cmp	r3, #2
 8001936:	d1f8      	bne.n	800192a <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001938:	887a      	ldrh	r2, [r7, #2]
 800193a:	2364      	movs	r3, #100	@ 0x64
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	4803      	ldr	r0, [pc, #12]	@ (800194c <SPI_TxBuffer+0x30>)
 8001940:	f003 fef1 	bl	8005726 <HAL_SPI_Transmit>
}
 8001944:	bf00      	nop
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2000042c 	.word	0x2000042c

08001950 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8001956:	23ff      	movs	r3, #255	@ 0xff
 8001958:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800195a:	bf00      	nop
 800195c:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <SPI_RxByte+0x34>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b02      	cmp	r3, #2
 8001968:	d1f8      	bne.n	800195c <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800196a:	1dba      	adds	r2, r7, #6
 800196c:	1df9      	adds	r1, r7, #7
 800196e:	2364      	movs	r3, #100	@ 0x64
 8001970:	9300      	str	r3, [sp, #0]
 8001972:	2301      	movs	r3, #1
 8001974:	4803      	ldr	r0, [pc, #12]	@ (8001984 <SPI_RxByte+0x34>)
 8001976:	f004 f819 	bl	80059ac <HAL_SPI_TransmitReceive>

	return data;
 800197a:	79bb      	ldrb	r3, [r7, #6]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3708      	adds	r7, #8
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	2000042c 	.word	0x2000042c

08001988 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8001990:	f7ff ffde 	bl	8001950 <SPI_RxByte>
 8001994:	4603      	mov	r3, r0
 8001996:	461a      	mov	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	701a      	strb	r2, [r3, #0]
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80019aa:	4b0a      	ldr	r3, [pc, #40]	@ (80019d4 <SD_ReadyWait+0x30>)
 80019ac:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80019b0:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80019b2:	f7ff ffcd 	bl	8001950 <SPI_RxByte>
 80019b6:	4603      	mov	r3, r0
 80019b8:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	2bff      	cmp	r3, #255	@ 0xff
 80019be:	d004      	beq.n	80019ca <SD_ReadyWait+0x26>
 80019c0:	4b04      	ldr	r3, [pc, #16]	@ (80019d4 <SD_ReadyWait+0x30>)
 80019c2:	881b      	ldrh	r3, [r3, #0]
 80019c4:	b29b      	uxth	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f3      	bne.n	80019b2 <SD_ReadyWait+0xe>

	return res;
 80019ca:	79fb      	ldrb	r3, [r7, #7]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	2000051e 	.word	0x2000051e

080019d8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80019de:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80019e2:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80019e4:	f7ff ff72 	bl	80018cc <DESELECT>
	for(int i = 0; i < 10; i++)
 80019e8:	2300      	movs	r3, #0
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	e005      	b.n	80019fa <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 80019ee:	20ff      	movs	r0, #255	@ 0xff
 80019f0:	f7ff ff7a 	bl	80018e8 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	3301      	adds	r3, #1
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2b09      	cmp	r3, #9
 80019fe:	ddf6      	ble.n	80019ee <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001a00:	f7ff ff56 	bl	80018b0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8001a04:	2340      	movs	r3, #64	@ 0x40
 8001a06:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001a18:	2395      	movs	r3, #149	@ 0x95
 8001a1a:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001a1c:	463b      	mov	r3, r7
 8001a1e:	2106      	movs	r1, #6
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff7b 	bl	800191c <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8001a26:	e002      	b.n	8001a2e <SD_PowerOn+0x56>
	{
		cnt--;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001a2e:	f7ff ff8f 	bl	8001950 <SPI_RxByte>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d002      	beq.n	8001a3e <SD_PowerOn+0x66>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f4      	bne.n	8001a28 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001a3e:	f7ff ff45 	bl	80018cc <DESELECT>
	SPI_TxByte(0XFF);
 8001a42:	20ff      	movs	r0, #255	@ 0xff
 8001a44:	f7ff ff50 	bl	80018e8 <SPI_TxByte>

	PowerFlag = 1;
 8001a48:	4b03      	ldr	r3, [pc, #12]	@ (8001a58 <SD_PowerOn+0x80>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	2000092b 	.word	0x2000092b

08001a5c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001a60:	4b03      	ldr	r3, [pc, #12]	@ (8001a70 <SD_PowerOff+0x14>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	701a      	strb	r2, [r3, #0]
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	2000092b 	.word	0x2000092b

08001a74 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001a78:	4b03      	ldr	r3, [pc, #12]	@ (8001a88 <SD_CheckPower+0x14>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	2000092b 	.word	0x2000092b

08001a8c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8001a96:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <SD_RxDataBlock+0x5c>)
 8001a98:	22c8      	movs	r2, #200	@ 0xc8
 8001a9a:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001a9c:	f7ff ff58 	bl	8001950 <SPI_RxByte>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	2bff      	cmp	r3, #255	@ 0xff
 8001aa8:	d104      	bne.n	8001ab4 <SD_RxDataBlock+0x28>
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae8 <SD_RxDataBlock+0x5c>)
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f3      	bne.n	8001a9c <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
 8001ab6:	2bfe      	cmp	r3, #254	@ 0xfe
 8001ab8:	d001      	beq.n	8001abe <SD_RxDataBlock+0x32>
 8001aba:	2300      	movs	r3, #0
 8001abc:	e00f      	b.n	8001ade <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	607a      	str	r2, [r7, #4]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff ff5f 	bl	8001988 <SPI_RxBytePtr>
	} while(len--);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	1e5a      	subs	r2, r3, #1
 8001ace:	603a      	str	r2, [r7, #0]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1f4      	bne.n	8001abe <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8001ad4:	f7ff ff3c 	bl	8001950 <SPI_RxByte>
	SPI_RxByte();
 8001ad8:	f7ff ff3a 	bl	8001950 <SPI_RxByte>

	return TRUE;
 8001adc:	2301      	movs	r3, #1
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2000051d 	.word	0x2000051d

08001aec <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001afc:	f7ff ff52 	bl	80019a4 <SD_ReadyWait>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2bff      	cmp	r3, #255	@ 0xff
 8001b04:	d001      	beq.n	8001b0a <SD_TxDataBlock+0x1e>
 8001b06:	2300      	movs	r3, #0
 8001b08:	e02f      	b.n	8001b6a <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8001b0a:	78fb      	ldrb	r3, [r7, #3]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff feeb 	bl	80018e8 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	2bfd      	cmp	r3, #253	@ 0xfd
 8001b16:	d020      	beq.n	8001b5a <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8001b18:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff fefd 	bl	800191c <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001b22:	f7ff ff15 	bl	8001950 <SPI_RxByte>
		SPI_RxByte();
 8001b26:	f7ff ff13 	bl	8001950 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8001b2a:	e00b      	b.n	8001b44 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001b2c:	f7ff ff10 	bl	8001950 <SPI_RxByte>
 8001b30:	4603      	mov	r3, r0
 8001b32:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	2b05      	cmp	r3, #5
 8001b3c:	d006      	beq.n	8001b4c <SD_TxDataBlock+0x60>
			i++;
 8001b3e:	7bbb      	ldrb	r3, [r7, #14]
 8001b40:	3301      	adds	r3, #1
 8001b42:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001b44:	7bbb      	ldrb	r3, [r7, #14]
 8001b46:	2b40      	cmp	r3, #64	@ 0x40
 8001b48:	d9f0      	bls.n	8001b2c <SD_TxDataBlock+0x40>
 8001b4a:	e000      	b.n	8001b4e <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001b4c:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001b4e:	bf00      	nop
 8001b50:	f7ff fefe 	bl	8001950 <SPI_RxByte>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0fa      	beq.n	8001b50 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	f003 031f 	and.w	r3, r3, #31
 8001b60:	2b05      	cmp	r3, #5
 8001b62:	d101      	bne.n	8001b68 <SD_TxDataBlock+0x7c>
 8001b64:	2301      	movs	r3, #1
 8001b66:	e000      	b.n	8001b6a <SD_TxDataBlock+0x7e>

	return FALSE;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b084      	sub	sp, #16
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	6039      	str	r1, [r7, #0]
 8001b7c:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001b7e:	f7ff ff11 	bl	80019a4 <SD_ReadyWait>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2bff      	cmp	r3, #255	@ 0xff
 8001b86:	d001      	beq.n	8001b8c <SD_SendCmd+0x1a>
 8001b88:	23ff      	movs	r3, #255	@ 0xff
 8001b8a:	e042      	b.n	8001c12 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff feaa 	bl	80018e8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	0e1b      	lsrs	r3, r3, #24
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff fea4 	bl	80018e8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	0c1b      	lsrs	r3, r3, #16
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fe9e 	bl	80018e8 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	0a1b      	lsrs	r3, r3, #8
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff fe98 	bl	80018e8 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fe93 	bl	80018e8 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	2b40      	cmp	r3, #64	@ 0x40
 8001bc6:	d102      	bne.n	8001bce <SD_SendCmd+0x5c>
 8001bc8:	2395      	movs	r3, #149	@ 0x95
 8001bca:	73fb      	strb	r3, [r7, #15]
 8001bcc:	e007      	b.n	8001bde <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	2b48      	cmp	r3, #72	@ 0x48
 8001bd2:	d102      	bne.n	8001bda <SD_SendCmd+0x68>
 8001bd4:	2387      	movs	r3, #135	@ 0x87
 8001bd6:	73fb      	strb	r3, [r7, #15]
 8001bd8:	e001      	b.n	8001bde <SD_SendCmd+0x6c>
	else crc = 1;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001bde:	7bfb      	ldrb	r3, [r7, #15]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fe81 	bl	80018e8 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	2b4c      	cmp	r3, #76	@ 0x4c
 8001bea:	d101      	bne.n	8001bf0 <SD_SendCmd+0x7e>
 8001bec:	f7ff feb0 	bl	8001950 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001bf0:	230a      	movs	r3, #10
 8001bf2:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001bf4:	f7ff feac 	bl	8001950 <SPI_RxByte>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001bfc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	da05      	bge.n	8001c10 <SD_SendCmd+0x9e>
 8001c04:	7bbb      	ldrb	r3, [r7, #14]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	73bb      	strb	r3, [r7, #14]
 8001c0a:	7bbb      	ldrb	r3, [r7, #14]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1f1      	bne.n	8001bf4 <SD_SendCmd+0x82>

	return res;
 8001c10:	7b7b      	ldrb	r3, [r7, #13]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001c1c:	b590      	push	{r4, r7, lr}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <SD_disk_initialize+0x14>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0d6      	b.n	8001dde <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001c30:	4b6d      	ldr	r3, [pc, #436]	@ (8001de8 <SD_disk_initialize+0x1cc>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <SD_disk_initialize+0x2a>
 8001c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8001de8 <SD_disk_initialize+0x1cc>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	e0cb      	b.n	8001dde <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8001c46:	f7ff fec7 	bl	80019d8 <SD_PowerOn>

	/* slave select */
	SELECT();
 8001c4a:	f7ff fe31 	bl	80018b0 <SELECT>

	/* check disk type */
	type = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001c52:	2100      	movs	r1, #0
 8001c54:	2040      	movs	r0, #64	@ 0x40
 8001c56:	f7ff ff8c 	bl	8001b72 <SD_SendCmd>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	f040 80a6 	bne.w	8001dae <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001c62:	4b62      	ldr	r3, [pc, #392]	@ (8001dec <SD_disk_initialize+0x1d0>)
 8001c64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001c68:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001c6a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001c6e:	2048      	movs	r0, #72	@ 0x48
 8001c70:	f7ff ff7f 	bl	8001b72 <SD_SendCmd>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d158      	bne.n	8001d2c <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	73fb      	strb	r3, [r7, #15]
 8001c7e:	e00c      	b.n	8001c9a <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001c80:	7bfc      	ldrb	r4, [r7, #15]
 8001c82:	f7ff fe65 	bl	8001950 <SPI_RxByte>
 8001c86:	4603      	mov	r3, r0
 8001c88:	461a      	mov	r2, r3
 8001c8a:	f104 0310 	add.w	r3, r4, #16
 8001c8e:	443b      	add	r3, r7
 8001c90:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	3301      	adds	r3, #1
 8001c98:	73fb      	strb	r3, [r7, #15]
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d9ef      	bls.n	8001c80 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001ca0:	7abb      	ldrb	r3, [r7, #10]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	f040 8083 	bne.w	8001dae <SD_disk_initialize+0x192>
 8001ca8:	7afb      	ldrb	r3, [r7, #11]
 8001caa:	2baa      	cmp	r3, #170	@ 0xaa
 8001cac:	d17f      	bne.n	8001dae <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001cae:	2100      	movs	r1, #0
 8001cb0:	2077      	movs	r0, #119	@ 0x77
 8001cb2:	f7ff ff5e 	bl	8001b72 <SD_SendCmd>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d807      	bhi.n	8001ccc <SD_disk_initialize+0xb0>
 8001cbc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001cc0:	2069      	movs	r0, #105	@ 0x69
 8001cc2:	f7ff ff56 	bl	8001b72 <SD_SendCmd>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d005      	beq.n	8001cd8 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8001ccc:	4b47      	ldr	r3, [pc, #284]	@ (8001dec <SD_disk_initialize+0x1d0>)
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1eb      	bne.n	8001cae <SD_disk_initialize+0x92>
 8001cd6:	e000      	b.n	8001cda <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001cd8:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001cda:	4b44      	ldr	r3, [pc, #272]	@ (8001dec <SD_disk_initialize+0x1d0>)
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d064      	beq.n	8001dae <SD_disk_initialize+0x192>
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	207a      	movs	r0, #122	@ 0x7a
 8001ce8:	f7ff ff43 	bl	8001b72 <SD_SendCmd>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d15d      	bne.n	8001dae <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73fb      	strb	r3, [r7, #15]
 8001cf6:	e00c      	b.n	8001d12 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8001cf8:	7bfc      	ldrb	r4, [r7, #15]
 8001cfa:	f7ff fe29 	bl	8001950 <SPI_RxByte>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	461a      	mov	r2, r3
 8001d02:	f104 0310 	add.w	r3, r4, #16
 8001d06:	443b      	add	r3, r7
 8001d08:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	73fb      	strb	r3, [r7, #15]
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d9ef      	bls.n	8001cf8 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001d18:	7a3b      	ldrb	r3, [r7, #8]
 8001d1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <SD_disk_initialize+0x10a>
 8001d22:	230c      	movs	r3, #12
 8001d24:	e000      	b.n	8001d28 <SD_disk_initialize+0x10c>
 8001d26:	2304      	movs	r3, #4
 8001d28:	73bb      	strb	r3, [r7, #14]
 8001d2a:	e040      	b.n	8001dae <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	2077      	movs	r0, #119	@ 0x77
 8001d30:	f7ff ff1f 	bl	8001b72 <SD_SendCmd>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d808      	bhi.n	8001d4c <SD_disk_initialize+0x130>
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	2069      	movs	r0, #105	@ 0x69
 8001d3e:	f7ff ff18 	bl	8001b72 <SD_SendCmd>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d801      	bhi.n	8001d4c <SD_disk_initialize+0x130>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e000      	b.n	8001d4e <SD_disk_initialize+0x132>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001d50:	7bbb      	ldrb	r3, [r7, #14]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d10e      	bne.n	8001d74 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001d56:	2100      	movs	r1, #0
 8001d58:	2077      	movs	r0, #119	@ 0x77
 8001d5a:	f7ff ff0a 	bl	8001b72 <SD_SendCmd>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d80e      	bhi.n	8001d82 <SD_disk_initialize+0x166>
 8001d64:	2100      	movs	r1, #0
 8001d66:	2069      	movs	r0, #105	@ 0x69
 8001d68:	f7ff ff03 	bl	8001b72 <SD_SendCmd>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d107      	bne.n	8001d82 <SD_disk_initialize+0x166>
 8001d72:	e00d      	b.n	8001d90 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001d74:	2100      	movs	r1, #0
 8001d76:	2041      	movs	r0, #65	@ 0x41
 8001d78:	f7ff fefb 	bl	8001b72 <SD_SendCmd>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d005      	beq.n	8001d8e <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8001d82:	4b1a      	ldr	r3, [pc, #104]	@ (8001dec <SD_disk_initialize+0x1d0>)
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1e1      	bne.n	8001d50 <SD_disk_initialize+0x134>
 8001d8c:	e000      	b.n	8001d90 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001d8e:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001d90:	4b16      	ldr	r3, [pc, #88]	@ (8001dec <SD_disk_initialize+0x1d0>)
 8001d92:	881b      	ldrh	r3, [r3, #0]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d007      	beq.n	8001daa <SD_disk_initialize+0x18e>
 8001d9a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d9e:	2050      	movs	r0, #80	@ 0x50
 8001da0:	f7ff fee7 	bl	8001b72 <SD_SendCmd>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <SD_disk_initialize+0x192>
 8001daa:	2300      	movs	r3, #0
 8001dac:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001dae:	4a10      	ldr	r2, [pc, #64]	@ (8001df0 <SD_disk_initialize+0x1d4>)
 8001db0:	7bbb      	ldrb	r3, [r7, #14]
 8001db2:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001db4:	f7ff fd8a 	bl	80018cc <DESELECT>
	SPI_RxByte();
 8001db8:	f7ff fdca 	bl	8001950 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001dbc:	7bbb      	ldrb	r3, [r7, #14]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d008      	beq.n	8001dd4 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8001dc2:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <SD_disk_initialize+0x1cc>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <SD_disk_initialize+0x1cc>)
 8001dd0:	701a      	strb	r2, [r3, #0]
 8001dd2:	e001      	b.n	8001dd8 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001dd4:	f7ff fe42 	bl	8001a5c <SD_PowerOff>
	}

	return Stat;
 8001dd8:	4b03      	ldr	r3, [pc, #12]	@ (8001de8 <SD_disk_initialize+0x1cc>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	b2db      	uxtb	r3, r3
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd90      	pop	{r4, r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000020 	.word	0x20000020
 8001dec:	2000051d 	.word	0x2000051d
 8001df0:	2000092a 	.word	0x2000092a

08001df4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <SD_disk_status+0x14>
 8001e04:	2301      	movs	r3, #1
 8001e06:	e002      	b.n	8001e0e <SD_disk_status+0x1a>
	return Stat;
 8001e08:	4b04      	ldr	r3, [pc, #16]	@ (8001e1c <SD_disk_status+0x28>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	b2db      	uxtb	r3, r3
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000020 	.word	0x20000020

08001e20 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	603b      	str	r3, [r7, #0]
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d102      	bne.n	8001e3c <SD_disk_read+0x1c>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <SD_disk_read+0x20>
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	e051      	b.n	8001ee4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001e40:	4b2a      	ldr	r3, [pc, #168]	@ (8001eec <SD_disk_read+0xcc>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <SD_disk_read+0x32>
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e048      	b.n	8001ee4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001e52:	4b27      	ldr	r3, [pc, #156]	@ (8001ef0 <SD_disk_read+0xd0>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	f003 0304 	and.w	r3, r3, #4
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d102      	bne.n	8001e64 <SD_disk_read+0x44>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	025b      	lsls	r3, r3, #9
 8001e62:	607b      	str	r3, [r7, #4]

	SELECT();
 8001e64:	f7ff fd24 	bl	80018b0 <SELECT>

	if (count == 1)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d111      	bne.n	8001e92 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	2051      	movs	r0, #81	@ 0x51
 8001e72:	f7ff fe7e 	bl	8001b72 <SD_SendCmd>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d129      	bne.n	8001ed0 <SD_disk_read+0xb0>
 8001e7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e80:	68b8      	ldr	r0, [r7, #8]
 8001e82:	f7ff fe03 	bl	8001a8c <SD_RxDataBlock>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d021      	beq.n	8001ed0 <SD_disk_read+0xb0>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	e01e      	b.n	8001ed0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	2052      	movs	r0, #82	@ 0x52
 8001e96:	f7ff fe6c 	bl	8001b72 <SD_SendCmd>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d117      	bne.n	8001ed0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001ea0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ea4:	68b8      	ldr	r0, [r7, #8]
 8001ea6:	f7ff fdf1 	bl	8001a8c <SD_RxDataBlock>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00a      	beq.n	8001ec6 <SD_disk_read+0xa6>
				buff += 512;
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001eb6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	603b      	str	r3, [r7, #0]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1ed      	bne.n	8001ea0 <SD_disk_read+0x80>
 8001ec4:	e000      	b.n	8001ec8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001ec6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001ec8:	2100      	movs	r1, #0
 8001eca:	204c      	movs	r0, #76	@ 0x4c
 8001ecc:	f7ff fe51 	bl	8001b72 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001ed0:	f7ff fcfc 	bl	80018cc <DESELECT>
	SPI_RxByte();
 8001ed4:	f7ff fd3c 	bl	8001950 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	bf14      	ite	ne
 8001ede:	2301      	movne	r3, #1
 8001ee0:	2300      	moveq	r3, #0
 8001ee2:	b2db      	uxtb	r3, r3
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000020 	.word	0x20000020
 8001ef0:	2000092a 	.word	0x2000092a

08001ef4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60b9      	str	r1, [r7, #8]
 8001efc:	607a      	str	r2, [r7, #4]
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	4603      	mov	r3, r0
 8001f02:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d102      	bne.n	8001f10 <SD_disk_write+0x1c>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <SD_disk_write+0x20>
 8001f10:	2304      	movs	r3, #4
 8001f12:	e06b      	b.n	8001fec <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001f14:	4b37      	ldr	r3, [pc, #220]	@ (8001ff4 <SD_disk_write+0x100>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <SD_disk_write+0x32>
 8001f22:	2303      	movs	r3, #3
 8001f24:	e062      	b.n	8001fec <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001f26:	4b33      	ldr	r3, [pc, #204]	@ (8001ff4 <SD_disk_write+0x100>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <SD_disk_write+0x44>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e059      	b.n	8001fec <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001f38:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff8 <SD_disk_write+0x104>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d102      	bne.n	8001f4a <SD_disk_write+0x56>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	025b      	lsls	r3, r3, #9
 8001f48:	607b      	str	r3, [r7, #4]

	SELECT();
 8001f4a:	f7ff fcb1 	bl	80018b0 <SELECT>

	if (count == 1)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d110      	bne.n	8001f76 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001f54:	6879      	ldr	r1, [r7, #4]
 8001f56:	2058      	movs	r0, #88	@ 0x58
 8001f58:	f7ff fe0b 	bl	8001b72 <SD_SendCmd>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d13a      	bne.n	8001fd8 <SD_disk_write+0xe4>
 8001f62:	21fe      	movs	r1, #254	@ 0xfe
 8001f64:	68b8      	ldr	r0, [r7, #8]
 8001f66:	f7ff fdc1 	bl	8001aec <SD_TxDataBlock>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d033      	beq.n	8001fd8 <SD_disk_write+0xe4>
			count = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	e030      	b.n	8001fd8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001f76:	4b20      	ldr	r3, [pc, #128]	@ (8001ff8 <SD_disk_write+0x104>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d007      	beq.n	8001f92 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001f82:	2100      	movs	r1, #0
 8001f84:	2077      	movs	r0, #119	@ 0x77
 8001f86:	f7ff fdf4 	bl	8001b72 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001f8a:	6839      	ldr	r1, [r7, #0]
 8001f8c:	2057      	movs	r0, #87	@ 0x57
 8001f8e:	f7ff fdf0 	bl	8001b72 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	2059      	movs	r0, #89	@ 0x59
 8001f96:	f7ff fdec 	bl	8001b72 <SD_SendCmd>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d11b      	bne.n	8001fd8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001fa0:	21fc      	movs	r1, #252	@ 0xfc
 8001fa2:	68b8      	ldr	r0, [r7, #8]
 8001fa4:	f7ff fda2 	bl	8001aec <SD_TxDataBlock>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00a      	beq.n	8001fc4 <SD_disk_write+0xd0>
				buff += 512;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001fb4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1ee      	bne.n	8001fa0 <SD_disk_write+0xac>
 8001fc2:	e000      	b.n	8001fc6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001fc4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001fc6:	21fd      	movs	r1, #253	@ 0xfd
 8001fc8:	2000      	movs	r0, #0
 8001fca:	f7ff fd8f 	bl	8001aec <SD_TxDataBlock>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d101      	bne.n	8001fd8 <SD_disk_write+0xe4>
			{
				count = 1;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001fd8:	f7ff fc78 	bl	80018cc <DESELECT>
	SPI_RxByte();
 8001fdc:	f7ff fcb8 	bl	8001950 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	bf14      	ite	ne
 8001fe6:	2301      	movne	r3, #1
 8001fe8:	2300      	moveq	r3, #0
 8001fea:	b2db      	uxtb	r3, r3
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20000020 	.word	0x20000020
 8001ff8:	2000092a 	.word	0x2000092a

08001ffc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001ffc:	b590      	push	{r4, r7, lr}
 8001ffe:	b08b      	sub	sp, #44	@ 0x2c
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	603a      	str	r2, [r7, #0]
 8002006:	71fb      	strb	r3, [r7, #7]
 8002008:	460b      	mov	r3, r1
 800200a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <SD_disk_ioctl+0x1e>
 8002016:	2304      	movs	r3, #4
 8002018:	e113      	b.n	8002242 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8002020:	79bb      	ldrb	r3, [r7, #6]
 8002022:	2b05      	cmp	r3, #5
 8002024:	d124      	bne.n	8002070 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d012      	beq.n	8002054 <SD_disk_ioctl+0x58>
 800202e:	2b02      	cmp	r3, #2
 8002030:	dc1a      	bgt.n	8002068 <SD_disk_ioctl+0x6c>
 8002032:	2b00      	cmp	r3, #0
 8002034:	d002      	beq.n	800203c <SD_disk_ioctl+0x40>
 8002036:	2b01      	cmp	r3, #1
 8002038:	d006      	beq.n	8002048 <SD_disk_ioctl+0x4c>
 800203a:	e015      	b.n	8002068 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800203c:	f7ff fd0e 	bl	8001a5c <SD_PowerOff>
			res = RES_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002046:	e0fa      	b.n	800223e <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8002048:	f7ff fcc6 	bl	80019d8 <SD_PowerOn>
			res = RES_OK;
 800204c:	2300      	movs	r3, #0
 800204e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002052:	e0f4      	b.n	800223e <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	1c5c      	adds	r4, r3, #1
 8002058:	f7ff fd0c 	bl	8001a74 <SD_CheckPower>
 800205c:	4603      	mov	r3, r0
 800205e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8002060:	2300      	movs	r3, #0
 8002062:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002066:	e0ea      	b.n	800223e <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8002068:	2304      	movs	r3, #4
 800206a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800206e:	e0e6      	b.n	800223e <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8002070:	4b76      	ldr	r3, [pc, #472]	@ (800224c <SD_disk_ioctl+0x250>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <SD_disk_ioctl+0x86>
 800207e:	2303      	movs	r3, #3
 8002080:	e0df      	b.n	8002242 <SD_disk_ioctl+0x246>

		SELECT();
 8002082:	f7ff fc15 	bl	80018b0 <SELECT>

		switch (ctrl)
 8002086:	79bb      	ldrb	r3, [r7, #6]
 8002088:	2b0d      	cmp	r3, #13
 800208a:	f200 80c9 	bhi.w	8002220 <SD_disk_ioctl+0x224>
 800208e:	a201      	add	r2, pc, #4	@ (adr r2, 8002094 <SD_disk_ioctl+0x98>)
 8002090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002094:	0800218b 	.word	0x0800218b
 8002098:	080020cd 	.word	0x080020cd
 800209c:	0800217b 	.word	0x0800217b
 80020a0:	08002221 	.word	0x08002221
 80020a4:	08002221 	.word	0x08002221
 80020a8:	08002221 	.word	0x08002221
 80020ac:	08002221 	.word	0x08002221
 80020b0:	08002221 	.word	0x08002221
 80020b4:	08002221 	.word	0x08002221
 80020b8:	08002221 	.word	0x08002221
 80020bc:	08002221 	.word	0x08002221
 80020c0:	0800219d 	.word	0x0800219d
 80020c4:	080021c1 	.word	0x080021c1
 80020c8:	080021e5 	.word	0x080021e5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80020cc:	2100      	movs	r1, #0
 80020ce:	2049      	movs	r0, #73	@ 0x49
 80020d0:	f7ff fd4f 	bl	8001b72 <SD_SendCmd>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f040 80a6 	bne.w	8002228 <SD_disk_ioctl+0x22c>
 80020dc:	f107 030c 	add.w	r3, r7, #12
 80020e0:	2110      	movs	r1, #16
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fcd2 	bl	8001a8c <SD_RxDataBlock>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 809c 	beq.w	8002228 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 80020f0:	7b3b      	ldrb	r3, [r7, #12]
 80020f2:	099b      	lsrs	r3, r3, #6
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d10d      	bne.n	8002116 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80020fa:	7d7b      	ldrb	r3, [r7, #21]
 80020fc:	461a      	mov	r2, r3
 80020fe:	7d3b      	ldrb	r3, [r7, #20]
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	b29b      	uxth	r3, r3
 8002104:	4413      	add	r3, r2
 8002106:	b29b      	uxth	r3, r3
 8002108:	3301      	adds	r3, #1
 800210a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800210c:	8bfb      	ldrh	r3, [r7, #30]
 800210e:	029a      	lsls	r2, r3, #10
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	e02d      	b.n	8002172 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002116:	7c7b      	ldrb	r3, [r7, #17]
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	b2da      	uxtb	r2, r3
 800211e:	7dbb      	ldrb	r3, [r7, #22]
 8002120:	09db      	lsrs	r3, r3, #7
 8002122:	b2db      	uxtb	r3, r3
 8002124:	4413      	add	r3, r2
 8002126:	b2da      	uxtb	r2, r3
 8002128:	7d7b      	ldrb	r3, [r7, #21]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	b2db      	uxtb	r3, r3
 800212e:	f003 0306 	and.w	r3, r3, #6
 8002132:	b2db      	uxtb	r3, r3
 8002134:	4413      	add	r3, r2
 8002136:	b2db      	uxtb	r3, r3
 8002138:	3302      	adds	r3, #2
 800213a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800213e:	7d3b      	ldrb	r3, [r7, #20]
 8002140:	099b      	lsrs	r3, r3, #6
 8002142:	b2db      	uxtb	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	7cfb      	ldrb	r3, [r7, #19]
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	b29b      	uxth	r3, r3
 800214c:	4413      	add	r3, r2
 800214e:	b29a      	uxth	r2, r3
 8002150:	7cbb      	ldrb	r3, [r7, #18]
 8002152:	029b      	lsls	r3, r3, #10
 8002154:	b29b      	uxth	r3, r3
 8002156:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800215a:	b29b      	uxth	r3, r3
 800215c:	4413      	add	r3, r2
 800215e:	b29b      	uxth	r3, r3
 8002160:	3301      	adds	r3, #1
 8002162:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8002164:	8bfa      	ldrh	r2, [r7, #30]
 8002166:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800216a:	3b09      	subs	r3, #9
 800216c:	409a      	lsls	r2, r3
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8002178:	e056      	b.n	8002228 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002180:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002188:	e055      	b.n	8002236 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800218a:	f7ff fc0b 	bl	80019a4 <SD_ReadyWait>
 800218e:	4603      	mov	r3, r0
 8002190:	2bff      	cmp	r3, #255	@ 0xff
 8002192:	d14b      	bne.n	800222c <SD_disk_ioctl+0x230>
 8002194:	2300      	movs	r3, #0
 8002196:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800219a:	e047      	b.n	800222c <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800219c:	2100      	movs	r1, #0
 800219e:	2049      	movs	r0, #73	@ 0x49
 80021a0:	f7ff fce7 	bl	8001b72 <SD_SendCmd>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d142      	bne.n	8002230 <SD_disk_ioctl+0x234>
 80021aa:	2110      	movs	r1, #16
 80021ac:	6a38      	ldr	r0, [r7, #32]
 80021ae:	f7ff fc6d 	bl	8001a8c <SD_RxDataBlock>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d03b      	beq.n	8002230 <SD_disk_ioctl+0x234>
 80021b8:	2300      	movs	r3, #0
 80021ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80021be:	e037      	b.n	8002230 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80021c0:	2100      	movs	r1, #0
 80021c2:	204a      	movs	r0, #74	@ 0x4a
 80021c4:	f7ff fcd5 	bl	8001b72 <SD_SendCmd>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d132      	bne.n	8002234 <SD_disk_ioctl+0x238>
 80021ce:	2110      	movs	r1, #16
 80021d0:	6a38      	ldr	r0, [r7, #32]
 80021d2:	f7ff fc5b 	bl	8001a8c <SD_RxDataBlock>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d02b      	beq.n	8002234 <SD_disk_ioctl+0x238>
 80021dc:	2300      	movs	r3, #0
 80021de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80021e2:	e027      	b.n	8002234 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80021e4:	2100      	movs	r1, #0
 80021e6:	207a      	movs	r0, #122	@ 0x7a
 80021e8:	f7ff fcc3 	bl	8001b72 <SD_SendCmd>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d116      	bne.n	8002220 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80021f8:	e00b      	b.n	8002212 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 80021fa:	6a3c      	ldr	r4, [r7, #32]
 80021fc:	1c63      	adds	r3, r4, #1
 80021fe:	623b      	str	r3, [r7, #32]
 8002200:	f7ff fba6 	bl	8001950 <SPI_RxByte>
 8002204:	4603      	mov	r3, r0
 8002206:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8002208:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800220c:	3301      	adds	r3, #1
 800220e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8002212:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002216:	2b03      	cmp	r3, #3
 8002218:	d9ef      	bls.n	80021fa <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8002220:	2304      	movs	r3, #4
 8002222:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002226:	e006      	b.n	8002236 <SD_disk_ioctl+0x23a>
			break;
 8002228:	bf00      	nop
 800222a:	e004      	b.n	8002236 <SD_disk_ioctl+0x23a>
			break;
 800222c:	bf00      	nop
 800222e:	e002      	b.n	8002236 <SD_disk_ioctl+0x23a>
			break;
 8002230:	bf00      	nop
 8002232:	e000      	b.n	8002236 <SD_disk_ioctl+0x23a>
			break;
 8002234:	bf00      	nop
		}

		DESELECT();
 8002236:	f7ff fb49 	bl	80018cc <DESELECT>
		SPI_RxByte();
 800223a:	f7ff fb89 	bl	8001950 <SPI_RxByte>
	}

	return res;
 800223e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002242:	4618      	mov	r0, r3
 8002244:	372c      	adds	r7, #44	@ 0x2c
 8002246:	46bd      	mov	sp, r7
 8002248:	bd90      	pop	{r4, r7, pc}
 800224a:	bf00      	nop
 800224c:	20000020 	.word	0x20000020

08002250 <send_uart>:

extern UART_HandleTypeDef huart2;
extern RTC_HandleTypeDef hrtc;			//Handler del RTC


void send_uart(char *string){
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7fd ffcb 	bl	80001f4 <strlen>
 800225e:	4603      	mov	r3, r0
 8002260:	b29a      	uxth	r2, r3
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
 8002266:	6879      	ldr	r1, [r7, #4]
 8002268:	4803      	ldr	r0, [pc, #12]	@ (8002278 <send_uart+0x28>)
 800226a:	f004 f8ef 	bl	800644c <HAL_UART_Transmit>
	return;
 800226e:	bf00      	nop
}
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000484 	.word	0x20000484

0800227c <mount_sd>:

void mount_sd(const char* path){
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8002284:	2201      	movs	r2, #1
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4809      	ldr	r0, [pc, #36]	@ (80022b0 <mount_sd+0x34>)
 800228a:	f007 f807 	bl	800929c <f_mount>
 800228e:	4603      	mov	r3, r0
 8002290:	461a      	mov	r2, r3
 8002292:	4b08      	ldr	r3, [pc, #32]	@ (80022b4 <mount_sd+0x38>)
 8002294:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK){
 8002296:	4b07      	ldr	r3, [pc, #28]	@ (80022b4 <mount_sd+0x38>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d004      	beq.n	80022a8 <mount_sd+0x2c>
		send_uart("Error al montar la tarjeta SD!!!\n\n");
 800229e:	4806      	ldr	r0, [pc, #24]	@ (80022b8 <mount_sd+0x3c>)
 80022a0:	f7ff ffd6 	bl	8002250 <send_uart>
		while(1);
 80022a4:	bf00      	nop
 80022a6:	e7fd      	b.n	80022a4 <mount_sd+0x28>
	}
	return;
 80022a8:	bf00      	nop
}
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	2000092c 	.word	0x2000092c
 80022b4:	20002ab0 	.word	0x20002ab0
 80022b8:	0800d984 	.word	0x0800d984

080022bc <unmount_sd>:

void unmount_sd(const char* path){
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 80022c4:	2201      	movs	r2, #1
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	2000      	movs	r0, #0
 80022ca:	f006 ffe7 	bl	800929c <f_mount>
 80022ce:	4603      	mov	r3, r0
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b07      	ldr	r3, [pc, #28]	@ (80022f0 <unmount_sd+0x34>)
 80022d4:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <unmount_sd+0x34>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d004      	beq.n	80022e8 <unmount_sd+0x2c>
		send_uart("Error al desmontar la tarjeta SD!!!\n\n");
 80022de:	4805      	ldr	r0, [pc, #20]	@ (80022f4 <unmount_sd+0x38>)
 80022e0:	f7ff ffb6 	bl	8002250 <send_uart>
		while(1);
 80022e4:	bf00      	nop
 80022e6:	e7fd      	b.n	80022e4 <unmount_sd+0x28>
	}
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	20002ab0 	.word	0x20002ab0
 80022f4:	0800d9a8 	.word	0x0800d9a8

080022f8 <check_if_file_exists>:

bool check_if_file_exists(char *name){
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
	bool file_exist = false;
 8002300:	2300      	movs	r3, #0
 8002302:	73fb      	strb	r3, [r7, #15]
	fresult = f_stat(name, &fno);
 8002304:	4909      	ldr	r1, [pc, #36]	@ (800232c <check_if_file_exists+0x34>)
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f007 fc56 	bl	8009bb8 <f_stat>
 800230c:	4603      	mov	r3, r0
 800230e:	461a      	mov	r2, r3
 8002310:	4b07      	ldr	r3, [pc, #28]	@ (8002330 <check_if_file_exists+0x38>)
 8002312:	701a      	strb	r2, [r3, #0]
	if(fresult == FR_OK){
 8002314:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <check_if_file_exists+0x38>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <check_if_file_exists+0x28>
		file_exist = true;
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
	}
	return file_exist;
 8002320:	7bfb      	ldrb	r3, [r7, #15]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20002998 	.word	0x20002998
 8002330:	20002ab0 	.word	0x20002ab0

08002334 <create_file>:
		while(1);
	}
	return fresult;
}

FRESULT create_file(char *name){
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	/*Chequeo existencia del archivo*/
	fresult = f_stat (name, &fno);
 800233c:	491c      	ldr	r1, [pc, #112]	@ (80023b0 <create_file+0x7c>)
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f007 fc3a 	bl	8009bb8 <f_stat>
 8002344:	4603      	mov	r3, r0
 8002346:	461a      	mov	r2, r3
 8002348:	4b1a      	ldr	r3, [pc, #104]	@ (80023b4 <create_file+0x80>)
 800234a:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 800234c:	4b19      	ldr	r3, [pc, #100]	@ (80023b4 <create_file+0x80>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d004      	beq.n	800235e <create_file+0x2a>
		send_uart("Error!!! El archivo no existe.\n\n");
 8002354:	4818      	ldr	r0, [pc, #96]	@ (80023b8 <create_file+0x84>)
 8002356:	f7ff ff7b 	bl	8002250 <send_uart>
		while(1);
 800235a:	bf00      	nop
 800235c:	e7fd      	b.n	800235a <create_file+0x26>
	}
	/*Abro el archivo y lo creo*/
	fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 800235e:	220b      	movs	r2, #11
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4816      	ldr	r0, [pc, #88]	@ (80023bc <create_file+0x88>)
 8002364:	f006 fffe 	bl	8009364 <f_open>
 8002368:	4603      	mov	r3, r0
 800236a:	461a      	mov	r2, r3
 800236c:	4b11      	ldr	r3, [pc, #68]	@ (80023b4 <create_file+0x80>)
 800236e:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8002370:	4b10      	ldr	r3, [pc, #64]	@ (80023b4 <create_file+0x80>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d004      	beq.n	8002382 <create_file+0x4e>
		send_uart("Error!!! No se pudo crear el archivo.\n\n");
 8002378:	4811      	ldr	r0, [pc, #68]	@ (80023c0 <create_file+0x8c>)
 800237a:	f7ff ff69 	bl	8002250 <send_uart>
		while(1);
 800237e:	bf00      	nop
 8002380:	e7fd      	b.n	800237e <create_file+0x4a>
	}
	/*Cierro el archivo*/
	fresult = f_close(&fil);
 8002382:	480e      	ldr	r0, [pc, #56]	@ (80023bc <create_file+0x88>)
 8002384:	f007 fbe9 	bl	8009b5a <f_close>
 8002388:	4603      	mov	r3, r0
 800238a:	461a      	mov	r2, r3
 800238c:	4b09      	ldr	r3, [pc, #36]	@ (80023b4 <create_file+0x80>)
 800238e:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8002390:	4b08      	ldr	r3, [pc, #32]	@ (80023b4 <create_file+0x80>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d004      	beq.n	80023a2 <create_file+0x6e>
		send_uart("Error!!! No se pudo cerrar el archivo.\n\n");
 8002398:	480a      	ldr	r0, [pc, #40]	@ (80023c4 <create_file+0x90>)
 800239a:	f7ff ff59 	bl	8002250 <send_uart>
		while(1);
 800239e:	bf00      	nop
 80023a0:	e7fd      	b.n	800239e <create_file+0x6a>
	}
	return fresult;
 80023a2:	4b04      	ldr	r3, [pc, #16]	@ (80023b4 <create_file+0x80>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20002998 	.word	0x20002998
 80023b4:	20002ab0 	.word	0x20002ab0
 80023b8:	0800d9d0 	.word	0x0800d9d0
 80023bc:	20001968 	.word	0x20001968
 80023c0:	0800da9c 	.word	0x0800da9c
 80023c4:	0800da48 	.word	0x0800da48

080023c8 <open_file>:

FRESULT open_file(char *name){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	/*Chequeo existencia del archivo*/
	fresult = f_stat (name, &fno);
 80023d0:	4914      	ldr	r1, [pc, #80]	@ (8002424 <open_file+0x5c>)
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f007 fbf0 	bl	8009bb8 <f_stat>
 80023d8:	4603      	mov	r3, r0
 80023da:	461a      	mov	r2, r3
 80023dc:	4b12      	ldr	r3, [pc, #72]	@ (8002428 <open_file+0x60>)
 80023de:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 80023e0:	4b11      	ldr	r3, [pc, #68]	@ (8002428 <open_file+0x60>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d004      	beq.n	80023f2 <open_file+0x2a>
		send_uart("Error!!! El archivo no existe.\n\n");
 80023e8:	4810      	ldr	r0, [pc, #64]	@ (800242c <open_file+0x64>)
 80023ea:	f7ff ff31 	bl	8002250 <send_uart>
		while(1);
 80023ee:	bf00      	nop
 80023f0:	e7fd      	b.n	80023ee <open_file+0x26>
	}
	/*Abro el archivo*/
	fresult = f_open(&fil, name, FA_READ);
 80023f2:	2201      	movs	r2, #1
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	480e      	ldr	r0, [pc, #56]	@ (8002430 <open_file+0x68>)
 80023f8:	f006 ffb4 	bl	8009364 <f_open>
 80023fc:	4603      	mov	r3, r0
 80023fe:	461a      	mov	r2, r3
 8002400:	4b09      	ldr	r3, [pc, #36]	@ (8002428 <open_file+0x60>)
 8002402:	701a      	strb	r2, [r3, #0]
	if(fresult != FR_OK){
 8002404:	4b08      	ldr	r3, [pc, #32]	@ (8002428 <open_file+0x60>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d004      	beq.n	8002416 <open_file+0x4e>
		send_uart("Error!!! No se pudo abrir el archivo.\n\n");
 800240c:	4809      	ldr	r0, [pc, #36]	@ (8002434 <open_file+0x6c>)
 800240e:	f7ff ff1f 	bl	8002250 <send_uart>
		while(1);
 8002412:	bf00      	nop
 8002414:	e7fd      	b.n	8002412 <open_file+0x4a>
	}
	return fresult;
 8002416:	4b04      	ldr	r3, [pc, #16]	@ (8002428 <open_file+0x60>)
 8002418:	781b      	ldrb	r3, [r3, #0]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20002998 	.word	0x20002998
 8002428:	20002ab0 	.word	0x20002ab0
 800242c:	0800d9d0 	.word	0x0800d9d0
 8002430:	20001968 	.word	0x20001968
 8002434:	0800d9f4 	.word	0x0800d9f4

08002438 <get_line_from_file>:
		while(1);
	}
	return fresult;
}

char *get_line_from_file(char *buffer, int buffer_length){
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
	return f_gets(buffer, buffer_length, &fil);
 8002442:	4a05      	ldr	r2, [pc, #20]	@ (8002458 <get_line_from_file+0x20>)
 8002444:	6839      	ldr	r1, [r7, #0]
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f007 fc0b 	bl	8009c62 <f_gets>
 800244c:	4603      	mov	r3, r0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	20001968 	.word	0x20001968

0800245c <display_init>:
	BORRAR_DIGITO,
	REINICIAR_ENTRADA
}entry_t;

/*================[Private functions]=====================*/
static void display_init(void){
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
	/*Wrapper de la función que inicializa el display*/
	ssd1306_Init();
 8002460:	f7fe ff8c 	bl	800137c <ssd1306_Init>
	return;
 8002464:	bf00      	nop
}
 8002466:	bd80      	pop	{r7, pc}

08002468 <display_sequence_entry>:

static void display_sequence_entry(entry_t action){
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af02      	add	r7, sp, #8
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
	static uint8_t x = 10;														//x e y definen coordenadas en pantalla
	static uint8_t y = 26;
	if(action == AGREGAR_DIGITO){
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d117      	bne.n	80024a8 <display_sequence_entry+0x40>
		ssd1306_SetCursor(x, y);
 8002478:	4b23      	ldr	r3, [pc, #140]	@ (8002508 <display_sequence_entry+0xa0>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	4a23      	ldr	r2, [pc, #140]	@ (800250c <display_sequence_entry+0xa4>)
 800247e:	7812      	ldrb	r2, [r2, #0]
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff f92e 	bl	80016e4 <ssd1306_SetCursor>
		ssd1306_WriteString("*", Font_16x26, White);				//Añade *'s para representar ingreso de digitos
 8002488:	4b21      	ldr	r3, [pc, #132]	@ (8002510 <display_sequence_entry+0xa8>)
 800248a:	2201      	movs	r2, #1
 800248c:	9200      	str	r2, [sp, #0]
 800248e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002490:	4820      	ldr	r0, [pc, #128]	@ (8002514 <display_sequence_entry+0xac>)
 8002492:	f7ff f901 	bl	8001698 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8002496:	f7fe fff3 	bl	8001480 <ssd1306_UpdateScreen>
		x += 16;
 800249a:	4b1b      	ldr	r3, [pc, #108]	@ (8002508 <display_sequence_entry+0xa0>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	3310      	adds	r3, #16
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	4b19      	ldr	r3, [pc, #100]	@ (8002508 <display_sequence_entry+0xa0>)
 80024a4:	701a      	strb	r2, [r3, #0]
			ssd1306_Fill(Black);
			ssd1306_SetCursor(x, y);
			ssd1306_UpdateScreen();
		}
	}
}
 80024a6:	e02a      	b.n	80024fe <display_sequence_entry+0x96>
		if(action == BORRAR_DIGITO){
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d117      	bne.n	80024de <display_sequence_entry+0x76>
			x -= 16;													//Retrocedo una posicion en pantalla acorde al font seleccionado
 80024ae:	4b16      	ldr	r3, [pc, #88]	@ (8002508 <display_sequence_entry+0xa0>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	3b10      	subs	r3, #16
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <display_sequence_entry+0xa0>)
 80024b8:	701a      	strb	r2, [r3, #0]
			ssd1306_SetCursor(x, y);
 80024ba:	4b13      	ldr	r3, [pc, #76]	@ (8002508 <display_sequence_entry+0xa0>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	4a13      	ldr	r2, [pc, #76]	@ (800250c <display_sequence_entry+0xa4>)
 80024c0:	7812      	ldrb	r2, [r2, #0]
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff f90d 	bl	80016e4 <ssd1306_SetCursor>
			ssd1306_WriteString(" ", Font_16x26, White);				//En caso de borrar relleno con espacio en blanco
 80024ca:	4b11      	ldr	r3, [pc, #68]	@ (8002510 <display_sequence_entry+0xa8>)
 80024cc:	2201      	movs	r2, #1
 80024ce:	9200      	str	r2, [sp, #0]
 80024d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024d2:	4811      	ldr	r0, [pc, #68]	@ (8002518 <display_sequence_entry+0xb0>)
 80024d4:	f7ff f8e0 	bl	8001698 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 80024d8:	f7fe ffd2 	bl	8001480 <ssd1306_UpdateScreen>
}
 80024dc:	e00f      	b.n	80024fe <display_sequence_entry+0x96>
			x = 10;
 80024de:	4b0a      	ldr	r3, [pc, #40]	@ (8002508 <display_sequence_entry+0xa0>)
 80024e0:	220a      	movs	r2, #10
 80024e2:	701a      	strb	r2, [r3, #0]
			ssd1306_Fill(Black);
 80024e4:	2000      	movs	r0, #0
 80024e6:	f7fe ffb3 	bl	8001450 <ssd1306_Fill>
			ssd1306_SetCursor(x, y);
 80024ea:	4b07      	ldr	r3, [pc, #28]	@ (8002508 <display_sequence_entry+0xa0>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	4a07      	ldr	r2, [pc, #28]	@ (800250c <display_sequence_entry+0xa4>)
 80024f0:	7812      	ldrb	r2, [r2, #0]
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff f8f5 	bl	80016e4 <ssd1306_SetCursor>
			ssd1306_UpdateScreen();
 80024fa:	f7fe ffc1 	bl	8001480 <ssd1306_UpdateScreen>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	20000021 	.word	0x20000021
 800250c:	20000022 	.word	0x20000022
 8002510:	0800fd00 	.word	0x0800fd00
 8002514:	0800dae4 	.word	0x0800dae4
 8002518:	0800dae8 	.word	0x0800dae8

0800251c <display_insert_key_msg>:

static void display_insert_key_msg(void){
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af02      	add	r7, sp, #8
	uint8_t x = 5;
 8002522:	2305      	movs	r3, #5
 8002524:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800252a:	2000      	movs	r0, #0
 800252c:	f7fe ff90 	bl	8001450 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002530:	79ba      	ldrb	r2, [r7, #6]
 8002532:	79fb      	ldrb	r3, [r7, #7]
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff f8d4 	bl	80016e4 <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_16x26, White);
 800253c:	4b11      	ldr	r3, [pc, #68]	@ (8002584 <display_insert_key_msg+0x68>)
 800253e:	2201      	movs	r2, #1
 8002540:	9200      	str	r2, [sp, #0]
 8002542:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002544:	4810      	ldr	r0, [pc, #64]	@ (8002588 <display_insert_key_msg+0x6c>)
 8002546:	f7ff f8a7 	bl	8001698 <ssd1306_WriteString>
	x += 15;
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	330f      	adds	r3, #15
 800254e:	71fb      	strb	r3, [r7, #7]
	y += 26;
 8002550:	79bb      	ldrb	r3, [r7, #6]
 8002552:	331a      	adds	r3, #26
 8002554:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8002556:	79ba      	ldrb	r2, [r7, #6]
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff f8c1 	bl	80016e4 <ssd1306_SetCursor>
	ssd1306_WriteString("clave", Font_16x26, White);
 8002562:	4b08      	ldr	r3, [pc, #32]	@ (8002584 <display_insert_key_msg+0x68>)
 8002564:	2201      	movs	r2, #1
 8002566:	9200      	str	r2, [sp, #0]
 8002568:	cb0e      	ldmia	r3, {r1, r2, r3}
 800256a:	4808      	ldr	r0, [pc, #32]	@ (800258c <display_insert_key_msg+0x70>)
 800256c:	f7ff f894 	bl	8001698 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002570:	f7fe ff86 	bl	8001480 <ssd1306_UpdateScreen>
	ssd1306_Fill(Black);								//Para preparar la sig secuencia
 8002574:	2000      	movs	r0, #0
 8002576:	f7fe ff6b 	bl	8001450 <ssd1306_Fill>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	0800fd00 	.word	0x0800fd00
 8002588:	0800daec 	.word	0x0800daec
 800258c:	0800daf4 	.word	0x0800daf4

08002590 <display_timeout_msg>:

static void display_timeout_msg(void){
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af02      	add	r7, sp, #8
	uint8_t x = 5;
 8002596:	2305      	movs	r3, #5
 8002598:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 18;
 800259a:	2312      	movs	r3, #18
 800259c:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800259e:	2000      	movs	r0, #0
 80025a0:	f7fe ff56 	bl	8001450 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80025a4:	79ba      	ldrb	r2, [r7, #6]
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff f89a 	bl	80016e4 <ssd1306_SetCursor>
	ssd1306_WriteString("Timeout!!!", Font_11x18, White);
 80025b0:	4b09      	ldr	r3, [pc, #36]	@ (80025d8 <display_timeout_msg+0x48>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	9200      	str	r2, [sp, #0]
 80025b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025b8:	4808      	ldr	r0, [pc, #32]	@ (80025dc <display_timeout_msg+0x4c>)
 80025ba:	f7ff f86d 	bl	8001698 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80025be:	f7fe ff5f 	bl	8001480 <ssd1306_UpdateScreen>
	vTaskDelay(3000 / portTICK_RATE_MS);
 80025c2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80025c6:	f008 fef7 	bl	800b3b8 <vTaskDelay>
	display_sequence_entry(REINICIAR_ENTRADA);
 80025ca:	2002      	movs	r0, #2
 80025cc:	f7ff ff4c 	bl	8002468 <display_sequence_entry>
}
 80025d0:	bf00      	nop
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	0800fcf4 	.word	0x0800fcf4
 80025dc:	0800dafc 	.word	0x0800dafc

080025e0 <display_incomplete_msg>:

static void display_incomplete_msg(void){
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af02      	add	r7, sp, #8
	uint8_t x = 20;
 80025e6:	2314      	movs	r3, #20
 80025e8:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 80025ea:	2300      	movs	r3, #0
 80025ec:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7fe ff2e 	bl	8001450 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80025f4:	79ba      	ldrb	r2, [r7, #6]
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	4611      	mov	r1, r2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff f872 	bl	80016e4 <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_11x18, White);
 8002600:	4b1b      	ldr	r3, [pc, #108]	@ (8002670 <display_incomplete_msg+0x90>)
 8002602:	2201      	movs	r2, #1
 8002604:	9200      	str	r2, [sp, #0]
 8002606:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002608:	481a      	ldr	r0, [pc, #104]	@ (8002674 <display_incomplete_msg+0x94>)
 800260a:	f7ff f845 	bl	8001698 <ssd1306_WriteString>
	x = 10;
 800260e:	230a      	movs	r3, #10
 8002610:	71fb      	strb	r3, [r7, #7]
	y += 18;
 8002612:	79bb      	ldrb	r3, [r7, #6]
 8002614:	3312      	adds	r3, #18
 8002616:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8002618:	79ba      	ldrb	r2, [r7, #6]
 800261a:	79fb      	ldrb	r3, [r7, #7]
 800261c:	4611      	mov	r1, r2
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff f860 	bl	80016e4 <ssd1306_SetCursor>
	ssd1306_WriteString("secuencia", Font_11x18, White);
 8002624:	4b12      	ldr	r3, [pc, #72]	@ (8002670 <display_incomplete_msg+0x90>)
 8002626:	2201      	movs	r2, #1
 8002628:	9200      	str	r2, [sp, #0]
 800262a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800262c:	4812      	ldr	r0, [pc, #72]	@ (8002678 <display_incomplete_msg+0x98>)
 800262e:	f7ff f833 	bl	8001698 <ssd1306_WriteString>
	x = 20;
 8002632:	2314      	movs	r3, #20
 8002634:	71fb      	strb	r3, [r7, #7]
	y += 18;
 8002636:	79bb      	ldrb	r3, [r7, #6]
 8002638:	3312      	adds	r3, #18
 800263a:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 800263c:	79ba      	ldrb	r2, [r7, #6]
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	4611      	mov	r1, r2
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff f84e 	bl	80016e4 <ssd1306_SetCursor>
	ssd1306_WriteString("valida", Font_11x18, White);
 8002648:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <display_incomplete_msg+0x90>)
 800264a:	2201      	movs	r2, #1
 800264c:	9200      	str	r2, [sp, #0]
 800264e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002650:	480a      	ldr	r0, [pc, #40]	@ (800267c <display_incomplete_msg+0x9c>)
 8002652:	f7ff f821 	bl	8001698 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002656:	f7fe ff13 	bl	8001480 <ssd1306_UpdateScreen>
	vTaskDelay(3000 / portTICK_RATE_MS);
 800265a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800265e:	f008 feab 	bl	800b3b8 <vTaskDelay>
	display_sequence_entry(REINICIAR_ENTRADA);
 8002662:	2002      	movs	r0, #2
 8002664:	f7ff ff00 	bl	8002468 <display_sequence_entry>

}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	0800fcf4 	.word	0x0800fcf4
 8002674:	0800daec 	.word	0x0800daec
 8002678:	0800db08 	.word	0x0800db08
 800267c:	0800db14 	.word	0x0800db14

08002680 <display_access_granted>:

static void display_access_granted(void){
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af02      	add	r7, sp, #8
	uint8_t x = 5;
 8002686:	2305      	movs	r3, #5
 8002688:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800268e:	2000      	movs	r0, #0
 8002690:	f7fe fede 	bl	8001450 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002694:	79ba      	ldrb	r2, [r7, #6]
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	4611      	mov	r1, r2
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff f822 	bl	80016e4 <ssd1306_SetCursor>
	ssd1306_WriteString("Acceso", Font_11x18, White);
 80026a0:	4b10      	ldr	r3, [pc, #64]	@ (80026e4 <display_access_granted+0x64>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	9200      	str	r2, [sp, #0]
 80026a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026a8:	480f      	ldr	r0, [pc, #60]	@ (80026e8 <display_access_granted+0x68>)
 80026aa:	f7fe fff5 	bl	8001698 <ssd1306_WriteString>
	y += 18;
 80026ae:	79bb      	ldrb	r3, [r7, #6]
 80026b0:	3312      	adds	r3, #18
 80026b2:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 80026b4:	79ba      	ldrb	r2, [r7, #6]
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff f812 	bl	80016e4 <ssd1306_SetCursor>
	ssd1306_WriteString("concedido", Font_11x18, White);
 80026c0:	4b08      	ldr	r3, [pc, #32]	@ (80026e4 <display_access_granted+0x64>)
 80026c2:	2201      	movs	r2, #1
 80026c4:	9200      	str	r2, [sp, #0]
 80026c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026c8:	4808      	ldr	r0, [pc, #32]	@ (80026ec <display_access_granted+0x6c>)
 80026ca:	f7fe ffe5 	bl	8001698 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80026ce:	f7fe fed7 	bl	8001480 <ssd1306_UpdateScreen>
	vTaskDelay(3000/portTICK_RATE_MS);
 80026d2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80026d6:	f008 fe6f 	bl	800b3b8 <vTaskDelay>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	0800fcf4 	.word	0x0800fcf4
 80026e8:	0800db1c 	.word	0x0800db1c
 80026ec:	0800db24 	.word	0x0800db24

080026f0 <display_no_user_found>:

static void display_no_user_found(void){
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af02      	add	r7, sp, #8
	uint8_t x = 20;
 80026f6:	2314      	movs	r3, #20
 80026f8:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 80026fe:	2000      	movs	r0, #0
 8002700:	f7fe fea6 	bl	8001450 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8002704:	79ba      	ldrb	r2, [r7, #6]
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f7fe ffea 	bl	80016e4 <ssd1306_SetCursor>
	ssd1306_WriteString("Usuario", Font_11x18, White);
 8002710:	4b1b      	ldr	r3, [pc, #108]	@ (8002780 <display_no_user_found+0x90>)
 8002712:	2201      	movs	r2, #1
 8002714:	9200      	str	r2, [sp, #0]
 8002716:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002718:	481a      	ldr	r0, [pc, #104]	@ (8002784 <display_no_user_found+0x94>)
 800271a:	f7fe ffbd 	bl	8001698 <ssd1306_WriteString>
	x = 20;
 800271e:	2314      	movs	r3, #20
 8002720:	71fb      	strb	r3, [r7, #7]
	y += 18;
 8002722:	79bb      	ldrb	r3, [r7, #6]
 8002724:	3312      	adds	r3, #18
 8002726:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8002728:	79ba      	ldrb	r2, [r7, #6]
 800272a:	79fb      	ldrb	r3, [r7, #7]
 800272c:	4611      	mov	r1, r2
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe ffd8 	bl	80016e4 <ssd1306_SetCursor>
	ssd1306_WriteString("no", Font_11x18, White);
 8002734:	4b12      	ldr	r3, [pc, #72]	@ (8002780 <display_no_user_found+0x90>)
 8002736:	2201      	movs	r2, #1
 8002738:	9200      	str	r2, [sp, #0]
 800273a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800273c:	4812      	ldr	r0, [pc, #72]	@ (8002788 <display_no_user_found+0x98>)
 800273e:	f7fe ffab 	bl	8001698 <ssd1306_WriteString>
	x = 20;
 8002742:	2314      	movs	r3, #20
 8002744:	71fb      	strb	r3, [r7, #7]
	y += 18;
 8002746:	79bb      	ldrb	r3, [r7, #6]
 8002748:	3312      	adds	r3, #18
 800274a:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 800274c:	79ba      	ldrb	r2, [r7, #6]
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	4611      	mov	r1, r2
 8002752:	4618      	mov	r0, r3
 8002754:	f7fe ffc6 	bl	80016e4 <ssd1306_SetCursor>
	ssd1306_WriteString("existente", Font_11x18, White);
 8002758:	4b09      	ldr	r3, [pc, #36]	@ (8002780 <display_no_user_found+0x90>)
 800275a:	2201      	movs	r2, #1
 800275c:	9200      	str	r2, [sp, #0]
 800275e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002760:	480a      	ldr	r0, [pc, #40]	@ (800278c <display_no_user_found+0x9c>)
 8002762:	f7fe ff99 	bl	8001698 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8002766:	f7fe fe8b 	bl	8001480 <ssd1306_UpdateScreen>
	vTaskDelay(3000/portTICK_RATE_MS);
 800276a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800276e:	f008 fe23 	bl	800b3b8 <vTaskDelay>
	display_sequence_entry(REINICIAR_ENTRADA);
 8002772:	2002      	movs	r0, #2
 8002774:	f7ff fe78 	bl	8002468 <display_sequence_entry>
}
 8002778:	bf00      	nop
 800277a:	3708      	adds	r7, #8
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	0800fcf4 	.word	0x0800fcf4
 8002784:	0800db30 	.word	0x0800db30
 8002788:	0800db38 	.word	0x0800db38
 800278c:	0800db3c 	.word	0x0800db3c

08002790 <receive_screen>:



static display_state_t receive_screen(void){
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
	display_state_t received_screen;
	xQueueReceive(display_queue, &received_screen, portMAX_DELAY);
 8002796:	4b06      	ldr	r3, [pc, #24]	@ (80027b0 <receive_screen+0x20>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	1df9      	adds	r1, r7, #7
 800279c:	f04f 32ff 	mov.w	r2, #4294967295
 80027a0:	4618      	mov	r0, r3
 80027a2:	f008 f887 	bl	800a8b4 <xQueueReceive>
	return received_screen;
 80027a6:	79fb      	ldrb	r3, [r7, #7]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	200004d0 	.word	0x200004d0

080027b4 <display_manager>:

/*================[Public tasks]=========================*/
void display_manager(void *pvParameters){
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
	display_state_t current_screen;
	display_init();
 80027bc:	f7ff fe4e 	bl	800245c <display_init>
	while(1){
		current_screen = receive_screen();
 80027c0:	f7ff ffe6 	bl	8002790 <receive_screen>
 80027c4:	4603      	mov	r3, r0
 80027c6:	73fb      	strb	r3, [r7, #15]
		switch(current_screen){
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	2b07      	cmp	r3, #7
 80027ce:	d82e      	bhi.n	800282e <display_manager+0x7a>
 80027d0:	a201      	add	r2, pc, #4	@ (adr r2, 80027d8 <display_manager+0x24>)
 80027d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d6:	bf00      	nop
 80027d8:	080027f9 	.word	0x080027f9
 80027dc:	080027ff 	.word	0x080027ff
 80027e0:	08002807 	.word	0x08002807
 80027e4:	0800280f 	.word	0x0800280f
 80027e8:	08002817 	.word	0x08002817
 80027ec:	0800281d 	.word	0x0800281d
 80027f0:	08002823 	.word	0x08002823
 80027f4:	08002829 	.word	0x08002829
		case PANTALLA_DE_INICIO:
			display_insert_key_msg();
 80027f8:	f7ff fe90 	bl	800251c <display_insert_key_msg>
			break;
 80027fc:	e018      	b.n	8002830 <display_manager+0x7c>
		case PANTALLA_AGREGAR_ENTRADA:
			display_sequence_entry(AGREGAR_DIGITO);
 80027fe:	2000      	movs	r0, #0
 8002800:	f7ff fe32 	bl	8002468 <display_sequence_entry>
			break;
 8002804:	e014      	b.n	8002830 <display_manager+0x7c>
		case PANTALLA_BORRAR_ENTRADA:
			display_sequence_entry(BORRAR_DIGITO);
 8002806:	2001      	movs	r0, #1
 8002808:	f7ff fe2e 	bl	8002468 <display_sequence_entry>
			break;
 800280c:	e010      	b.n	8002830 <display_manager+0x7c>
		case PANTALLA_BUSQUEDA_DE_USUARIO:
			display_sequence_entry(REINICIAR_ENTRADA);
 800280e:	2002      	movs	r0, #2
 8002810:	f7ff fe2a 	bl	8002468 <display_sequence_entry>
			break;
 8002814:	e00c      	b.n	8002830 <display_manager+0x7c>
		case PANTALLA_ACCESO_CONCEDIDO:
			display_access_granted();
 8002816:	f7ff ff33 	bl	8002680 <display_access_granted>
			break;
 800281a:	e009      	b.n	8002830 <display_manager+0x7c>
		case PANTALLA_USUARIO_NO_EXISTE:
			display_no_user_found();
 800281c:	f7ff ff68 	bl	80026f0 <display_no_user_found>
			break;
 8002820:	e006      	b.n	8002830 <display_manager+0x7c>
		case PANTALLA_TIMEOUT:
			display_timeout_msg();
 8002822:	f7ff feb5 	bl	8002590 <display_timeout_msg>
			break;
 8002826:	e003      	b.n	8002830 <display_manager+0x7c>
		case PANTALLA_SECUENCIA_INCOMPLETA:
			display_incomplete_msg();
 8002828:	f7ff feda 	bl	80025e0 <display_incomplete_msg>
			break;
 800282c:	e000      	b.n	8002830 <display_manager+0x7c>
		case PANTALLA_IDLE:
		default:
			break;
 800282e:	bf00      	nop
		current_screen = receive_screen();
 8002830:	e7c6      	b.n	80027c0 <display_manager+0xc>
 8002832:	bf00      	nop

08002834 <clear_buffer>:
	PROCEDER_A_BUSQUEDA_DE_USUARIO,
	SECUENCIA_INCOMPLETA,
	TIMEOUT
}keypad_state_t;
/*================[Private functions]====================*/
static void clear_buffer(char *buffer, uint8_t size){
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	70fb      	strb	r3, [r7, #3]
	/*Limpia el buffer que guarda la secuencia ingresada*/
	for(uint8_t i = 0; i < size; i++){
 8002840:	2300      	movs	r3, #0
 8002842:	73fb      	strb	r3, [r7, #15]
 8002844:	e007      	b.n	8002856 <clear_buffer+0x22>
		buffer[i] = 0;
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	4413      	add	r3, r2
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < size; i++){
 8002850:	7bfb      	ldrb	r3, [r7, #15]
 8002852:	3301      	adds	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
 8002856:	7bfa      	ldrb	r2, [r7, #15]
 8002858:	78fb      	ldrb	r3, [r7, #3]
 800285a:	429a      	cmp	r2, r3
 800285c:	d3f3      	bcc.n	8002846 <clear_buffer+0x12>
	}
	return;
 800285e:	bf00      	nop
}
 8002860:	3714      	adds	r7, #20
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <send_sequence>:

static void send_sequence(char *sequence, uint8_t sequence_length){
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	460b      	mov	r3, r1
 8002876:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 0; i < sequence_length; i++){
 8002878:	2300      	movs	r3, #0
 800287a:	73fb      	strb	r3, [r7, #15]
 800287c:	e00c      	b.n	8002898 <send_sequence+0x2c>
		xQueueSend(sequence_queue, &sequence[i], portMAX_DELAY);
 800287e:	4b0a      	ldr	r3, [pc, #40]	@ (80028a8 <send_sequence+0x3c>)
 8002880:	6818      	ldr	r0, [r3, #0]
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	18d1      	adds	r1, r2, r3
 8002888:	2300      	movs	r3, #0
 800288a:	f04f 32ff 	mov.w	r2, #4294967295
 800288e:	f007 fe7f 	bl	800a590 <xQueueGenericSend>
	for(uint8_t i = 0; i < sequence_length; i++){
 8002892:	7bfb      	ldrb	r3, [r7, #15]
 8002894:	3301      	adds	r3, #1
 8002896:	73fb      	strb	r3, [r7, #15]
 8002898:	7bfa      	ldrb	r2, [r7, #15]
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	429a      	cmp	r2, r3
 800289e:	d3ee      	bcc.n	800287e <send_sequence+0x12>
	}
	return;
 80028a0:	bf00      	nop
}
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	200004cc 	.word	0x200004cc

080028ac <handle_keypad_input>:

static display_state_t handle_keypad_input(uint8_t input){
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	71fb      	strb	r3, [r7, #7]
	static keypad_state_t current_state = ESPERANDO_DIGITO_1;
	//static char buffer[SEQUENCE_LENGTH + 1];
	static uint8_t current_index;
	static TickType_t start_time;
	/*Comienzo de la maquina de estados*/
	switch(current_state){
 80028b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002a34 <handle_keypad_input+0x188>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b07      	cmp	r3, #7
 80028bc:	f000 809c 	beq.w	80029f8 <handle_keypad_input+0x14c>
 80028c0:	2b07      	cmp	r3, #7
 80028c2:	f300 80a7 	bgt.w	8002a14 <handle_keypad_input+0x168>
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d007      	beq.n	80028da <handle_keypad_input+0x2e>
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f2c0 80a2 	blt.w	8002a14 <handle_keypad_input+0x168>
 80028d0:	3b01      	subs	r3, #1
 80028d2:	2b05      	cmp	r3, #5
 80028d4:	f200 809e 	bhi.w	8002a14 <handle_keypad_input+0x168>
 80028d8:	e027      	b.n	800292a <handle_keypad_input+0x7e>
	case ESPERANDO_DIGITO_1:
		if(input != 0){
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d021      	beq.n	8002924 <handle_keypad_input+0x78>
			if((input != BORRAR_DIGITO) && (input != ENTER)){
 80028e0:	79fb      	ldrb	r3, [r7, #7]
 80028e2:	2b23      	cmp	r3, #35	@ 0x23
 80028e4:	f000 80a0 	beq.w	8002a28 <handle_keypad_input+0x17c>
 80028e8:	79fb      	ldrb	r3, [r7, #7]
 80028ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80028ec:	f000 809c 	beq.w	8002a28 <handle_keypad_input+0x17c>
				current_index = 0;
 80028f0:	4b51      	ldr	r3, [pc, #324]	@ (8002a38 <handle_keypad_input+0x18c>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	701a      	strb	r2, [r3, #0]
				buffer[current_index] = input;
 80028f6:	4b50      	ldr	r3, [pc, #320]	@ (8002a38 <handle_keypad_input+0x18c>)
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	4619      	mov	r1, r3
 80028fc:	4a4f      	ldr	r2, [pc, #316]	@ (8002a3c <handle_keypad_input+0x190>)
 80028fe:	79fb      	ldrb	r3, [r7, #7]
 8002900:	5453      	strb	r3, [r2, r1]
				current_index++;
 8002902:	4b4d      	ldr	r3, [pc, #308]	@ (8002a38 <handle_keypad_input+0x18c>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	3301      	adds	r3, #1
 8002908:	b2da      	uxtb	r2, r3
 800290a:	4b4b      	ldr	r3, [pc, #300]	@ (8002a38 <handle_keypad_input+0x18c>)
 800290c:	701a      	strb	r2, [r3, #0]
				start_time = xTaskGetTickCount();
 800290e:	f008 fe97 	bl	800b640 <xTaskGetTickCount>
 8002912:	4603      	mov	r3, r0
 8002914:	4a4a      	ldr	r2, [pc, #296]	@ (8002a40 <handle_keypad_input+0x194>)
 8002916:	6013      	str	r3, [r2, #0]
				current_state = ESPERANDO_DIGITO_2;
 8002918:	4b46      	ldr	r3, [pc, #280]	@ (8002a34 <handle_keypad_input+0x188>)
 800291a:	2201      	movs	r2, #1
 800291c:	701a      	strb	r2, [r3, #0]
				current_screen = PANTALLA_AGREGAR_ENTRADA;
 800291e:	2302      	movs	r3, #2
 8002920:	73fb      	strb	r3, [r7, #15]
			}
		}
		else{
			current_screen = PANTALLA_DE_INICIO;
		}
		break;
 8002922:	e081      	b.n	8002a28 <handle_keypad_input+0x17c>
			current_screen = PANTALLA_DE_INICIO;
 8002924:	2301      	movs	r3, #1
 8002926:	73fb      	strb	r3, [r7, #15]
		break;
 8002928:	e07e      	b.n	8002a28 <handle_keypad_input+0x17c>
	case ESPERANDO_DIGITO_3:
	case ESPERANDO_DIGITO_4:
	case ESPERANDO_DIGITO_5:
	case ESPERANDO_DIGITO_6:
	case ESPERANDO_CONFIRMACION:
		if((xTaskGetTickCount() - start_time) < pdMS_TO_TICKS(KEYPAD_TIMEOUT)){
 800292a:	f008 fe89 	bl	800b640 <xTaskGetTickCount>
 800292e:	4602      	mov	r2, r0
 8002930:	4b43      	ldr	r3, [pc, #268]	@ (8002a40 <handle_keypad_input+0x194>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3287 	movw	r2, #4999	@ 0x1387
 800293a:	4293      	cmp	r3, r2
 800293c:	d856      	bhi.n	80029ec <handle_keypad_input+0x140>
			if(input != 0){
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d050      	beq.n	80029e6 <handle_keypad_input+0x13a>
				if(input == BORRAR_DIGITO){
 8002944:	79fb      	ldrb	r3, [r7, #7]
 8002946:	2b23      	cmp	r3, #35	@ 0x23
 8002948:	d119      	bne.n	800297e <handle_keypad_input+0xd2>
					current_index--;
 800294a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a38 <handle_keypad_input+0x18c>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	3b01      	subs	r3, #1
 8002950:	b2da      	uxtb	r2, r3
 8002952:	4b39      	ldr	r3, [pc, #228]	@ (8002a38 <handle_keypad_input+0x18c>)
 8002954:	701a      	strb	r2, [r3, #0]
					buffer[current_index] = 0;
 8002956:	4b38      	ldr	r3, [pc, #224]	@ (8002a38 <handle_keypad_input+0x18c>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	4b37      	ldr	r3, [pc, #220]	@ (8002a3c <handle_keypad_input+0x190>)
 800295e:	2100      	movs	r1, #0
 8002960:	5499      	strb	r1, [r3, r2]
					start_time = xTaskGetTickCount();
 8002962:	f008 fe6d 	bl	800b640 <xTaskGetTickCount>
 8002966:	4603      	mov	r3, r0
 8002968:	4a35      	ldr	r2, [pc, #212]	@ (8002a40 <handle_keypad_input+0x194>)
 800296a:	6013      	str	r3, [r2, #0]
					current_state--;
 800296c:	4b31      	ldr	r3, [pc, #196]	@ (8002a34 <handle_keypad_input+0x188>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	3b01      	subs	r3, #1
 8002972:	b2da      	uxtb	r2, r3
 8002974:	4b2f      	ldr	r3, [pc, #188]	@ (8002a34 <handle_keypad_input+0x188>)
 8002976:	701a      	strb	r2, [r3, #0]
					current_screen = PANTALLA_BORRAR_ENTRADA;
 8002978:	2303      	movs	r3, #3
 800297a:	73fb      	strb	r3, [r7, #15]
		}
		else{
			current_state = TIMEOUT;
			current_screen = PANTALLA_TIMEOUT;
		}
		break;
 800297c:	e055      	b.n	8002a2a <handle_keypad_input+0x17e>
					if(input == ENTER){
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	2b2a      	cmp	r3, #42	@ 0x2a
 8002982:	d10f      	bne.n	80029a4 <handle_keypad_input+0xf8>
						if(current_state == ESPERANDO_CONFIRMACION){
 8002984:	4b2b      	ldr	r3, [pc, #172]	@ (8002a34 <handle_keypad_input+0x188>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b06      	cmp	r3, #6
 800298a:	d105      	bne.n	8002998 <handle_keypad_input+0xec>
							current_state = PROCEDER_A_BUSQUEDA_DE_USUARIO;
 800298c:	4b29      	ldr	r3, [pc, #164]	@ (8002a34 <handle_keypad_input+0x188>)
 800298e:	2207      	movs	r2, #7
 8002990:	701a      	strb	r2, [r3, #0]
							current_screen = PANTALLA_BUSQUEDA_DE_USUARIO;
 8002992:	2304      	movs	r3, #4
 8002994:	73fb      	strb	r3, [r7, #15]
		break;
 8002996:	e048      	b.n	8002a2a <handle_keypad_input+0x17e>
							current_state = SECUENCIA_INCOMPLETA;
 8002998:	4b26      	ldr	r3, [pc, #152]	@ (8002a34 <handle_keypad_input+0x188>)
 800299a:	2208      	movs	r2, #8
 800299c:	701a      	strb	r2, [r3, #0]
							current_screen = PANTALLA_SECUENCIA_INCOMPLETA;
 800299e:	2308      	movs	r3, #8
 80029a0:	73fb      	strb	r3, [r7, #15]
		break;
 80029a2:	e042      	b.n	8002a2a <handle_keypad_input+0x17e>
						if(current_state != ESPERANDO_CONFIRMACION){
 80029a4:	4b23      	ldr	r3, [pc, #140]	@ (8002a34 <handle_keypad_input+0x188>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b06      	cmp	r3, #6
 80029aa:	d019      	beq.n	80029e0 <handle_keypad_input+0x134>
							buffer[current_index] = input;
 80029ac:	4b22      	ldr	r3, [pc, #136]	@ (8002a38 <handle_keypad_input+0x18c>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	4619      	mov	r1, r3
 80029b2:	4a22      	ldr	r2, [pc, #136]	@ (8002a3c <handle_keypad_input+0x190>)
 80029b4:	79fb      	ldrb	r3, [r7, #7]
 80029b6:	5453      	strb	r3, [r2, r1]
							current_index++;
 80029b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002a38 <handle_keypad_input+0x18c>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	3301      	adds	r3, #1
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a38 <handle_keypad_input+0x18c>)
 80029c2:	701a      	strb	r2, [r3, #0]
							start_time = xTaskGetTickCount();
 80029c4:	f008 fe3c 	bl	800b640 <xTaskGetTickCount>
 80029c8:	4603      	mov	r3, r0
 80029ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002a40 <handle_keypad_input+0x194>)
 80029cc:	6013      	str	r3, [r2, #0]
							current_state++;
 80029ce:	4b19      	ldr	r3, [pc, #100]	@ (8002a34 <handle_keypad_input+0x188>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	3301      	adds	r3, #1
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	4b17      	ldr	r3, [pc, #92]	@ (8002a34 <handle_keypad_input+0x188>)
 80029d8:	701a      	strb	r2, [r3, #0]
							current_screen = PANTALLA_AGREGAR_ENTRADA;
 80029da:	2302      	movs	r3, #2
 80029dc:	73fb      	strb	r3, [r7, #15]
		break;
 80029de:	e024      	b.n	8002a2a <handle_keypad_input+0x17e>
							current_screen = PANTALLA_IDLE;
 80029e0:	2300      	movs	r3, #0
 80029e2:	73fb      	strb	r3, [r7, #15]
		break;
 80029e4:	e021      	b.n	8002a2a <handle_keypad_input+0x17e>
				current_screen = PANTALLA_IDLE;
 80029e6:	2300      	movs	r3, #0
 80029e8:	73fb      	strb	r3, [r7, #15]
		break;
 80029ea:	e01e      	b.n	8002a2a <handle_keypad_input+0x17e>
			current_state = TIMEOUT;
 80029ec:	4b11      	ldr	r3, [pc, #68]	@ (8002a34 <handle_keypad_input+0x188>)
 80029ee:	2209      	movs	r2, #9
 80029f0:	701a      	strb	r2, [r3, #0]
			current_screen = PANTALLA_TIMEOUT;
 80029f2:	2307      	movs	r3, #7
 80029f4:	73fb      	strb	r3, [r7, #15]
		break;
 80029f6:	e018      	b.n	8002a2a <handle_keypad_input+0x17e>
	case PROCEDER_A_BUSQUEDA_DE_USUARIO:
		send_sequence(buffer, SEQUENCE_LENGTH);
 80029f8:	2106      	movs	r1, #6
 80029fa:	4810      	ldr	r0, [pc, #64]	@ (8002a3c <handle_keypad_input+0x190>)
 80029fc:	f7ff ff36 	bl	800286c <send_sequence>
		clear_buffer(buffer, SEQUENCE_LENGTH);
 8002a00:	2106      	movs	r1, #6
 8002a02:	480e      	ldr	r0, [pc, #56]	@ (8002a3c <handle_keypad_input+0x190>)
 8002a04:	f7ff ff16 	bl	8002834 <clear_buffer>
		current_state = ESPERANDO_DIGITO_1;
 8002a08:	4b0a      	ldr	r3, [pc, #40]	@ (8002a34 <handle_keypad_input+0x188>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
		current_screen = PANTALLA_DE_INICIO;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
		break;
 8002a12:	e00a      	b.n	8002a2a <handle_keypad_input+0x17e>
	case SECUENCIA_INCOMPLETA:
	case TIMEOUT:
	default:
		clear_buffer(buffer, SEQUENCE_LENGTH);
 8002a14:	2106      	movs	r1, #6
 8002a16:	4809      	ldr	r0, [pc, #36]	@ (8002a3c <handle_keypad_input+0x190>)
 8002a18:	f7ff ff0c 	bl	8002834 <clear_buffer>
		current_state = ESPERANDO_DIGITO_1;
 8002a1c:	4b05      	ldr	r3, [pc, #20]	@ (8002a34 <handle_keypad_input+0x188>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	701a      	strb	r2, [r3, #0]
		current_screen = PANTALLA_DE_INICIO;
 8002a22:	2301      	movs	r3, #1
 8002a24:	73fb      	strb	r3, [r7, #15]
		break;
 8002a26:	e000      	b.n	8002a2a <handle_keypad_input+0x17e>
		break;
 8002a28:	bf00      	nop
	}
	/*Enviar pantalla al display*/
	return current_screen;
 8002a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20002abb 	.word	0x20002abb
 8002a38:	20002abc 	.word	0x20002abc
 8002a3c:	20002ab4 	.word	0x20002ab4
 8002a40:	20002ac0 	.word	0x20002ac0

08002a44 <input_sequence_scan>:

/*================[Public Task]=====================*/
void input_sequence_scan(void *pvParameters){
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
	display_state_t current_screen = PANTALLA_DE_INICIO;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
	uint8_t input;
	/*Pongo la pantalla inicial*/
	send_screen_to_display(current_screen);
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe fc44 	bl	80012e0 <send_screen_to_display>
	while(1){
		input = read_keypad();
 8002a58:	f7fe fedc 	bl	8001814 <read_keypad>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	73bb      	strb	r3, [r7, #14]
		current_screen = handle_keypad_input(input);
 8002a60:	7bbb      	ldrb	r3, [r7, #14]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff ff22 	bl	80028ac <handle_keypad_input>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	73fb      	strb	r3, [r7, #15]
		send_screen_to_display(current_screen);
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe fc36 	bl	80012e0 <send_screen_to_display>
		input = read_keypad();
 8002a74:	bf00      	nop
 8002a76:	e7ef      	b.n	8002a58 <input_sequence_scan+0x14>

08002a78 <check_if_database_exists>:
/*================[Private variables]======================*/
display_state_t current_screen;
/*================[Extern variables]=======================*/
extern QueueHandle_t sequence_queue;
/*================[Private functions]======================*/
static void check_if_database_exists(char *name){
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
	bool file_exists;
	file_exists = check_if_file_exists(name);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff fc39 	bl	80022f8 <check_if_file_exists>
 8002a86:	4603      	mov	r3, r0
 8002a88:	73fb      	strb	r3, [r7, #15]
	if(file_exists == false){
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	f083 0301 	eor.w	r3, r3, #1
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d004      	beq.n	8002aa0 <check_if_database_exists+0x28>
		send_uart("No existe la base de datos!!!\n\n");
 8002a96:	4804      	ldr	r0, [pc, #16]	@ (8002aa8 <check_if_database_exists+0x30>)
 8002a98:	f7ff fbda 	bl	8002250 <send_uart>
		while(1){
 8002a9c:	bf00      	nop
 8002a9e:	e7fd      	b.n	8002a9c <check_if_database_exists+0x24>
			/*Reiniciar y cargar la base de datos*/
		}
	}
	return;
 8002aa0:	bf00      	nop
}
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	0800db48 	.word	0x0800db48

08002aac <check_if_register_exists>:

static void check_if_register_exists(char *name){
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
	bool file_exists;
	file_exists = check_if_file_exists(name);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff fc1f 	bl	80022f8 <check_if_file_exists>
 8002aba:	4603      	mov	r3, r0
 8002abc:	73fb      	strb	r3, [r7, #15]
	if(file_exists == false){
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
 8002ac0:	f083 0301 	eor.w	r3, r3, #1
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <check_if_register_exists+0x32>
		send_uart("No existe registro de personas!!!\n\n");
 8002aca:	4807      	ldr	r0, [pc, #28]	@ (8002ae8 <check_if_register_exists+0x3c>)
 8002acc:	f7ff fbc0 	bl	8002250 <send_uart>
		send_uart("Creando registro nuevo.\n\n");
 8002ad0:	4806      	ldr	r0, [pc, #24]	@ (8002aec <check_if_register_exists+0x40>)
 8002ad2:	f7ff fbbd 	bl	8002250 <send_uart>
		create_file(name);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7ff fc2c 	bl	8002334 <create_file>
	}
	return;
 8002adc:	bf00      	nop
 8002ade:	bf00      	nop
}
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	0800db68 	.word	0x0800db68
 8002aec:	0800db8c 	.word	0x0800db8c

08002af0 <check_if_user_exists_on_database>:

static bool check_if_user_exists_on_database(char *name, char *user_sequence, char *user_name){
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
	char *current_user_sequence;
	bool user_exists = false;
 8002afc:	2300      	movs	r3, #0
 8002afe:	75fb      	strb	r3, [r7, #23]
	open_file(name);
 8002b00:	68f8      	ldr	r0, [r7, #12]
 8002b02:	f7ff fc61 	bl	80023c8 <open_file>
	get_line_from_file(user_name, 50);										/*Descarto el header del archivo*/
 8002b06:	2132      	movs	r1, #50	@ 0x32
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff fc95 	bl	8002438 <get_line_from_file>
	while(get_line_from_file(user_name, 50) != 0){							//Se rompe el while al llegar al final del archivo
 8002b0e:	e016      	b.n	8002b3e <check_if_user_exists_on_database+0x4e>
		user_name = strtok(user_name, " ");									//Usando este delimitador consigo primero el usuario de esa linea
 8002b10:	4911      	ldr	r1, [pc, #68]	@ (8002b58 <check_if_user_exists_on_database+0x68>)
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f00a f816 	bl	800cb44 <strtok>
 8002b18:	6078      	str	r0, [r7, #4]
		current_user_sequence = strtok(NULL, ",");						//Luego se consigue la secuencia asociada de esa linea
 8002b1a:	4910      	ldr	r1, [pc, #64]	@ (8002b5c <check_if_user_exists_on_database+0x6c>)
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f00a f811 	bl	800cb44 <strtok>
 8002b22:	6138      	str	r0, [r7, #16]
		if(current_user_sequence != NULL){
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d009      	beq.n	8002b3e <check_if_user_exists_on_database+0x4e>
			if(strcmp(current_user_sequence, user_sequence) == 0){		//De hallarse una secuencia igual a la ingresada el usuario existe
 8002b2a:	68b9      	ldr	r1, [r7, #8]
 8002b2c:	6938      	ldr	r0, [r7, #16]
 8002b2e:	f7fd fb57 	bl	80001e0 <strcmp>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d102      	bne.n	8002b3e <check_if_user_exists_on_database+0x4e>
				user_exists = true;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	75fb      	strb	r3, [r7, #23]
				break;
 8002b3c:	e006      	b.n	8002b4c <check_if_user_exists_on_database+0x5c>
	while(get_line_from_file(user_name, 50) != 0){							//Se rompe el while al llegar al final del archivo
 8002b3e:	2132      	movs	r1, #50	@ 0x32
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f7ff fc79 	bl	8002438 <get_line_from_file>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1e1      	bne.n	8002b10 <check_if_user_exists_on_database+0x20>
			}
		}
	}
	return user_exists;
 8002b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	0800dba8 	.word	0x0800dba8
 8002b5c:	0800dbac 	.word	0x0800dbac

08002b60 <receive_sequence>:

static void receive_sequence(char *sequence_buffer){
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < SEQUENCE_LENGTH; i++){
 8002b68:	2300      	movs	r3, #0
 8002b6a:	73fb      	strb	r3, [r7, #15]
 8002b6c:	e00c      	b.n	8002b88 <receive_sequence+0x28>
		xQueueReceive(sequence_queue, &sequence_buffer[i], portMAX_DELAY);
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b98 <receive_sequence+0x38>)
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	4413      	add	r3, r2
 8002b78:	f04f 32ff 	mov.w	r2, #4294967295
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f007 fe99 	bl	800a8b4 <xQueueReceive>
	for(uint8_t i = 0; i < SEQUENCE_LENGTH; i++){
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	3301      	adds	r3, #1
 8002b86:	73fb      	strb	r3, [r7, #15]
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	2b05      	cmp	r3, #5
 8002b8c:	d9ef      	bls.n	8002b6e <receive_sequence+0xe>
	}
}
 8002b8e:	bf00      	nop
 8002b90:	bf00      	nop
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	200004cc 	.word	0x200004cc

08002b9c <user_check_task>:

/*================[Public task]==========================*/
void user_check_task(void *pvParameters){
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
	char access_sequence[SEQUENCE_LENGTH + 1];
	char *user_name;
	bool user_exists = false;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	75fb      	strb	r3, [r7, #23]
	/*Realizo chequeo de archivos necesarios en la SD*/
	mount_sd("/");
 8002ba8:	481d      	ldr	r0, [pc, #116]	@ (8002c20 <user_check_task+0x84>)
 8002baa:	f7ff fb67 	bl	800227c <mount_sd>
	check_if_database_exists("database_personas.txt");
 8002bae:	481d      	ldr	r0, [pc, #116]	@ (8002c24 <user_check_task+0x88>)
 8002bb0:	f7ff ff62 	bl	8002a78 <check_if_database_exists>
	check_if_register_exists("registro_accesos.txt");
 8002bb4:	481c      	ldr	r0, [pc, #112]	@ (8002c28 <user_check_task+0x8c>)
 8002bb6:	f7ff ff79 	bl	8002aac <check_if_register_exists>
	unmount_sd("/");
 8002bba:	4819      	ldr	r0, [pc, #100]	@ (8002c20 <user_check_task+0x84>)
 8002bbc:	f7ff fb7e 	bl	80022bc <unmount_sd>
	while(1){
		receive_sequence(access_sequence);
 8002bc0:	f107 0308 	add.w	r3, r7, #8
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff ffcb 	bl	8002b60 <receive_sequence>
		mount_sd("/");
 8002bca:	4815      	ldr	r0, [pc, #84]	@ (8002c20 <user_check_task+0x84>)
 8002bcc:	f7ff fb56 	bl	800227c <mount_sd>
		user_name = pvPortMalloc(50 * sizeof(char));
 8002bd0:	2032      	movs	r0, #50	@ 0x32
 8002bd2:	f009 fcbb 	bl	800c54c <pvPortMalloc>
 8002bd6:	6138      	str	r0, [r7, #16]
		user_exists = check_if_user_exists_on_database("database_personas.txt", access_sequence, user_name);
 8002bd8:	f107 0308 	add.w	r3, r7, #8
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4619      	mov	r1, r3
 8002be0:	4810      	ldr	r0, [pc, #64]	@ (8002c24 <user_check_task+0x88>)
 8002be2:	f7ff ff85 	bl	8002af0 <check_if_user_exists_on_database>
 8002be6:	4603      	mov	r3, r0
 8002be8:	75fb      	strb	r3, [r7, #23]
		if(user_exists){
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <user_check_task+0x66>
			current_screen = PANTALLA_ACCESO_CONCEDIDO;
 8002bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8002c2c <user_check_task+0x90>)
 8002bf2:	2205      	movs	r2, #5
 8002bf4:	701a      	strb	r2, [r3, #0]
			send_screen_to_display(current_screen);
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c2c <user_check_task+0x90>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe fb70 	bl	80012e0 <send_screen_to_display>
 8002c00:	e007      	b.n	8002c12 <user_check_task+0x76>

		}
		else{
			current_screen = PANTALLA_USUARIO_NO_EXISTE;
 8002c02:	4b0a      	ldr	r3, [pc, #40]	@ (8002c2c <user_check_task+0x90>)
 8002c04:	2206      	movs	r2, #6
 8002c06:	701a      	strb	r2, [r3, #0]
			send_screen_to_display(current_screen);
 8002c08:	4b08      	ldr	r3, [pc, #32]	@ (8002c2c <user_check_task+0x90>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe fb67 	bl	80012e0 <send_screen_to_display>
		}
		mount_sd("/");
 8002c12:	4803      	ldr	r0, [pc, #12]	@ (8002c20 <user_check_task+0x84>)
 8002c14:	f7ff fb32 	bl	800227c <mount_sd>
		vPortFree(user_name);
 8002c18:	6938      	ldr	r0, [r7, #16]
 8002c1a:	f009 fd65 	bl	800c6e8 <vPortFree>
		receive_sequence(access_sequence);
 8002c1e:	e7cf      	b.n	8002bc0 <user_check_task+0x24>
 8002c20:	0800dbb0 	.word	0x0800dbb0
 8002c24:	0800dbb4 	.word	0x0800dbb4
 8002c28:	0800dbcc 	.word	0x0800dbcc
 8002c2c:	20002ac4 	.word	0x20002ac4

08002c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c34:	4b0e      	ldr	r3, [pc, #56]	@ (8002c70 <HAL_Init+0x40>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a0d      	ldr	r2, [pc, #52]	@ (8002c70 <HAL_Init+0x40>)
 8002c3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c40:	4b0b      	ldr	r3, [pc, #44]	@ (8002c70 <HAL_Init+0x40>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a0a      	ldr	r2, [pc, #40]	@ (8002c70 <HAL_Init+0x40>)
 8002c46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c4c:	4b08      	ldr	r3, [pc, #32]	@ (8002c70 <HAL_Init+0x40>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a07      	ldr	r2, [pc, #28]	@ (8002c70 <HAL_Init+0x40>)
 8002c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c58:	2003      	movs	r0, #3
 8002c5a:	f000 fb5e 	bl	800331a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c5e:	200f      	movs	r0, #15
 8002c60:	f7fe f95a 	bl	8000f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c64:	f7fd ffb2 	bl	8000bcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023c00 	.word	0x40023c00

08002c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c78:	4b06      	ldr	r3, [pc, #24]	@ (8002c94 <HAL_IncTick+0x20>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <HAL_IncTick+0x24>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4413      	add	r3, r2
 8002c84:	4a04      	ldr	r2, [pc, #16]	@ (8002c98 <HAL_IncTick+0x24>)
 8002c86:	6013      	str	r3, [r2, #0]
}
 8002c88:	bf00      	nop
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	20000028 	.word	0x20000028
 8002c98:	20002ac8 	.word	0x20002ac8

08002c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002ca0:	4b03      	ldr	r3, [pc, #12]	@ (8002cb0 <HAL_GetTick+0x14>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	20002ac8 	.word	0x20002ac8

08002cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cbc:	f7ff ffee 	bl	8002c9c <HAL_GetTick>
 8002cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d005      	beq.n	8002cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cce:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf8 <HAL_Delay+0x44>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cda:	bf00      	nop
 8002cdc:	f7ff ffde 	bl	8002c9c <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d8f7      	bhi.n	8002cdc <HAL_Delay+0x28>
  {
  }
}
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000028 	.word	0x20000028

08002cfc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d04:	2300      	movs	r3, #0
 8002d06:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e033      	b.n	8002d7a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d109      	bne.n	8002d2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7fd ff82 	bl	8000c24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d118      	bne.n	8002d6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d42:	f023 0302 	bic.w	r3, r3, #2
 8002d46:	f043 0202 	orr.w	r2, r3, #2
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 f93a 	bl	8002fc8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	f023 0303 	bic.w	r3, r3, #3
 8002d62:	f043 0201 	orr.w	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d6a:	e001      	b.n	8002d70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x1c>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e105      	b.n	8002fac <HAL_ADC_ConfigChannel+0x228>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b09      	cmp	r3, #9
 8002dae:	d925      	bls.n	8002dfc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68d9      	ldr	r1, [r3, #12]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3b1e      	subs	r3, #30
 8002dc6:	2207      	movs	r2, #7
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43da      	mvns	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	400a      	ands	r2, r1
 8002dd4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68d9      	ldr	r1, [r3, #12]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	4618      	mov	r0, r3
 8002de8:	4603      	mov	r3, r0
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	4403      	add	r3, r0
 8002dee:	3b1e      	subs	r3, #30
 8002df0:	409a      	lsls	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	60da      	str	r2, [r3, #12]
 8002dfa:	e022      	b.n	8002e42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6919      	ldr	r1, [r3, #16]
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	b29b      	uxth	r3, r3
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4413      	add	r3, r2
 8002e10:	2207      	movs	r2, #7
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43da      	mvns	r2, r3
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	400a      	ands	r2, r1
 8002e1e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6919      	ldr	r1, [r3, #16]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	689a      	ldr	r2, [r3, #8]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	4618      	mov	r0, r3
 8002e32:	4603      	mov	r3, r0
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	4403      	add	r3, r0
 8002e38:	409a      	lsls	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	d824      	bhi.n	8002e94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	3b05      	subs	r3, #5
 8002e5c:	221f      	movs	r2, #31
 8002e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e62:	43da      	mvns	r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	400a      	ands	r2, r1
 8002e6a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	4618      	mov	r0, r3
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	3b05      	subs	r3, #5
 8002e86:	fa00 f203 	lsl.w	r2, r0, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e92:	e04c      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b0c      	cmp	r3, #12
 8002e9a:	d824      	bhi.n	8002ee6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	3b23      	subs	r3, #35	@ 0x23
 8002eae:	221f      	movs	r2, #31
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	43da      	mvns	r2, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	400a      	ands	r2, r1
 8002ebc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	4618      	mov	r0, r3
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685a      	ldr	r2, [r3, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	3b23      	subs	r3, #35	@ 0x23
 8002ed8:	fa00 f203 	lsl.w	r2, r0, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	430a      	orrs	r2, r1
 8002ee2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002ee4:	e023      	b.n	8002f2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3b41      	subs	r3, #65	@ 0x41
 8002ef8:	221f      	movs	r2, #31
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43da      	mvns	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	400a      	ands	r2, r1
 8002f06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	4618      	mov	r0, r3
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	3b41      	subs	r3, #65	@ 0x41
 8002f22:	fa00 f203 	lsl.w	r2, r0, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f2e:	4b22      	ldr	r3, [pc, #136]	@ (8002fb8 <HAL_ADC_ConfigChannel+0x234>)
 8002f30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a21      	ldr	r2, [pc, #132]	@ (8002fbc <HAL_ADC_ConfigChannel+0x238>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d109      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x1cc>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b12      	cmp	r3, #18
 8002f42:	d105      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a19      	ldr	r2, [pc, #100]	@ (8002fbc <HAL_ADC_ConfigChannel+0x238>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d123      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x21e>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2b10      	cmp	r3, #16
 8002f60:	d003      	beq.n	8002f6a <HAL_ADC_ConfigChannel+0x1e6>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b11      	cmp	r3, #17
 8002f68:	d11b      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b10      	cmp	r3, #16
 8002f7c:	d111      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f7e:	4b10      	ldr	r3, [pc, #64]	@ (8002fc0 <HAL_ADC_ConfigChannel+0x23c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a10      	ldr	r2, [pc, #64]	@ (8002fc4 <HAL_ADC_ConfigChannel+0x240>)
 8002f84:	fba2 2303 	umull	r2, r3, r2, r3
 8002f88:	0c9a      	lsrs	r2, r3, #18
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f94:	e002      	b.n	8002f9c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f9      	bne.n	8002f96 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	40012300 	.word	0x40012300
 8002fbc:	40012000 	.word	0x40012000
 8002fc0:	20000000 	.word	0x20000000
 8002fc4:	431bde83 	.word	0x431bde83

08002fc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fd0:	4b79      	ldr	r3, [pc, #484]	@ (80031b8 <ADC_Init+0x1f0>)
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ffc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6859      	ldr	r1, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	021a      	lsls	r2, r3, #8
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6859      	ldr	r1, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003042:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6899      	ldr	r1, [r3, #8]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	430a      	orrs	r2, r1
 8003054:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305a:	4a58      	ldr	r2, [pc, #352]	@ (80031bc <ADC_Init+0x1f4>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d022      	beq.n	80030a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800306e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6899      	ldr	r1, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003090:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6899      	ldr	r1, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	430a      	orrs	r2, r1
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	e00f      	b.n	80030c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0202 	bic.w	r2, r2, #2
 80030d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6899      	ldr	r1, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	7e1b      	ldrb	r3, [r3, #24]
 80030e0:	005a      	lsls	r2, r3, #1
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d01b      	beq.n	800312c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003102:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003112:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6859      	ldr	r1, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311e:	3b01      	subs	r3, #1
 8003120:	035a      	lsls	r2, r3, #13
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	e007      	b.n	800313c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800313a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800314a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	3b01      	subs	r3, #1
 8003158:	051a      	lsls	r2, r3, #20
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003170:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6899      	ldr	r1, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800317e:	025a      	lsls	r2, r3, #9
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003196:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6899      	ldr	r1, [r3, #8]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	029a      	lsls	r2, r3, #10
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	609a      	str	r2, [r3, #8]
}
 80031ac:	bf00      	nop
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr
 80031b8:	40012300 	.word	0x40012300
 80031bc:	0f000001 	.word	0x0f000001

080031c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f003 0307 	and.w	r3, r3, #7
 80031ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003204 <__NVIC_SetPriorityGrouping+0x44>)
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031d6:	68ba      	ldr	r2, [r7, #8]
 80031d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031dc:	4013      	ands	r3, r2
 80031de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031f2:	4a04      	ldr	r2, [pc, #16]	@ (8003204 <__NVIC_SetPriorityGrouping+0x44>)
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	60d3      	str	r3, [r2, #12]
}
 80031f8:	bf00      	nop
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003208:	b480      	push	{r7}
 800320a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800320c:	4b04      	ldr	r3, [pc, #16]	@ (8003220 <__NVIC_GetPriorityGrouping+0x18>)
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	0a1b      	lsrs	r3, r3, #8
 8003212:	f003 0307 	and.w	r3, r3, #7
}
 8003216:	4618      	mov	r0, r3
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800322e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003232:	2b00      	cmp	r3, #0
 8003234:	db0b      	blt.n	800324e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003236:	79fb      	ldrb	r3, [r7, #7]
 8003238:	f003 021f 	and.w	r2, r3, #31
 800323c:	4907      	ldr	r1, [pc, #28]	@ (800325c <__NVIC_EnableIRQ+0x38>)
 800323e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003242:	095b      	lsrs	r3, r3, #5
 8003244:	2001      	movs	r0, #1
 8003246:	fa00 f202 	lsl.w	r2, r0, r2
 800324a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	e000e100 	.word	0xe000e100

08003260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	4603      	mov	r3, r0
 8003268:	6039      	str	r1, [r7, #0]
 800326a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800326c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003270:	2b00      	cmp	r3, #0
 8003272:	db0a      	blt.n	800328a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	b2da      	uxtb	r2, r3
 8003278:	490c      	ldr	r1, [pc, #48]	@ (80032ac <__NVIC_SetPriority+0x4c>)
 800327a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327e:	0112      	lsls	r2, r2, #4
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	440b      	add	r3, r1
 8003284:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003288:	e00a      	b.n	80032a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	b2da      	uxtb	r2, r3
 800328e:	4908      	ldr	r1, [pc, #32]	@ (80032b0 <__NVIC_SetPriority+0x50>)
 8003290:	79fb      	ldrb	r3, [r7, #7]
 8003292:	f003 030f 	and.w	r3, r3, #15
 8003296:	3b04      	subs	r3, #4
 8003298:	0112      	lsls	r2, r2, #4
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	440b      	add	r3, r1
 800329e:	761a      	strb	r2, [r3, #24]
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	e000e100 	.word	0xe000e100
 80032b0:	e000ed00 	.word	0xe000ed00

080032b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b089      	sub	sp, #36	@ 0x24
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	f1c3 0307 	rsb	r3, r3, #7
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	bf28      	it	cs
 80032d2:	2304      	movcs	r3, #4
 80032d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	3304      	adds	r3, #4
 80032da:	2b06      	cmp	r3, #6
 80032dc:	d902      	bls.n	80032e4 <NVIC_EncodePriority+0x30>
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	3b03      	subs	r3, #3
 80032e2:	e000      	b.n	80032e6 <NVIC_EncodePriority+0x32>
 80032e4:	2300      	movs	r3, #0
 80032e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032e8:	f04f 32ff 	mov.w	r2, #4294967295
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	43da      	mvns	r2, r3
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	401a      	ands	r2, r3
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	fa01 f303 	lsl.w	r3, r1, r3
 8003306:	43d9      	mvns	r1, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800330c:	4313      	orrs	r3, r2
         );
}
 800330e:	4618      	mov	r0, r3
 8003310:	3724      	adds	r7, #36	@ 0x24
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff ff4c 	bl	80031c0 <__NVIC_SetPriorityGrouping>
}
 8003328:	bf00      	nop
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
 800333c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003342:	f7ff ff61 	bl	8003208 <__NVIC_GetPriorityGrouping>
 8003346:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	68b9      	ldr	r1, [r7, #8]
 800334c:	6978      	ldr	r0, [r7, #20]
 800334e:	f7ff ffb1 	bl	80032b4 <NVIC_EncodePriority>
 8003352:	4602      	mov	r2, r0
 8003354:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003358:	4611      	mov	r1, r2
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff ff80 	bl	8003260 <__NVIC_SetPriority>
}
 8003360:	bf00      	nop
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff ff54 	bl	8003224 <__NVIC_EnableIRQ>
}
 800337c:	bf00      	nop
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800338c:	2300      	movs	r3, #0
 800338e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003390:	f7ff fc84 	bl	8002c9c <HAL_GetTick>
 8003394:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e099      	b.n	80034d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0201 	bic.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033c0:	e00f      	b.n	80033e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033c2:	f7ff fc6b 	bl	8002c9c <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b05      	cmp	r3, #5
 80033ce:	d908      	bls.n	80033e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2203      	movs	r2, #3
 80033da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e078      	b.n	80034d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e8      	bne.n	80033c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	4b38      	ldr	r3, [pc, #224]	@ (80034dc <HAL_DMA_Init+0x158>)
 80033fc:	4013      	ands	r3, r2
 80033fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800340e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800341a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003426:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	2b04      	cmp	r3, #4
 800343a:	d107      	bne.n	800344c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003444:	4313      	orrs	r3, r2
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4313      	orrs	r3, r2
 800344a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f023 0307 	bic.w	r3, r3, #7
 8003462:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4313      	orrs	r3, r2
 800346c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003472:	2b04      	cmp	r3, #4
 8003474:	d117      	bne.n	80034a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	4313      	orrs	r3, r2
 800347e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00e      	beq.n	80034a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f9e9 	bl	8003860 <DMA_CheckFifoParam>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d008      	beq.n	80034a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2240      	movs	r2, #64	@ 0x40
 8003498:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2201      	movs	r2, #1
 800349e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80034a2:	2301      	movs	r3, #1
 80034a4:	e016      	b.n	80034d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f9a0 	bl	80037f4 <DMA_CalcBaseAndBitshift>
 80034b4:	4603      	mov	r3, r0
 80034b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034bc:	223f      	movs	r2, #63	@ 0x3f
 80034be:	409a      	lsls	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}
 80034dc:	f010803f 	.word	0xf010803f

080034e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80034ec:	4b8e      	ldr	r3, [pc, #568]	@ (8003728 <HAL_DMA_IRQHandler+0x248>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a8e      	ldr	r2, [pc, #568]	@ (800372c <HAL_DMA_IRQHandler+0x24c>)
 80034f2:	fba2 2303 	umull	r2, r3, r2, r3
 80034f6:	0a9b      	lsrs	r3, r3, #10
 80034f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800350a:	2208      	movs	r2, #8
 800350c:	409a      	lsls	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	4013      	ands	r3, r2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d01a      	beq.n	800354c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0304 	and.w	r3, r3, #4
 8003520:	2b00      	cmp	r3, #0
 8003522:	d013      	beq.n	800354c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0204 	bic.w	r2, r2, #4
 8003532:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003538:	2208      	movs	r2, #8
 800353a:	409a      	lsls	r2, r3
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003544:	f043 0201 	orr.w	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003550:	2201      	movs	r2, #1
 8003552:	409a      	lsls	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	4013      	ands	r3, r2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d012      	beq.n	8003582 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00b      	beq.n	8003582 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800356e:	2201      	movs	r2, #1
 8003570:	409a      	lsls	r2, r3
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800357a:	f043 0202 	orr.w	r2, r3, #2
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003586:	2204      	movs	r2, #4
 8003588:	409a      	lsls	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	4013      	ands	r3, r2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d012      	beq.n	80035b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00b      	beq.n	80035b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a4:	2204      	movs	r2, #4
 80035a6:	409a      	lsls	r2, r3
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b0:	f043 0204 	orr.w	r2, r3, #4
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035bc:	2210      	movs	r2, #16
 80035be:	409a      	lsls	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4013      	ands	r3, r2
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d043      	beq.n	8003650 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d03c      	beq.n	8003650 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035da:	2210      	movs	r2, #16
 80035dc:	409a      	lsls	r2, r3
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d018      	beq.n	8003622 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d108      	bne.n	8003610 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d024      	beq.n	8003650 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	4798      	blx	r3
 800360e:	e01f      	b.n	8003650 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01b      	beq.n	8003650 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	4798      	blx	r3
 8003620:	e016      	b.n	8003650 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800362c:	2b00      	cmp	r3, #0
 800362e:	d107      	bne.n	8003640 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0208 	bic.w	r2, r2, #8
 800363e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003654:	2220      	movs	r2, #32
 8003656:	409a      	lsls	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4013      	ands	r3, r2
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 808f 	beq.w	8003780 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0310 	and.w	r3, r3, #16
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 8087 	beq.w	8003780 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003676:	2220      	movs	r2, #32
 8003678:	409a      	lsls	r2, r3
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b05      	cmp	r3, #5
 8003688:	d136      	bne.n	80036f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0216 	bic.w	r2, r2, #22
 8003698:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695a      	ldr	r2, [r3, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d103      	bne.n	80036ba <HAL_DMA_IRQHandler+0x1da>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d007      	beq.n	80036ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0208 	bic.w	r2, r2, #8
 80036c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ce:	223f      	movs	r2, #63	@ 0x3f
 80036d0:	409a      	lsls	r2, r3
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d07e      	beq.n	80037ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	4798      	blx	r3
        }
        return;
 80036f6:	e079      	b.n	80037ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d01d      	beq.n	8003742 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10d      	bne.n	8003730 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003718:	2b00      	cmp	r3, #0
 800371a:	d031      	beq.n	8003780 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	4798      	blx	r3
 8003724:	e02c      	b.n	8003780 <HAL_DMA_IRQHandler+0x2a0>
 8003726:	bf00      	nop
 8003728:	20000000 	.word	0x20000000
 800372c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003734:	2b00      	cmp	r3, #0
 8003736:	d023      	beq.n	8003780 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	4798      	blx	r3
 8003740:	e01e      	b.n	8003780 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10f      	bne.n	8003770 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0210 	bic.w	r2, r2, #16
 800375e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003774:	2b00      	cmp	r3, #0
 8003776:	d003      	beq.n	8003780 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003784:	2b00      	cmp	r3, #0
 8003786:	d032      	beq.n	80037ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d022      	beq.n	80037da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2205      	movs	r2, #5
 8003798:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0201 	bic.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	3301      	adds	r3, #1
 80037b0:	60bb      	str	r3, [r7, #8]
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d307      	bcc.n	80037c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f2      	bne.n	80037ac <HAL_DMA_IRQHandler+0x2cc>
 80037c6:	e000      	b.n	80037ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80037c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2201      	movs	r2, #1
 80037ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d005      	beq.n	80037ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	4798      	blx	r3
 80037ea:	e000      	b.n	80037ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80037ec:	bf00      	nop
    }
  }
}
 80037ee:	3718      	adds	r7, #24
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	b2db      	uxtb	r3, r3
 8003802:	3b10      	subs	r3, #16
 8003804:	4a14      	ldr	r2, [pc, #80]	@ (8003858 <DMA_CalcBaseAndBitshift+0x64>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	091b      	lsrs	r3, r3, #4
 800380c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800380e:	4a13      	ldr	r2, [pc, #76]	@ (800385c <DMA_CalcBaseAndBitshift+0x68>)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4413      	add	r3, r2
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	461a      	mov	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2b03      	cmp	r3, #3
 8003820:	d909      	bls.n	8003836 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800382a:	f023 0303 	bic.w	r3, r3, #3
 800382e:	1d1a      	adds	r2, r3, #4
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	659a      	str	r2, [r3, #88]	@ 0x58
 8003834:	e007      	b.n	8003846 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800383e:	f023 0303 	bic.w	r3, r3, #3
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	aaaaaaab 	.word	0xaaaaaaab
 800385c:	0800fd0c 	.word	0x0800fd0c

08003860 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003870:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	699b      	ldr	r3, [r3, #24]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d11f      	bne.n	80038ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2b03      	cmp	r3, #3
 800387e:	d856      	bhi.n	800392e <DMA_CheckFifoParam+0xce>
 8003880:	a201      	add	r2, pc, #4	@ (adr r2, 8003888 <DMA_CheckFifoParam+0x28>)
 8003882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003886:	bf00      	nop
 8003888:	08003899 	.word	0x08003899
 800388c:	080038ab 	.word	0x080038ab
 8003890:	08003899 	.word	0x08003899
 8003894:	0800392f 	.word	0x0800392f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d046      	beq.n	8003932 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a8:	e043      	b.n	8003932 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80038b2:	d140      	bne.n	8003936 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b8:	e03d      	b.n	8003936 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038c2:	d121      	bne.n	8003908 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b03      	cmp	r3, #3
 80038c8:	d837      	bhi.n	800393a <DMA_CheckFifoParam+0xda>
 80038ca:	a201      	add	r2, pc, #4	@ (adr r2, 80038d0 <DMA_CheckFifoParam+0x70>)
 80038cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d0:	080038e1 	.word	0x080038e1
 80038d4:	080038e7 	.word	0x080038e7
 80038d8:	080038e1 	.word	0x080038e1
 80038dc:	080038f9 	.word	0x080038f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
      break;
 80038e4:	e030      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d025      	beq.n	800393e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f6:	e022      	b.n	800393e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003900:	d11f      	bne.n	8003942 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003906:	e01c      	b.n	8003942 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d903      	bls.n	8003916 <DMA_CheckFifoParam+0xb6>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2b03      	cmp	r3, #3
 8003912:	d003      	beq.n	800391c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003914:	e018      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
      break;
 800391a:	e015      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003920:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00e      	beq.n	8003946 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	73fb      	strb	r3, [r7, #15]
      break;
 800392c:	e00b      	b.n	8003946 <DMA_CheckFifoParam+0xe6>
      break;
 800392e:	bf00      	nop
 8003930:	e00a      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
      break;
 8003932:	bf00      	nop
 8003934:	e008      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
      break;
 8003936:	bf00      	nop
 8003938:	e006      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
      break;
 800393a:	bf00      	nop
 800393c:	e004      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
      break;
 800393e:	bf00      	nop
 8003940:	e002      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
      break;   
 8003942:	bf00      	nop
 8003944:	e000      	b.n	8003948 <DMA_CheckFifoParam+0xe8>
      break;
 8003946:	bf00      	nop
    }
  } 
  
  return status; 
 8003948:	7bfb      	ldrb	r3, [r7, #15]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3714      	adds	r7, #20
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop

08003958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003958:	b480      	push	{r7}
 800395a:	b089      	sub	sp, #36	@ 0x24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003966:	2300      	movs	r3, #0
 8003968:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800396a:	2300      	movs	r3, #0
 800396c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800396e:	2300      	movs	r3, #0
 8003970:	61fb      	str	r3, [r7, #28]
 8003972:	e159      	b.n	8003c28 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003974:	2201      	movs	r2, #1
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4013      	ands	r3, r2
 8003986:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	429a      	cmp	r2, r3
 800398e:	f040 8148 	bne.w	8003c22 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	f003 0303 	and.w	r3, r3, #3
 800399a:	2b01      	cmp	r3, #1
 800399c:	d005      	beq.n	80039aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d130      	bne.n	8003a0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	2203      	movs	r2, #3
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43db      	mvns	r3, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4013      	ands	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	fa02 f303 	lsl.w	r3, r2, r3
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	69ba      	ldr	r2, [r7, #24]
 80039d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039e0:	2201      	movs	r2, #1
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	43db      	mvns	r3, r3
 80039ea:	69ba      	ldr	r2, [r7, #24]
 80039ec:	4013      	ands	r3, r2
 80039ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	091b      	lsrs	r3, r3, #4
 80039f6:	f003 0201 	and.w	r2, r3, #1
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	d017      	beq.n	8003a48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	2203      	movs	r2, #3
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	43db      	mvns	r3, r3
 8003a2a:	69ba      	ldr	r2, [r7, #24]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 0303 	and.w	r3, r3, #3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d123      	bne.n	8003a9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	08da      	lsrs	r2, r3, #3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	3208      	adds	r2, #8
 8003a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	220f      	movs	r2, #15
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	43db      	mvns	r3, r3
 8003a72:	69ba      	ldr	r2, [r7, #24]
 8003a74:	4013      	ands	r3, r2
 8003a76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	691a      	ldr	r2, [r3, #16]
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	69ba      	ldr	r2, [r7, #24]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	08da      	lsrs	r2, r3, #3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3208      	adds	r2, #8
 8003a96:	69b9      	ldr	r1, [r7, #24]
 8003a98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	005b      	lsls	r3, r3, #1
 8003aa6:	2203      	movs	r2, #3
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	43db      	mvns	r3, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 0203 	and.w	r2, r3, #3
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	69ba      	ldr	r2, [r7, #24]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f000 80a2 	beq.w	8003c22 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	4b57      	ldr	r3, [pc, #348]	@ (8003c40 <HAL_GPIO_Init+0x2e8>)
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae6:	4a56      	ldr	r2, [pc, #344]	@ (8003c40 <HAL_GPIO_Init+0x2e8>)
 8003ae8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003aec:	6453      	str	r3, [r2, #68]	@ 0x44
 8003aee:	4b54      	ldr	r3, [pc, #336]	@ (8003c40 <HAL_GPIO_Init+0x2e8>)
 8003af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003af2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003afa:	4a52      	ldr	r2, [pc, #328]	@ (8003c44 <HAL_GPIO_Init+0x2ec>)
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	089b      	lsrs	r3, r3, #2
 8003b00:	3302      	adds	r3, #2
 8003b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	220f      	movs	r2, #15
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43db      	mvns	r3, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a49      	ldr	r2, [pc, #292]	@ (8003c48 <HAL_GPIO_Init+0x2f0>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d019      	beq.n	8003b5a <HAL_GPIO_Init+0x202>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a48      	ldr	r2, [pc, #288]	@ (8003c4c <HAL_GPIO_Init+0x2f4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d013      	beq.n	8003b56 <HAL_GPIO_Init+0x1fe>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a47      	ldr	r2, [pc, #284]	@ (8003c50 <HAL_GPIO_Init+0x2f8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d00d      	beq.n	8003b52 <HAL_GPIO_Init+0x1fa>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a46      	ldr	r2, [pc, #280]	@ (8003c54 <HAL_GPIO_Init+0x2fc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d007      	beq.n	8003b4e <HAL_GPIO_Init+0x1f6>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a45      	ldr	r2, [pc, #276]	@ (8003c58 <HAL_GPIO_Init+0x300>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d101      	bne.n	8003b4a <HAL_GPIO_Init+0x1f2>
 8003b46:	2304      	movs	r3, #4
 8003b48:	e008      	b.n	8003b5c <HAL_GPIO_Init+0x204>
 8003b4a:	2307      	movs	r3, #7
 8003b4c:	e006      	b.n	8003b5c <HAL_GPIO_Init+0x204>
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e004      	b.n	8003b5c <HAL_GPIO_Init+0x204>
 8003b52:	2302      	movs	r3, #2
 8003b54:	e002      	b.n	8003b5c <HAL_GPIO_Init+0x204>
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <HAL_GPIO_Init+0x204>
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	69fa      	ldr	r2, [r7, #28]
 8003b5e:	f002 0203 	and.w	r2, r2, #3
 8003b62:	0092      	lsls	r2, r2, #2
 8003b64:	4093      	lsls	r3, r2
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b6c:	4935      	ldr	r1, [pc, #212]	@ (8003c44 <HAL_GPIO_Init+0x2ec>)
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	089b      	lsrs	r3, r3, #2
 8003b72:	3302      	adds	r3, #2
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b7a:	4b38      	ldr	r3, [pc, #224]	@ (8003c5c <HAL_GPIO_Init+0x304>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	43db      	mvns	r3, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4013      	ands	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b9e:	4a2f      	ldr	r2, [pc, #188]	@ (8003c5c <HAL_GPIO_Init+0x304>)
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ba4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c5c <HAL_GPIO_Init+0x304>)
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	43db      	mvns	r3, r3
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003bc8:	4a24      	ldr	r2, [pc, #144]	@ (8003c5c <HAL_GPIO_Init+0x304>)
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003bce:	4b23      	ldr	r3, [pc, #140]	@ (8003c5c <HAL_GPIO_Init+0x304>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bf2:	4a1a      	ldr	r2, [pc, #104]	@ (8003c5c <HAL_GPIO_Init+0x304>)
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bf8:	4b18      	ldr	r3, [pc, #96]	@ (8003c5c <HAL_GPIO_Init+0x304>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	43db      	mvns	r3, r3
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	4013      	ands	r3, r2
 8003c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c1c:	4a0f      	ldr	r2, [pc, #60]	@ (8003c5c <HAL_GPIO_Init+0x304>)
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	3301      	adds	r3, #1
 8003c26:	61fb      	str	r3, [r7, #28]
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	2b0f      	cmp	r3, #15
 8003c2c:	f67f aea2 	bls.w	8003974 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c30:	bf00      	nop
 8003c32:	bf00      	nop
 8003c34:	3724      	adds	r7, #36	@ 0x24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40023800 	.word	0x40023800
 8003c44:	40013800 	.word	0x40013800
 8003c48:	40020000 	.word	0x40020000
 8003c4c:	40020400 	.word	0x40020400
 8003c50:	40020800 	.word	0x40020800
 8003c54:	40020c00 	.word	0x40020c00
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40013c00 	.word	0x40013c00

08003c60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	460b      	mov	r3, r1
 8003c6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691a      	ldr	r2, [r3, #16]
 8003c70:	887b      	ldrh	r3, [r7, #2]
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	73fb      	strb	r3, [r7, #15]
 8003c7c:	e001      	b.n	8003c82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3714      	adds	r7, #20
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	807b      	strh	r3, [r7, #2]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ca0:	787b      	ldrb	r3, [r7, #1]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ca6:	887a      	ldrh	r2, [r7, #2]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cac:	e003      	b.n	8003cb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cae:	887b      	ldrh	r3, [r7, #2]
 8003cb0:	041a      	lsls	r2, r3, #16
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	619a      	str	r2, [r3, #24]
}
 8003cb6:	bf00      	nop
 8003cb8:	370c      	adds	r7, #12
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
	...

08003cc4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e12b      	b.n	8003f2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d106      	bne.n	8003cf0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fd f810 	bl	8000d10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2224      	movs	r2, #36	@ 0x24
 8003cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0201 	bic.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d28:	f001 f8ea 	bl	8004f00 <HAL_RCC_GetPCLK1Freq>
 8003d2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	4a81      	ldr	r2, [pc, #516]	@ (8003f38 <HAL_I2C_Init+0x274>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d807      	bhi.n	8003d48 <HAL_I2C_Init+0x84>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4a80      	ldr	r2, [pc, #512]	@ (8003f3c <HAL_I2C_Init+0x278>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	bf94      	ite	ls
 8003d40:	2301      	movls	r3, #1
 8003d42:	2300      	movhi	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	e006      	b.n	8003d56 <HAL_I2C_Init+0x92>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4a7d      	ldr	r2, [pc, #500]	@ (8003f40 <HAL_I2C_Init+0x27c>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	bf94      	ite	ls
 8003d50:	2301      	movls	r3, #1
 8003d52:	2300      	movhi	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e0e7      	b.n	8003f2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4a78      	ldr	r2, [pc, #480]	@ (8003f44 <HAL_I2C_Init+0x280>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	0c9b      	lsrs	r3, r3, #18
 8003d68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68ba      	ldr	r2, [r7, #8]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6a1b      	ldr	r3, [r3, #32]
 8003d84:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4a6a      	ldr	r2, [pc, #424]	@ (8003f38 <HAL_I2C_Init+0x274>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d802      	bhi.n	8003d98 <HAL_I2C_Init+0xd4>
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	3301      	adds	r3, #1
 8003d96:	e009      	b.n	8003dac <HAL_I2C_Init+0xe8>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003d9e:	fb02 f303 	mul.w	r3, r2, r3
 8003da2:	4a69      	ldr	r2, [pc, #420]	@ (8003f48 <HAL_I2C_Init+0x284>)
 8003da4:	fba2 2303 	umull	r2, r3, r2, r3
 8003da8:	099b      	lsrs	r3, r3, #6
 8003daa:	3301      	adds	r3, #1
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6812      	ldr	r2, [r2, #0]
 8003db0:	430b      	orrs	r3, r1
 8003db2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003dbe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	495c      	ldr	r1, [pc, #368]	@ (8003f38 <HAL_I2C_Init+0x274>)
 8003dc8:	428b      	cmp	r3, r1
 8003dca:	d819      	bhi.n	8003e00 <HAL_I2C_Init+0x13c>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1e59      	subs	r1, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003dda:	1c59      	adds	r1, r3, #1
 8003ddc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003de0:	400b      	ands	r3, r1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00a      	beq.n	8003dfc <HAL_I2C_Init+0x138>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	1e59      	subs	r1, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	005b      	lsls	r3, r3, #1
 8003df0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003df4:	3301      	adds	r3, #1
 8003df6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dfa:	e051      	b.n	8003ea0 <HAL_I2C_Init+0x1dc>
 8003dfc:	2304      	movs	r3, #4
 8003dfe:	e04f      	b.n	8003ea0 <HAL_I2C_Init+0x1dc>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d111      	bne.n	8003e2c <HAL_I2C_Init+0x168>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	1e58      	subs	r0, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6859      	ldr	r1, [r3, #4]
 8003e10:	460b      	mov	r3, r1
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	440b      	add	r3, r1
 8003e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	bf0c      	ite	eq
 8003e24:	2301      	moveq	r3, #1
 8003e26:	2300      	movne	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	e012      	b.n	8003e52 <HAL_I2C_Init+0x18e>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	1e58      	subs	r0, r3, #1
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6859      	ldr	r1, [r3, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	0099      	lsls	r1, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e42:	3301      	adds	r3, #1
 8003e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	bf0c      	ite	eq
 8003e4c:	2301      	moveq	r3, #1
 8003e4e:	2300      	movne	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_I2C_Init+0x196>
 8003e56:	2301      	movs	r3, #1
 8003e58:	e022      	b.n	8003ea0 <HAL_I2C_Init+0x1dc>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10e      	bne.n	8003e80 <HAL_I2C_Init+0x1bc>
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1e58      	subs	r0, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6859      	ldr	r1, [r3, #4]
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	440b      	add	r3, r1
 8003e70:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e74:	3301      	adds	r3, #1
 8003e76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e7e:	e00f      	b.n	8003ea0 <HAL_I2C_Init+0x1dc>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	1e58      	subs	r0, r3, #1
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6859      	ldr	r1, [r3, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	0099      	lsls	r1, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e96:	3301      	adds	r3, #1
 8003e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e9c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ea0:	6879      	ldr	r1, [r7, #4]
 8003ea2:	6809      	ldr	r1, [r1, #0]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a1b      	ldr	r3, [r3, #32]
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ece:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6911      	ldr	r1, [r2, #16]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68d2      	ldr	r2, [r2, #12]
 8003eda:	4311      	orrs	r1, r2
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	695a      	ldr	r2, [r3, #20]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	000186a0 	.word	0x000186a0
 8003f3c:	001e847f 	.word	0x001e847f
 8003f40:	003d08ff 	.word	0x003d08ff
 8003f44:	431bde83 	.word	0x431bde83
 8003f48:	10624dd3 	.word	0x10624dd3

08003f4c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	4608      	mov	r0, r1
 8003f56:	4611      	mov	r1, r2
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	817b      	strh	r3, [r7, #10]
 8003f5e:	460b      	mov	r3, r1
 8003f60:	813b      	strh	r3, [r7, #8]
 8003f62:	4613      	mov	r3, r2
 8003f64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f66:	f7fe fe99 	bl	8002c9c <HAL_GetTick>
 8003f6a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	f040 80d9 	bne.w	800412c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	9300      	str	r3, [sp, #0]
 8003f7e:	2319      	movs	r3, #25
 8003f80:	2201      	movs	r2, #1
 8003f82:	496d      	ldr	r1, [pc, #436]	@ (8004138 <HAL_I2C_Mem_Write+0x1ec>)
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f971 	bl	800426c <I2C_WaitOnFlagUntilTimeout>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003f90:	2302      	movs	r3, #2
 8003f92:	e0cc      	b.n	800412e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d101      	bne.n	8003fa2 <HAL_I2C_Mem_Write+0x56>
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e0c5      	b.n	800412e <HAL_I2C_Mem_Write+0x1e2>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d007      	beq.n	8003fc8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2221      	movs	r2, #33	@ 0x21
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2240      	movs	r2, #64	@ 0x40
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a3a      	ldr	r2, [r7, #32]
 8003ff2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4a4d      	ldr	r2, [pc, #308]	@ (800413c <HAL_I2C_Mem_Write+0x1f0>)
 8004008:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800400a:	88f8      	ldrh	r0, [r7, #6]
 800400c:	893a      	ldrh	r2, [r7, #8]
 800400e:	8979      	ldrh	r1, [r7, #10]
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	9301      	str	r3, [sp, #4]
 8004014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	4603      	mov	r3, r0
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f000 f890 	bl	8004140 <I2C_RequestMemoryWrite>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d052      	beq.n	80040cc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e081      	b.n	800412e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 fa36 	bl	80044a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00d      	beq.n	8004056 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403e:	2b04      	cmp	r3, #4
 8004040:	d107      	bne.n	8004052 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004050:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e06b      	b.n	800412e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800405a:	781a      	ldrb	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004066:	1c5a      	adds	r2, r3, #1
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407c:	b29b      	uxth	r3, r3
 800407e:	3b01      	subs	r3, #1
 8004080:	b29a      	uxth	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	f003 0304 	and.w	r3, r3, #4
 8004090:	2b04      	cmp	r3, #4
 8004092:	d11b      	bne.n	80040cc <HAL_I2C_Mem_Write+0x180>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004098:	2b00      	cmp	r3, #0
 800409a:	d017      	beq.n	80040cc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a0:	781a      	ldrb	r2, [r3, #0]
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	3b01      	subs	r3, #1
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1aa      	bne.n	800402a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 fa29 	bl	8004530 <I2C_WaitOnBTFFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d00d      	beq.n	8004100 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e8:	2b04      	cmp	r3, #4
 80040ea:	d107      	bne.n	80040fc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040fa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e016      	b.n	800412e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800410e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	e000      	b.n	800412e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800412c:	2302      	movs	r3, #2
  }
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	00100002 	.word	0x00100002
 800413c:	ffff0000 	.word	0xffff0000

08004140 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af02      	add	r7, sp, #8
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	4608      	mov	r0, r1
 800414a:	4611      	mov	r1, r2
 800414c:	461a      	mov	r2, r3
 800414e:	4603      	mov	r3, r0
 8004150:	817b      	strh	r3, [r7, #10]
 8004152:	460b      	mov	r3, r1
 8004154:	813b      	strh	r3, [r7, #8]
 8004156:	4613      	mov	r3, r2
 8004158:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004168:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	2200      	movs	r2, #0
 8004172:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 f878 	bl	800426c <I2C_WaitOnFlagUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00d      	beq.n	800419e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800418c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004190:	d103      	bne.n	800419a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004198:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e05f      	b.n	800425e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800419e:	897b      	ldrh	r3, [r7, #10]
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	461a      	mov	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b0:	6a3a      	ldr	r2, [r7, #32]
 80041b2:	492d      	ldr	r1, [pc, #180]	@ (8004268 <I2C_RequestMemoryWrite+0x128>)
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 f8d3 	bl	8004360 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d001      	beq.n	80041c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e04c      	b.n	800425e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041c4:	2300      	movs	r3, #0
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	617b      	str	r3, [r7, #20]
 80041d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041dc:	6a39      	ldr	r1, [r7, #32]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 f95e 	bl	80044a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00d      	beq.n	8004206 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ee:	2b04      	cmp	r3, #4
 80041f0:	d107      	bne.n	8004202 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004200:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e02b      	b.n	800425e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004206:	88fb      	ldrh	r3, [r7, #6]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d105      	bne.n	8004218 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800420c:	893b      	ldrh	r3, [r7, #8]
 800420e:	b2da      	uxtb	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	611a      	str	r2, [r3, #16]
 8004216:	e021      	b.n	800425c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004218:	893b      	ldrh	r3, [r7, #8]
 800421a:	0a1b      	lsrs	r3, r3, #8
 800421c:	b29b      	uxth	r3, r3
 800421e:	b2da      	uxtb	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004228:	6a39      	ldr	r1, [r7, #32]
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 f938 	bl	80044a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00d      	beq.n	8004252 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423a:	2b04      	cmp	r3, #4
 800423c:	d107      	bne.n	800424e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800424c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e005      	b.n	800425e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004252:	893b      	ldrh	r3, [r7, #8]
 8004254:	b2da      	uxtb	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	00010002 	.word	0x00010002

0800426c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	4613      	mov	r3, r2
 800427a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800427c:	e048      	b.n	8004310 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004284:	d044      	beq.n	8004310 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004286:	f7fe fd09 	bl	8002c9c <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d302      	bcc.n	800429c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d139      	bne.n	8004310 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	0c1b      	lsrs	r3, r3, #16
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d10d      	bne.n	80042c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	43da      	mvns	r2, r3
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	4013      	ands	r3, r2
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	bf0c      	ite	eq
 80042b8:	2301      	moveq	r3, #1
 80042ba:	2300      	movne	r3, #0
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	461a      	mov	r2, r3
 80042c0:	e00c      	b.n	80042dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	43da      	mvns	r2, r3
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	4013      	ands	r3, r2
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bf0c      	ite	eq
 80042d4:	2301      	moveq	r3, #1
 80042d6:	2300      	movne	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	461a      	mov	r2, r3
 80042dc:	79fb      	ldrb	r3, [r7, #7]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d116      	bne.n	8004310 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2220      	movs	r2, #32
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2200      	movs	r2, #0
 80042f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fc:	f043 0220 	orr.w	r2, r3, #32
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e023      	b.n	8004358 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	0c1b      	lsrs	r3, r3, #16
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b01      	cmp	r3, #1
 8004318:	d10d      	bne.n	8004336 <I2C_WaitOnFlagUntilTimeout+0xca>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	43da      	mvns	r2, r3
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	4013      	ands	r3, r2
 8004326:	b29b      	uxth	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	bf0c      	ite	eq
 800432c:	2301      	moveq	r3, #1
 800432e:	2300      	movne	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	461a      	mov	r2, r3
 8004334:	e00c      	b.n	8004350 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	43da      	mvns	r2, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	4013      	ands	r3, r2
 8004342:	b29b      	uxth	r3, r3
 8004344:	2b00      	cmp	r3, #0
 8004346:	bf0c      	ite	eq
 8004348:	2301      	moveq	r3, #1
 800434a:	2300      	movne	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	79fb      	ldrb	r3, [r7, #7]
 8004352:	429a      	cmp	r2, r3
 8004354:	d093      	beq.n	800427e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
 800436c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800436e:	e071      	b.n	8004454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800437a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800437e:	d123      	bne.n	80043c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800438e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004398:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b4:	f043 0204 	orr.w	r2, r3, #4
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e067      	b.n	8004498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ce:	d041      	beq.n	8004454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d0:	f7fe fc64 	bl	8002c9c <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d302      	bcc.n	80043e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d136      	bne.n	8004454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	0c1b      	lsrs	r3, r3, #16
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d10c      	bne.n	800440a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	43da      	mvns	r2, r3
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	4013      	ands	r3, r2
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	bf14      	ite	ne
 8004402:	2301      	movne	r3, #1
 8004404:	2300      	moveq	r3, #0
 8004406:	b2db      	uxtb	r3, r3
 8004408:	e00b      	b.n	8004422 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	43da      	mvns	r2, r3
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	4013      	ands	r3, r2
 8004416:	b29b      	uxth	r3, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	bf14      	ite	ne
 800441c:	2301      	movne	r3, #1
 800441e:	2300      	moveq	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b00      	cmp	r3, #0
 8004424:	d016      	beq.n	8004454 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004440:	f043 0220 	orr.w	r2, r3, #32
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e021      	b.n	8004498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	0c1b      	lsrs	r3, r3, #16
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b01      	cmp	r3, #1
 800445c:	d10c      	bne.n	8004478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	43da      	mvns	r2, r3
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	4013      	ands	r3, r2
 800446a:	b29b      	uxth	r3, r3
 800446c:	2b00      	cmp	r3, #0
 800446e:	bf14      	ite	ne
 8004470:	2301      	movne	r3, #1
 8004472:	2300      	moveq	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	e00b      	b.n	8004490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	43da      	mvns	r2, r3
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4013      	ands	r3, r2
 8004484:	b29b      	uxth	r3, r3
 8004486:	2b00      	cmp	r3, #0
 8004488:	bf14      	ite	ne
 800448a:	2301      	movne	r3, #1
 800448c:	2300      	moveq	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b00      	cmp	r3, #0
 8004492:	f47f af6d 	bne.w	8004370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ac:	e034      	b.n	8004518 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 f886 	bl	80045c0 <I2C_IsAcknowledgeFailed>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e034      	b.n	8004528 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c4:	d028      	beq.n	8004518 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c6:	f7fe fbe9 	bl	8002c9c <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d302      	bcc.n	80044dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d11d      	bne.n	8004518 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044e6:	2b80      	cmp	r3, #128	@ 0x80
 80044e8:	d016      	beq.n	8004518 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004504:	f043 0220 	orr.w	r2, r3, #32
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e007      	b.n	8004528 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004522:	2b80      	cmp	r3, #128	@ 0x80
 8004524:	d1c3      	bne.n	80044ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800453c:	e034      	b.n	80045a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 f83e 	bl	80045c0 <I2C_IsAcknowledgeFailed>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e034      	b.n	80045b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004554:	d028      	beq.n	80045a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004556:	f7fe fba1 	bl	8002c9c <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	429a      	cmp	r2, r3
 8004564:	d302      	bcc.n	800456c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d11d      	bne.n	80045a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b04      	cmp	r3, #4
 8004578:	d016      	beq.n	80045a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004594:	f043 0220 	orr.w	r2, r3, #32
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e007      	b.n	80045b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f003 0304 	and.w	r3, r3, #4
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d1c3      	bne.n	800453e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80045d6:	d11b      	bne.n	8004610 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80045e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fc:	f043 0204 	orr.w	r2, r3, #4
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e000      	b.n	8004612 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
	...

08004620 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e267      	b.n	8004b02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d075      	beq.n	800472a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800463e:	4b88      	ldr	r3, [pc, #544]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 030c 	and.w	r3, r3, #12
 8004646:	2b04      	cmp	r3, #4
 8004648:	d00c      	beq.n	8004664 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800464a:	4b85      	ldr	r3, [pc, #532]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004652:	2b08      	cmp	r3, #8
 8004654:	d112      	bne.n	800467c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004656:	4b82      	ldr	r3, [pc, #520]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800465e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004662:	d10b      	bne.n	800467c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004664:	4b7e      	ldr	r3, [pc, #504]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d05b      	beq.n	8004728 <HAL_RCC_OscConfig+0x108>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d157      	bne.n	8004728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e242      	b.n	8004b02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004684:	d106      	bne.n	8004694 <HAL_RCC_OscConfig+0x74>
 8004686:	4b76      	ldr	r3, [pc, #472]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a75      	ldr	r2, [pc, #468]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 800468c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	e01d      	b.n	80046d0 <HAL_RCC_OscConfig+0xb0>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800469c:	d10c      	bne.n	80046b8 <HAL_RCC_OscConfig+0x98>
 800469e:	4b70      	ldr	r3, [pc, #448]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a6f      	ldr	r2, [pc, #444]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 80046a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80046a8:	6013      	str	r3, [r2, #0]
 80046aa:	4b6d      	ldr	r3, [pc, #436]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a6c      	ldr	r2, [pc, #432]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 80046b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	e00b      	b.n	80046d0 <HAL_RCC_OscConfig+0xb0>
 80046b8:	4b69      	ldr	r3, [pc, #420]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a68      	ldr	r2, [pc, #416]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 80046be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046c2:	6013      	str	r3, [r2, #0]
 80046c4:	4b66      	ldr	r3, [pc, #408]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a65      	ldr	r2, [pc, #404]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 80046ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80046ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d013      	beq.n	8004700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d8:	f7fe fae0 	bl	8002c9c <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046e0:	f7fe fadc 	bl	8002c9c <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b64      	cmp	r3, #100	@ 0x64
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e207      	b.n	8004b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046f2:	4b5b      	ldr	r3, [pc, #364]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0f0      	beq.n	80046e0 <HAL_RCC_OscConfig+0xc0>
 80046fe:	e014      	b.n	800472a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004700:	f7fe facc 	bl	8002c9c <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004706:	e008      	b.n	800471a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004708:	f7fe fac8 	bl	8002c9c <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	2b64      	cmp	r3, #100	@ 0x64
 8004714:	d901      	bls.n	800471a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004716:	2303      	movs	r3, #3
 8004718:	e1f3      	b.n	8004b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800471a:	4b51      	ldr	r3, [pc, #324]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1f0      	bne.n	8004708 <HAL_RCC_OscConfig+0xe8>
 8004726:	e000      	b.n	800472a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d063      	beq.n	80047fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004736:	4b4a      	ldr	r3, [pc, #296]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f003 030c 	and.w	r3, r3, #12
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00b      	beq.n	800475a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004742:	4b47      	ldr	r3, [pc, #284]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800474a:	2b08      	cmp	r3, #8
 800474c:	d11c      	bne.n	8004788 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800474e:	4b44      	ldr	r3, [pc, #272]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d116      	bne.n	8004788 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800475a:	4b41      	ldr	r3, [pc, #260]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d005      	beq.n	8004772 <HAL_RCC_OscConfig+0x152>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d001      	beq.n	8004772 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e1c7      	b.n	8004b02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004772:	4b3b      	ldr	r3, [pc, #236]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	4937      	ldr	r1, [pc, #220]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 8004782:	4313      	orrs	r3, r2
 8004784:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004786:	e03a      	b.n	80047fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d020      	beq.n	80047d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004790:	4b34      	ldr	r3, [pc, #208]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 8004792:	2201      	movs	r2, #1
 8004794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004796:	f7fe fa81 	bl	8002c9c <HAL_GetTick>
 800479a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800479c:	e008      	b.n	80047b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800479e:	f7fe fa7d 	bl	8002c9c <HAL_GetTick>
 80047a2:	4602      	mov	r2, r0
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1ad3      	subs	r3, r2, r3
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d901      	bls.n	80047b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e1a8      	b.n	8004b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0302 	and.w	r3, r3, #2
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d0f0      	beq.n	800479e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047bc:	4b28      	ldr	r3, [pc, #160]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	00db      	lsls	r3, r3, #3
 80047ca:	4925      	ldr	r1, [pc, #148]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	600b      	str	r3, [r1, #0]
 80047d0:	e015      	b.n	80047fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047d2:	4b24      	ldr	r3, [pc, #144]	@ (8004864 <HAL_RCC_OscConfig+0x244>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047d8:	f7fe fa60 	bl	8002c9c <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047de:	e008      	b.n	80047f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047e0:	f7fe fa5c 	bl	8002c9c <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e187      	b.n	8004b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d1f0      	bne.n	80047e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0308 	and.w	r3, r3, #8
 8004806:	2b00      	cmp	r3, #0
 8004808:	d036      	beq.n	8004878 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d016      	beq.n	8004840 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004812:	4b15      	ldr	r3, [pc, #84]	@ (8004868 <HAL_RCC_OscConfig+0x248>)
 8004814:	2201      	movs	r2, #1
 8004816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004818:	f7fe fa40 	bl	8002c9c <HAL_GetTick>
 800481c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800481e:	e008      	b.n	8004832 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004820:	f7fe fa3c 	bl	8002c9c <HAL_GetTick>
 8004824:	4602      	mov	r2, r0
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d901      	bls.n	8004832 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	e167      	b.n	8004b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004832:	4b0b      	ldr	r3, [pc, #44]	@ (8004860 <HAL_RCC_OscConfig+0x240>)
 8004834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0f0      	beq.n	8004820 <HAL_RCC_OscConfig+0x200>
 800483e:	e01b      	b.n	8004878 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004840:	4b09      	ldr	r3, [pc, #36]	@ (8004868 <HAL_RCC_OscConfig+0x248>)
 8004842:	2200      	movs	r2, #0
 8004844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004846:	f7fe fa29 	bl	8002c9c <HAL_GetTick>
 800484a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800484c:	e00e      	b.n	800486c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800484e:	f7fe fa25 	bl	8002c9c <HAL_GetTick>
 8004852:	4602      	mov	r2, r0
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	2b02      	cmp	r3, #2
 800485a:	d907      	bls.n	800486c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800485c:	2303      	movs	r3, #3
 800485e:	e150      	b.n	8004b02 <HAL_RCC_OscConfig+0x4e2>
 8004860:	40023800 	.word	0x40023800
 8004864:	42470000 	.word	0x42470000
 8004868:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800486c:	4b88      	ldr	r3, [pc, #544]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 800486e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1ea      	bne.n	800484e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 8097 	beq.w	80049b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004886:	2300      	movs	r3, #0
 8004888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800488a:	4b81      	ldr	r3, [pc, #516]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 800488c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10f      	bne.n	80048b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004896:	2300      	movs	r3, #0
 8004898:	60bb      	str	r3, [r7, #8]
 800489a:	4b7d      	ldr	r3, [pc, #500]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 800489c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489e:	4a7c      	ldr	r2, [pc, #496]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 80048a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80048a6:	4b7a      	ldr	r3, [pc, #488]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048ae:	60bb      	str	r3, [r7, #8]
 80048b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048b2:	2301      	movs	r3, #1
 80048b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b6:	4b77      	ldr	r3, [pc, #476]	@ (8004a94 <HAL_RCC_OscConfig+0x474>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d118      	bne.n	80048f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048c2:	4b74      	ldr	r3, [pc, #464]	@ (8004a94 <HAL_RCC_OscConfig+0x474>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a73      	ldr	r2, [pc, #460]	@ (8004a94 <HAL_RCC_OscConfig+0x474>)
 80048c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048ce:	f7fe f9e5 	bl	8002c9c <HAL_GetTick>
 80048d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048d4:	e008      	b.n	80048e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048d6:	f7fe f9e1 	bl	8002c9c <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d901      	bls.n	80048e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e10c      	b.n	8004b02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048e8:	4b6a      	ldr	r3, [pc, #424]	@ (8004a94 <HAL_RCC_OscConfig+0x474>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d0f0      	beq.n	80048d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d106      	bne.n	800490a <HAL_RCC_OscConfig+0x2ea>
 80048fc:	4b64      	ldr	r3, [pc, #400]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 80048fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004900:	4a63      	ldr	r2, [pc, #396]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 8004902:	f043 0301 	orr.w	r3, r3, #1
 8004906:	6713      	str	r3, [r2, #112]	@ 0x70
 8004908:	e01c      	b.n	8004944 <HAL_RCC_OscConfig+0x324>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	2b05      	cmp	r3, #5
 8004910:	d10c      	bne.n	800492c <HAL_RCC_OscConfig+0x30c>
 8004912:	4b5f      	ldr	r3, [pc, #380]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 8004914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004916:	4a5e      	ldr	r2, [pc, #376]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 8004918:	f043 0304 	orr.w	r3, r3, #4
 800491c:	6713      	str	r3, [r2, #112]	@ 0x70
 800491e:	4b5c      	ldr	r3, [pc, #368]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 8004920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004922:	4a5b      	ldr	r2, [pc, #364]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 8004924:	f043 0301 	orr.w	r3, r3, #1
 8004928:	6713      	str	r3, [r2, #112]	@ 0x70
 800492a:	e00b      	b.n	8004944 <HAL_RCC_OscConfig+0x324>
 800492c:	4b58      	ldr	r3, [pc, #352]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 800492e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004930:	4a57      	ldr	r2, [pc, #348]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 8004932:	f023 0301 	bic.w	r3, r3, #1
 8004936:	6713      	str	r3, [r2, #112]	@ 0x70
 8004938:	4b55      	ldr	r3, [pc, #340]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 800493a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800493c:	4a54      	ldr	r2, [pc, #336]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 800493e:	f023 0304 	bic.w	r3, r3, #4
 8004942:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d015      	beq.n	8004978 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494c:	f7fe f9a6 	bl	8002c9c <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004952:	e00a      	b.n	800496a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004954:	f7fe f9a2 	bl	8002c9c <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004962:	4293      	cmp	r3, r2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e0cb      	b.n	8004b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800496a:	4b49      	ldr	r3, [pc, #292]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 800496c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0ee      	beq.n	8004954 <HAL_RCC_OscConfig+0x334>
 8004976:	e014      	b.n	80049a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004978:	f7fe f990 	bl	8002c9c <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800497e:	e00a      	b.n	8004996 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004980:	f7fe f98c 	bl	8002c9c <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800498e:	4293      	cmp	r3, r2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e0b5      	b.n	8004b02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004996:	4b3e      	ldr	r3, [pc, #248]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 8004998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1ee      	bne.n	8004980 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80049a2:	7dfb      	ldrb	r3, [r7, #23]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d105      	bne.n	80049b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a8:	4b39      	ldr	r3, [pc, #228]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 80049aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ac:	4a38      	ldr	r2, [pc, #224]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 80049ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 80a1 	beq.w	8004b00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80049be:	4b34      	ldr	r3, [pc, #208]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	f003 030c 	and.w	r3, r3, #12
 80049c6:	2b08      	cmp	r3, #8
 80049c8:	d05c      	beq.n	8004a84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d141      	bne.n	8004a56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049d2:	4b31      	ldr	r3, [pc, #196]	@ (8004a98 <HAL_RCC_OscConfig+0x478>)
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049d8:	f7fe f960 	bl	8002c9c <HAL_GetTick>
 80049dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049de:	e008      	b.n	80049f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049e0:	f7fe f95c 	bl	8002c9c <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	2b02      	cmp	r3, #2
 80049ec:	d901      	bls.n	80049f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80049ee:	2303      	movs	r3, #3
 80049f0:	e087      	b.n	8004b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049f2:	4b27      	ldr	r3, [pc, #156]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1f0      	bne.n	80049e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	69da      	ldr	r2, [r3, #28]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0c:	019b      	lsls	r3, r3, #6
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a14:	085b      	lsrs	r3, r3, #1
 8004a16:	3b01      	subs	r3, #1
 8004a18:	041b      	lsls	r3, r3, #16
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a20:	061b      	lsls	r3, r3, #24
 8004a22:	491b      	ldr	r1, [pc, #108]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a28:	4b1b      	ldr	r3, [pc, #108]	@ (8004a98 <HAL_RCC_OscConfig+0x478>)
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a2e:	f7fe f935 	bl	8002c9c <HAL_GetTick>
 8004a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a34:	e008      	b.n	8004a48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a36:	f7fe f931 	bl	8002c9c <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e05c      	b.n	8004b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a48:	4b11      	ldr	r3, [pc, #68]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0f0      	beq.n	8004a36 <HAL_RCC_OscConfig+0x416>
 8004a54:	e054      	b.n	8004b00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a56:	4b10      	ldr	r3, [pc, #64]	@ (8004a98 <HAL_RCC_OscConfig+0x478>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a5c:	f7fe f91e 	bl	8002c9c <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a64:	f7fe f91a 	bl	8002c9c <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e045      	b.n	8004b02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a76:	4b06      	ldr	r3, [pc, #24]	@ (8004a90 <HAL_RCC_OscConfig+0x470>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1f0      	bne.n	8004a64 <HAL_RCC_OscConfig+0x444>
 8004a82:	e03d      	b.n	8004b00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d107      	bne.n	8004a9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e038      	b.n	8004b02 <HAL_RCC_OscConfig+0x4e2>
 8004a90:	40023800 	.word	0x40023800
 8004a94:	40007000 	.word	0x40007000
 8004a98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8004b0c <HAL_RCC_OscConfig+0x4ec>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	699b      	ldr	r3, [r3, #24]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d028      	beq.n	8004afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d121      	bne.n	8004afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d11a      	bne.n	8004afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004acc:	4013      	ands	r3, r2
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ad2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d111      	bne.n	8004afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae2:	085b      	lsrs	r3, r3, #1
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d107      	bne.n	8004afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d001      	beq.n	8004b00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e000      	b.n	8004b02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3718      	adds	r7, #24
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40023800 	.word	0x40023800

08004b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0cc      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b24:	4b68      	ldr	r3, [pc, #416]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0307 	and.w	r3, r3, #7
 8004b2c:	683a      	ldr	r2, [r7, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d90c      	bls.n	8004b4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b32:	4b65      	ldr	r3, [pc, #404]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b34:	683a      	ldr	r2, [r7, #0]
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b3a:	4b63      	ldr	r3, [pc, #396]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d001      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e0b8      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0302 	and.w	r3, r3, #2
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d020      	beq.n	8004b9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0304 	and.w	r3, r3, #4
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d005      	beq.n	8004b70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b64:	4b59      	ldr	r3, [pc, #356]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	4a58      	ldr	r2, [pc, #352]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004b6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004b6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0308 	and.w	r3, r3, #8
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b7c:	4b53      	ldr	r3, [pc, #332]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	4a52      	ldr	r2, [pc, #328]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004b82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004b86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b88:	4b50      	ldr	r3, [pc, #320]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	494d      	ldr	r1, [pc, #308]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d044      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d107      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bae:	4b47      	ldr	r3, [pc, #284]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d119      	bne.n	8004bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e07f      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d003      	beq.n	8004bce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004bca:	2b03      	cmp	r3, #3
 8004bcc:	d107      	bne.n	8004bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bce:	4b3f      	ldr	r3, [pc, #252]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d109      	bne.n	8004bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e06f      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bde:	4b3b      	ldr	r3, [pc, #236]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0302 	and.w	r3, r3, #2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e067      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bee:	4b37      	ldr	r3, [pc, #220]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f023 0203 	bic.w	r2, r3, #3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	4934      	ldr	r1, [pc, #208]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c00:	f7fe f84c 	bl	8002c9c <HAL_GetTick>
 8004c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c06:	e00a      	b.n	8004c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c08:	f7fe f848 	bl	8002c9c <HAL_GetTick>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e04f      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 020c 	and.w	r2, r3, #12
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d1eb      	bne.n	8004c08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c30:	4b25      	ldr	r3, [pc, #148]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0307 	and.w	r3, r3, #7
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d20c      	bcs.n	8004c58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c3e:	4b22      	ldr	r3, [pc, #136]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	b2d2      	uxtb	r2, r2
 8004c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c46:	4b20      	ldr	r3, [pc, #128]	@ (8004cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d001      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e032      	b.n	8004cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d008      	beq.n	8004c76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c64:	4b19      	ldr	r3, [pc, #100]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	4916      	ldr	r1, [pc, #88]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d009      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c82:	4b12      	ldr	r3, [pc, #72]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	00db      	lsls	r3, r3, #3
 8004c90:	490e      	ldr	r1, [pc, #56]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c96:	f000 f821 	bl	8004cdc <HAL_RCC_GetSysClockFreq>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004ccc <HAL_RCC_ClockConfig+0x1bc>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	091b      	lsrs	r3, r3, #4
 8004ca2:	f003 030f 	and.w	r3, r3, #15
 8004ca6:	490a      	ldr	r1, [pc, #40]	@ (8004cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8004ca8:	5ccb      	ldrb	r3, [r1, r3]
 8004caa:	fa22 f303 	lsr.w	r3, r2, r3
 8004cae:	4a09      	ldr	r2, [pc, #36]	@ (8004cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004cb2:	4b09      	ldr	r3, [pc, #36]	@ (8004cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fc f92e 	bl	8000f18 <HAL_InitTick>

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40023c00 	.word	0x40023c00
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	0800dc34 	.word	0x0800dc34
 8004cd4:	20000000 	.word	0x20000000
 8004cd8:	20000024 	.word	0x20000024

08004cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ce0:	b094      	sub	sp, #80	@ 0x50
 8004ce2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ce8:	2300      	movs	r3, #0
 8004cea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cec:	2300      	movs	r3, #0
 8004cee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cf4:	4b79      	ldr	r3, [pc, #484]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x200>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f003 030c 	and.w	r3, r3, #12
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d00d      	beq.n	8004d1c <HAL_RCC_GetSysClockFreq+0x40>
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	f200 80e1 	bhi.w	8004ec8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d002      	beq.n	8004d10 <HAL_RCC_GetSysClockFreq+0x34>
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d003      	beq.n	8004d16 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d0e:	e0db      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d10:	4b73      	ldr	r3, [pc, #460]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d12:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004d14:	e0db      	b.n	8004ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d16:	4b73      	ldr	r3, [pc, #460]	@ (8004ee4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d1a:	e0d8      	b.n	8004ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d1c:	4b6f      	ldr	r3, [pc, #444]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d24:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d26:	4b6d      	ldr	r3, [pc, #436]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d063      	beq.n	8004dfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d32:	4b6a      	ldr	r3, [pc, #424]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x200>)
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	099b      	lsrs	r3, r3, #6
 8004d38:	2200      	movs	r2, #0
 8004d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004d3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d44:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d46:	2300      	movs	r3, #0
 8004d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004d4e:	4622      	mov	r2, r4
 8004d50:	462b      	mov	r3, r5
 8004d52:	f04f 0000 	mov.w	r0, #0
 8004d56:	f04f 0100 	mov.w	r1, #0
 8004d5a:	0159      	lsls	r1, r3, #5
 8004d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d60:	0150      	lsls	r0, r2, #5
 8004d62:	4602      	mov	r2, r0
 8004d64:	460b      	mov	r3, r1
 8004d66:	4621      	mov	r1, r4
 8004d68:	1a51      	subs	r1, r2, r1
 8004d6a:	6139      	str	r1, [r7, #16]
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	eb63 0301 	sbc.w	r3, r3, r1
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	f04f 0200 	mov.w	r2, #0
 8004d78:	f04f 0300 	mov.w	r3, #0
 8004d7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004d80:	4659      	mov	r1, fp
 8004d82:	018b      	lsls	r3, r1, #6
 8004d84:	4651      	mov	r1, sl
 8004d86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004d8a:	4651      	mov	r1, sl
 8004d8c:	018a      	lsls	r2, r1, #6
 8004d8e:	4651      	mov	r1, sl
 8004d90:	ebb2 0801 	subs.w	r8, r2, r1
 8004d94:	4659      	mov	r1, fp
 8004d96:	eb63 0901 	sbc.w	r9, r3, r1
 8004d9a:	f04f 0200 	mov.w	r2, #0
 8004d9e:	f04f 0300 	mov.w	r3, #0
 8004da2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004da6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004daa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004dae:	4690      	mov	r8, r2
 8004db0:	4699      	mov	r9, r3
 8004db2:	4623      	mov	r3, r4
 8004db4:	eb18 0303 	adds.w	r3, r8, r3
 8004db8:	60bb      	str	r3, [r7, #8]
 8004dba:	462b      	mov	r3, r5
 8004dbc:	eb49 0303 	adc.w	r3, r9, r3
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	f04f 0200 	mov.w	r2, #0
 8004dc6:	f04f 0300 	mov.w	r3, #0
 8004dca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004dce:	4629      	mov	r1, r5
 8004dd0:	024b      	lsls	r3, r1, #9
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004dd8:	4621      	mov	r1, r4
 8004dda:	024a      	lsls	r2, r1, #9
 8004ddc:	4610      	mov	r0, r2
 8004dde:	4619      	mov	r1, r3
 8004de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004de2:	2200      	movs	r2, #0
 8004de4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004de6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004de8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004dec:	f7fb fa60 	bl	80002b0 <__aeabi_uldivmod>
 8004df0:	4602      	mov	r2, r0
 8004df2:	460b      	mov	r3, r1
 8004df4:	4613      	mov	r3, r2
 8004df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004df8:	e058      	b.n	8004eac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dfa:	4b38      	ldr	r3, [pc, #224]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x200>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	099b      	lsrs	r3, r3, #6
 8004e00:	2200      	movs	r2, #0
 8004e02:	4618      	mov	r0, r3
 8004e04:	4611      	mov	r1, r2
 8004e06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e0a:	623b      	str	r3, [r7, #32]
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e14:	4642      	mov	r2, r8
 8004e16:	464b      	mov	r3, r9
 8004e18:	f04f 0000 	mov.w	r0, #0
 8004e1c:	f04f 0100 	mov.w	r1, #0
 8004e20:	0159      	lsls	r1, r3, #5
 8004e22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e26:	0150      	lsls	r0, r2, #5
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4641      	mov	r1, r8
 8004e2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e32:	4649      	mov	r1, r9
 8004e34:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e4c:	ebb2 040a 	subs.w	r4, r2, sl
 8004e50:	eb63 050b 	sbc.w	r5, r3, fp
 8004e54:	f04f 0200 	mov.w	r2, #0
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	00eb      	lsls	r3, r5, #3
 8004e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e62:	00e2      	lsls	r2, r4, #3
 8004e64:	4614      	mov	r4, r2
 8004e66:	461d      	mov	r5, r3
 8004e68:	4643      	mov	r3, r8
 8004e6a:	18e3      	adds	r3, r4, r3
 8004e6c:	603b      	str	r3, [r7, #0]
 8004e6e:	464b      	mov	r3, r9
 8004e70:	eb45 0303 	adc.w	r3, r5, r3
 8004e74:	607b      	str	r3, [r7, #4]
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004e82:	4629      	mov	r1, r5
 8004e84:	028b      	lsls	r3, r1, #10
 8004e86:	4621      	mov	r1, r4
 8004e88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	028a      	lsls	r2, r1, #10
 8004e90:	4610      	mov	r0, r2
 8004e92:	4619      	mov	r1, r3
 8004e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e96:	2200      	movs	r2, #0
 8004e98:	61bb      	str	r3, [r7, #24]
 8004e9a:	61fa      	str	r2, [r7, #28]
 8004e9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ea0:	f7fb fa06 	bl	80002b0 <__aeabi_uldivmod>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004eac:	4b0b      	ldr	r3, [pc, #44]	@ (8004edc <HAL_RCC_GetSysClockFreq+0x200>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	0c1b      	lsrs	r3, r3, #16
 8004eb2:	f003 0303 	and.w	r3, r3, #3
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004ebc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ec6:	e002      	b.n	8004ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ec8:	4b05      	ldr	r3, [pc, #20]	@ (8004ee0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004eca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ecc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3750      	adds	r7, #80	@ 0x50
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eda:	bf00      	nop
 8004edc:	40023800 	.word	0x40023800
 8004ee0:	00f42400 	.word	0x00f42400
 8004ee4:	007a1200 	.word	0x007a1200

08004ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eec:	4b03      	ldr	r3, [pc, #12]	@ (8004efc <HAL_RCC_GetHCLKFreq+0x14>)
 8004eee:	681b      	ldr	r3, [r3, #0]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	20000000 	.word	0x20000000

08004f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f04:	f7ff fff0 	bl	8004ee8 <HAL_RCC_GetHCLKFreq>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	4b05      	ldr	r3, [pc, #20]	@ (8004f20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	0a9b      	lsrs	r3, r3, #10
 8004f10:	f003 0307 	and.w	r3, r3, #7
 8004f14:	4903      	ldr	r1, [pc, #12]	@ (8004f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f16:	5ccb      	ldrb	r3, [r1, r3]
 8004f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	40023800 	.word	0x40023800
 8004f24:	0800dc44 	.word	0x0800dc44

08004f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004f2c:	f7ff ffdc 	bl	8004ee8 <HAL_RCC_GetHCLKFreq>
 8004f30:	4602      	mov	r2, r0
 8004f32:	4b05      	ldr	r3, [pc, #20]	@ (8004f48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	0b5b      	lsrs	r3, r3, #13
 8004f38:	f003 0307 	and.w	r3, r3, #7
 8004f3c:	4903      	ldr	r1, [pc, #12]	@ (8004f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f3e:	5ccb      	ldrb	r3, [r1, r3]
 8004f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	0800dc44 	.word	0x0800dc44

08004f50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	220f      	movs	r2, #15
 8004f5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004f60:	4b12      	ldr	r3, [pc, #72]	@ (8004fac <HAL_RCC_GetClockConfig+0x5c>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	f003 0203 	and.w	r2, r3, #3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004fac <HAL_RCC_GetClockConfig+0x5c>)
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004f78:	4b0c      	ldr	r3, [pc, #48]	@ (8004fac <HAL_RCC_GetClockConfig+0x5c>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f84:	4b09      	ldr	r3, [pc, #36]	@ (8004fac <HAL_RCC_GetClockConfig+0x5c>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	08db      	lsrs	r3, r3, #3
 8004f8a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f92:	4b07      	ldr	r3, [pc, #28]	@ (8004fb0 <HAL_RCC_GetClockConfig+0x60>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0207 	and.w	r2, r3, #7
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	601a      	str	r2, [r3, #0]
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	40023c00 	.word	0x40023c00

08004fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d105      	bne.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d035      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fdc:	4b67      	ldr	r3, [pc, #412]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8004fde:	2200      	movs	r2, #0
 8004fe0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fe2:	f7fd fe5b 	bl	8002c9c <HAL_GetTick>
 8004fe6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fe8:	e008      	b.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fea:	f7fd fe57 	bl	8002c9c <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e0ba      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ffc:	4b60      	ldr	r3, [pc, #384]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1f0      	bne.n	8004fea <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	019a      	lsls	r2, r3, #6
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	071b      	lsls	r3, r3, #28
 8005014:	495a      	ldr	r1, [pc, #360]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800501c:	4b57      	ldr	r3, [pc, #348]	@ (800517c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800501e:	2201      	movs	r2, #1
 8005020:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005022:	f7fd fe3b 	bl	8002c9c <HAL_GetTick>
 8005026:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005028:	e008      	b.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800502a:	f7fd fe37 	bl	8002c9c <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e09a      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800503c:	4b50      	ldr	r3, [pc, #320]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d0f0      	beq.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8083 	beq.w	800515c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	4b49      	ldr	r3, [pc, #292]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800505c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800505e:	4a48      	ldr	r2, [pc, #288]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005064:	6413      	str	r3, [r2, #64]	@ 0x40
 8005066:	4b46      	ldr	r3, [pc, #280]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800506a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800506e:	60fb      	str	r3, [r7, #12]
 8005070:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005072:	4b44      	ldr	r3, [pc, #272]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a43      	ldr	r2, [pc, #268]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800507c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800507e:	f7fd fe0d 	bl	8002c9c <HAL_GetTick>
 8005082:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005084:	e008      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005086:	f7fd fe09 	bl	8002c9c <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e06c      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005098:	4b3a      	ldr	r3, [pc, #232]	@ (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d0f0      	beq.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050a4:	4b36      	ldr	r3, [pc, #216]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050ac:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d02f      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	429a      	cmp	r2, r3
 80050c0:	d028      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050c2:	4b2f      	ldr	r3, [pc, #188]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050cc:	4b2e      	ldr	r3, [pc, #184]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80050ce:	2201      	movs	r2, #1
 80050d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050d2:	4b2d      	ldr	r3, [pc, #180]	@ (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050d8:	4a29      	ldr	r2, [pc, #164]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050de:	4b28      	ldr	r3, [pc, #160]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80050e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e2:	f003 0301 	and.w	r3, r3, #1
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d114      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050ea:	f7fd fdd7 	bl	8002c9c <HAL_GetTick>
 80050ee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f0:	e00a      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050f2:	f7fd fdd3 	bl	8002c9c <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005100:	4293      	cmp	r3, r2
 8005102:	d901      	bls.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e034      	b.n	8005172 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005108:	4b1d      	ldr	r3, [pc, #116]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800510a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d0ee      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800511c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005120:	d10d      	bne.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005122:	4b17      	ldr	r3, [pc, #92]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005132:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005136:	4912      	ldr	r1, [pc, #72]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005138:	4313      	orrs	r3, r2
 800513a:	608b      	str	r3, [r1, #8]
 800513c:	e005      	b.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800513e:	4b10      	ldr	r3, [pc, #64]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	4a0f      	ldr	r2, [pc, #60]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005144:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005148:	6093      	str	r3, [r2, #8]
 800514a:	4b0d      	ldr	r3, [pc, #52]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800514c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005156:	490a      	ldr	r1, [pc, #40]	@ (8005180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005158:	4313      	orrs	r3, r2
 800515a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b00      	cmp	r3, #0
 8005166:	d003      	beq.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	7c1a      	ldrb	r2, [r3, #16]
 800516c:	4b07      	ldr	r3, [pc, #28]	@ (800518c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800516e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	42470068 	.word	0x42470068
 8005180:	40023800 	.word	0x40023800
 8005184:	40007000 	.word	0x40007000
 8005188:	42470e40 	.word	0x42470e40
 800518c:	424711e0 	.word	0x424711e0

08005190 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e073      	b.n	800528e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	7f5b      	ldrb	r3, [r3, #29]
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d105      	bne.n	80051bc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f7fb fdf2 	bl	8000da0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2202      	movs	r2, #2
 80051c0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	2b10      	cmp	r3, #16
 80051ce:	d055      	beq.n	800527c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	22ca      	movs	r2, #202	@ 0xca
 80051d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2253      	movs	r2, #83	@ 0x53
 80051de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f99d 	bl	8005520 <RTC_EnterInitMode>
 80051e6:	4603      	mov	r3, r0
 80051e8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d12c      	bne.n	800524a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689b      	ldr	r3, [r3, #8]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6812      	ldr	r2, [r2, #0]
 80051fa:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80051fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005202:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6899      	ldr	r1, [r3, #8]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	68d2      	ldr	r2, [r2, #12]
 800522a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6919      	ldr	r1, [r3, #16]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	041a      	lsls	r2, r3, #16
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	430a      	orrs	r2, r1
 800523e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f9a4 	bl	800558e <RTC_ExitInitMode>
 8005246:	4603      	mov	r3, r0
 8005248:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800524a:	7bfb      	ldrb	r3, [r7, #15]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d110      	bne.n	8005272 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800525e:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	699a      	ldr	r2, [r3, #24]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	22ff      	movs	r2, #255	@ 0xff
 8005278:	625a      	str	r2, [r3, #36]	@ 0x24
 800527a:	e001      	b.n	8005280 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800527c:	2300      	movs	r3, #0
 800527e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005280:	7bfb      	ldrb	r3, [r7, #15]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d102      	bne.n	800528c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800528c:	7bfb      	ldrb	r3, [r7, #15]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005296:	b590      	push	{r4, r7, lr}
 8005298:	b087      	sub	sp, #28
 800529a:	af00      	add	r7, sp, #0
 800529c:	60f8      	str	r0, [r7, #12]
 800529e:	60b9      	str	r1, [r7, #8]
 80052a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	7f1b      	ldrb	r3, [r3, #28]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d101      	bne.n	80052b2 <HAL_RTC_SetTime+0x1c>
 80052ae:	2302      	movs	r3, #2
 80052b0:	e087      	b.n	80053c2 <HAL_RTC_SetTime+0x12c>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2201      	movs	r2, #1
 80052b6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2202      	movs	r2, #2
 80052bc:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d126      	bne.n	8005312 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d102      	bne.n	80052d8 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	2200      	movs	r2, #0
 80052d6:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 f97b 	bl	80055d8 <RTC_ByteToBcd2>
 80052e2:	4603      	mov	r3, r0
 80052e4:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	785b      	ldrb	r3, [r3, #1]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 f974 	bl	80055d8 <RTC_ByteToBcd2>
 80052f0:	4603      	mov	r3, r0
 80052f2:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80052f4:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	789b      	ldrb	r3, [r3, #2]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 f96c 	bl	80055d8 <RTC_ByteToBcd2>
 8005300:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005302:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	78db      	ldrb	r3, [r3, #3]
 800530a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	e018      	b.n	8005344 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800531c:	2b00      	cmp	r3, #0
 800531e:	d102      	bne.n	8005326 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2200      	movs	r2, #0
 8005324:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	785b      	ldrb	r3, [r3, #1]
 8005330:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005332:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005338:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	78db      	ldrb	r3, [r3, #3]
 800533e:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005340:	4313      	orrs	r3, r2
 8005342:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	22ca      	movs	r2, #202	@ 0xca
 800534a:	625a      	str	r2, [r3, #36]	@ 0x24
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2253      	movs	r2, #83	@ 0x53
 8005352:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 f8e3 	bl	8005520 <RTC_EnterInitMode>
 800535a:	4603      	mov	r3, r0
 800535c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800535e:	7cfb      	ldrb	r3, [r7, #19]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d120      	bne.n	80053a6 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800536e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005372:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005382:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6899      	ldr	r1, [r3, #8]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	431a      	orrs	r2, r3
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	430a      	orrs	r2, r1
 800539a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 f8f6 	bl	800558e <RTC_ExitInitMode>
 80053a2:	4603      	mov	r3, r0
 80053a4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80053a6:	7cfb      	ldrb	r3, [r7, #19]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d102      	bne.n	80053b2 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2201      	movs	r2, #1
 80053b0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	22ff      	movs	r2, #255	@ 0xff
 80053b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	771a      	strb	r2, [r3, #28]

  return status;
 80053c0:	7cfb      	ldrb	r3, [r7, #19]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd90      	pop	{r4, r7, pc}

080053ca <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80053ca:	b590      	push	{r4, r7, lr}
 80053cc:	b087      	sub	sp, #28
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	7f1b      	ldrb	r3, [r3, #28]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d101      	bne.n	80053e6 <HAL_RTC_SetDate+0x1c>
 80053e2:	2302      	movs	r3, #2
 80053e4:	e071      	b.n	80054ca <HAL_RTC_SetDate+0x100>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2202      	movs	r2, #2
 80053f0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10e      	bne.n	8005416 <HAL_RTC_SetDate+0x4c>
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	785b      	ldrb	r3, [r3, #1]
 80053fc:	f003 0310 	and.w	r3, r3, #16
 8005400:	2b00      	cmp	r3, #0
 8005402:	d008      	beq.n	8005416 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	785b      	ldrb	r3, [r3, #1]
 8005408:	f023 0310 	bic.w	r3, r3, #16
 800540c:	b2db      	uxtb	r3, r3
 800540e:	330a      	adds	r3, #10
 8005410:	b2da      	uxtb	r2, r3
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d11c      	bne.n	8005456 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	78db      	ldrb	r3, [r3, #3]
 8005420:	4618      	mov	r0, r3
 8005422:	f000 f8d9 	bl	80055d8 <RTC_ByteToBcd2>
 8005426:	4603      	mov	r3, r0
 8005428:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	785b      	ldrb	r3, [r3, #1]
 800542e:	4618      	mov	r0, r3
 8005430:	f000 f8d2 	bl	80055d8 <RTC_ByteToBcd2>
 8005434:	4603      	mov	r3, r0
 8005436:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005438:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	789b      	ldrb	r3, [r3, #2]
 800543e:	4618      	mov	r0, r3
 8005440:	f000 f8ca 	bl	80055d8 <RTC_ByteToBcd2>
 8005444:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005446:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	e00e      	b.n	8005474 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	78db      	ldrb	r3, [r3, #3]
 800545a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	785b      	ldrb	r3, [r3, #1]
 8005460:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005462:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005468:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005470:	4313      	orrs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	22ca      	movs	r2, #202	@ 0xca
 800547a:	625a      	str	r2, [r3, #36]	@ 0x24
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2253      	movs	r2, #83	@ 0x53
 8005482:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 f84b 	bl	8005520 <RTC_EnterInitMode>
 800548a:	4603      	mov	r3, r0
 800548c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800548e:	7cfb      	ldrb	r3, [r7, #19]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10c      	bne.n	80054ae <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800549e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80054a2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 f872 	bl	800558e <RTC_ExitInitMode>
 80054aa:	4603      	mov	r3, r0
 80054ac:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80054ae:	7cfb      	ldrb	r3, [r7, #19]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d102      	bne.n	80054ba <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2201      	movs	r2, #1
 80054b8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	22ff      	movs	r2, #255	@ 0xff
 80054c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2200      	movs	r2, #0
 80054c6:	771a      	strb	r2, [r3, #28]

  return status;
 80054c8:	7cfb      	ldrb	r3, [r7, #19]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	371c      	adds	r7, #28
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd90      	pop	{r4, r7, pc}
	...

080054d4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a0d      	ldr	r2, [pc, #52]	@ (800551c <HAL_RTC_WaitForSynchro+0x48>)
 80054e6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054e8:	f7fd fbd8 	bl	8002c9c <HAL_GetTick>
 80054ec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80054ee:	e009      	b.n	8005504 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80054f0:	f7fd fbd4 	bl	8002c9c <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80054fe:	d901      	bls.n	8005504 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e007      	b.n	8005514 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f003 0320 	and.w	r3, r3, #32
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0ee      	beq.n	80054f0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005512:	2300      	movs	r3, #0
}
 8005514:	4618      	mov	r0, r3
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	00013f5f 	.word	0x00013f5f

08005520 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005528:	2300      	movs	r3, #0
 800552a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800552c:	2300      	movs	r3, #0
 800552e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800553a:	2b00      	cmp	r3, #0
 800553c:	d122      	bne.n	8005584 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68da      	ldr	r2, [r3, #12]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800554c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800554e:	f7fd fba5 	bl	8002c9c <HAL_GetTick>
 8005552:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005554:	e00c      	b.n	8005570 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005556:	f7fd fba1 	bl	8002c9c <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005564:	d904      	bls.n	8005570 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2204      	movs	r2, #4
 800556a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800557a:	2b00      	cmp	r3, #0
 800557c:	d102      	bne.n	8005584 <RTC_EnterInitMode+0x64>
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d1e8      	bne.n	8005556 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005584:	7bfb      	ldrb	r3, [r7, #15]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68da      	ldr	r2, [r3, #12]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055a8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f003 0320 	and.w	r3, r3, #32
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10a      	bne.n	80055ce <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7ff ff8b 	bl	80054d4 <HAL_RTC_WaitForSynchro>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d004      	beq.n	80055ce <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2204      	movs	r2, #4
 80055c8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80055ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	4603      	mov	r3, r0
 80055e0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80055e2:	2300      	movs	r3, #0
 80055e4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80055e6:	e005      	b.n	80055f4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	3301      	adds	r3, #1
 80055ec:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80055ee:	79fb      	ldrb	r3, [r7, #7]
 80055f0:	3b0a      	subs	r3, #10
 80055f2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80055f4:	79fb      	ldrb	r3, [r7, #7]
 80055f6:	2b09      	cmp	r3, #9
 80055f8:	d8f6      	bhi.n	80055e8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	b2da      	uxtb	r2, r3
 8005602:	79fb      	ldrb	r3, [r7, #7]
 8005604:	4313      	orrs	r3, r2
 8005606:	b2db      	uxtb	r3, r3
}
 8005608:	4618      	mov	r0, r3
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d101      	bne.n	8005626 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e07b      	b.n	800571e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562a:	2b00      	cmp	r3, #0
 800562c:	d108      	bne.n	8005640 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005636:	d009      	beq.n	800564c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	61da      	str	r2, [r3, #28]
 800563e:	e005      	b.n	800564c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fb fbc6 	bl	8000df8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005682:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005694:	431a      	orrs	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800569e:	431a      	orrs	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	431a      	orrs	r2, r3
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	431a      	orrs	r2, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	699b      	ldr	r3, [r3, #24]
 80056b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80056bc:	431a      	orrs	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056c6:	431a      	orrs	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056d0:	ea42 0103 	orr.w	r1, r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	430a      	orrs	r2, r1
 80056e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	0c1b      	lsrs	r3, r3, #16
 80056ea:	f003 0104 	and.w	r1, r3, #4
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f2:	f003 0210 	and.w	r2, r3, #16
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	69da      	ldr	r2, [r3, #28]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800570c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b088      	sub	sp, #32
 800572a:	af00      	add	r7, sp, #0
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	603b      	str	r3, [r7, #0]
 8005732:	4613      	mov	r3, r2
 8005734:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005736:	2300      	movs	r3, #0
 8005738:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_SPI_Transmit+0x22>
 8005744:	2302      	movs	r3, #2
 8005746:	e12d      	b.n	80059a4 <HAL_SPI_Transmit+0x27e>
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005750:	f7fd faa4 	bl	8002c9c <HAL_GetTick>
 8005754:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005756:	88fb      	ldrh	r3, [r7, #6]
 8005758:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b01      	cmp	r3, #1
 8005764:	d002      	beq.n	800576c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005766:	2302      	movs	r3, #2
 8005768:	77fb      	strb	r3, [r7, #31]
    goto error;
 800576a:	e116      	b.n	800599a <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <HAL_SPI_Transmit+0x52>
 8005772:	88fb      	ldrh	r3, [r7, #6]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d102      	bne.n	800577e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800577c:	e10d      	b.n	800599a <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2203      	movs	r2, #3
 8005782:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	68ba      	ldr	r2, [r7, #8]
 8005790:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	88fa      	ldrh	r2, [r7, #6]
 8005796:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	88fa      	ldrh	r2, [r7, #6]
 800579c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80057c4:	d10f      	bne.n	80057e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80057e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057f0:	2b40      	cmp	r3, #64	@ 0x40
 80057f2:	d007      	beq.n	8005804 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005802:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800580c:	d14f      	bne.n	80058ae <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d002      	beq.n	800581c <HAL_SPI_Transmit+0xf6>
 8005816:	8afb      	ldrh	r3, [r7, #22]
 8005818:	2b01      	cmp	r3, #1
 800581a:	d142      	bne.n	80058a2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005820:	881a      	ldrh	r2, [r3, #0]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800582c:	1c9a      	adds	r2, r3, #2
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b01      	subs	r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005840:	e02f      	b.n	80058a2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b02      	cmp	r3, #2
 800584e:	d112      	bne.n	8005876 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005854:	881a      	ldrh	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005860:	1c9a      	adds	r2, r3, #2
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800586a:	b29b      	uxth	r3, r3
 800586c:	3b01      	subs	r3, #1
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005874:	e015      	b.n	80058a2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005876:	f7fd fa11 	bl	8002c9c <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	429a      	cmp	r2, r3
 8005884:	d803      	bhi.n	800588e <HAL_SPI_Transmit+0x168>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588c:	d102      	bne.n	8005894 <HAL_SPI_Transmit+0x16e>
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d106      	bne.n	80058a2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80058a0:	e07b      	b.n	800599a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1ca      	bne.n	8005842 <HAL_SPI_Transmit+0x11c>
 80058ac:	e050      	b.n	8005950 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d002      	beq.n	80058bc <HAL_SPI_Transmit+0x196>
 80058b6:	8afb      	ldrh	r3, [r7, #22]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d144      	bne.n	8005946 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	330c      	adds	r3, #12
 80058c6:	7812      	ldrb	r2, [r2, #0]
 80058c8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058d8:	b29b      	uxth	r3, r3
 80058da:	3b01      	subs	r3, #1
 80058dc:	b29a      	uxth	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80058e2:	e030      	b.n	8005946 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 0302 	and.w	r3, r3, #2
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d113      	bne.n	800591a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	330c      	adds	r3, #12
 80058fc:	7812      	ldrb	r2, [r2, #0]
 80058fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800590e:	b29b      	uxth	r3, r3
 8005910:	3b01      	subs	r3, #1
 8005912:	b29a      	uxth	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005918:	e015      	b.n	8005946 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800591a:	f7fd f9bf 	bl	8002c9c <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d803      	bhi.n	8005932 <HAL_SPI_Transmit+0x20c>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005930:	d102      	bne.n	8005938 <HAL_SPI_Transmit+0x212>
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d106      	bne.n	8005946 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005938:	2303      	movs	r3, #3
 800593a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005944:	e029      	b.n	800599a <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800594a:	b29b      	uxth	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1c9      	bne.n	80058e4 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005950:	69ba      	ldr	r2, [r7, #24]
 8005952:	6839      	ldr	r1, [r7, #0]
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f000 fa61 	bl	8005e1c <SPI_EndRxTxTransaction>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d002      	beq.n	8005966 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2220      	movs	r2, #32
 8005964:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10a      	bne.n	8005984 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800596e:	2300      	movs	r3, #0
 8005970:	613b      	str	r3, [r7, #16]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	613b      	str	r3, [r7, #16]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	613b      	str	r3, [r7, #16]
 8005982:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005988:	2b00      	cmp	r3, #0
 800598a:	d002      	beq.n	8005992 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	77fb      	strb	r3, [r7, #31]
 8005990:	e003      	b.n	800599a <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80059a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3720      	adds	r7, #32
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b08c      	sub	sp, #48	@ 0x30
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
 80059b8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059ba:	2301      	movs	r3, #1
 80059bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059be:	2300      	movs	r3, #0
 80059c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <HAL_SPI_TransmitReceive+0x26>
 80059ce:	2302      	movs	r3, #2
 80059d0:	e198      	b.n	8005d04 <HAL_SPI_TransmitReceive+0x358>
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059da:	f7fd f95f 	bl	8002c9c <HAL_GetTick>
 80059de:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80059f0:	887b      	ldrh	r3, [r7, #2]
 80059f2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d00f      	beq.n	8005a1c <HAL_SPI_TransmitReceive+0x70>
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a02:	d107      	bne.n	8005a14 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d103      	bne.n	8005a14 <HAL_SPI_TransmitReceive+0x68>
 8005a0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a10:	2b04      	cmp	r3, #4
 8005a12:	d003      	beq.n	8005a1c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005a14:	2302      	movs	r3, #2
 8005a16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005a1a:	e16d      	b.n	8005cf8 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d005      	beq.n	8005a2e <HAL_SPI_TransmitReceive+0x82>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <HAL_SPI_TransmitReceive+0x82>
 8005a28:	887b      	ldrh	r3, [r7, #2]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d103      	bne.n	8005a36 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005a34:	e160      	b.n	8005cf8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d003      	beq.n	8005a4a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2205      	movs	r2, #5
 8005a46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	887a      	ldrh	r2, [r7, #2]
 8005a5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	887a      	ldrh	r2, [r7, #2]
 8005a60:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	887a      	ldrh	r2, [r7, #2]
 8005a6c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	887a      	ldrh	r2, [r7, #2]
 8005a72:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a8a:	2b40      	cmp	r3, #64	@ 0x40
 8005a8c:	d007      	beq.n	8005a9e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005aa6:	d17c      	bne.n	8005ba2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <HAL_SPI_TransmitReceive+0x10a>
 8005ab0:	8b7b      	ldrh	r3, [r7, #26]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d16a      	bne.n	8005b8c <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aba:	881a      	ldrh	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ac6:	1c9a      	adds	r2, r3, #2
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	b29a      	uxth	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ada:	e057      	b.n	8005b8c <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d11b      	bne.n	8005b22 <HAL_SPI_TransmitReceive+0x176>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aee:	b29b      	uxth	r3, r3
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d016      	beq.n	8005b22 <HAL_SPI_TransmitReceive+0x176>
 8005af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d113      	bne.n	8005b22 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005afe:	881a      	ldrh	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b0a:	1c9a      	adds	r2, r3, #2
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d119      	bne.n	8005b64 <HAL_SPI_TransmitReceive+0x1b8>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d014      	beq.n	8005b64 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68da      	ldr	r2, [r3, #12]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b44:	b292      	uxth	r2, r2
 8005b46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b4c:	1c9a      	adds	r2, r3, #2
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b60:	2301      	movs	r3, #1
 8005b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b64:	f7fd f89a 	bl	8002c9c <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d80b      	bhi.n	8005b8c <HAL_SPI_TransmitReceive+0x1e0>
 8005b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b7a:	d007      	beq.n	8005b8c <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8005b7c:	2303      	movs	r3, #3
 8005b7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005b8a:	e0b5      	b.n	8005cf8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1a2      	bne.n	8005adc <HAL_SPI_TransmitReceive+0x130>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d19d      	bne.n	8005adc <HAL_SPI_TransmitReceive+0x130>
 8005ba0:	e080      	b.n	8005ca4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <HAL_SPI_TransmitReceive+0x204>
 8005baa:	8b7b      	ldrh	r3, [r7, #26]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d16f      	bne.n	8005c90 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	330c      	adds	r3, #12
 8005bba:	7812      	ldrb	r2, [r2, #0]
 8005bbc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bc2:	1c5a      	adds	r2, r3, #1
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bd6:	e05b      	b.n	8005c90 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d11c      	bne.n	8005c20 <HAL_SPI_TransmitReceive+0x274>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d017      	beq.n	8005c20 <HAL_SPI_TransmitReceive+0x274>
 8005bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d114      	bne.n	8005c20 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	330c      	adds	r3, #12
 8005c00:	7812      	ldrb	r2, [r2, #0]
 8005c02:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c08:	1c5a      	adds	r2, r3, #1
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	3b01      	subs	r3, #1
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d119      	bne.n	8005c62 <HAL_SPI_TransmitReceive+0x2b6>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d014      	beq.n	8005c62 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4a:	1c5a      	adds	r2, r3, #1
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c62:	f7fd f81b 	bl	8002c9c <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d803      	bhi.n	8005c7a <HAL_SPI_TransmitReceive+0x2ce>
 8005c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c78:	d102      	bne.n	8005c80 <HAL_SPI_TransmitReceive+0x2d4>
 8005c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d107      	bne.n	8005c90 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005c8e:	e033      	b.n	8005cf8 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d19e      	bne.n	8005bd8 <HAL_SPI_TransmitReceive+0x22c>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d199      	bne.n	8005bd8 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ca4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ca6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005ca8:	68f8      	ldr	r0, [r7, #12]
 8005caa:	f000 f8b7 	bl	8005e1c <SPI_EndRxTxTransaction>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d006      	beq.n	8005cc2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005cc0:	e01a      	b.n	8005cf8 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10a      	bne.n	8005ce0 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cca:	2300      	movs	r3, #0
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	617b      	str	r3, [r7, #20]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	617b      	str	r3, [r7, #20]
 8005cde:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d003      	beq.n	8005cf0 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cee:	e003      	b.n	8005cf8 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005d00:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3730      	adds	r7, #48	@ 0x30
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b088      	sub	sp, #32
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	603b      	str	r3, [r7, #0]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d1c:	f7fc ffbe 	bl	8002c9c <HAL_GetTick>
 8005d20:	4602      	mov	r2, r0
 8005d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d24:	1a9b      	subs	r3, r3, r2
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	4413      	add	r3, r2
 8005d2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d2c:	f7fc ffb6 	bl	8002c9c <HAL_GetTick>
 8005d30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d32:	4b39      	ldr	r3, [pc, #228]	@ (8005e18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	015b      	lsls	r3, r3, #5
 8005d38:	0d1b      	lsrs	r3, r3, #20
 8005d3a:	69fa      	ldr	r2, [r7, #28]
 8005d3c:	fb02 f303 	mul.w	r3, r2, r3
 8005d40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d42:	e054      	b.n	8005dee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d4a:	d050      	beq.n	8005dee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d4c:	f7fc ffa6 	bl	8002c9c <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	69fa      	ldr	r2, [r7, #28]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d902      	bls.n	8005d62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d13d      	bne.n	8005dde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d7a:	d111      	bne.n	8005da0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d84:	d004      	beq.n	8005d90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d8e:	d107      	bne.n	8005da0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005da8:	d10f      	bne.n	8005dca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005db8:	601a      	str	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005dc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	e017      	b.n	8005e0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005de4:	2300      	movs	r3, #0
 8005de6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	3b01      	subs	r3, #1
 8005dec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	4013      	ands	r3, r2
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	bf0c      	ite	eq
 8005dfe:	2301      	moveq	r3, #1
 8005e00:	2300      	movne	r3, #0
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	461a      	mov	r2, r3
 8005e06:	79fb      	ldrb	r3, [r7, #7]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d19b      	bne.n	8005d44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3720      	adds	r7, #32
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	20000000 	.word	0x20000000

08005e1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b088      	sub	sp, #32
 8005e20:	af02      	add	r7, sp, #8
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	2102      	movs	r1, #2
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f7ff ff6a 	bl	8005d0c <SPI_WaitFlagStateUntilTimeout>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d007      	beq.n	8005e4e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e42:	f043 0220 	orr.w	r2, r3, #32
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005e4a:	2303      	movs	r3, #3
 8005e4c:	e032      	b.n	8005eb4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8005ebc <SPI_EndRxTxTransaction+0xa0>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a1b      	ldr	r2, [pc, #108]	@ (8005ec0 <SPI_EndRxTxTransaction+0xa4>)
 8005e54:	fba2 2303 	umull	r2, r3, r2, r3
 8005e58:	0d5b      	lsrs	r3, r3, #21
 8005e5a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e5e:	fb02 f303 	mul.w	r3, r2, r3
 8005e62:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e6c:	d112      	bne.n	8005e94 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	9300      	str	r3, [sp, #0]
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2200      	movs	r2, #0
 8005e76:	2180      	movs	r1, #128	@ 0x80
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f7ff ff47 	bl	8005d0c <SPI_WaitFlagStateUntilTimeout>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d016      	beq.n	8005eb2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e88:	f043 0220 	orr.w	r2, r3, #32
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e00f      	b.n	8005eb4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	3b01      	subs	r3, #1
 8005e9e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eaa:	2b80      	cmp	r3, #128	@ 0x80
 8005eac:	d0f2      	beq.n	8005e94 <SPI_EndRxTxTransaction+0x78>
 8005eae:	e000      	b.n	8005eb2 <SPI_EndRxTxTransaction+0x96>
        break;
 8005eb0:	bf00      	nop
  }

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}
 8005ebc:	20000000 	.word	0x20000000
 8005ec0:	165e9f81 	.word	0x165e9f81

08005ec4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e041      	b.n	8005f5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d106      	bne.n	8005ef0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f839 	bl	8005f62 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	3304      	adds	r3, #4
 8005f00:	4619      	mov	r1, r3
 8005f02:	4610      	mov	r0, r2
 8005f04:	f000 f9b2 	bl	800626c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b083      	sub	sp, #12
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005f6a:	bf00      	nop
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
	...

08005f78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d001      	beq.n	8005f90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e044      	b.n	800601a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f042 0201 	orr.w	r2, r2, #1
 8005fa6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a1e      	ldr	r2, [pc, #120]	@ (8006028 <HAL_TIM_Base_Start_IT+0xb0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d018      	beq.n	8005fe4 <HAL_TIM_Base_Start_IT+0x6c>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fba:	d013      	beq.n	8005fe4 <HAL_TIM_Base_Start_IT+0x6c>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1a      	ldr	r2, [pc, #104]	@ (800602c <HAL_TIM_Base_Start_IT+0xb4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00e      	beq.n	8005fe4 <HAL_TIM_Base_Start_IT+0x6c>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a19      	ldr	r2, [pc, #100]	@ (8006030 <HAL_TIM_Base_Start_IT+0xb8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d009      	beq.n	8005fe4 <HAL_TIM_Base_Start_IT+0x6c>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a17      	ldr	r2, [pc, #92]	@ (8006034 <HAL_TIM_Base_Start_IT+0xbc>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d004      	beq.n	8005fe4 <HAL_TIM_Base_Start_IT+0x6c>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a16      	ldr	r2, [pc, #88]	@ (8006038 <HAL_TIM_Base_Start_IT+0xc0>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d111      	bne.n	8006008 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2b06      	cmp	r3, #6
 8005ff4:	d010      	beq.n	8006018 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f042 0201 	orr.w	r2, r2, #1
 8006004:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006006:	e007      	b.n	8006018 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f042 0201 	orr.w	r2, r2, #1
 8006016:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40010000 	.word	0x40010000
 800602c:	40000400 	.word	0x40000400
 8006030:	40000800 	.word	0x40000800
 8006034:	40000c00 	.word	0x40000c00
 8006038:	40014000 	.word	0x40014000

0800603c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d020      	beq.n	80060a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f003 0302 	and.w	r3, r3, #2
 8006064:	2b00      	cmp	r3, #0
 8006066:	d01b      	beq.n	80060a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f06f 0202 	mvn.w	r2, #2
 8006070:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2201      	movs	r2, #1
 8006076:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	699b      	ldr	r3, [r3, #24]
 800607e:	f003 0303 	and.w	r3, r3, #3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f8d2 	bl	8006230 <HAL_TIM_IC_CaptureCallback>
 800608c:	e005      	b.n	800609a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f8c4 	bl	800621c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f8d5 	bl	8006244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2200      	movs	r2, #0
 800609e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f003 0304 	and.w	r3, r3, #4
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d020      	beq.n	80060ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d01b      	beq.n	80060ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f06f 0204 	mvn.w	r2, #4
 80060bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2202      	movs	r2, #2
 80060c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f8ac 	bl	8006230 <HAL_TIM_IC_CaptureCallback>
 80060d8:	e005      	b.n	80060e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f89e 	bl	800621c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 f8af 	bl	8006244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f003 0308 	and.w	r3, r3, #8
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d020      	beq.n	8006138 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f003 0308 	and.w	r3, r3, #8
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d01b      	beq.n	8006138 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f06f 0208 	mvn.w	r2, #8
 8006108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2204      	movs	r2, #4
 800610e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d003      	beq.n	8006126 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f886 	bl	8006230 <HAL_TIM_IC_CaptureCallback>
 8006124:	e005      	b.n	8006132 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f878 	bl	800621c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f889 	bl	8006244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f003 0310 	and.w	r3, r3, #16
 800613e:	2b00      	cmp	r3, #0
 8006140:	d020      	beq.n	8006184 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f003 0310 	and.w	r3, r3, #16
 8006148:	2b00      	cmp	r3, #0
 800614a:	d01b      	beq.n	8006184 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f06f 0210 	mvn.w	r2, #16
 8006154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2208      	movs	r2, #8
 800615a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	69db      	ldr	r3, [r3, #28]
 8006162:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f860 	bl	8006230 <HAL_TIM_IC_CaptureCallback>
 8006170:	e005      	b.n	800617e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f852 	bl	800621c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f863 	bl	8006244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00c      	beq.n	80061a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	d007      	beq.n	80061a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f06f 0201 	mvn.w	r2, #1
 80061a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7fa fcfc 	bl	8000ba0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00c      	beq.n	80061cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d007      	beq.n	80061cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80061c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f8e6 	bl	8006398 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00c      	beq.n	80061f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d007      	beq.n	80061f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80061e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f834 	bl	8006258 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	f003 0320 	and.w	r3, r3, #32
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d00c      	beq.n	8006214 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f003 0320 	and.w	r3, r3, #32
 8006200:	2b00      	cmp	r3, #0
 8006202:	d007      	beq.n	8006214 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f06f 0220 	mvn.w	r2, #32
 800620c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f8b8 	bl	8006384 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006214:	bf00      	nop
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a3a      	ldr	r2, [pc, #232]	@ (8006368 <TIM_Base_SetConfig+0xfc>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d00f      	beq.n	80062a4 <TIM_Base_SetConfig+0x38>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800628a:	d00b      	beq.n	80062a4 <TIM_Base_SetConfig+0x38>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a37      	ldr	r2, [pc, #220]	@ (800636c <TIM_Base_SetConfig+0x100>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d007      	beq.n	80062a4 <TIM_Base_SetConfig+0x38>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a36      	ldr	r2, [pc, #216]	@ (8006370 <TIM_Base_SetConfig+0x104>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d003      	beq.n	80062a4 <TIM_Base_SetConfig+0x38>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a35      	ldr	r2, [pc, #212]	@ (8006374 <TIM_Base_SetConfig+0x108>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d108      	bne.n	80062b6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a2b      	ldr	r2, [pc, #172]	@ (8006368 <TIM_Base_SetConfig+0xfc>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d01b      	beq.n	80062f6 <TIM_Base_SetConfig+0x8a>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062c4:	d017      	beq.n	80062f6 <TIM_Base_SetConfig+0x8a>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a28      	ldr	r2, [pc, #160]	@ (800636c <TIM_Base_SetConfig+0x100>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d013      	beq.n	80062f6 <TIM_Base_SetConfig+0x8a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a27      	ldr	r2, [pc, #156]	@ (8006370 <TIM_Base_SetConfig+0x104>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d00f      	beq.n	80062f6 <TIM_Base_SetConfig+0x8a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a26      	ldr	r2, [pc, #152]	@ (8006374 <TIM_Base_SetConfig+0x108>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00b      	beq.n	80062f6 <TIM_Base_SetConfig+0x8a>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a25      	ldr	r2, [pc, #148]	@ (8006378 <TIM_Base_SetConfig+0x10c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d007      	beq.n	80062f6 <TIM_Base_SetConfig+0x8a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a24      	ldr	r2, [pc, #144]	@ (800637c <TIM_Base_SetConfig+0x110>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d003      	beq.n	80062f6 <TIM_Base_SetConfig+0x8a>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a23      	ldr	r2, [pc, #140]	@ (8006380 <TIM_Base_SetConfig+0x114>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d108      	bne.n	8006308 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4313      	orrs	r3, r2
 8006306:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	695b      	ldr	r3, [r3, #20]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a0e      	ldr	r2, [pc, #56]	@ (8006368 <TIM_Base_SetConfig+0xfc>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d103      	bne.n	800633c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	691a      	ldr	r2, [r3, #16]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b01      	cmp	r3, #1
 800634c:	d105      	bne.n	800635a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	f023 0201 	bic.w	r2, r3, #1
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	611a      	str	r2, [r3, #16]
  }
}
 800635a:	bf00      	nop
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	40010000 	.word	0x40010000
 800636c:	40000400 	.word	0x40000400
 8006370:	40000800 	.word	0x40000800
 8006374:	40000c00 	.word	0x40000c00
 8006378:	40014000 	.word	0x40014000
 800637c:	40014400 	.word	0x40014400
 8006380:	40014800 	.word	0x40014800

08006384 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006384:	b480      	push	{r7}
 8006386:	b083      	sub	sp, #12
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d101      	bne.n	80063be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
 80063bc:	e042      	b.n	8006444 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d106      	bne.n	80063d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7fa fd58 	bl	8000e88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2224      	movs	r2, #36	@ 0x24
 80063dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68da      	ldr	r2, [r3, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80063ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f973 	bl	80066dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	691a      	ldr	r2, [r3, #16]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006404:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	695a      	ldr	r2, [r3, #20]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006414:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	68da      	ldr	r2, [r3, #12]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006424:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2220      	movs	r2, #32
 8006438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3708      	adds	r7, #8
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b08a      	sub	sp, #40	@ 0x28
 8006450:	af02      	add	r7, sp, #8
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	60b9      	str	r1, [r7, #8]
 8006456:	603b      	str	r3, [r7, #0]
 8006458:	4613      	mov	r3, r2
 800645a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800645c:	2300      	movs	r3, #0
 800645e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006466:	b2db      	uxtb	r3, r3
 8006468:	2b20      	cmp	r3, #32
 800646a:	d175      	bne.n	8006558 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <HAL_UART_Transmit+0x2c>
 8006472:	88fb      	ldrh	r3, [r7, #6]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e06e      	b.n	800655a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2200      	movs	r2, #0
 8006480:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2221      	movs	r2, #33	@ 0x21
 8006486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800648a:	f7fc fc07 	bl	8002c9c <HAL_GetTick>
 800648e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	88fa      	ldrh	r2, [r7, #6]
 8006494:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	88fa      	ldrh	r2, [r7, #6]
 800649a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064a4:	d108      	bne.n	80064b8 <HAL_UART_Transmit+0x6c>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d104      	bne.n	80064b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	61bb      	str	r3, [r7, #24]
 80064b6:	e003      	b.n	80064c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064bc:	2300      	movs	r3, #0
 80064be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064c0:	e02e      	b.n	8006520 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	9300      	str	r3, [sp, #0]
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	2200      	movs	r2, #0
 80064ca:	2180      	movs	r1, #128	@ 0x80
 80064cc:	68f8      	ldr	r0, [r7, #12]
 80064ce:	f000 f848 	bl	8006562 <UART_WaitOnFlagUntilTimeout>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d005      	beq.n	80064e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e03a      	b.n	800655a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10b      	bne.n	8006502 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	881b      	ldrh	r3, [r3, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	3302      	adds	r3, #2
 80064fe:	61bb      	str	r3, [r7, #24]
 8006500:	e007      	b.n	8006512 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	781a      	ldrb	r2, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	3301      	adds	r3, #1
 8006510:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006516:	b29b      	uxth	r3, r3
 8006518:	3b01      	subs	r3, #1
 800651a:	b29a      	uxth	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006524:	b29b      	uxth	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1cb      	bne.n	80064c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	2200      	movs	r2, #0
 8006532:	2140      	movs	r1, #64	@ 0x40
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 f814 	bl	8006562 <UART_WaitOnFlagUntilTimeout>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d005      	beq.n	800654c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2220      	movs	r2, #32
 8006544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006548:	2303      	movs	r3, #3
 800654a:	e006      	b.n	800655a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2220      	movs	r2, #32
 8006550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	e000      	b.n	800655a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006558:	2302      	movs	r3, #2
  }
}
 800655a:	4618      	mov	r0, r3
 800655c:	3720      	adds	r7, #32
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b086      	sub	sp, #24
 8006566:	af00      	add	r7, sp, #0
 8006568:	60f8      	str	r0, [r7, #12]
 800656a:	60b9      	str	r1, [r7, #8]
 800656c:	603b      	str	r3, [r7, #0]
 800656e:	4613      	mov	r3, r2
 8006570:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006572:	e03b      	b.n	80065ec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006574:	6a3b      	ldr	r3, [r7, #32]
 8006576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657a:	d037      	beq.n	80065ec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800657c:	f7fc fb8e 	bl	8002c9c <HAL_GetTick>
 8006580:	4602      	mov	r2, r0
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	6a3a      	ldr	r2, [r7, #32]
 8006588:	429a      	cmp	r2, r3
 800658a:	d302      	bcc.n	8006592 <UART_WaitOnFlagUntilTimeout+0x30>
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e03a      	b.n	800660c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d023      	beq.n	80065ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	2b80      	cmp	r3, #128	@ 0x80
 80065a8:	d020      	beq.n	80065ec <UART_WaitOnFlagUntilTimeout+0x8a>
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b40      	cmp	r3, #64	@ 0x40
 80065ae:	d01d      	beq.n	80065ec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b08      	cmp	r3, #8
 80065bc:	d116      	bne.n	80065ec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80065be:	2300      	movs	r3, #0
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	617b      	str	r3, [r7, #20]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	617b      	str	r3, [r7, #20]
 80065d2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 f81d 	bl	8006614 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2208      	movs	r2, #8
 80065de:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e00f      	b.n	800660c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	4013      	ands	r3, r2
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	bf0c      	ite	eq
 80065fc:	2301      	moveq	r3, #1
 80065fe:	2300      	movne	r3, #0
 8006600:	b2db      	uxtb	r3, r3
 8006602:	461a      	mov	r2, r3
 8006604:	79fb      	ldrb	r3, [r7, #7]
 8006606:	429a      	cmp	r2, r3
 8006608:	d0b4      	beq.n	8006574 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006614:	b480      	push	{r7}
 8006616:	b095      	sub	sp, #84	@ 0x54
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	330c      	adds	r3, #12
 8006622:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006626:	e853 3f00 	ldrex	r3, [r3]
 800662a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800662c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006632:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	330c      	adds	r3, #12
 800663a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800663c:	643a      	str	r2, [r7, #64]	@ 0x40
 800663e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006640:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006642:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006644:	e841 2300 	strex	r3, r2, [r1]
 8006648:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800664a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1e5      	bne.n	800661c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	3314      	adds	r3, #20
 8006656:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	e853 3f00 	ldrex	r3, [r3]
 800665e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	f023 0301 	bic.w	r3, r3, #1
 8006666:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	3314      	adds	r3, #20
 800666e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006670:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006672:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006674:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006676:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006678:	e841 2300 	strex	r3, r2, [r1]
 800667c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800667e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1e5      	bne.n	8006650 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006688:	2b01      	cmp	r3, #1
 800668a:	d119      	bne.n	80066c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	330c      	adds	r3, #12
 8006692:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	e853 3f00 	ldrex	r3, [r3]
 800669a:	60bb      	str	r3, [r7, #8]
   return(result);
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f023 0310 	bic.w	r3, r3, #16
 80066a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	330c      	adds	r3, #12
 80066aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066ac:	61ba      	str	r2, [r7, #24]
 80066ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	6979      	ldr	r1, [r7, #20]
 80066b2:	69ba      	ldr	r2, [r7, #24]
 80066b4:	e841 2300 	strex	r3, r2, [r1]
 80066b8:	613b      	str	r3, [r7, #16]
   return(result);
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1e5      	bne.n	800668c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2220      	movs	r2, #32
 80066c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80066ce:	bf00      	nop
 80066d0:	3754      	adds	r7, #84	@ 0x54
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
	...

080066dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066e0:	b0c0      	sub	sp, #256	@ 0x100
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80066f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066f8:	68d9      	ldr	r1, [r3, #12]
 80066fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	ea40 0301 	orr.w	r3, r0, r1
 8006704:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800670a:	689a      	ldr	r2, [r3, #8]
 800670c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	431a      	orrs	r2, r3
 8006714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	431a      	orrs	r2, r3
 800671c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	4313      	orrs	r3, r2
 8006724:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006734:	f021 010c 	bic.w	r1, r1, #12
 8006738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006742:	430b      	orrs	r3, r1
 8006744:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006756:	6999      	ldr	r1, [r3, #24]
 8006758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	ea40 0301 	orr.w	r3, r0, r1
 8006762:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	4b8f      	ldr	r3, [pc, #572]	@ (80069a8 <UART_SetConfig+0x2cc>)
 800676c:	429a      	cmp	r2, r3
 800676e:	d005      	beq.n	800677c <UART_SetConfig+0xa0>
 8006770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	4b8d      	ldr	r3, [pc, #564]	@ (80069ac <UART_SetConfig+0x2d0>)
 8006778:	429a      	cmp	r2, r3
 800677a:	d104      	bne.n	8006786 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800677c:	f7fe fbd4 	bl	8004f28 <HAL_RCC_GetPCLK2Freq>
 8006780:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006784:	e003      	b.n	800678e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006786:	f7fe fbbb 	bl	8004f00 <HAL_RCC_GetPCLK1Freq>
 800678a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800678e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006792:	69db      	ldr	r3, [r3, #28]
 8006794:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006798:	f040 810c 	bne.w	80069b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800679c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067a0:	2200      	movs	r2, #0
 80067a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80067a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80067aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80067ae:	4622      	mov	r2, r4
 80067b0:	462b      	mov	r3, r5
 80067b2:	1891      	adds	r1, r2, r2
 80067b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80067b6:	415b      	adcs	r3, r3
 80067b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80067ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80067be:	4621      	mov	r1, r4
 80067c0:	eb12 0801 	adds.w	r8, r2, r1
 80067c4:	4629      	mov	r1, r5
 80067c6:	eb43 0901 	adc.w	r9, r3, r1
 80067ca:	f04f 0200 	mov.w	r2, #0
 80067ce:	f04f 0300 	mov.w	r3, #0
 80067d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80067d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80067da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80067de:	4690      	mov	r8, r2
 80067e0:	4699      	mov	r9, r3
 80067e2:	4623      	mov	r3, r4
 80067e4:	eb18 0303 	adds.w	r3, r8, r3
 80067e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80067ec:	462b      	mov	r3, r5
 80067ee:	eb49 0303 	adc.w	r3, r9, r3
 80067f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80067f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006802:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006806:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800680a:	460b      	mov	r3, r1
 800680c:	18db      	adds	r3, r3, r3
 800680e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006810:	4613      	mov	r3, r2
 8006812:	eb42 0303 	adc.w	r3, r2, r3
 8006816:	657b      	str	r3, [r7, #84]	@ 0x54
 8006818:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800681c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006820:	f7f9 fd46 	bl	80002b0 <__aeabi_uldivmod>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4b61      	ldr	r3, [pc, #388]	@ (80069b0 <UART_SetConfig+0x2d4>)
 800682a:	fba3 2302 	umull	r2, r3, r3, r2
 800682e:	095b      	lsrs	r3, r3, #5
 8006830:	011c      	lsls	r4, r3, #4
 8006832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006836:	2200      	movs	r2, #0
 8006838:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800683c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006840:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006844:	4642      	mov	r2, r8
 8006846:	464b      	mov	r3, r9
 8006848:	1891      	adds	r1, r2, r2
 800684a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800684c:	415b      	adcs	r3, r3
 800684e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006850:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006854:	4641      	mov	r1, r8
 8006856:	eb12 0a01 	adds.w	sl, r2, r1
 800685a:	4649      	mov	r1, r9
 800685c:	eb43 0b01 	adc.w	fp, r3, r1
 8006860:	f04f 0200 	mov.w	r2, #0
 8006864:	f04f 0300 	mov.w	r3, #0
 8006868:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800686c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006870:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006874:	4692      	mov	sl, r2
 8006876:	469b      	mov	fp, r3
 8006878:	4643      	mov	r3, r8
 800687a:	eb1a 0303 	adds.w	r3, sl, r3
 800687e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006882:	464b      	mov	r3, r9
 8006884:	eb4b 0303 	adc.w	r3, fp, r3
 8006888:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800688c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006898:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800689c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80068a0:	460b      	mov	r3, r1
 80068a2:	18db      	adds	r3, r3, r3
 80068a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80068a6:	4613      	mov	r3, r2
 80068a8:	eb42 0303 	adc.w	r3, r2, r3
 80068ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80068ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80068b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80068b6:	f7f9 fcfb 	bl	80002b0 <__aeabi_uldivmod>
 80068ba:	4602      	mov	r2, r0
 80068bc:	460b      	mov	r3, r1
 80068be:	4611      	mov	r1, r2
 80068c0:	4b3b      	ldr	r3, [pc, #236]	@ (80069b0 <UART_SetConfig+0x2d4>)
 80068c2:	fba3 2301 	umull	r2, r3, r3, r1
 80068c6:	095b      	lsrs	r3, r3, #5
 80068c8:	2264      	movs	r2, #100	@ 0x64
 80068ca:	fb02 f303 	mul.w	r3, r2, r3
 80068ce:	1acb      	subs	r3, r1, r3
 80068d0:	00db      	lsls	r3, r3, #3
 80068d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80068d6:	4b36      	ldr	r3, [pc, #216]	@ (80069b0 <UART_SetConfig+0x2d4>)
 80068d8:	fba3 2302 	umull	r2, r3, r3, r2
 80068dc:	095b      	lsrs	r3, r3, #5
 80068de:	005b      	lsls	r3, r3, #1
 80068e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80068e4:	441c      	add	r4, r3
 80068e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068ea:	2200      	movs	r2, #0
 80068ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80068f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80068f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80068f8:	4642      	mov	r2, r8
 80068fa:	464b      	mov	r3, r9
 80068fc:	1891      	adds	r1, r2, r2
 80068fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006900:	415b      	adcs	r3, r3
 8006902:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006904:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006908:	4641      	mov	r1, r8
 800690a:	1851      	adds	r1, r2, r1
 800690c:	6339      	str	r1, [r7, #48]	@ 0x30
 800690e:	4649      	mov	r1, r9
 8006910:	414b      	adcs	r3, r1
 8006912:	637b      	str	r3, [r7, #52]	@ 0x34
 8006914:	f04f 0200 	mov.w	r2, #0
 8006918:	f04f 0300 	mov.w	r3, #0
 800691c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006920:	4659      	mov	r1, fp
 8006922:	00cb      	lsls	r3, r1, #3
 8006924:	4651      	mov	r1, sl
 8006926:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800692a:	4651      	mov	r1, sl
 800692c:	00ca      	lsls	r2, r1, #3
 800692e:	4610      	mov	r0, r2
 8006930:	4619      	mov	r1, r3
 8006932:	4603      	mov	r3, r0
 8006934:	4642      	mov	r2, r8
 8006936:	189b      	adds	r3, r3, r2
 8006938:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800693c:	464b      	mov	r3, r9
 800693e:	460a      	mov	r2, r1
 8006940:	eb42 0303 	adc.w	r3, r2, r3
 8006944:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006954:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006958:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800695c:	460b      	mov	r3, r1
 800695e:	18db      	adds	r3, r3, r3
 8006960:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006962:	4613      	mov	r3, r2
 8006964:	eb42 0303 	adc.w	r3, r2, r3
 8006968:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800696a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800696e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006972:	f7f9 fc9d 	bl	80002b0 <__aeabi_uldivmod>
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	4b0d      	ldr	r3, [pc, #52]	@ (80069b0 <UART_SetConfig+0x2d4>)
 800697c:	fba3 1302 	umull	r1, r3, r3, r2
 8006980:	095b      	lsrs	r3, r3, #5
 8006982:	2164      	movs	r1, #100	@ 0x64
 8006984:	fb01 f303 	mul.w	r3, r1, r3
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	00db      	lsls	r3, r3, #3
 800698c:	3332      	adds	r3, #50	@ 0x32
 800698e:	4a08      	ldr	r2, [pc, #32]	@ (80069b0 <UART_SetConfig+0x2d4>)
 8006990:	fba2 2303 	umull	r2, r3, r2, r3
 8006994:	095b      	lsrs	r3, r3, #5
 8006996:	f003 0207 	and.w	r2, r3, #7
 800699a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4422      	add	r2, r4
 80069a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80069a4:	e106      	b.n	8006bb4 <UART_SetConfig+0x4d8>
 80069a6:	bf00      	nop
 80069a8:	40011000 	.word	0x40011000
 80069ac:	40011400 	.word	0x40011400
 80069b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80069b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069b8:	2200      	movs	r2, #0
 80069ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80069be:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80069c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80069c6:	4642      	mov	r2, r8
 80069c8:	464b      	mov	r3, r9
 80069ca:	1891      	adds	r1, r2, r2
 80069cc:	6239      	str	r1, [r7, #32]
 80069ce:	415b      	adcs	r3, r3
 80069d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80069d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069d6:	4641      	mov	r1, r8
 80069d8:	1854      	adds	r4, r2, r1
 80069da:	4649      	mov	r1, r9
 80069dc:	eb43 0501 	adc.w	r5, r3, r1
 80069e0:	f04f 0200 	mov.w	r2, #0
 80069e4:	f04f 0300 	mov.w	r3, #0
 80069e8:	00eb      	lsls	r3, r5, #3
 80069ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069ee:	00e2      	lsls	r2, r4, #3
 80069f0:	4614      	mov	r4, r2
 80069f2:	461d      	mov	r5, r3
 80069f4:	4643      	mov	r3, r8
 80069f6:	18e3      	adds	r3, r4, r3
 80069f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80069fc:	464b      	mov	r3, r9
 80069fe:	eb45 0303 	adc.w	r3, r5, r3
 8006a02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006a12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006a16:	f04f 0200 	mov.w	r2, #0
 8006a1a:	f04f 0300 	mov.w	r3, #0
 8006a1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006a22:	4629      	mov	r1, r5
 8006a24:	008b      	lsls	r3, r1, #2
 8006a26:	4621      	mov	r1, r4
 8006a28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a2c:	4621      	mov	r1, r4
 8006a2e:	008a      	lsls	r2, r1, #2
 8006a30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006a34:	f7f9 fc3c 	bl	80002b0 <__aeabi_uldivmod>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4b60      	ldr	r3, [pc, #384]	@ (8006bc0 <UART_SetConfig+0x4e4>)
 8006a3e:	fba3 2302 	umull	r2, r3, r3, r2
 8006a42:	095b      	lsrs	r3, r3, #5
 8006a44:	011c      	lsls	r4, r3, #4
 8006a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006a50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006a54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006a58:	4642      	mov	r2, r8
 8006a5a:	464b      	mov	r3, r9
 8006a5c:	1891      	adds	r1, r2, r2
 8006a5e:	61b9      	str	r1, [r7, #24]
 8006a60:	415b      	adcs	r3, r3
 8006a62:	61fb      	str	r3, [r7, #28]
 8006a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a68:	4641      	mov	r1, r8
 8006a6a:	1851      	adds	r1, r2, r1
 8006a6c:	6139      	str	r1, [r7, #16]
 8006a6e:	4649      	mov	r1, r9
 8006a70:	414b      	adcs	r3, r1
 8006a72:	617b      	str	r3, [r7, #20]
 8006a74:	f04f 0200 	mov.w	r2, #0
 8006a78:	f04f 0300 	mov.w	r3, #0
 8006a7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a80:	4659      	mov	r1, fp
 8006a82:	00cb      	lsls	r3, r1, #3
 8006a84:	4651      	mov	r1, sl
 8006a86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a8a:	4651      	mov	r1, sl
 8006a8c:	00ca      	lsls	r2, r1, #3
 8006a8e:	4610      	mov	r0, r2
 8006a90:	4619      	mov	r1, r3
 8006a92:	4603      	mov	r3, r0
 8006a94:	4642      	mov	r2, r8
 8006a96:	189b      	adds	r3, r3, r2
 8006a98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006a9c:	464b      	mov	r3, r9
 8006a9e:	460a      	mov	r2, r1
 8006aa0:	eb42 0303 	adc.w	r3, r2, r3
 8006aa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ab2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ab4:	f04f 0200 	mov.w	r2, #0
 8006ab8:	f04f 0300 	mov.w	r3, #0
 8006abc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006ac0:	4649      	mov	r1, r9
 8006ac2:	008b      	lsls	r3, r1, #2
 8006ac4:	4641      	mov	r1, r8
 8006ac6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006aca:	4641      	mov	r1, r8
 8006acc:	008a      	lsls	r2, r1, #2
 8006ace:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006ad2:	f7f9 fbed 	bl	80002b0 <__aeabi_uldivmod>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	460b      	mov	r3, r1
 8006ada:	4611      	mov	r1, r2
 8006adc:	4b38      	ldr	r3, [pc, #224]	@ (8006bc0 <UART_SetConfig+0x4e4>)
 8006ade:	fba3 2301 	umull	r2, r3, r3, r1
 8006ae2:	095b      	lsrs	r3, r3, #5
 8006ae4:	2264      	movs	r2, #100	@ 0x64
 8006ae6:	fb02 f303 	mul.w	r3, r2, r3
 8006aea:	1acb      	subs	r3, r1, r3
 8006aec:	011b      	lsls	r3, r3, #4
 8006aee:	3332      	adds	r3, #50	@ 0x32
 8006af0:	4a33      	ldr	r2, [pc, #204]	@ (8006bc0 <UART_SetConfig+0x4e4>)
 8006af2:	fba2 2303 	umull	r2, r3, r2, r3
 8006af6:	095b      	lsrs	r3, r3, #5
 8006af8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006afc:	441c      	add	r4, r3
 8006afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b02:	2200      	movs	r2, #0
 8006b04:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b06:	677a      	str	r2, [r7, #116]	@ 0x74
 8006b08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006b0c:	4642      	mov	r2, r8
 8006b0e:	464b      	mov	r3, r9
 8006b10:	1891      	adds	r1, r2, r2
 8006b12:	60b9      	str	r1, [r7, #8]
 8006b14:	415b      	adcs	r3, r3
 8006b16:	60fb      	str	r3, [r7, #12]
 8006b18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b1c:	4641      	mov	r1, r8
 8006b1e:	1851      	adds	r1, r2, r1
 8006b20:	6039      	str	r1, [r7, #0]
 8006b22:	4649      	mov	r1, r9
 8006b24:	414b      	adcs	r3, r1
 8006b26:	607b      	str	r3, [r7, #4]
 8006b28:	f04f 0200 	mov.w	r2, #0
 8006b2c:	f04f 0300 	mov.w	r3, #0
 8006b30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006b34:	4659      	mov	r1, fp
 8006b36:	00cb      	lsls	r3, r1, #3
 8006b38:	4651      	mov	r1, sl
 8006b3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b3e:	4651      	mov	r1, sl
 8006b40:	00ca      	lsls	r2, r1, #3
 8006b42:	4610      	mov	r0, r2
 8006b44:	4619      	mov	r1, r3
 8006b46:	4603      	mov	r3, r0
 8006b48:	4642      	mov	r2, r8
 8006b4a:	189b      	adds	r3, r3, r2
 8006b4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006b4e:	464b      	mov	r3, r9
 8006b50:	460a      	mov	r2, r1
 8006b52:	eb42 0303 	adc.w	r3, r2, r3
 8006b56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b62:	667a      	str	r2, [r7, #100]	@ 0x64
 8006b64:	f04f 0200 	mov.w	r2, #0
 8006b68:	f04f 0300 	mov.w	r3, #0
 8006b6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006b70:	4649      	mov	r1, r9
 8006b72:	008b      	lsls	r3, r1, #2
 8006b74:	4641      	mov	r1, r8
 8006b76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b7a:	4641      	mov	r1, r8
 8006b7c:	008a      	lsls	r2, r1, #2
 8006b7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006b82:	f7f9 fb95 	bl	80002b0 <__aeabi_uldivmod>
 8006b86:	4602      	mov	r2, r0
 8006b88:	460b      	mov	r3, r1
 8006b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006bc0 <UART_SetConfig+0x4e4>)
 8006b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8006b90:	095b      	lsrs	r3, r3, #5
 8006b92:	2164      	movs	r1, #100	@ 0x64
 8006b94:	fb01 f303 	mul.w	r3, r1, r3
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	011b      	lsls	r3, r3, #4
 8006b9c:	3332      	adds	r3, #50	@ 0x32
 8006b9e:	4a08      	ldr	r2, [pc, #32]	@ (8006bc0 <UART_SetConfig+0x4e4>)
 8006ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ba4:	095b      	lsrs	r3, r3, #5
 8006ba6:	f003 020f 	and.w	r2, r3, #15
 8006baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4422      	add	r2, r4
 8006bb2:	609a      	str	r2, [r3, #8]
}
 8006bb4:	bf00      	nop
 8006bb6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bc0:	51eb851f 	.word	0x51eb851f

08006bc4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006bc8:	4904      	ldr	r1, [pc, #16]	@ (8006bdc <MX_FATFS_Init+0x18>)
 8006bca:	4805      	ldr	r0, [pc, #20]	@ (8006be0 <MX_FATFS_Init+0x1c>)
 8006bcc:	f003 f8d4 	bl	8009d78 <FATFS_LinkDriver>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	4b03      	ldr	r3, [pc, #12]	@ (8006be4 <MX_FATFS_Init+0x20>)
 8006bd6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006bd8:	bf00      	nop
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	20002ad0 	.word	0x20002ad0
 8006be0:	2000002c 	.word	0x2000002c
 8006be4:	20002acc 	.word	0x20002acc

08006be8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006be8:	b480      	push	{r7}
 8006bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006bec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006bee:	4618      	mov	r0, r3
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	4603      	mov	r3, r0
 8006c00:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8006c02:	79fb      	ldrb	r3, [r7, #7]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7fb f809 	bl	8001c1c <SD_disk_initialize>
 8006c0a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8006c1e:	79fb      	ldrb	r3, [r7, #7]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7fb f8e7 	bl	8001df4 <SD_disk_status>
 8006c26:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60b9      	str	r1, [r7, #8]
 8006c38:	607a      	str	r2, [r7, #4]
 8006c3a:	603b      	str	r3, [r7, #0]
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8006c40:	7bf8      	ldrb	r0, [r7, #15]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	68b9      	ldr	r1, [r7, #8]
 8006c48:	f7fb f8ea 	bl	8001e20 <SD_disk_read>
 8006c4c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b084      	sub	sp, #16
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
 8006c60:	603b      	str	r3, [r7, #0]
 8006c62:	4603      	mov	r3, r0
 8006c64:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8006c66:	7bf8      	ldrb	r0, [r7, #15]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	68b9      	ldr	r1, [r7, #8]
 8006c6e:	f7fb f941 	bl	8001ef4 <SD_disk_write>
 8006c72:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	4603      	mov	r3, r0
 8006c84:	603a      	str	r2, [r7, #0]
 8006c86:	71fb      	strb	r3, [r7, #7]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 8006c8c:	79b9      	ldrb	r1, [r7, #6]
 8006c8e:	79fb      	ldrb	r3, [r7, #7]
 8006c90:	683a      	ldr	r2, [r7, #0]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fb f9b2 	bl	8001ffc <SD_disk_ioctl>
 8006c98:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
	...

08006ca4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	4603      	mov	r3, r0
 8006cac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006cae:	79fb      	ldrb	r3, [r7, #7]
 8006cb0:	4a08      	ldr	r2, [pc, #32]	@ (8006cd4 <disk_status+0x30>)
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	79fa      	ldrb	r2, [r7, #7]
 8006cbc:	4905      	ldr	r1, [pc, #20]	@ (8006cd4 <disk_status+0x30>)
 8006cbe:	440a      	add	r2, r1
 8006cc0:	7a12      	ldrb	r2, [r2, #8]
 8006cc2:	4610      	mov	r0, r2
 8006cc4:	4798      	blx	r3
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3710      	adds	r7, #16
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	20002afc 	.word	0x20002afc

08006cd8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	4603      	mov	r3, r0
 8006ce0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006ce6:	79fb      	ldrb	r3, [r7, #7]
 8006ce8:	4a0e      	ldr	r2, [pc, #56]	@ (8006d24 <disk_initialize+0x4c>)
 8006cea:	5cd3      	ldrb	r3, [r2, r3]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d114      	bne.n	8006d1a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006cf0:	79fb      	ldrb	r3, [r7, #7]
 8006cf2:	4a0c      	ldr	r2, [pc, #48]	@ (8006d24 <disk_initialize+0x4c>)
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4413      	add	r3, r2
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	79fa      	ldrb	r2, [r7, #7]
 8006cfe:	4909      	ldr	r1, [pc, #36]	@ (8006d24 <disk_initialize+0x4c>)
 8006d00:	440a      	add	r2, r1
 8006d02:	7a12      	ldrb	r2, [r2, #8]
 8006d04:	4610      	mov	r0, r2
 8006d06:	4798      	blx	r3
 8006d08:	4603      	mov	r3, r0
 8006d0a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d103      	bne.n	8006d1a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8006d12:	79fb      	ldrb	r3, [r7, #7]
 8006d14:	4a03      	ldr	r2, [pc, #12]	@ (8006d24 <disk_initialize+0x4c>)
 8006d16:	2101      	movs	r1, #1
 8006d18:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	20002afc 	.word	0x20002afc

08006d28 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006d28:	b590      	push	{r4, r7, lr}
 8006d2a:	b087      	sub	sp, #28
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60b9      	str	r1, [r7, #8]
 8006d30:	607a      	str	r2, [r7, #4]
 8006d32:	603b      	str	r3, [r7, #0]
 8006d34:	4603      	mov	r3, r0
 8006d36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8006d64 <disk_read+0x3c>)
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	689c      	ldr	r4, [r3, #8]
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
 8006d46:	4a07      	ldr	r2, [pc, #28]	@ (8006d64 <disk_read+0x3c>)
 8006d48:	4413      	add	r3, r2
 8006d4a:	7a18      	ldrb	r0, [r3, #8]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	68b9      	ldr	r1, [r7, #8]
 8006d52:	47a0      	blx	r4
 8006d54:	4603      	mov	r3, r0
 8006d56:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	371c      	adds	r7, #28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd90      	pop	{r4, r7, pc}
 8006d62:	bf00      	nop
 8006d64:	20002afc 	.word	0x20002afc

08006d68 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006d68:	b590      	push	{r4, r7, lr}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60b9      	str	r1, [r7, #8]
 8006d70:	607a      	str	r2, [r7, #4]
 8006d72:	603b      	str	r3, [r7, #0]
 8006d74:	4603      	mov	r3, r0
 8006d76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006d78:	7bfb      	ldrb	r3, [r7, #15]
 8006d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8006da4 <disk_write+0x3c>)
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	68dc      	ldr	r4, [r3, #12]
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	4a07      	ldr	r2, [pc, #28]	@ (8006da4 <disk_write+0x3c>)
 8006d88:	4413      	add	r3, r2
 8006d8a:	7a18      	ldrb	r0, [r3, #8]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	68b9      	ldr	r1, [r7, #8]
 8006d92:	47a0      	blx	r4
 8006d94:	4603      	mov	r3, r0
 8006d96:	75fb      	strb	r3, [r7, #23]
  return res;
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	371c      	adds	r7, #28
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd90      	pop	{r4, r7, pc}
 8006da2:	bf00      	nop
 8006da4:	20002afc 	.word	0x20002afc

08006da8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	4603      	mov	r3, r0
 8006db0:	603a      	str	r2, [r7, #0]
 8006db2:	71fb      	strb	r3, [r7, #7]
 8006db4:	460b      	mov	r3, r1
 8006db6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006db8:	79fb      	ldrb	r3, [r7, #7]
 8006dba:	4a09      	ldr	r2, [pc, #36]	@ (8006de0 <disk_ioctl+0x38>)
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	4413      	add	r3, r2
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	691b      	ldr	r3, [r3, #16]
 8006dc4:	79fa      	ldrb	r2, [r7, #7]
 8006dc6:	4906      	ldr	r1, [pc, #24]	@ (8006de0 <disk_ioctl+0x38>)
 8006dc8:	440a      	add	r2, r1
 8006dca:	7a10      	ldrb	r0, [r2, #8]
 8006dcc:	79b9      	ldrb	r1, [r7, #6]
 8006dce:	683a      	ldr	r2, [r7, #0]
 8006dd0:	4798      	blx	r3
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	73fb      	strb	r3, [r7, #15]
  return res;
 8006dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	20002afc 	.word	0x20002afc

08006de4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3301      	adds	r3, #1
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006df4:	89fb      	ldrh	r3, [r7, #14]
 8006df6:	021b      	lsls	r3, r3, #8
 8006df8:	b21a      	sxth	r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	b21b      	sxth	r3, r3
 8006e00:	4313      	orrs	r3, r2
 8006e02:	b21b      	sxth	r3, r3
 8006e04:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006e06:	89fb      	ldrh	r3, [r7, #14]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	3303      	adds	r3, #3
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	021b      	lsls	r3, r3, #8
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	3202      	adds	r2, #2
 8006e2c:	7812      	ldrb	r2, [r2, #0]
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	021b      	lsls	r3, r3, #8
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	3201      	adds	r2, #1
 8006e3a:	7812      	ldrb	r2, [r2, #0]
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	021b      	lsls	r3, r3, #8
 8006e44:	687a      	ldr	r2, [r7, #4]
 8006e46:	7812      	ldrb	r2, [r2, #0]
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	60fb      	str	r3, [r7, #12]
	return rv;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3714      	adds	r7, #20
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	460b      	mov	r3, r1
 8006e64:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	1c5a      	adds	r2, r3, #1
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	887a      	ldrh	r2, [r7, #2]
 8006e6e:	b2d2      	uxtb	r2, r2
 8006e70:	701a      	strb	r2, [r3, #0]
 8006e72:	887b      	ldrh	r3, [r7, #2]
 8006e74:	0a1b      	lsrs	r3, r3, #8
 8006e76:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	1c5a      	adds	r2, r3, #1
 8006e7c:	607a      	str	r2, [r7, #4]
 8006e7e:	887a      	ldrh	r2, [r7, #2]
 8006e80:	b2d2      	uxtb	r2, r2
 8006e82:	701a      	strb	r2, [r3, #0]
}
 8006e84:	bf00      	nop
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	1c5a      	adds	r2, r3, #1
 8006e9e:	607a      	str	r2, [r7, #4]
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	b2d2      	uxtb	r2, r2
 8006ea4:	701a      	strb	r2, [r3, #0]
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	0a1b      	lsrs	r3, r3, #8
 8006eaa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	1c5a      	adds	r2, r3, #1
 8006eb0:	607a      	str	r2, [r7, #4]
 8006eb2:	683a      	ldr	r2, [r7, #0]
 8006eb4:	b2d2      	uxtb	r2, r2
 8006eb6:	701a      	strb	r2, [r3, #0]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	0a1b      	lsrs	r3, r3, #8
 8006ebc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	607a      	str	r2, [r7, #4]
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	b2d2      	uxtb	r2, r2
 8006ec8:	701a      	strb	r2, [r3, #0]
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	0a1b      	lsrs	r3, r3, #8
 8006ece:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	607a      	str	r2, [r7, #4]
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	b2d2      	uxtb	r2, r2
 8006eda:	701a      	strb	r2, [r3, #0]
}
 8006edc:	bf00      	nop
 8006ede:	370c      	adds	r7, #12
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00d      	beq.n	8006f1e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006f02:	693a      	ldr	r2, [r7, #16]
 8006f04:	1c53      	adds	r3, r2, #1
 8006f06:	613b      	str	r3, [r7, #16]
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	1c59      	adds	r1, r3, #1
 8006f0c:	6179      	str	r1, [r7, #20]
 8006f0e:	7812      	ldrb	r2, [r2, #0]
 8006f10:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	3b01      	subs	r3, #1
 8006f16:	607b      	str	r3, [r7, #4]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1f1      	bne.n	8006f02 <mem_cpy+0x1a>
	}
}
 8006f1e:	bf00      	nop
 8006f20:	371c      	adds	r7, #28
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006f2a:	b480      	push	{r7}
 8006f2c:	b087      	sub	sp, #28
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	60f8      	str	r0, [r7, #12]
 8006f32:	60b9      	str	r1, [r7, #8]
 8006f34:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	617a      	str	r2, [r7, #20]
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	b2d2      	uxtb	r2, r2
 8006f44:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	607b      	str	r3, [r7, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d1f3      	bne.n	8006f3a <mem_set+0x10>
}
 8006f52:	bf00      	nop
 8006f54:	bf00      	nop
 8006f56:	371c      	adds	r7, #28
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006f60:	b480      	push	{r7}
 8006f62:	b089      	sub	sp, #36	@ 0x24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	61fb      	str	r3, [r7, #28]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8006f74:	2300      	movs	r3, #0
 8006f76:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	1c5a      	adds	r2, r3, #1
 8006f7c:	61fa      	str	r2, [r7, #28]
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	4619      	mov	r1, r3
 8006f82:	69bb      	ldr	r3, [r7, #24]
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	61ba      	str	r2, [r7, #24]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	1acb      	subs	r3, r1, r3
 8006f8c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	3b01      	subs	r3, #1
 8006f92:	607b      	str	r3, [r7, #4]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d002      	beq.n	8006fa0 <mem_cmp+0x40>
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d0eb      	beq.n	8006f78 <mem_cmp+0x18>

	return r;
 8006fa0:	697b      	ldr	r3, [r7, #20]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3724      	adds	r7, #36	@ 0x24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006fae:	b480      	push	{r7}
 8006fb0:	b083      	sub	sp, #12
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006fb8:	e002      	b.n	8006fc0 <chk_chr+0x12>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	607b      	str	r3, [r7, #4]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d005      	beq.n	8006fd4 <chk_chr+0x26>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	781b      	ldrb	r3, [r3, #0]
 8006fcc:	461a      	mov	r2, r3
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d1f2      	bne.n	8006fba <chk_chr+0xc>
	return *str;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	781b      	ldrb	r3, [r3, #0]
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	370c      	adds	r7, #12
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr

08006fe4 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d009      	beq.n	8007006 <lock_fs+0x22>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f002 ffc0 	bl	8009f7c <ff_req_grant>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <lock_fs+0x22>
 8007002:	2301      	movs	r3, #1
 8007004:	e000      	b.n	8007008 <lock_fs+0x24>
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3708      	adds	r7, #8
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b082      	sub	sp, #8
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	460b      	mov	r3, r1
 800701a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d00d      	beq.n	800703e <unlock_fs+0x2e>
 8007022:	78fb      	ldrb	r3, [r7, #3]
 8007024:	2b0c      	cmp	r3, #12
 8007026:	d00a      	beq.n	800703e <unlock_fs+0x2e>
 8007028:	78fb      	ldrb	r3, [r7, #3]
 800702a:	2b0b      	cmp	r3, #11
 800702c:	d007      	beq.n	800703e <unlock_fs+0x2e>
 800702e:	78fb      	ldrb	r3, [r7, #3]
 8007030:	2b0f      	cmp	r3, #15
 8007032:	d004      	beq.n	800703e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	4618      	mov	r0, r3
 800703a:	f002 ffb4 	bl	8009fa6 <ff_rel_grant>
	}
}
 800703e:	bf00      	nop
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
	...

08007048 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007052:	2300      	movs	r3, #0
 8007054:	60bb      	str	r3, [r7, #8]
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	60fb      	str	r3, [r7, #12]
 800705a:	e029      	b.n	80070b0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800705c:	4a27      	ldr	r2, [pc, #156]	@ (80070fc <chk_lock+0xb4>)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	011b      	lsls	r3, r3, #4
 8007062:	4413      	add	r3, r2
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d01d      	beq.n	80070a6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800706a:	4a24      	ldr	r2, [pc, #144]	@ (80070fc <chk_lock+0xb4>)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	4413      	add	r3, r2
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	429a      	cmp	r2, r3
 800707a:	d116      	bne.n	80070aa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800707c:	4a1f      	ldr	r2, [pc, #124]	@ (80070fc <chk_lock+0xb4>)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	011b      	lsls	r3, r3, #4
 8007082:	4413      	add	r3, r2
 8007084:	3304      	adds	r3, #4
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800708c:	429a      	cmp	r2, r3
 800708e:	d10c      	bne.n	80070aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007090:	4a1a      	ldr	r2, [pc, #104]	@ (80070fc <chk_lock+0xb4>)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	011b      	lsls	r3, r3, #4
 8007096:	4413      	add	r3, r2
 8007098:	3308      	adds	r3, #8
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d102      	bne.n	80070aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80070a4:	e007      	b.n	80070b6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80070a6:	2301      	movs	r3, #1
 80070a8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3301      	adds	r3, #1
 80070ae:	60fb      	str	r3, [r7, #12]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d9d2      	bls.n	800705c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d109      	bne.n	80070d0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d102      	bne.n	80070c8 <chk_lock+0x80>
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d101      	bne.n	80070cc <chk_lock+0x84>
 80070c8:	2300      	movs	r3, #0
 80070ca:	e010      	b.n	80070ee <chk_lock+0xa6>
 80070cc:	2312      	movs	r3, #18
 80070ce:	e00e      	b.n	80070ee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d108      	bne.n	80070e8 <chk_lock+0xa0>
 80070d6:	4a09      	ldr	r2, [pc, #36]	@ (80070fc <chk_lock+0xb4>)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	011b      	lsls	r3, r3, #4
 80070dc:	4413      	add	r3, r2
 80070de:	330c      	adds	r3, #12
 80070e0:	881b      	ldrh	r3, [r3, #0]
 80070e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80070e6:	d101      	bne.n	80070ec <chk_lock+0xa4>
 80070e8:	2310      	movs	r3, #16
 80070ea:	e000      	b.n	80070ee <chk_lock+0xa6>
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	20002adc 	.word	0x20002adc

08007100 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007106:	2300      	movs	r3, #0
 8007108:	607b      	str	r3, [r7, #4]
 800710a:	e002      	b.n	8007112 <enq_lock+0x12>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	3301      	adds	r3, #1
 8007110:	607b      	str	r3, [r7, #4]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b01      	cmp	r3, #1
 8007116:	d806      	bhi.n	8007126 <enq_lock+0x26>
 8007118:	4a09      	ldr	r2, [pc, #36]	@ (8007140 <enq_lock+0x40>)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	011b      	lsls	r3, r3, #4
 800711e:	4413      	add	r3, r2
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d1f2      	bne.n	800710c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2b02      	cmp	r3, #2
 800712a:	bf14      	ite	ne
 800712c:	2301      	movne	r3, #1
 800712e:	2300      	moveq	r3, #0
 8007130:	b2db      	uxtb	r3, r3
}
 8007132:	4618      	mov	r0, r3
 8007134:	370c      	adds	r7, #12
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	20002adc 	.word	0x20002adc

08007144 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800714e:	2300      	movs	r3, #0
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	e01f      	b.n	8007194 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007154:	4a41      	ldr	r2, [pc, #260]	@ (800725c <inc_lock+0x118>)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	011b      	lsls	r3, r3, #4
 800715a:	4413      	add	r3, r2
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	429a      	cmp	r2, r3
 8007164:	d113      	bne.n	800718e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007166:	4a3d      	ldr	r2, [pc, #244]	@ (800725c <inc_lock+0x118>)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	011b      	lsls	r3, r3, #4
 800716c:	4413      	add	r3, r2
 800716e:	3304      	adds	r3, #4
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007176:	429a      	cmp	r2, r3
 8007178:	d109      	bne.n	800718e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800717a:	4a38      	ldr	r2, [pc, #224]	@ (800725c <inc_lock+0x118>)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	011b      	lsls	r3, r3, #4
 8007180:	4413      	add	r3, r2
 8007182:	3308      	adds	r3, #8
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800718a:	429a      	cmp	r2, r3
 800718c:	d006      	beq.n	800719c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	3301      	adds	r3, #1
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d9dc      	bls.n	8007154 <inc_lock+0x10>
 800719a:	e000      	b.n	800719e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800719c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d132      	bne.n	800720a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80071a4:	2300      	movs	r3, #0
 80071a6:	60fb      	str	r3, [r7, #12]
 80071a8:	e002      	b.n	80071b0 <inc_lock+0x6c>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3301      	adds	r3, #1
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d806      	bhi.n	80071c4 <inc_lock+0x80>
 80071b6:	4a29      	ldr	r2, [pc, #164]	@ (800725c <inc_lock+0x118>)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	011b      	lsls	r3, r3, #4
 80071bc:	4413      	add	r3, r2
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d1f2      	bne.n	80071aa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2b02      	cmp	r3, #2
 80071c8:	d101      	bne.n	80071ce <inc_lock+0x8a>
 80071ca:	2300      	movs	r3, #0
 80071cc:	e040      	b.n	8007250 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	4922      	ldr	r1, [pc, #136]	@ (800725c <inc_lock+0x118>)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	011b      	lsls	r3, r3, #4
 80071d8:	440b      	add	r3, r1
 80071da:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689a      	ldr	r2, [r3, #8]
 80071e0:	491e      	ldr	r1, [pc, #120]	@ (800725c <inc_lock+0x118>)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	011b      	lsls	r3, r3, #4
 80071e6:	440b      	add	r3, r1
 80071e8:	3304      	adds	r3, #4
 80071ea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	695a      	ldr	r2, [r3, #20]
 80071f0:	491a      	ldr	r1, [pc, #104]	@ (800725c <inc_lock+0x118>)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	011b      	lsls	r3, r3, #4
 80071f6:	440b      	add	r3, r1
 80071f8:	3308      	adds	r3, #8
 80071fa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80071fc:	4a17      	ldr	r2, [pc, #92]	@ (800725c <inc_lock+0x118>)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	011b      	lsls	r3, r3, #4
 8007202:	4413      	add	r3, r2
 8007204:	330c      	adds	r3, #12
 8007206:	2200      	movs	r2, #0
 8007208:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d009      	beq.n	8007224 <inc_lock+0xe0>
 8007210:	4a12      	ldr	r2, [pc, #72]	@ (800725c <inc_lock+0x118>)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	011b      	lsls	r3, r3, #4
 8007216:	4413      	add	r3, r2
 8007218:	330c      	adds	r3, #12
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <inc_lock+0xe0>
 8007220:	2300      	movs	r3, #0
 8007222:	e015      	b.n	8007250 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d108      	bne.n	800723c <inc_lock+0xf8>
 800722a:	4a0c      	ldr	r2, [pc, #48]	@ (800725c <inc_lock+0x118>)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	011b      	lsls	r3, r3, #4
 8007230:	4413      	add	r3, r2
 8007232:	330c      	adds	r3, #12
 8007234:	881b      	ldrh	r3, [r3, #0]
 8007236:	3301      	adds	r3, #1
 8007238:	b29a      	uxth	r2, r3
 800723a:	e001      	b.n	8007240 <inc_lock+0xfc>
 800723c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007240:	4906      	ldr	r1, [pc, #24]	@ (800725c <inc_lock+0x118>)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	011b      	lsls	r3, r3, #4
 8007246:	440b      	add	r3, r1
 8007248:	330c      	adds	r3, #12
 800724a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	3301      	adds	r3, #1
}
 8007250:	4618      	mov	r0, r3
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	20002adc 	.word	0x20002adc

08007260 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	3b01      	subs	r3, #1
 800726c:	607b      	str	r3, [r7, #4]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d825      	bhi.n	80072c0 <dec_lock+0x60>
		n = Files[i].ctr;
 8007274:	4a17      	ldr	r2, [pc, #92]	@ (80072d4 <dec_lock+0x74>)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	011b      	lsls	r3, r3, #4
 800727a:	4413      	add	r3, r2
 800727c:	330c      	adds	r3, #12
 800727e:	881b      	ldrh	r3, [r3, #0]
 8007280:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8007282:	89fb      	ldrh	r3, [r7, #14]
 8007284:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007288:	d101      	bne.n	800728e <dec_lock+0x2e>
 800728a:	2300      	movs	r3, #0
 800728c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800728e:	89fb      	ldrh	r3, [r7, #14]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d002      	beq.n	800729a <dec_lock+0x3a>
 8007294:	89fb      	ldrh	r3, [r7, #14]
 8007296:	3b01      	subs	r3, #1
 8007298:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800729a:	4a0e      	ldr	r2, [pc, #56]	@ (80072d4 <dec_lock+0x74>)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	011b      	lsls	r3, r3, #4
 80072a0:	4413      	add	r3, r2
 80072a2:	330c      	adds	r3, #12
 80072a4:	89fa      	ldrh	r2, [r7, #14]
 80072a6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80072a8:	89fb      	ldrh	r3, [r7, #14]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d105      	bne.n	80072ba <dec_lock+0x5a>
 80072ae:	4a09      	ldr	r2, [pc, #36]	@ (80072d4 <dec_lock+0x74>)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	011b      	lsls	r3, r3, #4
 80072b4:	4413      	add	r3, r2
 80072b6:	2200      	movs	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	737b      	strb	r3, [r7, #13]
 80072be:	e001      	b.n	80072c4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80072c0:	2302      	movs	r3, #2
 80072c2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80072c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	20002adc 	.word	0x20002adc

080072d8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80072e0:	2300      	movs	r3, #0
 80072e2:	60fb      	str	r3, [r7, #12]
 80072e4:	e010      	b.n	8007308 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80072e6:	4a0d      	ldr	r2, [pc, #52]	@ (800731c <clear_lock+0x44>)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	011b      	lsls	r3, r3, #4
 80072ec:	4413      	add	r3, r2
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d105      	bne.n	8007302 <clear_lock+0x2a>
 80072f6:	4a09      	ldr	r2, [pc, #36]	@ (800731c <clear_lock+0x44>)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	011b      	lsls	r3, r3, #4
 80072fc:	4413      	add	r3, r2
 80072fe:	2200      	movs	r2, #0
 8007300:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	3301      	adds	r3, #1
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d9eb      	bls.n	80072e6 <clear_lock+0xe>
	}
}
 800730e:	bf00      	nop
 8007310:	bf00      	nop
 8007312:	3714      	adds	r7, #20
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr
 800731c:	20002adc 	.word	0x20002adc

08007320 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007328:	2300      	movs	r3, #0
 800732a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	78db      	ldrb	r3, [r3, #3]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d034      	beq.n	800739e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007338:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	7858      	ldrb	r0, [r3, #1]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007344:	2301      	movs	r3, #1
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	f7ff fd0e 	bl	8006d68 <disk_write>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d002      	beq.n	8007358 <sync_window+0x38>
			res = FR_DISK_ERR;
 8007352:	2301      	movs	r3, #1
 8007354:	73fb      	strb	r3, [r7, #15]
 8007356:	e022      	b.n	800739e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	1ad2      	subs	r2, r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736a:	429a      	cmp	r2, r3
 800736c:	d217      	bcs.n	800739e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	789b      	ldrb	r3, [r3, #2]
 8007372:	613b      	str	r3, [r7, #16]
 8007374:	e010      	b.n	8007398 <sync_window+0x78>
					wsect += fs->fsize;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	4413      	add	r3, r2
 800737e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	7858      	ldrb	r0, [r3, #1]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800738a:	2301      	movs	r3, #1
 800738c:	697a      	ldr	r2, [r7, #20]
 800738e:	f7ff fceb 	bl	8006d68 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	3b01      	subs	r3, #1
 8007396:	613b      	str	r3, [r7, #16]
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d8eb      	bhi.n	8007376 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800739e:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3718      	adds	r7, #24
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ba:	683a      	ldr	r2, [r7, #0]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d01b      	beq.n	80073f8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f7ff ffad 	bl	8007320 <sync_window>
 80073c6:	4603      	mov	r3, r0
 80073c8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80073ca:	7bfb      	ldrb	r3, [r7, #15]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d113      	bne.n	80073f8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	7858      	ldrb	r0, [r3, #1]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80073da:	2301      	movs	r3, #1
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	f7ff fca3 	bl	8006d28 <disk_read>
 80073e2:	4603      	mov	r3, r0
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d004      	beq.n	80073f2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80073e8:	f04f 33ff 	mov.w	r3, #4294967295
 80073ec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	683a      	ldr	r2, [r7, #0]
 80073f6:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
	...

08007404 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b084      	sub	sp, #16
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f7ff ff87 	bl	8007320 <sync_window>
 8007412:	4603      	mov	r3, r0
 8007414:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007416:	7bfb      	ldrb	r3, [r7, #15]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d159      	bne.n	80074d0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	2b03      	cmp	r3, #3
 8007422:	d149      	bne.n	80074b8 <sync_fs+0xb4>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	791b      	ldrb	r3, [r3, #4]
 8007428:	2b01      	cmp	r3, #1
 800742a:	d145      	bne.n	80074b8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	899b      	ldrh	r3, [r3, #12]
 8007436:	461a      	mov	r2, r3
 8007438:	2100      	movs	r1, #0
 800743a:	f7ff fd76 	bl	8006f2a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	333c      	adds	r3, #60	@ 0x3c
 8007442:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007446:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800744a:	4618      	mov	r0, r3
 800744c:	f7ff fd05 	bl	8006e5a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	333c      	adds	r3, #60	@ 0x3c
 8007454:	4921      	ldr	r1, [pc, #132]	@ (80074dc <sync_fs+0xd8>)
 8007456:	4618      	mov	r0, r3
 8007458:	f7ff fd1a 	bl	8006e90 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	333c      	adds	r3, #60	@ 0x3c
 8007460:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007464:	491e      	ldr	r1, [pc, #120]	@ (80074e0 <sync_fs+0xdc>)
 8007466:	4618      	mov	r0, r3
 8007468:	f7ff fd12 	bl	8006e90 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	333c      	adds	r3, #60	@ 0x3c
 8007470:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	69db      	ldr	r3, [r3, #28]
 8007478:	4619      	mov	r1, r3
 800747a:	4610      	mov	r0, r2
 800747c:	f7ff fd08 	bl	8006e90 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	333c      	adds	r3, #60	@ 0x3c
 8007484:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	4619      	mov	r1, r3
 800748e:	4610      	mov	r0, r2
 8007490:	f7ff fcfe 	bl	8006e90 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	7858      	ldrb	r0, [r3, #1]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074ac:	2301      	movs	r3, #1
 80074ae:	f7ff fc5b 	bl	8006d68 <disk_write>
			fs->fsi_flag = 0;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	785b      	ldrb	r3, [r3, #1]
 80074bc:	2200      	movs	r2, #0
 80074be:	2100      	movs	r1, #0
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7ff fc71 	bl	8006da8 <disk_ioctl>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <sync_fs+0xcc>
 80074cc:	2301      	movs	r3, #1
 80074ce:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	41615252 	.word	0x41615252
 80074e0:	61417272 	.word	0x61417272

080074e4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	3b02      	subs	r3, #2
 80074f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	3b02      	subs	r3, #2
 80074fa:	683a      	ldr	r2, [r7, #0]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d301      	bcc.n	8007504 <clust2sect+0x20>
 8007500:	2300      	movs	r3, #0
 8007502:	e008      	b.n	8007516 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	895b      	ldrh	r3, [r3, #10]
 8007508:	461a      	mov	r2, r3
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	fb03 f202 	mul.w	r2, r3, r2
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007514:	4413      	add	r3, r2
}
 8007516:	4618      	mov	r0, r3
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b086      	sub	sp, #24
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d904      	bls.n	8007542 <get_fat+0x20>
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	6a1b      	ldr	r3, [r3, #32]
 800753c:	683a      	ldr	r2, [r7, #0]
 800753e:	429a      	cmp	r2, r3
 8007540:	d302      	bcc.n	8007548 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007542:	2301      	movs	r3, #1
 8007544:	617b      	str	r3, [r7, #20]
 8007546:	e0ba      	b.n	80076be <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007548:	f04f 33ff 	mov.w	r3, #4294967295
 800754c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	2b03      	cmp	r3, #3
 8007554:	f000 8082 	beq.w	800765c <get_fat+0x13a>
 8007558:	2b03      	cmp	r3, #3
 800755a:	f300 80a6 	bgt.w	80076aa <get_fat+0x188>
 800755e:	2b01      	cmp	r3, #1
 8007560:	d002      	beq.n	8007568 <get_fat+0x46>
 8007562:	2b02      	cmp	r3, #2
 8007564:	d055      	beq.n	8007612 <get_fat+0xf0>
 8007566:	e0a0      	b.n	80076aa <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	60fb      	str	r3, [r7, #12]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	085b      	lsrs	r3, r3, #1
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	4413      	add	r3, r2
 8007574:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	899b      	ldrh	r3, [r3, #12]
 800757e:	4619      	mov	r1, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	fbb3 f3f1 	udiv	r3, r3, r1
 8007586:	4413      	add	r3, r2
 8007588:	4619      	mov	r1, r3
 800758a:	6938      	ldr	r0, [r7, #16]
 800758c:	f7ff ff0c 	bl	80073a8 <move_window>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	f040 808c 	bne.w	80076b0 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	1c5a      	adds	r2, r3, #1
 800759c:	60fa      	str	r2, [r7, #12]
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	8992      	ldrh	r2, [r2, #12]
 80075a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80075a6:	fb01 f202 	mul.w	r2, r1, r2
 80075aa:	1a9b      	subs	r3, r3, r2
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	4413      	add	r3, r2
 80075b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075b4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	899b      	ldrh	r3, [r3, #12]
 80075be:	4619      	mov	r1, r3
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80075c6:	4413      	add	r3, r2
 80075c8:	4619      	mov	r1, r3
 80075ca:	6938      	ldr	r0, [r7, #16]
 80075cc:	f7ff feec 	bl	80073a8 <move_window>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d16e      	bne.n	80076b4 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	899b      	ldrh	r3, [r3, #12]
 80075da:	461a      	mov	r2, r3
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	fbb3 f1f2 	udiv	r1, r3, r2
 80075e2:	fb01 f202 	mul.w	r2, r1, r2
 80075e6:	1a9b      	subs	r3, r3, r2
 80075e8:	693a      	ldr	r2, [r7, #16]
 80075ea:	4413      	add	r3, r2
 80075ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80075f0:	021b      	lsls	r3, r3, #8
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <get_fat+0xe6>
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	091b      	lsrs	r3, r3, #4
 8007606:	e002      	b.n	800760e <get_fat+0xec>
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800760e:	617b      	str	r3, [r7, #20]
			break;
 8007610:	e055      	b.n	80076be <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007616:	693b      	ldr	r3, [r7, #16]
 8007618:	899b      	ldrh	r3, [r3, #12]
 800761a:	085b      	lsrs	r3, r3, #1
 800761c:	b29b      	uxth	r3, r3
 800761e:	4619      	mov	r1, r3
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	fbb3 f3f1 	udiv	r3, r3, r1
 8007626:	4413      	add	r3, r2
 8007628:	4619      	mov	r1, r3
 800762a:	6938      	ldr	r0, [r7, #16]
 800762c:	f7ff febc 	bl	80073a8 <move_window>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d140      	bne.n	80076b8 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	005b      	lsls	r3, r3, #1
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	8992      	ldrh	r2, [r2, #12]
 8007644:	fbb3 f0f2 	udiv	r0, r3, r2
 8007648:	fb00 f202 	mul.w	r2, r0, r2
 800764c:	1a9b      	subs	r3, r3, r2
 800764e:	440b      	add	r3, r1
 8007650:	4618      	mov	r0, r3
 8007652:	f7ff fbc7 	bl	8006de4 <ld_word>
 8007656:	4603      	mov	r3, r0
 8007658:	617b      	str	r3, [r7, #20]
			break;
 800765a:	e030      	b.n	80076be <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	899b      	ldrh	r3, [r3, #12]
 8007664:	089b      	lsrs	r3, r3, #2
 8007666:	b29b      	uxth	r3, r3
 8007668:	4619      	mov	r1, r3
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007670:	4413      	add	r3, r2
 8007672:	4619      	mov	r1, r3
 8007674:	6938      	ldr	r0, [r7, #16]
 8007676:	f7ff fe97 	bl	80073a8 <move_window>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d11d      	bne.n	80076bc <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	009b      	lsls	r3, r3, #2
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	8992      	ldrh	r2, [r2, #12]
 800768e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007692:	fb00 f202 	mul.w	r2, r0, r2
 8007696:	1a9b      	subs	r3, r3, r2
 8007698:	440b      	add	r3, r1
 800769a:	4618      	mov	r0, r3
 800769c:	f7ff fbba 	bl	8006e14 <ld_dword>
 80076a0:	4603      	mov	r3, r0
 80076a2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80076a6:	617b      	str	r3, [r7, #20]
			break;
 80076a8:	e009      	b.n	80076be <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80076aa:	2301      	movs	r3, #1
 80076ac:	617b      	str	r3, [r7, #20]
 80076ae:	e006      	b.n	80076be <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80076b0:	bf00      	nop
 80076b2:	e004      	b.n	80076be <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80076b4:	bf00      	nop
 80076b6:	e002      	b.n	80076be <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80076b8:	bf00      	nop
 80076ba:	e000      	b.n	80076be <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80076bc:	bf00      	nop
		}
	}

	return val;
 80076be:	697b      	ldr	r3, [r7, #20]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3718      	adds	r7, #24
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80076c8:	b590      	push	{r4, r7, lr}
 80076ca:	b089      	sub	sp, #36	@ 0x24
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80076d4:	2302      	movs	r3, #2
 80076d6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	f240 8109 	bls.w	80078f2 <put_fat+0x22a>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6a1b      	ldr	r3, [r3, #32]
 80076e4:	68ba      	ldr	r2, [r7, #8]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	f080 8103 	bcs.w	80078f2 <put_fat+0x22a>
		switch (fs->fs_type) {
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	2b03      	cmp	r3, #3
 80076f2:	f000 80b6 	beq.w	8007862 <put_fat+0x19a>
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	f300 80fb 	bgt.w	80078f2 <put_fat+0x22a>
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d003      	beq.n	8007708 <put_fat+0x40>
 8007700:	2b02      	cmp	r3, #2
 8007702:	f000 8083 	beq.w	800780c <put_fat+0x144>
 8007706:	e0f4      	b.n	80078f2 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	61bb      	str	r3, [r7, #24]
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	085b      	lsrs	r3, r3, #1
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	4413      	add	r3, r2
 8007714:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	899b      	ldrh	r3, [r3, #12]
 800771e:	4619      	mov	r1, r3
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	fbb3 f3f1 	udiv	r3, r3, r1
 8007726:	4413      	add	r3, r2
 8007728:	4619      	mov	r1, r3
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f7ff fe3c 	bl	80073a8 <move_window>
 8007730:	4603      	mov	r3, r0
 8007732:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007734:	7ffb      	ldrb	r3, [r7, #31]
 8007736:	2b00      	cmp	r3, #0
 8007738:	f040 80d4 	bne.w	80078e4 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	1c5a      	adds	r2, r3, #1
 8007746:	61ba      	str	r2, [r7, #24]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	8992      	ldrh	r2, [r2, #12]
 800774c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007750:	fb00 f202 	mul.w	r2, r0, r2
 8007754:	1a9b      	subs	r3, r3, r2
 8007756:	440b      	add	r3, r1
 8007758:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	f003 0301 	and.w	r3, r3, #1
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00d      	beq.n	8007780 <put_fat+0xb8>
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	b25b      	sxtb	r3, r3
 800776a:	f003 030f 	and.w	r3, r3, #15
 800776e:	b25a      	sxtb	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	b2db      	uxtb	r3, r3
 8007774:	011b      	lsls	r3, r3, #4
 8007776:	b25b      	sxtb	r3, r3
 8007778:	4313      	orrs	r3, r2
 800777a:	b25b      	sxtb	r3, r3
 800777c:	b2db      	uxtb	r3, r3
 800777e:	e001      	b.n	8007784 <put_fat+0xbc>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	b2db      	uxtb	r3, r3
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2201      	movs	r2, #1
 800778c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	899b      	ldrh	r3, [r3, #12]
 8007796:	4619      	mov	r1, r3
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	fbb3 f3f1 	udiv	r3, r3, r1
 800779e:	4413      	add	r3, r2
 80077a0:	4619      	mov	r1, r3
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f7ff fe00 	bl	80073a8 <move_window>
 80077a8:	4603      	mov	r3, r0
 80077aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80077ac:	7ffb      	ldrb	r3, [r7, #31]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f040 809a 	bne.w	80078e8 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	899b      	ldrh	r3, [r3, #12]
 80077be:	461a      	mov	r2, r3
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80077c6:	fb00 f202 	mul.w	r2, r0, r2
 80077ca:	1a9b      	subs	r3, r3, r2
 80077cc:	440b      	add	r3, r1
 80077ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <put_fat+0x11a>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	091b      	lsrs	r3, r3, #4
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	e00e      	b.n	8007800 <put_fat+0x138>
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	b25b      	sxtb	r3, r3
 80077e8:	f023 030f 	bic.w	r3, r3, #15
 80077ec:	b25a      	sxtb	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	0a1b      	lsrs	r3, r3, #8
 80077f2:	b25b      	sxtb	r3, r3
 80077f4:	f003 030f 	and.w	r3, r3, #15
 80077f8:	b25b      	sxtb	r3, r3
 80077fa:	4313      	orrs	r3, r2
 80077fc:	b25b      	sxtb	r3, r3
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2201      	movs	r2, #1
 8007808:	70da      	strb	r2, [r3, #3]
			break;
 800780a:	e072      	b.n	80078f2 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	899b      	ldrh	r3, [r3, #12]
 8007814:	085b      	lsrs	r3, r3, #1
 8007816:	b29b      	uxth	r3, r3
 8007818:	4619      	mov	r1, r3
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007820:	4413      	add	r3, r2
 8007822:	4619      	mov	r1, r3
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f7ff fdbf 	bl	80073a8 <move_window>
 800782a:	4603      	mov	r3, r0
 800782c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800782e:	7ffb      	ldrb	r3, [r7, #31]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d15b      	bne.n	80078ec <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	005b      	lsls	r3, r3, #1
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	8992      	ldrh	r2, [r2, #12]
 8007842:	fbb3 f0f2 	udiv	r0, r3, r2
 8007846:	fb00 f202 	mul.w	r2, r0, r2
 800784a:	1a9b      	subs	r3, r3, r2
 800784c:	440b      	add	r3, r1
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	b292      	uxth	r2, r2
 8007852:	4611      	mov	r1, r2
 8007854:	4618      	mov	r0, r3
 8007856:	f7ff fb00 	bl	8006e5a <st_word>
			fs->wflag = 1;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2201      	movs	r2, #1
 800785e:	70da      	strb	r2, [r3, #3]
			break;
 8007860:	e047      	b.n	80078f2 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	899b      	ldrh	r3, [r3, #12]
 800786a:	089b      	lsrs	r3, r3, #2
 800786c:	b29b      	uxth	r3, r3
 800786e:	4619      	mov	r1, r3
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	fbb3 f3f1 	udiv	r3, r3, r1
 8007876:	4413      	add	r3, r2
 8007878:	4619      	mov	r1, r3
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f7ff fd94 	bl	80073a8 <move_window>
 8007880:	4603      	mov	r3, r0
 8007882:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007884:	7ffb      	ldrb	r3, [r7, #31]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d132      	bne.n	80078f0 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	8992      	ldrh	r2, [r2, #12]
 800789e:	fbb3 f0f2 	udiv	r0, r3, r2
 80078a2:	fb00 f202 	mul.w	r2, r0, r2
 80078a6:	1a9b      	subs	r3, r3, r2
 80078a8:	440b      	add	r3, r1
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7ff fab2 	bl	8006e14 <ld_dword>
 80078b0:	4603      	mov	r3, r0
 80078b2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80078b6:	4323      	orrs	r3, r4
 80078b8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	68fa      	ldr	r2, [r7, #12]
 80078c6:	8992      	ldrh	r2, [r2, #12]
 80078c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80078cc:	fb00 f202 	mul.w	r2, r0, r2
 80078d0:	1a9b      	subs	r3, r3, r2
 80078d2:	440b      	add	r3, r1
 80078d4:	6879      	ldr	r1, [r7, #4]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7ff fada 	bl	8006e90 <st_dword>
			fs->wflag = 1;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2201      	movs	r2, #1
 80078e0:	70da      	strb	r2, [r3, #3]
			break;
 80078e2:	e006      	b.n	80078f2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80078e4:	bf00      	nop
 80078e6:	e004      	b.n	80078f2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80078e8:	bf00      	nop
 80078ea:	e002      	b.n	80078f2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80078ec:	bf00      	nop
 80078ee:	e000      	b.n	80078f2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80078f0:	bf00      	nop
		}
	}
	return res;
 80078f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3724      	adds	r7, #36	@ 0x24
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd90      	pop	{r4, r7, pc}

080078fc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b088      	sub	sp, #32
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d904      	bls.n	8007922 <remove_chain+0x26>
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	6a1b      	ldr	r3, [r3, #32]
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	429a      	cmp	r2, r3
 8007920:	d301      	bcc.n	8007926 <remove_chain+0x2a>
 8007922:	2302      	movs	r3, #2
 8007924:	e04b      	b.n	80079be <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00c      	beq.n	8007946 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800792c:	f04f 32ff 	mov.w	r2, #4294967295
 8007930:	6879      	ldr	r1, [r7, #4]
 8007932:	69b8      	ldr	r0, [r7, #24]
 8007934:	f7ff fec8 	bl	80076c8 <put_fat>
 8007938:	4603      	mov	r3, r0
 800793a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800793c:	7ffb      	ldrb	r3, [r7, #31]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d001      	beq.n	8007946 <remove_chain+0x4a>
 8007942:	7ffb      	ldrb	r3, [r7, #31]
 8007944:	e03b      	b.n	80079be <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007946:	68b9      	ldr	r1, [r7, #8]
 8007948:	68f8      	ldr	r0, [r7, #12]
 800794a:	f7ff fdea 	bl	8007522 <get_fat>
 800794e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d031      	beq.n	80079ba <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d101      	bne.n	8007960 <remove_chain+0x64>
 800795c:	2302      	movs	r3, #2
 800795e:	e02e      	b.n	80079be <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007966:	d101      	bne.n	800796c <remove_chain+0x70>
 8007968:	2301      	movs	r3, #1
 800796a:	e028      	b.n	80079be <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800796c:	2200      	movs	r2, #0
 800796e:	68b9      	ldr	r1, [r7, #8]
 8007970:	69b8      	ldr	r0, [r7, #24]
 8007972:	f7ff fea9 	bl	80076c8 <put_fat>
 8007976:	4603      	mov	r3, r0
 8007978:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800797a:	7ffb      	ldrb	r3, [r7, #31]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d001      	beq.n	8007984 <remove_chain+0x88>
 8007980:	7ffb      	ldrb	r3, [r7, #31]
 8007982:	e01c      	b.n	80079be <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	69da      	ldr	r2, [r3, #28]
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	6a1b      	ldr	r3, [r3, #32]
 800798c:	3b02      	subs	r3, #2
 800798e:	429a      	cmp	r2, r3
 8007990:	d20b      	bcs.n	80079aa <remove_chain+0xae>
			fs->free_clst++;
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	69db      	ldr	r3, [r3, #28]
 8007996:	1c5a      	adds	r2, r3, #1
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	791b      	ldrb	r3, [r3, #4]
 80079a0:	f043 0301 	orr.w	r3, r3, #1
 80079a4:	b2da      	uxtb	r2, r3
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d3c6      	bcc.n	8007946 <remove_chain+0x4a>
 80079b8:	e000      	b.n	80079bc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80079ba:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3720      	adds	r7, #32
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b088      	sub	sp, #32
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10d      	bne.n	80079f8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d004      	beq.n	80079f2 <create_chain+0x2c>
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	6a1b      	ldr	r3, [r3, #32]
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d31b      	bcc.n	8007a2a <create_chain+0x64>
 80079f2:	2301      	movs	r3, #1
 80079f4:	61bb      	str	r3, [r7, #24]
 80079f6:	e018      	b.n	8007a2a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7ff fd91 	bl	8007522 <get_fat>
 8007a00:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d801      	bhi.n	8007a0c <create_chain+0x46>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e070      	b.n	8007aee <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a12:	d101      	bne.n	8007a18 <create_chain+0x52>
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	e06a      	b.n	8007aee <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	6a1b      	ldr	r3, [r3, #32]
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d201      	bcs.n	8007a26 <create_chain+0x60>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	e063      	b.n	8007aee <create_chain+0x128>
		scl = clst;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	3301      	adds	r3, #1
 8007a32:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	69fa      	ldr	r2, [r7, #28]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d307      	bcc.n	8007a4e <create_chain+0x88>
				ncl = 2;
 8007a3e:	2302      	movs	r3, #2
 8007a40:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007a42:	69fa      	ldr	r2, [r7, #28]
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d901      	bls.n	8007a4e <create_chain+0x88>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	e04f      	b.n	8007aee <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007a4e:	69f9      	ldr	r1, [r7, #28]
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f7ff fd66 	bl	8007522 <get_fat>
 8007a56:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d00e      	beq.n	8007a7c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d003      	beq.n	8007a6c <create_chain+0xa6>
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6a:	d101      	bne.n	8007a70 <create_chain+0xaa>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	e03e      	b.n	8007aee <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007a70:	69fa      	ldr	r2, [r7, #28]
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d1da      	bne.n	8007a2e <create_chain+0x68>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	e038      	b.n	8007aee <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007a7c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007a82:	69f9      	ldr	r1, [r7, #28]
 8007a84:	6938      	ldr	r0, [r7, #16]
 8007a86:	f7ff fe1f 	bl	80076c8 <put_fat>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007a8e:	7dfb      	ldrb	r3, [r7, #23]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d109      	bne.n	8007aa8 <create_chain+0xe2>
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d006      	beq.n	8007aa8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007a9a:	69fa      	ldr	r2, [r7, #28]
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	6938      	ldr	r0, [r7, #16]
 8007aa0:	f7ff fe12 	bl	80076c8 <put_fat>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007aa8:	7dfb      	ldrb	r3, [r7, #23]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d116      	bne.n	8007adc <create_chain+0x116>
		fs->last_clst = ncl;
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	69fa      	ldr	r2, [r7, #28]
 8007ab2:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	69da      	ldr	r2, [r3, #28]
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	6a1b      	ldr	r3, [r3, #32]
 8007abc:	3b02      	subs	r3, #2
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d804      	bhi.n	8007acc <create_chain+0x106>
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	69db      	ldr	r3, [r3, #28]
 8007ac6:	1e5a      	subs	r2, r3, #1
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	791b      	ldrb	r3, [r3, #4]
 8007ad0:	f043 0301 	orr.w	r3, r3, #1
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	711a      	strb	r2, [r3, #4]
 8007ada:	e007      	b.n	8007aec <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007adc:	7dfb      	ldrb	r3, [r7, #23]
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d102      	bne.n	8007ae8 <create_chain+0x122>
 8007ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae6:	e000      	b.n	8007aea <create_chain+0x124>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007aec:	69fb      	ldr	r3, [r7, #28]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3720      	adds	r7, #32
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007af6:	b480      	push	{r7}
 8007af8:	b087      	sub	sp, #28
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	899b      	ldrh	r3, [r3, #12]
 8007b12:	461a      	mov	r2, r3
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	8952      	ldrh	r2, [r2, #10]
 8007b1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b22:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	1d1a      	adds	r2, r3, #4
 8007b28:	613a      	str	r2, [r7, #16]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007b2e:	68bb      	ldr	r3, [r7, #8]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d101      	bne.n	8007b38 <clmt_clust+0x42>
 8007b34:	2300      	movs	r3, #0
 8007b36:	e010      	b.n	8007b5a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d307      	bcc.n	8007b50 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	617b      	str	r3, [r7, #20]
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007b4e:	e7e9      	b.n	8007b24 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8007b50:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	4413      	add	r3, r2
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	371c      	adds	r7, #28
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b086      	sub	sp, #24
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	6078      	str	r0, [r7, #4]
 8007b6e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b7c:	d204      	bcs.n	8007b88 <dir_sdi+0x22>
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	f003 031f 	and.w	r3, r3, #31
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d001      	beq.n	8007b8c <dir_sdi+0x26>
		return FR_INT_ERR;
 8007b88:	2302      	movs	r3, #2
 8007b8a:	e071      	b.n	8007c70 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d106      	bne.n	8007bac <dir_sdi+0x46>
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d902      	bls.n	8007bac <dir_sdi+0x46>
		clst = fs->dirbase;
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007baa:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10c      	bne.n	8007bcc <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	095b      	lsrs	r3, r3, #5
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	8912      	ldrh	r2, [r2, #8]
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d301      	bcc.n	8007bc2 <dir_sdi+0x5c>
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	e056      	b.n	8007c70 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	61da      	str	r2, [r3, #28]
 8007bca:	e02d      	b.n	8007c28 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	895b      	ldrh	r3, [r3, #10]
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	899b      	ldrh	r3, [r3, #12]
 8007bd6:	fb02 f303 	mul.w	r3, r2, r3
 8007bda:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007bdc:	e019      	b.n	8007c12 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6979      	ldr	r1, [r7, #20]
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7ff fc9d 	bl	8007522 <get_fat>
 8007be8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf0:	d101      	bne.n	8007bf6 <dir_sdi+0x90>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e03c      	b.n	8007c70 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d904      	bls.n	8007c06 <dir_sdi+0xa0>
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	6a1b      	ldr	r3, [r3, #32]
 8007c00:	697a      	ldr	r2, [r7, #20]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d301      	bcc.n	8007c0a <dir_sdi+0xa4>
 8007c06:	2302      	movs	r3, #2
 8007c08:	e032      	b.n	8007c70 <dir_sdi+0x10a>
			ofs -= csz;
 8007c0a:	683a      	ldr	r2, [r7, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d2e1      	bcs.n	8007bde <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007c1a:	6979      	ldr	r1, [r7, #20]
 8007c1c:	6938      	ldr	r0, [r7, #16]
 8007c1e:	f7ff fc61 	bl	80074e4 <clust2sect>
 8007c22:	4602      	mov	r2, r0
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	69db      	ldr	r3, [r3, #28]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d101      	bne.n	8007c3a <dir_sdi+0xd4>
 8007c36:	2302      	movs	r3, #2
 8007c38:	e01a      	b.n	8007c70 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	69da      	ldr	r2, [r3, #28]
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	899b      	ldrh	r3, [r3, #12]
 8007c42:	4619      	mov	r1, r3
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8007c4a:	441a      	add	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	899b      	ldrh	r3, [r3, #12]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	fbb3 f0f2 	udiv	r0, r3, r2
 8007c62:	fb00 f202 	mul.w	r2, r0, r2
 8007c66:	1a9b      	subs	r3, r3, r2
 8007c68:	18ca      	adds	r2, r1, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007c6e:	2300      	movs	r3, #0
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
 8007c80:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	695b      	ldr	r3, [r3, #20]
 8007c8c:	3320      	adds	r3, #32
 8007c8e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	69db      	ldr	r3, [r3, #28]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d003      	beq.n	8007ca0 <dir_next+0x28>
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c9e:	d301      	bcc.n	8007ca4 <dir_next+0x2c>
 8007ca0:	2304      	movs	r3, #4
 8007ca2:	e0bb      	b.n	8007e1c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	899b      	ldrh	r3, [r3, #12]
 8007ca8:	461a      	mov	r2, r3
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cb0:	fb01 f202 	mul.w	r2, r1, r2
 8007cb4:	1a9b      	subs	r3, r3, r2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f040 809d 	bne.w	8007df6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	69db      	ldr	r3, [r3, #28]
 8007cc0:	1c5a      	adds	r2, r3, #1
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10b      	bne.n	8007ce6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	095b      	lsrs	r3, r3, #5
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	8912      	ldrh	r2, [r2, #8]
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	f0c0 808d 	bcc.w	8007df6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	61da      	str	r2, [r3, #28]
 8007ce2:	2304      	movs	r3, #4
 8007ce4:	e09a      	b.n	8007e1c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	899b      	ldrh	r3, [r3, #12]
 8007cea:	461a      	mov	r2, r3
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	8952      	ldrh	r2, [r2, #10]
 8007cf6:	3a01      	subs	r2, #1
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d17b      	bne.n	8007df6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	4619      	mov	r1, r3
 8007d06:	4610      	mov	r0, r2
 8007d08:	f7ff fc0b 	bl	8007522 <get_fat>
 8007d0c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d801      	bhi.n	8007d18 <dir_next+0xa0>
 8007d14:	2302      	movs	r3, #2
 8007d16:	e081      	b.n	8007e1c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d1e:	d101      	bne.n	8007d24 <dir_next+0xac>
 8007d20:	2301      	movs	r3, #1
 8007d22:	e07b      	b.n	8007e1c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6a1b      	ldr	r3, [r3, #32]
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d359      	bcc.n	8007de2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d104      	bne.n	8007d3e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	61da      	str	r2, [r3, #28]
 8007d3a:	2304      	movs	r3, #4
 8007d3c:	e06e      	b.n	8007e1c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	4619      	mov	r1, r3
 8007d46:	4610      	mov	r0, r2
 8007d48:	f7ff fe3d 	bl	80079c6 <create_chain>
 8007d4c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <dir_next+0xe0>
 8007d54:	2307      	movs	r3, #7
 8007d56:	e061      	b.n	8007e1c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d101      	bne.n	8007d62 <dir_next+0xea>
 8007d5e:	2302      	movs	r3, #2
 8007d60:	e05c      	b.n	8007e1c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d68:	d101      	bne.n	8007d6e <dir_next+0xf6>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e056      	b.n	8007e1c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007d6e:	68f8      	ldr	r0, [r7, #12]
 8007d70:	f7ff fad6 	bl	8007320 <sync_window>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <dir_next+0x106>
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e04e      	b.n	8007e1c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	899b      	ldrh	r3, [r3, #12]
 8007d88:	461a      	mov	r2, r3
 8007d8a:	2100      	movs	r1, #0
 8007d8c:	f7ff f8cd 	bl	8006f2a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007d90:	2300      	movs	r3, #0
 8007d92:	613b      	str	r3, [r7, #16]
 8007d94:	6979      	ldr	r1, [r7, #20]
 8007d96:	68f8      	ldr	r0, [r7, #12]
 8007d98:	f7ff fba4 	bl	80074e4 <clust2sect>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	639a      	str	r2, [r3, #56]	@ 0x38
 8007da2:	e012      	b.n	8007dca <dir_next+0x152>
						fs->wflag = 1;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2201      	movs	r2, #1
 8007da8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007daa:	68f8      	ldr	r0, [r7, #12]
 8007dac:	f7ff fab8 	bl	8007320 <sync_window>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <dir_next+0x142>
 8007db6:	2301      	movs	r3, #1
 8007db8:	e030      	b.n	8007e1c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	613b      	str	r3, [r7, #16]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc4:	1c5a      	adds	r2, r3, #1
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	639a      	str	r2, [r3, #56]	@ 0x38
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	895b      	ldrh	r3, [r3, #10]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d3e6      	bcc.n	8007da4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	1ad2      	subs	r2, r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	697a      	ldr	r2, [r7, #20]
 8007de6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007de8:	6979      	ldr	r1, [r7, #20]
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f7ff fb7a 	bl	80074e4 <clust2sect>
 8007df0:	4602      	mov	r2, r0
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	899b      	ldrh	r3, [r3, #12]
 8007e06:	461a      	mov	r2, r3
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e0e:	fb00 f202 	mul.w	r2, r0, r2
 8007e12:	1a9b      	subs	r3, r3, r2
 8007e14:	18ca      	adds	r2, r1, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3718      	adds	r7, #24
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b086      	sub	sp, #24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007e34:	2100      	movs	r1, #0
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7ff fe95 	bl	8007b66 <dir_sdi>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007e40:	7dfb      	ldrb	r3, [r7, #23]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d12b      	bne.n	8007e9e <dir_alloc+0x7a>
		n = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7ff faa9 	bl	80073a8 <move_window>
 8007e56:	4603      	mov	r3, r0
 8007e58:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007e5a:	7dfb      	ldrb	r3, [r7, #23]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d11d      	bne.n	8007e9c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6a1b      	ldr	r3, [r3, #32]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	2be5      	cmp	r3, #229	@ 0xe5
 8007e68:	d004      	beq.n	8007e74 <dir_alloc+0x50>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d107      	bne.n	8007e84 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	3301      	adds	r3, #1
 8007e78:	613b      	str	r3, [r7, #16]
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d102      	bne.n	8007e88 <dir_alloc+0x64>
 8007e82:	e00c      	b.n	8007e9e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007e84:	2300      	movs	r3, #0
 8007e86:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007e88:	2101      	movs	r1, #1
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f7ff fef4 	bl	8007c78 <dir_next>
 8007e90:	4603      	mov	r3, r0
 8007e92:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007e94:	7dfb      	ldrb	r3, [r7, #23]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d0d7      	beq.n	8007e4a <dir_alloc+0x26>
 8007e9a:	e000      	b.n	8007e9e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007e9c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007e9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ea0:	2b04      	cmp	r3, #4
 8007ea2:	d101      	bne.n	8007ea8 <dir_alloc+0x84>
 8007ea4:	2307      	movs	r3, #7
 8007ea6:	75fb      	strb	r3, [r7, #23]
	return res;
 8007ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3718      	adds	r7, #24
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b084      	sub	sp, #16
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
 8007eba:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	331a      	adds	r3, #26
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fe ff8f 	bl	8006de4 <ld_word>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	d109      	bne.n	8007ee6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	3314      	adds	r3, #20
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fe ff84 	bl	8006de4 <ld_word>
 8007edc:	4603      	mov	r3, r0
 8007ede:	041b      	lsls	r3, r3, #16
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	331a      	adds	r3, #26
 8007f00:	687a      	ldr	r2, [r7, #4]
 8007f02:	b292      	uxth	r2, r2
 8007f04:	4611      	mov	r1, r2
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fe ffa7 	bl	8006e5a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	2b03      	cmp	r3, #3
 8007f12:	d109      	bne.n	8007f28 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	f103 0214 	add.w	r2, r3, #20
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	0c1b      	lsrs	r3, r3, #16
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	4619      	mov	r1, r3
 8007f22:	4610      	mov	r0, r2
 8007f24:	f7fe ff99 	bl	8006e5a <st_word>
	}
}
 8007f28:	bf00      	nop
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007f30:	b590      	push	{r4, r7, lr}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	331a      	adds	r3, #26
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fe ff50 	bl	8006de4 <ld_word>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <cmp_lfn+0x1e>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	e059      	b.n	8008002 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	781b      	ldrb	r3, [r3, #0]
 8007f52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007f56:	1e5a      	subs	r2, r3, #1
 8007f58:	4613      	mov	r3, r2
 8007f5a:	005b      	lsls	r3, r3, #1
 8007f5c:	4413      	add	r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	4413      	add	r3, r2
 8007f62:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007f64:	2301      	movs	r3, #1
 8007f66:	81fb      	strh	r3, [r7, #14]
 8007f68:	2300      	movs	r3, #0
 8007f6a:	613b      	str	r3, [r7, #16]
 8007f6c:	e033      	b.n	8007fd6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8007f6e:	4a27      	ldr	r2, [pc, #156]	@ (800800c <cmp_lfn+0xdc>)
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	4413      	add	r3, r2
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	461a      	mov	r2, r3
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f7fe ff31 	bl	8006de4 <ld_word>
 8007f82:	4603      	mov	r3, r0
 8007f84:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007f86:	89fb      	ldrh	r3, [r7, #14]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d01a      	beq.n	8007fc2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8007f90:	d812      	bhi.n	8007fb8 <cmp_lfn+0x88>
 8007f92:	89bb      	ldrh	r3, [r7, #12]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f001 ff3b 	bl	8009e10 <ff_wtoupper>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	461c      	mov	r4, r3
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	1c5a      	adds	r2, r3, #1
 8007fa2:	617a      	str	r2, [r7, #20]
 8007fa4:	005b      	lsls	r3, r3, #1
 8007fa6:	687a      	ldr	r2, [r7, #4]
 8007fa8:	4413      	add	r3, r2
 8007faa:	881b      	ldrh	r3, [r3, #0]
 8007fac:	4618      	mov	r0, r3
 8007fae:	f001 ff2f 	bl	8009e10 <ff_wtoupper>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	429c      	cmp	r4, r3
 8007fb6:	d001      	beq.n	8007fbc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007fb8:	2300      	movs	r3, #0
 8007fba:	e022      	b.n	8008002 <cmp_lfn+0xd2>
			}
			wc = uc;
 8007fbc:	89bb      	ldrh	r3, [r7, #12]
 8007fbe:	81fb      	strh	r3, [r7, #14]
 8007fc0:	e006      	b.n	8007fd0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007fc2:	89bb      	ldrh	r3, [r7, #12]
 8007fc4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d001      	beq.n	8007fd0 <cmp_lfn+0xa0>
 8007fcc:	2300      	movs	r3, #0
 8007fce:	e018      	b.n	8008002 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	613b      	str	r3, [r7, #16]
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	2b0c      	cmp	r3, #12
 8007fda:	d9c8      	bls.n	8007f6e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00b      	beq.n	8008000 <cmp_lfn+0xd0>
 8007fe8:	89fb      	ldrh	r3, [r7, #14]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d008      	beq.n	8008000 <cmp_lfn+0xd0>
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	005b      	lsls	r3, r3, #1
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	881b      	ldrh	r3, [r3, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d001      	beq.n	8008000 <cmp_lfn+0xd0>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	e000      	b.n	8008002 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8008000:	2301      	movs	r3, #1
}
 8008002:	4618      	mov	r0, r3
 8008004:	371c      	adds	r7, #28
 8008006:	46bd      	mov	sp, r7
 8008008:	bd90      	pop	{r4, r7, pc}
 800800a:	bf00      	nop
 800800c:	0800fd94 	.word	0x0800fd94

08008010 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b088      	sub	sp, #32
 8008014:	af00      	add	r7, sp, #0
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	4611      	mov	r1, r2
 800801c:	461a      	mov	r2, r3
 800801e:	460b      	mov	r3, r1
 8008020:	71fb      	strb	r3, [r7, #7]
 8008022:	4613      	mov	r3, r2
 8008024:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	330d      	adds	r3, #13
 800802a:	79ba      	ldrb	r2, [r7, #6]
 800802c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	330b      	adds	r3, #11
 8008032:	220f      	movs	r2, #15
 8008034:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	330c      	adds	r3, #12
 800803a:	2200      	movs	r2, #0
 800803c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	331a      	adds	r3, #26
 8008042:	2100      	movs	r1, #0
 8008044:	4618      	mov	r0, r3
 8008046:	f7fe ff08 	bl	8006e5a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800804a:	79fb      	ldrb	r3, [r7, #7]
 800804c:	1e5a      	subs	r2, r3, #1
 800804e:	4613      	mov	r3, r2
 8008050:	005b      	lsls	r3, r3, #1
 8008052:	4413      	add	r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	4413      	add	r3, r2
 8008058:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800805a:	2300      	movs	r3, #0
 800805c:	82fb      	strh	r3, [r7, #22]
 800805e:	2300      	movs	r3, #0
 8008060:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8008062:	8afb      	ldrh	r3, [r7, #22]
 8008064:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008068:	4293      	cmp	r3, r2
 800806a:	d007      	beq.n	800807c <put_lfn+0x6c>
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	1c5a      	adds	r2, r3, #1
 8008070:	61fa      	str	r2, [r7, #28]
 8008072:	005b      	lsls	r3, r3, #1
 8008074:	68fa      	ldr	r2, [r7, #12]
 8008076:	4413      	add	r3, r2
 8008078:	881b      	ldrh	r3, [r3, #0]
 800807a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800807c:	4a17      	ldr	r2, [pc, #92]	@ (80080dc <put_lfn+0xcc>)
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	4413      	add	r3, r2
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	461a      	mov	r2, r3
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	4413      	add	r3, r2
 800808a:	8afa      	ldrh	r2, [r7, #22]
 800808c:	4611      	mov	r1, r2
 800808e:	4618      	mov	r0, r3
 8008090:	f7fe fee3 	bl	8006e5a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008094:	8afb      	ldrh	r3, [r7, #22]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d102      	bne.n	80080a0 <put_lfn+0x90>
 800809a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800809e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	3301      	adds	r3, #1
 80080a4:	61bb      	str	r3, [r7, #24]
 80080a6:	69bb      	ldr	r3, [r7, #24]
 80080a8:	2b0c      	cmp	r3, #12
 80080aa:	d9da      	bls.n	8008062 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80080ac:	8afb      	ldrh	r3, [r7, #22]
 80080ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d006      	beq.n	80080c4 <put_lfn+0xb4>
 80080b6:	69fb      	ldr	r3, [r7, #28]
 80080b8:	005b      	lsls	r3, r3, #1
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	4413      	add	r3, r2
 80080be:	881b      	ldrh	r3, [r3, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d103      	bne.n	80080cc <put_lfn+0xbc>
 80080c4:	79fb      	ldrb	r3, [r7, #7]
 80080c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080ca:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	79fa      	ldrb	r2, [r7, #7]
 80080d0:	701a      	strb	r2, [r3, #0]
}
 80080d2:	bf00      	nop
 80080d4:	3720      	adds	r7, #32
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	0800fd94 	.word	0x0800fd94

080080e0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b08c      	sub	sp, #48	@ 0x30
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	60b9      	str	r1, [r7, #8]
 80080ea:	607a      	str	r2, [r7, #4]
 80080ec:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80080ee:	220b      	movs	r2, #11
 80080f0:	68b9      	ldr	r1, [r7, #8]
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f7fe fef8 	bl	8006ee8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	2b05      	cmp	r3, #5
 80080fc:	d92b      	bls.n	8008156 <gen_numname+0x76>
		sr = seq;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8008102:	e022      	b.n	800814a <gen_numname+0x6a>
			wc = *lfn++;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	1c9a      	adds	r2, r3, #2
 8008108:	607a      	str	r2, [r7, #4]
 800810a:	881b      	ldrh	r3, [r3, #0]
 800810c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800810e:	2300      	movs	r3, #0
 8008110:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008112:	e017      	b.n	8008144 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	005a      	lsls	r2, r3, #1
 8008118:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800811a:	f003 0301 	and.w	r3, r3, #1
 800811e:	4413      	add	r3, r2
 8008120:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8008122:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8008124:	085b      	lsrs	r3, r3, #1
 8008126:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800812e:	2b00      	cmp	r3, #0
 8008130:	d005      	beq.n	800813e <gen_numname+0x5e>
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8008138:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800813c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800813e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008140:	3301      	adds	r3, #1
 8008142:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008146:	2b0f      	cmp	r3, #15
 8008148:	d9e4      	bls.n	8008114 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	881b      	ldrh	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1d8      	bne.n	8008104 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008156:	2307      	movs	r3, #7
 8008158:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	b2db      	uxtb	r3, r3
 800815e:	f003 030f 	and.w	r3, r3, #15
 8008162:	b2db      	uxtb	r3, r3
 8008164:	3330      	adds	r3, #48	@ 0x30
 8008166:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800816a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800816e:	2b39      	cmp	r3, #57	@ 0x39
 8008170:	d904      	bls.n	800817c <gen_numname+0x9c>
 8008172:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008176:	3307      	adds	r3, #7
 8008178:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800817c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800817e:	1e5a      	subs	r2, r3, #1
 8008180:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008182:	3330      	adds	r3, #48	@ 0x30
 8008184:	443b      	add	r3, r7
 8008186:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800818a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	091b      	lsrs	r3, r3, #4
 8008192:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d1df      	bne.n	800815a <gen_numname+0x7a>
	ns[i] = '~';
 800819a:	f107 0214 	add.w	r2, r7, #20
 800819e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a0:	4413      	add	r3, r2
 80081a2:	227e      	movs	r2, #126	@ 0x7e
 80081a4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80081a6:	2300      	movs	r3, #0
 80081a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80081aa:	e002      	b.n	80081b2 <gen_numname+0xd2>
 80081ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ae:	3301      	adds	r3, #1
 80081b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80081b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d205      	bcs.n	80081c6 <gen_numname+0xe6>
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081be:	4413      	add	r3, r2
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	2b20      	cmp	r3, #32
 80081c4:	d1f2      	bne.n	80081ac <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80081c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c8:	2b07      	cmp	r3, #7
 80081ca:	d807      	bhi.n	80081dc <gen_numname+0xfc>
 80081cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ce:	1c5a      	adds	r2, r3, #1
 80081d0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80081d2:	3330      	adds	r3, #48	@ 0x30
 80081d4:	443b      	add	r3, r7
 80081d6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80081da:	e000      	b.n	80081de <gen_numname+0xfe>
 80081dc:	2120      	movs	r1, #32
 80081de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e0:	1c5a      	adds	r2, r3, #1
 80081e2:	627a      	str	r2, [r7, #36]	@ 0x24
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	4413      	add	r3, r2
 80081e8:	460a      	mov	r2, r1
 80081ea:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80081ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ee:	2b07      	cmp	r3, #7
 80081f0:	d9e9      	bls.n	80081c6 <gen_numname+0xe6>
}
 80081f2:	bf00      	nop
 80081f4:	bf00      	nop
 80081f6:	3730      	adds	r7, #48	@ 0x30
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8008208:	230b      	movs	r3, #11
 800820a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800820c:	7bfb      	ldrb	r3, [r7, #15]
 800820e:	b2da      	uxtb	r2, r3
 8008210:	0852      	lsrs	r2, r2, #1
 8008212:	01db      	lsls	r3, r3, #7
 8008214:	4313      	orrs	r3, r2
 8008216:	b2da      	uxtb	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	1c59      	adds	r1, r3, #1
 800821c:	6079      	str	r1, [r7, #4]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	4413      	add	r3, r2
 8008222:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	3b01      	subs	r3, #1
 8008228:	60bb      	str	r3, [r7, #8]
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1ed      	bne.n	800820c <sum_sfn+0x10>
	return sum;
 8008230:	7bfb      	ldrb	r3, [r7, #15]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3714      	adds	r7, #20
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b086      	sub	sp, #24
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800824c:	2100      	movs	r1, #0
 800824e:	6878      	ldr	r0, [r7, #4]
 8008250:	f7ff fc89 	bl	8007b66 <dir_sdi>
 8008254:	4603      	mov	r3, r0
 8008256:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008258:	7dfb      	ldrb	r3, [r7, #23]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d001      	beq.n	8008262 <dir_find+0x24>
 800825e:	7dfb      	ldrb	r3, [r7, #23]
 8008260:	e0a9      	b.n	80083b6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008262:	23ff      	movs	r3, #255	@ 0xff
 8008264:	753b      	strb	r3, [r7, #20]
 8008266:	7d3b      	ldrb	r3, [r7, #20]
 8008268:	757b      	strb	r3, [r7, #21]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f04f 32ff 	mov.w	r2, #4294967295
 8008270:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	4619      	mov	r1, r3
 8008278:	6938      	ldr	r0, [r7, #16]
 800827a:	f7ff f895 	bl	80073a8 <move_window>
 800827e:	4603      	mov	r3, r0
 8008280:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008282:	7dfb      	ldrb	r3, [r7, #23]
 8008284:	2b00      	cmp	r3, #0
 8008286:	f040 8090 	bne.w	80083aa <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008292:	7dbb      	ldrb	r3, [r7, #22]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d102      	bne.n	800829e <dir_find+0x60>
 8008298:	2304      	movs	r3, #4
 800829a:	75fb      	strb	r3, [r7, #23]
 800829c:	e08a      	b.n	80083b4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	330b      	adds	r3, #11
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80082aa:	73fb      	strb	r3, [r7, #15]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	7bfa      	ldrb	r2, [r7, #15]
 80082b0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80082b2:	7dbb      	ldrb	r3, [r7, #22]
 80082b4:	2be5      	cmp	r3, #229	@ 0xe5
 80082b6:	d007      	beq.n	80082c8 <dir_find+0x8a>
 80082b8:	7bfb      	ldrb	r3, [r7, #15]
 80082ba:	f003 0308 	and.w	r3, r3, #8
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d009      	beq.n	80082d6 <dir_find+0x98>
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	2b0f      	cmp	r3, #15
 80082c6:	d006      	beq.n	80082d6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80082c8:	23ff      	movs	r3, #255	@ 0xff
 80082ca:	757b      	strb	r3, [r7, #21]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f04f 32ff 	mov.w	r2, #4294967295
 80082d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80082d4:	e05e      	b.n	8008394 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80082d6:	7bfb      	ldrb	r3, [r7, #15]
 80082d8:	2b0f      	cmp	r3, #15
 80082da:	d136      	bne.n	800834a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80082e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d154      	bne.n	8008394 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80082ea:	7dbb      	ldrb	r3, [r7, #22]
 80082ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00d      	beq.n	8008310 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a1b      	ldr	r3, [r3, #32]
 80082f8:	7b5b      	ldrb	r3, [r3, #13]
 80082fa:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80082fc:	7dbb      	ldrb	r3, [r7, #22]
 80082fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008302:	75bb      	strb	r3, [r7, #22]
 8008304:	7dbb      	ldrb	r3, [r7, #22]
 8008306:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	695a      	ldr	r2, [r3, #20]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8008310:	7dba      	ldrb	r2, [r7, #22]
 8008312:	7d7b      	ldrb	r3, [r7, #21]
 8008314:	429a      	cmp	r2, r3
 8008316:	d115      	bne.n	8008344 <dir_find+0x106>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a1b      	ldr	r3, [r3, #32]
 800831c:	330d      	adds	r3, #13
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	7d3a      	ldrb	r2, [r7, #20]
 8008322:	429a      	cmp	r2, r3
 8008324:	d10e      	bne.n	8008344 <dir_find+0x106>
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	691a      	ldr	r2, [r3, #16]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	4619      	mov	r1, r3
 8008330:	4610      	mov	r0, r2
 8008332:	f7ff fdfd 	bl	8007f30 <cmp_lfn>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d003      	beq.n	8008344 <dir_find+0x106>
 800833c:	7d7b      	ldrb	r3, [r7, #21]
 800833e:	3b01      	subs	r3, #1
 8008340:	b2db      	uxtb	r3, r3
 8008342:	e000      	b.n	8008346 <dir_find+0x108>
 8008344:	23ff      	movs	r3, #255	@ 0xff
 8008346:	757b      	strb	r3, [r7, #21]
 8008348:	e024      	b.n	8008394 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800834a:	7d7b      	ldrb	r3, [r7, #21]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d109      	bne.n	8008364 <dir_find+0x126>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a1b      	ldr	r3, [r3, #32]
 8008354:	4618      	mov	r0, r3
 8008356:	f7ff ff51 	bl	80081fc <sum_sfn>
 800835a:	4603      	mov	r3, r0
 800835c:	461a      	mov	r2, r3
 800835e:	7d3b      	ldrb	r3, [r7, #20]
 8008360:	4293      	cmp	r3, r2
 8008362:	d024      	beq.n	80083ae <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10a      	bne.n	8008388 <dir_find+0x14a>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a18      	ldr	r0, [r3, #32]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	3324      	adds	r3, #36	@ 0x24
 800837a:	220b      	movs	r2, #11
 800837c:	4619      	mov	r1, r3
 800837e:	f7fe fdef 	bl	8006f60 <mem_cmp>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d014      	beq.n	80083b2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008388:	23ff      	movs	r3, #255	@ 0xff
 800838a:	757b      	strb	r3, [r7, #21]
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f04f 32ff 	mov.w	r2, #4294967295
 8008392:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008394:	2100      	movs	r1, #0
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff fc6e 	bl	8007c78 <dir_next>
 800839c:	4603      	mov	r3, r0
 800839e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80083a0:	7dfb      	ldrb	r3, [r7, #23]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f43f af65 	beq.w	8008272 <dir_find+0x34>
 80083a8:	e004      	b.n	80083b4 <dir_find+0x176>
		if (res != FR_OK) break;
 80083aa:	bf00      	nop
 80083ac:	e002      	b.n	80083b4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80083ae:	bf00      	nop
 80083b0:	e000      	b.n	80083b4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80083b2:	bf00      	nop

	return res;
 80083b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3718      	adds	r7, #24
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}
	...

080083c0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b08c      	sub	sp, #48	@ 0x30
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80083d4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d001      	beq.n	80083e0 <dir_register+0x20>
 80083dc:	2306      	movs	r3, #6
 80083de:	e0e0      	b.n	80085a2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80083e0:	2300      	movs	r3, #0
 80083e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80083e4:	e002      	b.n	80083ec <dir_register+0x2c>
 80083e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e8:	3301      	adds	r3, #1
 80083ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	691a      	ldr	r2, [r3, #16]
 80083f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f2:	005b      	lsls	r3, r3, #1
 80083f4:	4413      	add	r3, r2
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d1f4      	bne.n	80083e6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8008402:	f107 030c 	add.w	r3, r7, #12
 8008406:	220c      	movs	r2, #12
 8008408:	4618      	mov	r0, r3
 800840a:	f7fe fd6d 	bl	8006ee8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800840e:	7dfb      	ldrb	r3, [r7, #23]
 8008410:	f003 0301 	and.w	r3, r3, #1
 8008414:	2b00      	cmp	r3, #0
 8008416:	d032      	beq.n	800847e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2240      	movs	r2, #64	@ 0x40
 800841c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8008420:	2301      	movs	r3, #1
 8008422:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008424:	e016      	b.n	8008454 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800842c:	69fb      	ldr	r3, [r7, #28]
 800842e:	691a      	ldr	r2, [r3, #16]
 8008430:	f107 010c 	add.w	r1, r7, #12
 8008434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008436:	f7ff fe53 	bl	80080e0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f7ff feff 	bl	800823e <dir_find>
 8008440:	4603      	mov	r3, r0
 8008442:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8008446:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800844a:	2b00      	cmp	r3, #0
 800844c:	d106      	bne.n	800845c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800844e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008450:	3301      	adds	r3, #1
 8008452:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008456:	2b63      	cmp	r3, #99	@ 0x63
 8008458:	d9e5      	bls.n	8008426 <dir_register+0x66>
 800845a:	e000      	b.n	800845e <dir_register+0x9e>
			if (res != FR_OK) break;
 800845c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800845e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008460:	2b64      	cmp	r3, #100	@ 0x64
 8008462:	d101      	bne.n	8008468 <dir_register+0xa8>
 8008464:	2307      	movs	r3, #7
 8008466:	e09c      	b.n	80085a2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008468:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800846c:	2b04      	cmp	r3, #4
 800846e:	d002      	beq.n	8008476 <dir_register+0xb6>
 8008470:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008474:	e095      	b.n	80085a2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008476:	7dfa      	ldrb	r2, [r7, #23]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800847e:	7dfb      	ldrb	r3, [r7, #23]
 8008480:	f003 0302 	and.w	r3, r3, #2
 8008484:	2b00      	cmp	r3, #0
 8008486:	d007      	beq.n	8008498 <dir_register+0xd8>
 8008488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848a:	330c      	adds	r3, #12
 800848c:	4a47      	ldr	r2, [pc, #284]	@ (80085ac <dir_register+0x1ec>)
 800848e:	fba2 2303 	umull	r2, r3, r2, r3
 8008492:	089b      	lsrs	r3, r3, #2
 8008494:	3301      	adds	r3, #1
 8008496:	e000      	b.n	800849a <dir_register+0xda>
 8008498:	2301      	movs	r3, #1
 800849a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800849c:	6a39      	ldr	r1, [r7, #32]
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7ff fcc0 	bl	8007e24 <dir_alloc>
 80084a4:	4603      	mov	r3, r0
 80084a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80084aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d148      	bne.n	8008544 <dir_register+0x184>
 80084b2:	6a3b      	ldr	r3, [r7, #32]
 80084b4:	3b01      	subs	r3, #1
 80084b6:	623b      	str	r3, [r7, #32]
 80084b8:	6a3b      	ldr	r3, [r7, #32]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d042      	beq.n	8008544 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	695a      	ldr	r2, [r3, #20]
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	015b      	lsls	r3, r3, #5
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	4619      	mov	r1, r3
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f7ff fb4b 	bl	8007b66 <dir_sdi>
 80084d0:	4603      	mov	r3, r0
 80084d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80084d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d132      	bne.n	8008544 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	3324      	adds	r3, #36	@ 0x24
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7ff fe8a 	bl	80081fc <sum_sfn>
 80084e8:	4603      	mov	r3, r0
 80084ea:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	69db      	ldr	r3, [r3, #28]
 80084f0:	4619      	mov	r1, r3
 80084f2:	69f8      	ldr	r0, [r7, #28]
 80084f4:	f7fe ff58 	bl	80073a8 <move_window>
 80084f8:	4603      	mov	r3, r0
 80084fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80084fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008502:	2b00      	cmp	r3, #0
 8008504:	d11d      	bne.n	8008542 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	6918      	ldr	r0, [r3, #16]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6a19      	ldr	r1, [r3, #32]
 800850e:	6a3b      	ldr	r3, [r7, #32]
 8008510:	b2da      	uxtb	r2, r3
 8008512:	7efb      	ldrb	r3, [r7, #27]
 8008514:	f7ff fd7c 	bl	8008010 <put_lfn>
				fs->wflag = 1;
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	2201      	movs	r2, #1
 800851c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800851e:	2100      	movs	r1, #0
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f7ff fba9 	bl	8007c78 <dir_next>
 8008526:	4603      	mov	r3, r0
 8008528:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800852c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008530:	2b00      	cmp	r3, #0
 8008532:	d107      	bne.n	8008544 <dir_register+0x184>
 8008534:	6a3b      	ldr	r3, [r7, #32]
 8008536:	3b01      	subs	r3, #1
 8008538:	623b      	str	r3, [r7, #32]
 800853a:	6a3b      	ldr	r3, [r7, #32]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1d5      	bne.n	80084ec <dir_register+0x12c>
 8008540:	e000      	b.n	8008544 <dir_register+0x184>
				if (res != FR_OK) break;
 8008542:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008544:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008548:	2b00      	cmp	r3, #0
 800854a:	d128      	bne.n	800859e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	69db      	ldr	r3, [r3, #28]
 8008550:	4619      	mov	r1, r3
 8008552:	69f8      	ldr	r0, [r7, #28]
 8008554:	f7fe ff28 	bl	80073a8 <move_window>
 8008558:	4603      	mov	r3, r0
 800855a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800855e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008562:	2b00      	cmp	r3, #0
 8008564:	d11b      	bne.n	800859e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6a1b      	ldr	r3, [r3, #32]
 800856a:	2220      	movs	r2, #32
 800856c:	2100      	movs	r1, #0
 800856e:	4618      	mov	r0, r3
 8008570:	f7fe fcdb 	bl	8006f2a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a18      	ldr	r0, [r3, #32]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	3324      	adds	r3, #36	@ 0x24
 800857c:	220b      	movs	r2, #11
 800857e:	4619      	mov	r1, r3
 8008580:	f7fe fcb2 	bl	8006ee8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a1b      	ldr	r3, [r3, #32]
 800858e:	330c      	adds	r3, #12
 8008590:	f002 0218 	and.w	r2, r2, #24
 8008594:	b2d2      	uxtb	r2, r2
 8008596:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008598:	69fb      	ldr	r3, [r7, #28]
 800859a:	2201      	movs	r2, #1
 800859c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800859e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3730      	adds	r7, #48	@ 0x30
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	4ec4ec4f 	.word	0x4ec4ec4f

080085b0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	2200      	movs	r2, #0
 80085c4:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	f000 80ca 	beq.w	8008764 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085d8:	d032      	beq.n	8008640 <get_fileinfo+0x90>
			i = j = 0;
 80085da:	2300      	movs	r3, #0
 80085dc:	61bb      	str	r3, [r7, #24]
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80085e2:	e01b      	b.n	800861c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80085e4:	89fb      	ldrh	r3, [r7, #14]
 80085e6:	2100      	movs	r1, #0
 80085e8:	4618      	mov	r0, r3
 80085ea:	f001 fbd5 	bl	8009d98 <ff_convert>
 80085ee:	4603      	mov	r3, r0
 80085f0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80085f2:	89fb      	ldrh	r3, [r7, #14]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d102      	bne.n	80085fe <get_fileinfo+0x4e>
 80085f8:	2300      	movs	r3, #0
 80085fa:	61fb      	str	r3, [r7, #28]
 80085fc:	e01a      	b.n	8008634 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80085fe:	69fb      	ldr	r3, [r7, #28]
 8008600:	2bfe      	cmp	r3, #254	@ 0xfe
 8008602:	d902      	bls.n	800860a <get_fileinfo+0x5a>
 8008604:	2300      	movs	r3, #0
 8008606:	61fb      	str	r3, [r7, #28]
 8008608:	e014      	b.n	8008634 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	1c5a      	adds	r2, r3, #1
 800860e:	61fa      	str	r2, [r7, #28]
 8008610:	89fa      	ldrh	r2, [r7, #14]
 8008612:	b2d1      	uxtb	r1, r2
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	4413      	add	r3, r2
 8008618:	460a      	mov	r2, r1
 800861a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	691a      	ldr	r2, [r3, #16]
 8008620:	69bb      	ldr	r3, [r7, #24]
 8008622:	1c59      	adds	r1, r3, #1
 8008624:	61b9      	str	r1, [r7, #24]
 8008626:	005b      	lsls	r3, r3, #1
 8008628:	4413      	add	r3, r2
 800862a:	881b      	ldrh	r3, [r3, #0]
 800862c:	81fb      	strh	r3, [r7, #14]
 800862e:	89fb      	ldrh	r3, [r7, #14]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d1d7      	bne.n	80085e4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8008634:	683a      	ldr	r2, [r7, #0]
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	4413      	add	r3, r2
 800863a:	3316      	adds	r3, #22
 800863c:	2200      	movs	r2, #0
 800863e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8008640:	2300      	movs	r3, #0
 8008642:	61bb      	str	r3, [r7, #24]
 8008644:	69bb      	ldr	r3, [r7, #24]
 8008646:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8008648:	683a      	ldr	r2, [r7, #0]
 800864a:	69fb      	ldr	r3, [r7, #28]
 800864c:	4413      	add	r3, r2
 800864e:	3316      	adds	r3, #22
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8008654:	e04d      	b.n	80086f2 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a1a      	ldr	r2, [r3, #32]
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	1c59      	adds	r1, r3, #1
 800865e:	61f9      	str	r1, [r7, #28]
 8008660:	4413      	add	r3, r2
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8008666:	7dfb      	ldrb	r3, [r7, #23]
 8008668:	2b20      	cmp	r3, #32
 800866a:	d041      	beq.n	80086f0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800866c:	7dfb      	ldrb	r3, [r7, #23]
 800866e:	2b05      	cmp	r3, #5
 8008670:	d101      	bne.n	8008676 <get_fileinfo+0xc6>
 8008672:	23e5      	movs	r3, #229	@ 0xe5
 8008674:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	2b09      	cmp	r3, #9
 800867a:	d10f      	bne.n	800869c <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 800867c:	89bb      	ldrh	r3, [r7, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d105      	bne.n	800868e <get_fileinfo+0xde>
 8008682:	683a      	ldr	r2, [r7, #0]
 8008684:	69bb      	ldr	r3, [r7, #24]
 8008686:	4413      	add	r3, r2
 8008688:	3316      	adds	r3, #22
 800868a:	222e      	movs	r2, #46	@ 0x2e
 800868c:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800868e:	69bb      	ldr	r3, [r7, #24]
 8008690:	1c5a      	adds	r2, r3, #1
 8008692:	61ba      	str	r2, [r7, #24]
 8008694:	683a      	ldr	r2, [r7, #0]
 8008696:	4413      	add	r3, r2
 8008698:	222e      	movs	r2, #46	@ 0x2e
 800869a:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800869c:	683a      	ldr	r2, [r7, #0]
 800869e:	69bb      	ldr	r3, [r7, #24]
 80086a0:	4413      	add	r3, r2
 80086a2:	3309      	adds	r3, #9
 80086a4:	7dfa      	ldrb	r2, [r7, #23]
 80086a6:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80086a8:	89bb      	ldrh	r3, [r7, #12]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d11c      	bne.n	80086e8 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80086ae:	7dfb      	ldrb	r3, [r7, #23]
 80086b0:	2b40      	cmp	r3, #64	@ 0x40
 80086b2:	d913      	bls.n	80086dc <get_fileinfo+0x12c>
 80086b4:	7dfb      	ldrb	r3, [r7, #23]
 80086b6:	2b5a      	cmp	r3, #90	@ 0x5a
 80086b8:	d810      	bhi.n	80086dc <get_fileinfo+0x12c>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	330c      	adds	r3, #12
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	461a      	mov	r2, r3
 80086c4:	69fb      	ldr	r3, [r7, #28]
 80086c6:	2b08      	cmp	r3, #8
 80086c8:	d901      	bls.n	80086ce <get_fileinfo+0x11e>
 80086ca:	2310      	movs	r3, #16
 80086cc:	e000      	b.n	80086d0 <get_fileinfo+0x120>
 80086ce:	2308      	movs	r3, #8
 80086d0:	4013      	ands	r3, r2
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d002      	beq.n	80086dc <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 80086d6:	7dfb      	ldrb	r3, [r7, #23]
 80086d8:	3320      	adds	r3, #32
 80086da:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80086dc:	683a      	ldr	r2, [r7, #0]
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	4413      	add	r3, r2
 80086e2:	3316      	adds	r3, #22
 80086e4:	7dfa      	ldrb	r2, [r7, #23]
 80086e6:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	3301      	adds	r3, #1
 80086ec:	61bb      	str	r3, [r7, #24]
 80086ee:	e000      	b.n	80086f2 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 80086f0:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 80086f2:	69fb      	ldr	r3, [r7, #28]
 80086f4:	2b0a      	cmp	r3, #10
 80086f6:	d9ae      	bls.n	8008656 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80086f8:	89bb      	ldrh	r3, [r7, #12]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10d      	bne.n	800871a <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	69bb      	ldr	r3, [r7, #24]
 8008702:	4413      	add	r3, r2
 8008704:	3316      	adds	r3, #22
 8008706:	2200      	movs	r2, #0
 8008708:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6a1b      	ldr	r3, [r3, #32]
 800870e:	330c      	adds	r3, #12
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d101      	bne.n	800871a <get_fileinfo+0x16a>
 8008716:	2300      	movs	r3, #0
 8008718:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	4413      	add	r3, r2
 8008720:	3309      	adds	r3, #9
 8008722:	2200      	movs	r2, #0
 8008724:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a1b      	ldr	r3, [r3, #32]
 800872a:	7ada      	ldrb	r2, [r3, #11]
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	6a1b      	ldr	r3, [r3, #32]
 8008734:	331c      	adds	r3, #28
 8008736:	4618      	mov	r0, r3
 8008738:	f7fe fb6c 	bl	8006e14 <ld_dword>
 800873c:	4602      	mov	r2, r0
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	3316      	adds	r3, #22
 8008748:	4618      	mov	r0, r3
 800874a:	f7fe fb63 	bl	8006e14 <ld_dword>
 800874e:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	b29a      	uxth	r2, r3
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	80da      	strh	r2, [r3, #6]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	0c1b      	lsrs	r3, r3, #16
 800875c:	b29a      	uxth	r2, r3
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	809a      	strh	r2, [r3, #4]
 8008762:	e000      	b.n	8008766 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8008764:	bf00      	nop
}
 8008766:	3720      	adds	r7, #32
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b08a      	sub	sp, #40	@ 0x28
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	613b      	str	r3, [r7, #16]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	60fb      	str	r3, [r7, #12]
 8008784:	2300      	movs	r3, #0
 8008786:	617b      	str	r3, [r7, #20]
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	1c5a      	adds	r2, r3, #1
 8008790:	61ba      	str	r2, [r7, #24]
 8008792:	693a      	ldr	r2, [r7, #16]
 8008794:	4413      	add	r3, r2
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800879a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800879c:	2b1f      	cmp	r3, #31
 800879e:	d940      	bls.n	8008822 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80087a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80087a2:	2b2f      	cmp	r3, #47	@ 0x2f
 80087a4:	d006      	beq.n	80087b4 <create_name+0x48>
 80087a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80087a8:	2b5c      	cmp	r3, #92	@ 0x5c
 80087aa:	d110      	bne.n	80087ce <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80087ac:	e002      	b.n	80087b4 <create_name+0x48>
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	3301      	adds	r3, #1
 80087b2:	61bb      	str	r3, [r7, #24]
 80087b4:	693a      	ldr	r2, [r7, #16]
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	4413      	add	r3, r2
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	2b2f      	cmp	r3, #47	@ 0x2f
 80087be:	d0f6      	beq.n	80087ae <create_name+0x42>
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	4413      	add	r3, r2
 80087c6:	781b      	ldrb	r3, [r3, #0]
 80087c8:	2b5c      	cmp	r3, #92	@ 0x5c
 80087ca:	d0f0      	beq.n	80087ae <create_name+0x42>
			break;
 80087cc:	e02a      	b.n	8008824 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	2bfe      	cmp	r3, #254	@ 0xfe
 80087d2:	d901      	bls.n	80087d8 <create_name+0x6c>
 80087d4:	2306      	movs	r3, #6
 80087d6:	e17d      	b.n	8008ad4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80087d8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80087de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80087e0:	2101      	movs	r1, #1
 80087e2:	4618      	mov	r0, r3
 80087e4:	f001 fad8 	bl	8009d98 <ff_convert>
 80087e8:	4603      	mov	r3, r0
 80087ea:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80087ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d101      	bne.n	80087f6 <create_name+0x8a>
 80087f2:	2306      	movs	r3, #6
 80087f4:	e16e      	b.n	8008ad4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80087f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80087f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80087fa:	d809      	bhi.n	8008810 <create_name+0xa4>
 80087fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80087fe:	4619      	mov	r1, r3
 8008800:	488d      	ldr	r0, [pc, #564]	@ (8008a38 <create_name+0x2cc>)
 8008802:	f7fe fbd4 	bl	8006fae <chk_chr>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <create_name+0xa4>
 800880c:	2306      	movs	r3, #6
 800880e:	e161      	b.n	8008ad4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	1c5a      	adds	r2, r3, #1
 8008814:	617a      	str	r2, [r7, #20]
 8008816:	005b      	lsls	r3, r3, #1
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	4413      	add	r3, r2
 800881c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800881e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008820:	e7b4      	b.n	800878c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008822:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008824:	693a      	ldr	r2, [r7, #16]
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	441a      	add	r2, r3
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800882e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008830:	2b1f      	cmp	r3, #31
 8008832:	d801      	bhi.n	8008838 <create_name+0xcc>
 8008834:	2304      	movs	r3, #4
 8008836:	e000      	b.n	800883a <create_name+0xce>
 8008838:	2300      	movs	r3, #0
 800883a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800883e:	e011      	b.n	8008864 <create_name+0xf8>
		w = lfn[di - 1];
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008846:	3b01      	subs	r3, #1
 8008848:	005b      	lsls	r3, r3, #1
 800884a:	68fa      	ldr	r2, [r7, #12]
 800884c:	4413      	add	r3, r2
 800884e:	881b      	ldrh	r3, [r3, #0]
 8008850:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8008852:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008854:	2b20      	cmp	r3, #32
 8008856:	d002      	beq.n	800885e <create_name+0xf2>
 8008858:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800885a:	2b2e      	cmp	r3, #46	@ 0x2e
 800885c:	d106      	bne.n	800886c <create_name+0x100>
		di--;
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	3b01      	subs	r3, #1
 8008862:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1ea      	bne.n	8008840 <create_name+0xd4>
 800886a:	e000      	b.n	800886e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800886c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	005b      	lsls	r3, r3, #1
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	4413      	add	r3, r2
 8008876:	2200      	movs	r2, #0
 8008878:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <create_name+0x118>
 8008880:	2306      	movs	r3, #6
 8008882:	e127      	b.n	8008ad4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	3324      	adds	r3, #36	@ 0x24
 8008888:	220b      	movs	r2, #11
 800888a:	2120      	movs	r1, #32
 800888c:	4618      	mov	r0, r3
 800888e:	f7fe fb4c 	bl	8006f2a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008892:	2300      	movs	r3, #0
 8008894:	61bb      	str	r3, [r7, #24]
 8008896:	e002      	b.n	800889e <create_name+0x132>
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	3301      	adds	r3, #1
 800889c:	61bb      	str	r3, [r7, #24]
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	005b      	lsls	r3, r3, #1
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	4413      	add	r3, r2
 80088a6:	881b      	ldrh	r3, [r3, #0]
 80088a8:	2b20      	cmp	r3, #32
 80088aa:	d0f5      	beq.n	8008898 <create_name+0x12c>
 80088ac:	69bb      	ldr	r3, [r7, #24]
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	4413      	add	r3, r2
 80088b4:	881b      	ldrh	r3, [r3, #0]
 80088b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80088b8:	d0ee      	beq.n	8008898 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80088ba:	69bb      	ldr	r3, [r7, #24]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d009      	beq.n	80088d4 <create_name+0x168>
 80088c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088c4:	f043 0303 	orr.w	r3, r3, #3
 80088c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80088cc:	e002      	b.n	80088d4 <create_name+0x168>
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	617b      	str	r3, [r7, #20]
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d009      	beq.n	80088ee <create_name+0x182>
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80088e0:	3b01      	subs	r3, #1
 80088e2:	005b      	lsls	r3, r3, #1
 80088e4:	68fa      	ldr	r2, [r7, #12]
 80088e6:	4413      	add	r3, r2
 80088e8:	881b      	ldrh	r3, [r3, #0]
 80088ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80088ec:	d1ef      	bne.n	80088ce <create_name+0x162>

	i = b = 0; ni = 8;
 80088ee:	2300      	movs	r3, #0
 80088f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80088f4:	2300      	movs	r3, #0
 80088f6:	623b      	str	r3, [r7, #32]
 80088f8:	2308      	movs	r3, #8
 80088fa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	1c5a      	adds	r2, r3, #1
 8008900:	61ba      	str	r2, [r7, #24]
 8008902:	005b      	lsls	r3, r3, #1
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	4413      	add	r3, r2
 8008908:	881b      	ldrh	r3, [r3, #0]
 800890a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800890c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800890e:	2b00      	cmp	r3, #0
 8008910:	f000 8090 	beq.w	8008a34 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008914:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008916:	2b20      	cmp	r3, #32
 8008918:	d006      	beq.n	8008928 <create_name+0x1bc>
 800891a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800891c:	2b2e      	cmp	r3, #46	@ 0x2e
 800891e:	d10a      	bne.n	8008936 <create_name+0x1ca>
 8008920:	69ba      	ldr	r2, [r7, #24]
 8008922:	697b      	ldr	r3, [r7, #20]
 8008924:	429a      	cmp	r2, r3
 8008926:	d006      	beq.n	8008936 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008928:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800892c:	f043 0303 	orr.w	r3, r3, #3
 8008930:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008934:	e07d      	b.n	8008a32 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008936:	6a3a      	ldr	r2, [r7, #32]
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	429a      	cmp	r2, r3
 800893c:	d203      	bcs.n	8008946 <create_name+0x1da>
 800893e:	69ba      	ldr	r2, [r7, #24]
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	429a      	cmp	r2, r3
 8008944:	d123      	bne.n	800898e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008946:	69fb      	ldr	r3, [r7, #28]
 8008948:	2b0b      	cmp	r3, #11
 800894a:	d106      	bne.n	800895a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800894c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008950:	f043 0303 	orr.w	r3, r3, #3
 8008954:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008958:	e075      	b.n	8008a46 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800895a:	69ba      	ldr	r2, [r7, #24]
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	429a      	cmp	r2, r3
 8008960:	d005      	beq.n	800896e <create_name+0x202>
 8008962:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008966:	f043 0303 	orr.w	r3, r3, #3
 800896a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800896e:	69ba      	ldr	r2, [r7, #24]
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	429a      	cmp	r2, r3
 8008974:	d866      	bhi.n	8008a44 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	61bb      	str	r3, [r7, #24]
 800897a:	2308      	movs	r3, #8
 800897c:	623b      	str	r3, [r7, #32]
 800897e:	230b      	movs	r3, #11
 8008980:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008982:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800898c:	e051      	b.n	8008a32 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800898e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008990:	2b7f      	cmp	r3, #127	@ 0x7f
 8008992:	d914      	bls.n	80089be <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008994:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008996:	2100      	movs	r1, #0
 8008998:	4618      	mov	r0, r3
 800899a:	f001 f9fd 	bl	8009d98 <ff_convert>
 800899e:	4603      	mov	r3, r0
 80089a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80089a2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d004      	beq.n	80089b2 <create_name+0x246>
 80089a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089aa:	3b80      	subs	r3, #128	@ 0x80
 80089ac:	4a23      	ldr	r2, [pc, #140]	@ (8008a3c <create_name+0x2d0>)
 80089ae:	5cd3      	ldrb	r3, [r2, r3]
 80089b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80089b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089b6:	f043 0302 	orr.w	r3, r3, #2
 80089ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80089be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d007      	beq.n	80089d4 <create_name+0x268>
 80089c4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089c6:	4619      	mov	r1, r3
 80089c8:	481d      	ldr	r0, [pc, #116]	@ (8008a40 <create_name+0x2d4>)
 80089ca:	f7fe faf0 	bl	8006fae <chk_chr>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d008      	beq.n	80089e6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80089d4:	235f      	movs	r3, #95	@ 0x5f
 80089d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80089d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089dc:	f043 0303 	orr.w	r3, r3, #3
 80089e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80089e4:	e01b      	b.n	8008a1e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80089e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089e8:	2b40      	cmp	r3, #64	@ 0x40
 80089ea:	d909      	bls.n	8008a00 <create_name+0x294>
 80089ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089ee:	2b5a      	cmp	r3, #90	@ 0x5a
 80089f0:	d806      	bhi.n	8008a00 <create_name+0x294>
					b |= 2;
 80089f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80089f6:	f043 0302 	orr.w	r3, r3, #2
 80089fa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80089fe:	e00e      	b.n	8008a1e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008a00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a02:	2b60      	cmp	r3, #96	@ 0x60
 8008a04:	d90b      	bls.n	8008a1e <create_name+0x2b2>
 8008a06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a08:	2b7a      	cmp	r3, #122	@ 0x7a
 8008a0a:	d808      	bhi.n	8008a1e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008a0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a10:	f043 0301 	orr.w	r3, r3, #1
 8008a14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008a18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a1a:	3b20      	subs	r3, #32
 8008a1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008a1e:	6a3b      	ldr	r3, [r7, #32]
 8008a20:	1c5a      	adds	r2, r3, #1
 8008a22:	623a      	str	r2, [r7, #32]
 8008a24:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008a26:	b2d1      	uxtb	r1, r2
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	460a      	mov	r2, r1
 8008a2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008a32:	e763      	b.n	80088fc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008a34:	bf00      	nop
 8008a36:	e006      	b.n	8008a46 <create_name+0x2da>
 8008a38:	0800dbe4 	.word	0x0800dbe4
 8008a3c:	0800fd14 	.word	0x0800fd14
 8008a40:	0800dbf0 	.word	0x0800dbf0
			if (si > di) break;			/* No extension */
 8008a44:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008a4c:	2be5      	cmp	r3, #229	@ 0xe5
 8008a4e:	d103      	bne.n	8008a58 <create_name+0x2ec>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2205      	movs	r2, #5
 8008a54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	2b08      	cmp	r3, #8
 8008a5c:	d104      	bne.n	8008a68 <create_name+0x2fc>
 8008a5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008a68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a6c:	f003 030c 	and.w	r3, r3, #12
 8008a70:	2b0c      	cmp	r3, #12
 8008a72:	d005      	beq.n	8008a80 <create_name+0x314>
 8008a74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a78:	f003 0303 	and.w	r3, r3, #3
 8008a7c:	2b03      	cmp	r3, #3
 8008a7e:	d105      	bne.n	8008a8c <create_name+0x320>
 8008a80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a84:	f043 0302 	orr.w	r3, r3, #2
 8008a88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008a8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a90:	f003 0302 	and.w	r3, r3, #2
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d117      	bne.n	8008ac8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008a98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a9c:	f003 0303 	and.w	r3, r3, #3
 8008aa0:	2b01      	cmp	r3, #1
 8008aa2:	d105      	bne.n	8008ab0 <create_name+0x344>
 8008aa4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008aa8:	f043 0310 	orr.w	r3, r3, #16
 8008aac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008ab0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008ab4:	f003 030c 	and.w	r3, r3, #12
 8008ab8:	2b04      	cmp	r3, #4
 8008aba:	d105      	bne.n	8008ac8 <create_name+0x35c>
 8008abc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ac0:	f043 0308 	orr.w	r3, r3, #8
 8008ac4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008ace:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8008ad2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3728      	adds	r7, #40	@ 0x28
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008af0:	e002      	b.n	8008af8 <follow_path+0x1c>
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	3301      	adds	r3, #1
 8008af6:	603b      	str	r3, [r7, #0]
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	2b2f      	cmp	r3, #47	@ 0x2f
 8008afe:	d0f8      	beq.n	8008af2 <follow_path+0x16>
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	2b5c      	cmp	r3, #92	@ 0x5c
 8008b06:	d0f4      	beq.n	8008af2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	2b1f      	cmp	r3, #31
 8008b14:	d80a      	bhi.n	8008b2c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2280      	movs	r2, #128	@ 0x80
 8008b1a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008b1e:	2100      	movs	r1, #0
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f7ff f820 	bl	8007b66 <dir_sdi>
 8008b26:	4603      	mov	r3, r0
 8008b28:	75fb      	strb	r3, [r7, #23]
 8008b2a:	e048      	b.n	8008bbe <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008b2c:	463b      	mov	r3, r7
 8008b2e:	4619      	mov	r1, r3
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f7ff fe1b 	bl	800876c <create_name>
 8008b36:	4603      	mov	r3, r0
 8008b38:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008b3a:	7dfb      	ldrb	r3, [r7, #23]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d139      	bne.n	8008bb4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008b40:	6878      	ldr	r0, [r7, #4]
 8008b42:	f7ff fb7c 	bl	800823e <dir_find>
 8008b46:	4603      	mov	r3, r0
 8008b48:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008b50:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008b52:	7dfb      	ldrb	r3, [r7, #23]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00a      	beq.n	8008b6e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008b58:	7dfb      	ldrb	r3, [r7, #23]
 8008b5a:	2b04      	cmp	r3, #4
 8008b5c:	d12c      	bne.n	8008bb8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008b5e:	7afb      	ldrb	r3, [r7, #11]
 8008b60:	f003 0304 	and.w	r3, r3, #4
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d127      	bne.n	8008bb8 <follow_path+0xdc>
 8008b68:	2305      	movs	r3, #5
 8008b6a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008b6c:	e024      	b.n	8008bb8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008b6e:	7afb      	ldrb	r3, [r7, #11]
 8008b70:	f003 0304 	and.w	r3, r3, #4
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d121      	bne.n	8008bbc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	799b      	ldrb	r3, [r3, #6]
 8008b7c:	f003 0310 	and.w	r3, r3, #16
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d102      	bne.n	8008b8a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008b84:	2305      	movs	r3, #5
 8008b86:	75fb      	strb	r3, [r7, #23]
 8008b88:	e019      	b.n	8008bbe <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	695b      	ldr	r3, [r3, #20]
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	8992      	ldrh	r2, [r2, #12]
 8008b98:	fbb3 f0f2 	udiv	r0, r3, r2
 8008b9c:	fb00 f202 	mul.w	r2, r0, r2
 8008ba0:	1a9b      	subs	r3, r3, r2
 8008ba2:	440b      	add	r3, r1
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	68f8      	ldr	r0, [r7, #12]
 8008ba8:	f7ff f983 	bl	8007eb2 <ld_clust>
 8008bac:	4602      	mov	r2, r0
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008bb2:	e7bb      	b.n	8008b2c <follow_path+0x50>
			if (res != FR_OK) break;
 8008bb4:	bf00      	nop
 8008bb6:	e002      	b.n	8008bbe <follow_path+0xe2>
				break;
 8008bb8:	bf00      	nop
 8008bba:	e000      	b.n	8008bbe <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008bbc:	bf00      	nop
			}
		}
	}

	return res;
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3718      	adds	r7, #24
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b087      	sub	sp, #28
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8008bd4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d031      	beq.n	8008c42 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	617b      	str	r3, [r7, #20]
 8008be4:	e002      	b.n	8008bec <get_ldnumber+0x24>
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	3301      	adds	r3, #1
 8008bea:	617b      	str	r3, [r7, #20]
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	2b1f      	cmp	r3, #31
 8008bf2:	d903      	bls.n	8008bfc <get_ldnumber+0x34>
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	2b3a      	cmp	r3, #58	@ 0x3a
 8008bfa:	d1f4      	bne.n	8008be6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	2b3a      	cmp	r3, #58	@ 0x3a
 8008c02:	d11c      	bne.n	8008c3e <get_ldnumber+0x76>
			tp = *path;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	1c5a      	adds	r2, r3, #1
 8008c0e:	60fa      	str	r2, [r7, #12]
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	3b30      	subs	r3, #48	@ 0x30
 8008c14:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	2b09      	cmp	r3, #9
 8008c1a:	d80e      	bhi.n	8008c3a <get_ldnumber+0x72>
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d10a      	bne.n	8008c3a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d107      	bne.n	8008c3a <get_ldnumber+0x72>
					vol = (int)i;
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	3301      	adds	r3, #1
 8008c32:	617b      	str	r3, [r7, #20]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	697a      	ldr	r2, [r7, #20]
 8008c38:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	e002      	b.n	8008c44 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008c3e:	2300      	movs	r3, #0
 8008c40:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008c42:	693b      	ldr	r3, [r7, #16]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	371c      	adds	r7, #28
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr

08008c50 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	70da      	strb	r2, [r3, #3]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f04f 32ff 	mov.w	r2, #4294967295
 8008c66:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7fe fb9c 	bl	80073a8 <move_window>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d001      	beq.n	8008c7a <check_fs+0x2a>
 8008c76:	2304      	movs	r3, #4
 8008c78:	e038      	b.n	8008cec <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	333c      	adds	r3, #60	@ 0x3c
 8008c7e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fe f8ae 	bl	8006de4 <ld_word>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008c90:	429a      	cmp	r2, r3
 8008c92:	d001      	beq.n	8008c98 <check_fs+0x48>
 8008c94:	2303      	movs	r3, #3
 8008c96:	e029      	b.n	8008cec <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c9e:	2be9      	cmp	r3, #233	@ 0xe9
 8008ca0:	d009      	beq.n	8008cb6 <check_fs+0x66>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ca8:	2beb      	cmp	r3, #235	@ 0xeb
 8008caa:	d11e      	bne.n	8008cea <check_fs+0x9a>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008cb2:	2b90      	cmp	r3, #144	@ 0x90
 8008cb4:	d119      	bne.n	8008cea <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	333c      	adds	r3, #60	@ 0x3c
 8008cba:	3336      	adds	r3, #54	@ 0x36
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fe f8a9 	bl	8006e14 <ld_dword>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8008cf4 <check_fs+0xa4>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d101      	bne.n	8008cd2 <check_fs+0x82>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	e00c      	b.n	8008cec <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	333c      	adds	r3, #60	@ 0x3c
 8008cd6:	3352      	adds	r3, #82	@ 0x52
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7fe f89b 	bl	8006e14 <ld_dword>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	4a05      	ldr	r2, [pc, #20]	@ (8008cf8 <check_fs+0xa8>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d101      	bne.n	8008cea <check_fs+0x9a>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	e000      	b.n	8008cec <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008cea:	2302      	movs	r3, #2
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	3708      	adds	r7, #8
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	00544146 	.word	0x00544146
 8008cf8:	33544146 	.word	0x33544146

08008cfc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b096      	sub	sp, #88	@ 0x58
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	4613      	mov	r3, r2
 8008d08:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008d10:	68f8      	ldr	r0, [r7, #12]
 8008d12:	f7ff ff59 	bl	8008bc8 <get_ldnumber>
 8008d16:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008d18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	da01      	bge.n	8008d22 <find_volume+0x26>
 8008d1e:	230b      	movs	r3, #11
 8008d20:	e26a      	b.n	80091f8 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008d22:	4aa3      	ldr	r2, [pc, #652]	@ (8008fb0 <find_volume+0x2b4>)
 8008d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d101      	bne.n	8008d36 <find_volume+0x3a>
 8008d32:	230c      	movs	r3, #12
 8008d34:	e260      	b.n	80091f8 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 8008d36:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008d38:	f7fe f954 	bl	8006fe4 <lock_fs>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d101      	bne.n	8008d46 <find_volume+0x4a>
 8008d42:	230f      	movs	r3, #15
 8008d44:	e258      	b.n	80091f8 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d4a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008d4c:	79fb      	ldrb	r3, [r7, #7]
 8008d4e:	f023 0301 	bic.w	r3, r3, #1
 8008d52:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d01a      	beq.n	8008d92 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8008d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d5e:	785b      	ldrb	r3, [r3, #1]
 8008d60:	4618      	mov	r0, r3
 8008d62:	f7fd ff9f 	bl	8006ca4 <disk_status>
 8008d66:	4603      	mov	r3, r0
 8008d68:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008d6c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008d70:	f003 0301 	and.w	r3, r3, #1
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10c      	bne.n	8008d92 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8008d78:	79fb      	ldrb	r3, [r7, #7]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d007      	beq.n	8008d8e <find_volume+0x92>
 8008d7e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008d82:	f003 0304 	and.w	r3, r3, #4
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8008d8a:	230a      	movs	r3, #10
 8008d8c:	e234      	b.n	80091f8 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 8008d8e:	2300      	movs	r3, #0
 8008d90:	e232      	b.n	80091f8 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d94:	2200      	movs	r2, #0
 8008d96:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8008d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d9e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008da2:	785b      	ldrb	r3, [r3, #1]
 8008da4:	4618      	mov	r0, r3
 8008da6:	f7fd ff97 	bl	8006cd8 <disk_initialize>
 8008daa:	4603      	mov	r3, r0
 8008dac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008db0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008db4:	f003 0301 	and.w	r3, r3, #1
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d001      	beq.n	8008dc0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008dbc:	2303      	movs	r3, #3
 8008dbe:	e21b      	b.n	80091f8 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008dc0:	79fb      	ldrb	r3, [r7, #7]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d007      	beq.n	8008dd6 <find_volume+0xda>
 8008dc6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008dca:	f003 0304 	and.w	r3, r3, #4
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8008dd2:	230a      	movs	r3, #10
 8008dd4:	e210      	b.n	80091f8 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd8:	7858      	ldrb	r0, [r3, #1]
 8008dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ddc:	330c      	adds	r3, #12
 8008dde:	461a      	mov	r2, r3
 8008de0:	2102      	movs	r1, #2
 8008de2:	f7fd ffe1 	bl	8006da8 <disk_ioctl>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d001      	beq.n	8008df0 <find_volume+0xf4>
 8008dec:	2301      	movs	r3, #1
 8008dee:	e203      	b.n	80091f8 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008df0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df2:	899b      	ldrh	r3, [r3, #12]
 8008df4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008df8:	d80d      	bhi.n	8008e16 <find_volume+0x11a>
 8008dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dfc:	899b      	ldrh	r3, [r3, #12]
 8008dfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e02:	d308      	bcc.n	8008e16 <find_volume+0x11a>
 8008e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e06:	899b      	ldrh	r3, [r3, #12]
 8008e08:	461a      	mov	r2, r3
 8008e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e0c:	899b      	ldrh	r3, [r3, #12]
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	4013      	ands	r3, r2
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <find_volume+0x11e>
 8008e16:	2301      	movs	r3, #1
 8008e18:	e1ee      	b.n	80091f8 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008e1e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008e20:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008e22:	f7ff ff15 	bl	8008c50 <check_fs>
 8008e26:	4603      	mov	r3, r0
 8008e28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008e2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d149      	bne.n	8008ec8 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008e34:	2300      	movs	r3, #0
 8008e36:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e38:	e01e      	b.n	8008e78 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e3c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8008e40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e42:	011b      	lsls	r3, r3, #4
 8008e44:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8008e48:	4413      	add	r3, r2
 8008e4a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e4e:	3304      	adds	r3, #4
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d006      	beq.n	8008e64 <find_volume+0x168>
 8008e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e58:	3308      	adds	r3, #8
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fd ffda 	bl	8006e14 <ld_dword>
 8008e60:	4602      	mov	r2, r0
 8008e62:	e000      	b.n	8008e66 <find_volume+0x16a>
 8008e64:	2200      	movs	r2, #0
 8008e66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	3358      	adds	r3, #88	@ 0x58
 8008e6c:	443b      	add	r3, r7
 8008e6e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e74:	3301      	adds	r3, #1
 8008e76:	643b      	str	r3, [r7, #64]	@ 0x40
 8008e78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d9dd      	bls.n	8008e3a <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8008e7e:	2300      	movs	r3, #0
 8008e80:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8008e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d002      	beq.n	8008e8e <find_volume+0x192>
 8008e88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008e90:	009b      	lsls	r3, r3, #2
 8008e92:	3358      	adds	r3, #88	@ 0x58
 8008e94:	443b      	add	r3, r7
 8008e96:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008e9a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008e9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d005      	beq.n	8008eae <find_volume+0x1b2>
 8008ea2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008ea4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008ea6:	f7ff fed3 	bl	8008c50 <check_fs>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	e000      	b.n	8008eb0 <find_volume+0x1b4>
 8008eae:	2303      	movs	r3, #3
 8008eb0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008eb4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d905      	bls.n	8008ec8 <find_volume+0x1cc>
 8008ebc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ec4:	2b03      	cmp	r3, #3
 8008ec6:	d9e2      	bls.n	8008e8e <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008ec8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008ecc:	2b04      	cmp	r3, #4
 8008ece:	d101      	bne.n	8008ed4 <find_volume+0x1d8>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e191      	b.n	80091f8 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008ed4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d901      	bls.n	8008ee0 <find_volume+0x1e4>
 8008edc:	230d      	movs	r3, #13
 8008ede:	e18b      	b.n	80091f8 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee2:	333c      	adds	r3, #60	@ 0x3c
 8008ee4:	330b      	adds	r3, #11
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7fd ff7c 	bl	8006de4 <ld_word>
 8008eec:	4603      	mov	r3, r0
 8008eee:	461a      	mov	r2, r3
 8008ef0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ef2:	899b      	ldrh	r3, [r3, #12]
 8008ef4:	429a      	cmp	r2, r3
 8008ef6:	d001      	beq.n	8008efc <find_volume+0x200>
 8008ef8:	230d      	movs	r3, #13
 8008efa:	e17d      	b.n	80091f8 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008efe:	333c      	adds	r3, #60	@ 0x3c
 8008f00:	3316      	adds	r3, #22
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7fd ff6e 	bl	8006de4 <ld_word>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008f0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d106      	bne.n	8008f20 <find_volume+0x224>
 8008f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f14:	333c      	adds	r3, #60	@ 0x3c
 8008f16:	3324      	adds	r3, #36	@ 0x24
 8008f18:	4618      	mov	r0, r3
 8008f1a:	f7fd ff7b 	bl	8006e14 <ld_dword>
 8008f1e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f22:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008f24:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f28:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8008f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f2e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f32:	789b      	ldrb	r3, [r3, #2]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d005      	beq.n	8008f44 <find_volume+0x248>
 8008f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f3a:	789b      	ldrb	r3, [r3, #2]
 8008f3c:	2b02      	cmp	r3, #2
 8008f3e:	d001      	beq.n	8008f44 <find_volume+0x248>
 8008f40:	230d      	movs	r3, #13
 8008f42:	e159      	b.n	80091f8 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f46:	789b      	ldrb	r3, [r3, #2]
 8008f48:	461a      	mov	r2, r3
 8008f4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f4c:	fb02 f303 	mul.w	r3, r2, r3
 8008f50:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f54:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8008f58:	461a      	mov	r2, r3
 8008f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f5c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f60:	895b      	ldrh	r3, [r3, #10]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d008      	beq.n	8008f78 <find_volume+0x27c>
 8008f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f68:	895b      	ldrh	r3, [r3, #10]
 8008f6a:	461a      	mov	r2, r3
 8008f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f6e:	895b      	ldrh	r3, [r3, #10]
 8008f70:	3b01      	subs	r3, #1
 8008f72:	4013      	ands	r3, r2
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d001      	beq.n	8008f7c <find_volume+0x280>
 8008f78:	230d      	movs	r3, #13
 8008f7a:	e13d      	b.n	80091f8 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f7e:	333c      	adds	r3, #60	@ 0x3c
 8008f80:	3311      	adds	r3, #17
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7fd ff2e 	bl	8006de4 <ld_word>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f8e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008f90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f92:	891b      	ldrh	r3, [r3, #8]
 8008f94:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f96:	8992      	ldrh	r2, [r2, #12]
 8008f98:	0952      	lsrs	r2, r2, #5
 8008f9a:	b292      	uxth	r2, r2
 8008f9c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008fa0:	fb01 f202 	mul.w	r2, r1, r2
 8008fa4:	1a9b      	subs	r3, r3, r2
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d003      	beq.n	8008fb4 <find_volume+0x2b8>
 8008fac:	230d      	movs	r3, #13
 8008fae:	e123      	b.n	80091f8 <find_volume+0x4fc>
 8008fb0:	20002ad4 	.word	0x20002ad4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb6:	333c      	adds	r3, #60	@ 0x3c
 8008fb8:	3313      	adds	r3, #19
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fd ff12 	bl	8006de4 <ld_word>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008fc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d106      	bne.n	8008fd8 <find_volume+0x2dc>
 8008fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fcc:	333c      	adds	r3, #60	@ 0x3c
 8008fce:	3320      	adds	r3, #32
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7fd ff1f 	bl	8006e14 <ld_dword>
 8008fd6:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fda:	333c      	adds	r3, #60	@ 0x3c
 8008fdc:	330e      	adds	r3, #14
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fd ff00 	bl	8006de4 <ld_word>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008fe8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <find_volume+0x2f6>
 8008fee:	230d      	movs	r3, #13
 8008ff0:	e102      	b.n	80091f8 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008ff2:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008ff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ff6:	4413      	add	r3, r2
 8008ff8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ffa:	8911      	ldrh	r1, [r2, #8]
 8008ffc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ffe:	8992      	ldrh	r2, [r2, #12]
 8009000:	0952      	lsrs	r2, r2, #5
 8009002:	b292      	uxth	r2, r2
 8009004:	fbb1 f2f2 	udiv	r2, r1, r2
 8009008:	b292      	uxth	r2, r2
 800900a:	4413      	add	r3, r2
 800900c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800900e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009012:	429a      	cmp	r2, r3
 8009014:	d201      	bcs.n	800901a <find_volume+0x31e>
 8009016:	230d      	movs	r3, #13
 8009018:	e0ee      	b.n	80091f8 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800901a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800901c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800901e:	1ad3      	subs	r3, r2, r3
 8009020:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009022:	8952      	ldrh	r2, [r2, #10]
 8009024:	fbb3 f3f2 	udiv	r3, r3, r2
 8009028:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800902a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902c:	2b00      	cmp	r3, #0
 800902e:	d101      	bne.n	8009034 <find_volume+0x338>
 8009030:	230d      	movs	r3, #13
 8009032:	e0e1      	b.n	80091f8 <find_volume+0x4fc>
		fmt = FS_FAT32;
 8009034:	2303      	movs	r3, #3
 8009036:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800903a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800903c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8009040:	4293      	cmp	r3, r2
 8009042:	d802      	bhi.n	800904a <find_volume+0x34e>
 8009044:	2302      	movs	r3, #2
 8009046:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800904a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8009050:	4293      	cmp	r3, r2
 8009052:	d802      	bhi.n	800905a <find_volume+0x35e>
 8009054:	2301      	movs	r3, #1
 8009056:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800905a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800905c:	1c9a      	adds	r2, r3, #2
 800905e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009060:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8009062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009064:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009066:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009068:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800906a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800906c:	441a      	add	r2, r3
 800906e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009070:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8009072:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009076:	441a      	add	r2, r3
 8009078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800907a:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 800907c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009080:	2b03      	cmp	r3, #3
 8009082:	d11e      	bne.n	80090c2 <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8009084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009086:	333c      	adds	r3, #60	@ 0x3c
 8009088:	332a      	adds	r3, #42	@ 0x2a
 800908a:	4618      	mov	r0, r3
 800908c:	f7fd feaa 	bl	8006de4 <ld_word>
 8009090:	4603      	mov	r3, r0
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <find_volume+0x39e>
 8009096:	230d      	movs	r3, #13
 8009098:	e0ae      	b.n	80091f8 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800909a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909c:	891b      	ldrh	r3, [r3, #8]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <find_volume+0x3aa>
 80090a2:	230d      	movs	r3, #13
 80090a4:	e0a8      	b.n	80091f8 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80090a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a8:	333c      	adds	r3, #60	@ 0x3c
 80090aa:	332c      	adds	r3, #44	@ 0x2c
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7fd feb1 	bl	8006e14 <ld_dword>
 80090b2:	4602      	mov	r2, r0
 80090b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090b6:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80090b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ba:	6a1b      	ldr	r3, [r3, #32]
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	647b      	str	r3, [r7, #68]	@ 0x44
 80090c0:	e01f      	b.n	8009102 <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80090c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090c4:	891b      	ldrh	r3, [r3, #8]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d101      	bne.n	80090ce <find_volume+0x3d2>
 80090ca:	230d      	movs	r3, #13
 80090cc:	e094      	b.n	80091f8 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80090ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090d4:	441a      	add	r2, r3
 80090d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d8:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80090da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d103      	bne.n	80090ea <find_volume+0x3ee>
 80090e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090e4:	6a1b      	ldr	r3, [r3, #32]
 80090e6:	005b      	lsls	r3, r3, #1
 80090e8:	e00a      	b.n	8009100 <find_volume+0x404>
 80090ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ec:	6a1a      	ldr	r2, [r3, #32]
 80090ee:	4613      	mov	r3, r2
 80090f0:	005b      	lsls	r3, r3, #1
 80090f2:	4413      	add	r3, r2
 80090f4:	085a      	lsrs	r2, r3, #1
 80090f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f8:	6a1b      	ldr	r3, [r3, #32]
 80090fa:	f003 0301 	and.w	r3, r3, #1
 80090fe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8009100:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8009102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009104:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009108:	899b      	ldrh	r3, [r3, #12]
 800910a:	4619      	mov	r1, r3
 800910c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800910e:	440b      	add	r3, r1
 8009110:	3b01      	subs	r3, #1
 8009112:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009114:	8989      	ldrh	r1, [r1, #12]
 8009116:	fbb3 f3f1 	udiv	r3, r3, r1
 800911a:	429a      	cmp	r2, r3
 800911c:	d201      	bcs.n	8009122 <find_volume+0x426>
 800911e:	230d      	movs	r3, #13
 8009120:	e06a      	b.n	80091f8 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8009122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009124:	f04f 32ff 	mov.w	r2, #4294967295
 8009128:	61da      	str	r2, [r3, #28]
 800912a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800912c:	69da      	ldr	r2, [r3, #28]
 800912e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009130:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8009132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009134:	2280      	movs	r2, #128	@ 0x80
 8009136:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8009138:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800913c:	2b03      	cmp	r3, #3
 800913e:	d149      	bne.n	80091d4 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8009140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009142:	333c      	adds	r3, #60	@ 0x3c
 8009144:	3330      	adds	r3, #48	@ 0x30
 8009146:	4618      	mov	r0, r3
 8009148:	f7fd fe4c 	bl	8006de4 <ld_word>
 800914c:	4603      	mov	r3, r0
 800914e:	2b01      	cmp	r3, #1
 8009150:	d140      	bne.n	80091d4 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8009152:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009154:	3301      	adds	r3, #1
 8009156:	4619      	mov	r1, r3
 8009158:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800915a:	f7fe f925 	bl	80073a8 <move_window>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d137      	bne.n	80091d4 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 8009164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009166:	2200      	movs	r2, #0
 8009168:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800916a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800916c:	333c      	adds	r3, #60	@ 0x3c
 800916e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009172:	4618      	mov	r0, r3
 8009174:	f7fd fe36 	bl	8006de4 <ld_word>
 8009178:	4603      	mov	r3, r0
 800917a:	461a      	mov	r2, r3
 800917c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8009180:	429a      	cmp	r2, r3
 8009182:	d127      	bne.n	80091d4 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009184:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009186:	333c      	adds	r3, #60	@ 0x3c
 8009188:	4618      	mov	r0, r3
 800918a:	f7fd fe43 	bl	8006e14 <ld_dword>
 800918e:	4603      	mov	r3, r0
 8009190:	4a1b      	ldr	r2, [pc, #108]	@ (8009200 <find_volume+0x504>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d11e      	bne.n	80091d4 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009198:	333c      	adds	r3, #60	@ 0x3c
 800919a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800919e:	4618      	mov	r0, r3
 80091a0:	f7fd fe38 	bl	8006e14 <ld_dword>
 80091a4:	4603      	mov	r3, r0
 80091a6:	4a17      	ldr	r2, [pc, #92]	@ (8009204 <find_volume+0x508>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d113      	bne.n	80091d4 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80091ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ae:	333c      	adds	r3, #60	@ 0x3c
 80091b0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fd fe2d 	bl	8006e14 <ld_dword>
 80091ba:	4602      	mov	r2, r0
 80091bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091be:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80091c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c2:	333c      	adds	r3, #60	@ 0x3c
 80091c4:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7fd fe23 	bl	8006e14 <ld_dword>
 80091ce:	4602      	mov	r2, r0
 80091d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d2:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80091d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d6:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80091da:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80091dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009208 <find_volume+0x50c>)
 80091de:	881b      	ldrh	r3, [r3, #0]
 80091e0:	3301      	adds	r3, #1
 80091e2:	b29a      	uxth	r2, r3
 80091e4:	4b08      	ldr	r3, [pc, #32]	@ (8009208 <find_volume+0x50c>)
 80091e6:	801a      	strh	r2, [r3, #0]
 80091e8:	4b07      	ldr	r3, [pc, #28]	@ (8009208 <find_volume+0x50c>)
 80091ea:	881a      	ldrh	r2, [r3, #0]
 80091ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ee:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80091f0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80091f2:	f7fe f871 	bl	80072d8 <clear_lock>
#endif
	return FR_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3758      	adds	r7, #88	@ 0x58
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	41615252 	.word	0x41615252
 8009204:	61417272 	.word	0x61417272
 8009208:	20002ad8 	.word	0x20002ad8

0800920c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b084      	sub	sp, #16
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8009216:	2309      	movs	r3, #9
 8009218:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d02e      	beq.n	800927e <validate+0x72>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d02a      	beq.n	800927e <validate+0x72>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d025      	beq.n	800927e <validate+0x72>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	889a      	ldrh	r2, [r3, #4]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	88db      	ldrh	r3, [r3, #6]
 800923c:	429a      	cmp	r2, r3
 800923e:	d11e      	bne.n	800927e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4618      	mov	r0, r3
 8009246:	f7fd fecd 	bl	8006fe4 <lock_fs>
 800924a:	4603      	mov	r3, r0
 800924c:	2b00      	cmp	r3, #0
 800924e:	d014      	beq.n	800927a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	785b      	ldrb	r3, [r3, #1]
 8009256:	4618      	mov	r0, r3
 8009258:	f7fd fd24 	bl	8006ca4 <disk_status>
 800925c:	4603      	mov	r3, r0
 800925e:	f003 0301 	and.w	r3, r3, #1
 8009262:	2b00      	cmp	r3, #0
 8009264:	d102      	bne.n	800926c <validate+0x60>
				res = FR_OK;
 8009266:	2300      	movs	r3, #0
 8009268:	73fb      	strb	r3, [r7, #15]
 800926a:	e008      	b.n	800927e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2100      	movs	r1, #0
 8009272:	4618      	mov	r0, r3
 8009274:	f7fd fecc 	bl	8007010 <unlock_fs>
 8009278:	e001      	b.n	800927e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800927a:	230f      	movs	r3, #15
 800927c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800927e:	7bfb      	ldrb	r3, [r7, #15]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d102      	bne.n	800928a <validate+0x7e>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	e000      	b.n	800928c <validate+0x80>
 800928a:	2300      	movs	r3, #0
 800928c:	683a      	ldr	r2, [r7, #0]
 800928e:	6013      	str	r3, [r2, #0]
	return res;
 8009290:	7bfb      	ldrb	r3, [r7, #15]
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
	...

0800929c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b088      	sub	sp, #32
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	60b9      	str	r1, [r7, #8]
 80092a6:	4613      	mov	r3, r2
 80092a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80092ae:	f107 0310 	add.w	r3, r7, #16
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7ff fc88 	bl	8008bc8 <get_ldnumber>
 80092b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	da01      	bge.n	80092c4 <f_mount+0x28>
 80092c0:	230b      	movs	r3, #11
 80092c2:	e048      	b.n	8009356 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80092c4:	4a26      	ldr	r2, [pc, #152]	@ (8009360 <f_mount+0xc4>)
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d00f      	beq.n	80092f4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80092d4:	69b8      	ldr	r0, [r7, #24]
 80092d6:	f7fd ffff 	bl	80072d8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	695b      	ldr	r3, [r3, #20]
 80092de:	4618      	mov	r0, r3
 80092e0:	f000 fe40 	bl	8009f64 <ff_del_syncobj>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d101      	bne.n	80092ee <f_mount+0x52>
 80092ea:	2302      	movs	r3, #2
 80092ec:	e033      	b.n	8009356 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80092ee:	69bb      	ldr	r3, [r7, #24]
 80092f0:	2200      	movs	r2, #0
 80092f2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00f      	beq.n	800931a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2200      	movs	r2, #0
 80092fe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	b2da      	uxtb	r2, r3
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	3314      	adds	r3, #20
 8009308:	4619      	mov	r1, r3
 800930a:	4610      	mov	r0, r2
 800930c:	f000 fe0a 	bl	8009f24 <ff_cre_syncobj>
 8009310:	4603      	mov	r3, r0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d101      	bne.n	800931a <f_mount+0x7e>
 8009316:	2302      	movs	r3, #2
 8009318:	e01d      	b.n	8009356 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	4910      	ldr	r1, [pc, #64]	@ (8009360 <f_mount+0xc4>)
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d002      	beq.n	8009330 <f_mount+0x94>
 800932a:	79fb      	ldrb	r3, [r7, #7]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d001      	beq.n	8009334 <f_mount+0x98>
 8009330:	2300      	movs	r3, #0
 8009332:	e010      	b.n	8009356 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8009334:	f107 010c 	add.w	r1, r7, #12
 8009338:	f107 0308 	add.w	r3, r7, #8
 800933c:	2200      	movs	r2, #0
 800933e:	4618      	mov	r0, r3
 8009340:	f7ff fcdc 	bl	8008cfc <find_volume>
 8009344:	4603      	mov	r3, r0
 8009346:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	7dfa      	ldrb	r2, [r7, #23]
 800934c:	4611      	mov	r1, r2
 800934e:	4618      	mov	r0, r3
 8009350:	f7fd fe5e 	bl	8007010 <unlock_fs>
 8009354:	7dfb      	ldrb	r3, [r7, #23]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3720      	adds	r7, #32
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	20002ad4 	.word	0x20002ad4

08009364 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b09a      	sub	sp, #104	@ 0x68
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	4613      	mov	r3, r2
 8009370:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d101      	bne.n	800937c <f_open+0x18>
 8009378:	2309      	movs	r3, #9
 800937a:	e1d3      	b.n	8009724 <f_open+0x3c0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800937c:	79fb      	ldrb	r3, [r7, #7]
 800937e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009382:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009384:	79fa      	ldrb	r2, [r7, #7]
 8009386:	f107 0110 	add.w	r1, r7, #16
 800938a:	f107 0308 	add.w	r3, r7, #8
 800938e:	4618      	mov	r0, r3
 8009390:	f7ff fcb4 	bl	8008cfc <find_volume>
 8009394:	4603      	mov	r3, r0
 8009396:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800939a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800939e:	2b00      	cmp	r3, #0
 80093a0:	f040 81b0 	bne.w	8009704 <f_open+0x3a0>
		dj.obj.fs = fs;
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 80093a8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80093ac:	f000 fe06 	bl	8009fbc <ff_memalloc>
 80093b0:	65b8      	str	r0, [r7, #88]	@ 0x58
 80093b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d106      	bne.n	80093c6 <f_open+0x62>
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	2111      	movs	r1, #17
 80093bc:	4618      	mov	r0, r3
 80093be:	f7fd fe27 	bl	8007010 <unlock_fs>
 80093c2:	2311      	movs	r3, #17
 80093c4:	e1ae      	b.n	8009724 <f_open+0x3c0>
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80093ca:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	f107 0314 	add.w	r3, r7, #20
 80093d2:	4611      	mov	r1, r2
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7ff fb81 	bl	8008adc <follow_path>
 80093da:	4603      	mov	r3, r0
 80093dc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80093e0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d118      	bne.n	800941a <f_open+0xb6>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80093e8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80093ec:	b25b      	sxtb	r3, r3
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	da03      	bge.n	80093fa <f_open+0x96>
				res = FR_INVALID_NAME;
 80093f2:	2306      	movs	r3, #6
 80093f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80093f8:	e00f      	b.n	800941a <f_open+0xb6>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80093fa:	79fb      	ldrb	r3, [r7, #7]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	bf8c      	ite	hi
 8009400:	2301      	movhi	r3, #1
 8009402:	2300      	movls	r3, #0
 8009404:	b2db      	uxtb	r3, r3
 8009406:	461a      	mov	r2, r3
 8009408:	f107 0314 	add.w	r3, r7, #20
 800940c:	4611      	mov	r1, r2
 800940e:	4618      	mov	r0, r3
 8009410:	f7fd fe1a 	bl	8007048 <chk_lock>
 8009414:	4603      	mov	r3, r0
 8009416:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800941a:	79fb      	ldrb	r3, [r7, #7]
 800941c:	f003 031c 	and.w	r3, r3, #28
 8009420:	2b00      	cmp	r3, #0
 8009422:	d07f      	beq.n	8009524 <f_open+0x1c0>
			if (res != FR_OK) {					/* No file, create new */
 8009424:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009428:	2b00      	cmp	r3, #0
 800942a:	d017      	beq.n	800945c <f_open+0xf8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800942c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009430:	2b04      	cmp	r3, #4
 8009432:	d10e      	bne.n	8009452 <f_open+0xee>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8009434:	f7fd fe64 	bl	8007100 <enq_lock>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d006      	beq.n	800944c <f_open+0xe8>
 800943e:	f107 0314 	add.w	r3, r7, #20
 8009442:	4618      	mov	r0, r3
 8009444:	f7fe ffbc 	bl	80083c0 <dir_register>
 8009448:	4603      	mov	r3, r0
 800944a:	e000      	b.n	800944e <f_open+0xea>
 800944c:	2312      	movs	r3, #18
 800944e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8009452:	79fb      	ldrb	r3, [r7, #7]
 8009454:	f043 0308 	orr.w	r3, r3, #8
 8009458:	71fb      	strb	r3, [r7, #7]
 800945a:	e010      	b.n	800947e <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800945c:	7ebb      	ldrb	r3, [r7, #26]
 800945e:	f003 0311 	and.w	r3, r3, #17
 8009462:	2b00      	cmp	r3, #0
 8009464:	d003      	beq.n	800946e <f_open+0x10a>
					res = FR_DENIED;
 8009466:	2307      	movs	r3, #7
 8009468:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800946c:	e007      	b.n	800947e <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800946e:	79fb      	ldrb	r3, [r7, #7]
 8009470:	f003 0304 	and.w	r3, r3, #4
 8009474:	2b00      	cmp	r3, #0
 8009476:	d002      	beq.n	800947e <f_open+0x11a>
 8009478:	2308      	movs	r3, #8
 800947a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800947e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009482:	2b00      	cmp	r3, #0
 8009484:	d168      	bne.n	8009558 <f_open+0x1f4>
 8009486:	79fb      	ldrb	r3, [r7, #7]
 8009488:	f003 0308 	and.w	r3, r3, #8
 800948c:	2b00      	cmp	r3, #0
 800948e:	d063      	beq.n	8009558 <f_open+0x1f4>
				dw = GET_FATTIME();
 8009490:	f7fd fbaa 	bl	8006be8 <get_fattime>
 8009494:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009498:	330e      	adds	r3, #14
 800949a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800949c:	4618      	mov	r0, r3
 800949e:	f7fd fcf7 	bl	8006e90 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80094a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094a4:	3316      	adds	r3, #22
 80094a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7fd fcf1 	bl	8006e90 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80094ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094b0:	330b      	adds	r3, #11
 80094b2:	2220      	movs	r2, #32
 80094b4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80094ba:	4611      	mov	r1, r2
 80094bc:	4618      	mov	r0, r3
 80094be:	f7fe fcf8 	bl	8007eb2 <ld_clust>
 80094c2:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80094c8:	2200      	movs	r2, #0
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7fe fd10 	bl	8007ef0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80094d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094d2:	331c      	adds	r3, #28
 80094d4:	2100      	movs	r1, #0
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7fd fcda 	bl	8006e90 <st_dword>
					fs->wflag = 1;
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	2201      	movs	r2, #1
 80094e0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80094e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d037      	beq.n	8009558 <f_open+0x1f4>
						dw = fs->winsect;
 80094e8:	693b      	ldr	r3, [r7, #16]
 80094ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ec:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 80094ee:	f107 0314 	add.w	r3, r7, #20
 80094f2:	2200      	movs	r2, #0
 80094f4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fe fa00 	bl	80078fc <remove_chain>
 80094fc:	4603      	mov	r3, r0
 80094fe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8009502:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009506:	2b00      	cmp	r3, #0
 8009508:	d126      	bne.n	8009558 <f_open+0x1f4>
							res = move_window(fs, dw);
 800950a:	693b      	ldr	r3, [r7, #16]
 800950c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800950e:	4618      	mov	r0, r3
 8009510:	f7fd ff4a 	bl	80073a8 <move_window>
 8009514:	4603      	mov	r3, r0
 8009516:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800951e:	3a01      	subs	r2, #1
 8009520:	619a      	str	r2, [r3, #24]
 8009522:	e019      	b.n	8009558 <f_open+0x1f4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009524:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009528:	2b00      	cmp	r3, #0
 800952a:	d115      	bne.n	8009558 <f_open+0x1f4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800952c:	7ebb      	ldrb	r3, [r7, #26]
 800952e:	f003 0310 	and.w	r3, r3, #16
 8009532:	2b00      	cmp	r3, #0
 8009534:	d003      	beq.n	800953e <f_open+0x1da>
					res = FR_NO_FILE;
 8009536:	2304      	movs	r3, #4
 8009538:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800953c:	e00c      	b.n	8009558 <f_open+0x1f4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800953e:	79fb      	ldrb	r3, [r7, #7]
 8009540:	f003 0302 	and.w	r3, r3, #2
 8009544:	2b00      	cmp	r3, #0
 8009546:	d007      	beq.n	8009558 <f_open+0x1f4>
 8009548:	7ebb      	ldrb	r3, [r7, #26]
 800954a:	f003 0301 	and.w	r3, r3, #1
 800954e:	2b00      	cmp	r3, #0
 8009550:	d002      	beq.n	8009558 <f_open+0x1f4>
						res = FR_DENIED;
 8009552:	2307      	movs	r3, #7
 8009554:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8009558:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800955c:	2b00      	cmp	r3, #0
 800955e:	d126      	bne.n	80095ae <f_open+0x24a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8009560:	79fb      	ldrb	r3, [r7, #7]
 8009562:	f003 0308 	and.w	r3, r3, #8
 8009566:	2b00      	cmp	r3, #0
 8009568:	d003      	beq.n	8009572 <f_open+0x20e>
				mode |= FA_MODIFIED;
 800956a:	79fb      	ldrb	r3, [r7, #7]
 800956c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009570:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800957a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009580:	79fb      	ldrb	r3, [r7, #7]
 8009582:	2b01      	cmp	r3, #1
 8009584:	bf8c      	ite	hi
 8009586:	2301      	movhi	r3, #1
 8009588:	2300      	movls	r3, #0
 800958a:	b2db      	uxtb	r3, r3
 800958c:	461a      	mov	r2, r3
 800958e:	f107 0314 	add.w	r3, r7, #20
 8009592:	4611      	mov	r1, r2
 8009594:	4618      	mov	r0, r3
 8009596:	f7fd fdd5 	bl	8007144 <inc_lock>
 800959a:	4602      	mov	r2, r0
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d102      	bne.n	80095ae <f_open+0x24a>
 80095a8:	2302      	movs	r3, #2
 80095aa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80095ae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f040 80a3 	bne.w	80096fe <f_open+0x39a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80095bc:	4611      	mov	r1, r2
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fe fc77 	bl	8007eb2 <ld_clust>
 80095c4:	4602      	mov	r2, r0
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80095ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095cc:	331c      	adds	r3, #28
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fd fc20 	bl	8006e14 <ld_dword>
 80095d4:	4602      	mov	r2, r0
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2200      	movs	r2, #0
 80095de:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80095e0:	693a      	ldr	r2, [r7, #16]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	88da      	ldrh	r2, [r3, #6]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	79fa      	ldrb	r2, [r7, #7]
 80095f2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2200      	movs	r2, #0
 80095fe:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2200      	movs	r2, #0
 8009604:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	3330      	adds	r3, #48	@ 0x30
 800960a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800960e:	2100      	movs	r1, #0
 8009610:	4618      	mov	r0, r3
 8009612:	f7fd fc8a 	bl	8006f2a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8009616:	79fb      	ldrb	r3, [r7, #7]
 8009618:	f003 0320 	and.w	r3, r3, #32
 800961c:	2b00      	cmp	r3, #0
 800961e:	d06e      	beq.n	80096fe <f_open+0x39a>
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d06a      	beq.n	80096fe <f_open+0x39a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	68da      	ldr	r2, [r3, #12]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	895b      	ldrh	r3, [r3, #10]
 8009634:	461a      	mov	r2, r3
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	899b      	ldrh	r3, [r3, #12]
 800963a:	fb02 f303 	mul.w	r3, r2, r3
 800963e:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800964c:	e016      	b.n	800967c <f_open+0x318>
					clst = get_fat(&fp->obj, clst);
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009652:	4618      	mov	r0, r3
 8009654:	f7fd ff65 	bl	8007522 <get_fat>
 8009658:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800965a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800965c:	2b01      	cmp	r3, #1
 800965e:	d802      	bhi.n	8009666 <f_open+0x302>
 8009660:	2302      	movs	r3, #2
 8009662:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8009666:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800966c:	d102      	bne.n	8009674 <f_open+0x310>
 800966e:	2301      	movs	r3, #1
 8009670:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8009674:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009678:	1ad3      	subs	r3, r2, r3
 800967a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800967c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009680:	2b00      	cmp	r3, #0
 8009682:	d103      	bne.n	800968c <f_open+0x328>
 8009684:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009688:	429a      	cmp	r2, r3
 800968a:	d8e0      	bhi.n	800964e <f_open+0x2ea>
				}
				fp->clust = clst;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009690:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8009692:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009696:	2b00      	cmp	r3, #0
 8009698:	d131      	bne.n	80096fe <f_open+0x39a>
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	899b      	ldrh	r3, [r3, #12]
 800969e:	461a      	mov	r2, r3
 80096a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80096a6:	fb01 f202 	mul.w	r2, r1, r2
 80096aa:	1a9b      	subs	r3, r3, r2
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d026      	beq.n	80096fe <f_open+0x39a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fd ff15 	bl	80074e4 <clust2sect>
 80096ba:	64b8      	str	r0, [r7, #72]	@ 0x48
 80096bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d103      	bne.n	80096ca <f_open+0x366>
						res = FR_INT_ERR;
 80096c2:	2302      	movs	r3, #2
 80096c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80096c8:	e019      	b.n	80096fe <f_open+0x39a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80096ca:	693b      	ldr	r3, [r7, #16]
 80096cc:	899b      	ldrh	r3, [r3, #12]
 80096ce:	461a      	mov	r2, r3
 80096d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80096d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80096d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80096d8:	441a      	add	r2, r3
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	7858      	ldrb	r0, [r3, #1]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	6a1a      	ldr	r2, [r3, #32]
 80096ec:	2301      	movs	r3, #1
 80096ee:	f7fd fb1b 	bl	8006d28 <disk_read>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d002      	beq.n	80096fe <f_open+0x39a>
 80096f8:	2301      	movs	r3, #1
 80096fa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 80096fe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009700:	f000 fc68 	bl	8009fd4 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009704:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009708:	2b00      	cmp	r3, #0
 800970a:	d002      	beq.n	8009712 <f_open+0x3ae>
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2200      	movs	r2, #0
 8009710:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8009718:	4611      	mov	r1, r2
 800971a:	4618      	mov	r0, r3
 800971c:	f7fd fc78 	bl	8007010 <unlock_fs>
 8009720:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8009724:	4618      	mov	r0, r3
 8009726:	3768      	adds	r7, #104	@ 0x68
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}

0800972c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b08e      	sub	sp, #56	@ 0x38
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
 8009738:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	2200      	movs	r2, #0
 8009742:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f107 0214 	add.w	r2, r7, #20
 800974a:	4611      	mov	r1, r2
 800974c:	4618      	mov	r0, r3
 800974e:	f7ff fd5d 	bl	800920c <validate>
 8009752:	4603      	mov	r3, r0
 8009754:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009758:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800975c:	2b00      	cmp	r3, #0
 800975e:	d107      	bne.n	8009770 <f_read+0x44>
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	7d5b      	ldrb	r3, [r3, #21]
 8009764:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8009768:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800976c:	2b00      	cmp	r3, #0
 800976e:	d009      	beq.n	8009784 <f_read+0x58>
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8009776:	4611      	mov	r1, r2
 8009778:	4618      	mov	r0, r3
 800977a:	f7fd fc49 	bl	8007010 <unlock_fs>
 800977e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009782:	e15d      	b.n	8009a40 <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	7d1b      	ldrb	r3, [r3, #20]
 8009788:	f003 0301 	and.w	r3, r3, #1
 800978c:	2b00      	cmp	r3, #0
 800978e:	d106      	bne.n	800979e <f_read+0x72>
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	2107      	movs	r1, #7
 8009794:	4618      	mov	r0, r3
 8009796:	f7fd fc3b 	bl	8007010 <unlock_fs>
 800979a:	2307      	movs	r3, #7
 800979c:	e150      	b.n	8009a40 <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	68da      	ldr	r2, [r3, #12]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	1ad3      	subs	r3, r2, r3
 80097a8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	6a3b      	ldr	r3, [r7, #32]
 80097ae:	429a      	cmp	r2, r3
 80097b0:	f240 813c 	bls.w	8009a2c <f_read+0x300>
 80097b4:	6a3b      	ldr	r3, [r7, #32]
 80097b6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80097b8:	e138      	b.n	8009a2c <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	699b      	ldr	r3, [r3, #24]
 80097be:	697a      	ldr	r2, [r7, #20]
 80097c0:	8992      	ldrh	r2, [r2, #12]
 80097c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80097c6:	fb01 f202 	mul.w	r2, r1, r2
 80097ca:	1a9b      	subs	r3, r3, r2
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f040 80f3 	bne.w	80099b8 <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	699b      	ldr	r3, [r3, #24]
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	8992      	ldrh	r2, [r2, #12]
 80097da:	fbb3 f3f2 	udiv	r3, r3, r2
 80097de:	697a      	ldr	r2, [r7, #20]
 80097e0:	8952      	ldrh	r2, [r2, #10]
 80097e2:	3a01      	subs	r2, #1
 80097e4:	4013      	ands	r3, r2
 80097e6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80097e8:	69fb      	ldr	r3, [r7, #28]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d139      	bne.n	8009862 <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d103      	bne.n	80097fe <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	689b      	ldr	r3, [r3, #8]
 80097fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80097fc:	e013      	b.n	8009826 <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009802:	2b00      	cmp	r3, #0
 8009804:	d007      	beq.n	8009816 <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	4619      	mov	r1, r3
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f7fe f972 	bl	8007af6 <clmt_clust>
 8009812:	6338      	str	r0, [r7, #48]	@ 0x30
 8009814:	e007      	b.n	8009826 <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009816:	68fa      	ldr	r2, [r7, #12]
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	69db      	ldr	r3, [r3, #28]
 800981c:	4619      	mov	r1, r3
 800981e:	4610      	mov	r0, r2
 8009820:	f7fd fe7f 	bl	8007522 <get_fat>
 8009824:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009828:	2b01      	cmp	r3, #1
 800982a:	d809      	bhi.n	8009840 <f_read+0x114>
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2202      	movs	r2, #2
 8009830:	755a      	strb	r2, [r3, #21]
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	2102      	movs	r1, #2
 8009836:	4618      	mov	r0, r3
 8009838:	f7fd fbea 	bl	8007010 <unlock_fs>
 800983c:	2302      	movs	r3, #2
 800983e:	e0ff      	b.n	8009a40 <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009846:	d109      	bne.n	800985c <f_read+0x130>
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2201      	movs	r2, #1
 800984c:	755a      	strb	r2, [r3, #21]
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	2101      	movs	r1, #1
 8009852:	4618      	mov	r0, r3
 8009854:	f7fd fbdc 	bl	8007010 <unlock_fs>
 8009858:	2301      	movs	r3, #1
 800985a:	e0f1      	b.n	8009a40 <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009860:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009862:	697a      	ldr	r2, [r7, #20]
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	69db      	ldr	r3, [r3, #28]
 8009868:	4619      	mov	r1, r3
 800986a:	4610      	mov	r0, r2
 800986c:	f7fd fe3a 	bl	80074e4 <clust2sect>
 8009870:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d109      	bne.n	800988c <f_read+0x160>
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2202      	movs	r2, #2
 800987c:	755a      	strb	r2, [r3, #21]
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	2102      	movs	r1, #2
 8009882:	4618      	mov	r0, r3
 8009884:	f7fd fbc4 	bl	8007010 <unlock_fs>
 8009888:	2302      	movs	r3, #2
 800988a:	e0d9      	b.n	8009a40 <f_read+0x314>
			sect += csect;
 800988c:	69ba      	ldr	r2, [r7, #24]
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	4413      	add	r3, r2
 8009892:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8009894:	697b      	ldr	r3, [r7, #20]
 8009896:	899b      	ldrh	r3, [r3, #12]
 8009898:	461a      	mov	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	fbb3 f3f2 	udiv	r3, r3, r2
 80098a0:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80098a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d046      	beq.n	8009936 <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80098a8:	69fa      	ldr	r2, [r7, #28]
 80098aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098ac:	4413      	add	r3, r2
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	8952      	ldrh	r2, [r2, #10]
 80098b2:	4293      	cmp	r3, r2
 80098b4:	d905      	bls.n	80098c2 <f_read+0x196>
					cc = fs->csize - csect;
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	895b      	ldrh	r3, [r3, #10]
 80098ba:	461a      	mov	r2, r3
 80098bc:	69fb      	ldr	r3, [r7, #28]
 80098be:	1ad3      	subs	r3, r2, r3
 80098c0:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	7858      	ldrb	r0, [r3, #1]
 80098c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c8:	69ba      	ldr	r2, [r7, #24]
 80098ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80098cc:	f7fd fa2c 	bl	8006d28 <disk_read>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d009      	beq.n	80098ea <f_read+0x1be>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2201      	movs	r2, #1
 80098da:	755a      	strb	r2, [r3, #21]
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	2101      	movs	r1, #1
 80098e0:	4618      	mov	r0, r3
 80098e2:	f7fd fb95 	bl	8007010 <unlock_fs>
 80098e6:	2301      	movs	r3, #1
 80098e8:	e0aa      	b.n	8009a40 <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	7d1b      	ldrb	r3, [r3, #20]
 80098ee:	b25b      	sxtb	r3, r3
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	da18      	bge.n	8009926 <f_read+0x1fa>
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	6a1a      	ldr	r2, [r3, #32]
 80098f8:	69bb      	ldr	r3, [r7, #24]
 80098fa:	1ad3      	subs	r3, r2, r3
 80098fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098fe:	429a      	cmp	r2, r3
 8009900:	d911      	bls.n	8009926 <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	6a1a      	ldr	r2, [r3, #32]
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	1ad3      	subs	r3, r2, r3
 800990a:	697a      	ldr	r2, [r7, #20]
 800990c:	8992      	ldrh	r2, [r2, #12]
 800990e:	fb02 f303 	mul.w	r3, r2, r3
 8009912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009914:	18d0      	adds	r0, r2, r3
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	899b      	ldrh	r3, [r3, #12]
 8009920:	461a      	mov	r2, r3
 8009922:	f7fd fae1 	bl	8006ee8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	899b      	ldrh	r3, [r3, #12]
 800992a:	461a      	mov	r2, r3
 800992c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800992e:	fb02 f303 	mul.w	r3, r2, r3
 8009932:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009934:	e066      	b.n	8009a04 <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	69ba      	ldr	r2, [r7, #24]
 800993c:	429a      	cmp	r2, r3
 800993e:	d038      	beq.n	80099b2 <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	7d1b      	ldrb	r3, [r3, #20]
 8009944:	b25b      	sxtb	r3, r3
 8009946:	2b00      	cmp	r3, #0
 8009948:	da1d      	bge.n	8009986 <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	7858      	ldrb	r0, [r3, #1]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6a1a      	ldr	r2, [r3, #32]
 8009958:	2301      	movs	r3, #1
 800995a:	f7fd fa05 	bl	8006d68 <disk_write>
 800995e:	4603      	mov	r3, r0
 8009960:	2b00      	cmp	r3, #0
 8009962:	d009      	beq.n	8009978 <f_read+0x24c>
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2201      	movs	r2, #1
 8009968:	755a      	strb	r2, [r3, #21]
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	2101      	movs	r1, #1
 800996e:	4618      	mov	r0, r3
 8009970:	f7fd fb4e 	bl	8007010 <unlock_fs>
 8009974:	2301      	movs	r3, #1
 8009976:	e063      	b.n	8009a40 <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	7d1b      	ldrb	r3, [r3, #20]
 800997c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009980:	b2da      	uxtb	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	7858      	ldrb	r0, [r3, #1]
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009990:	2301      	movs	r3, #1
 8009992:	69ba      	ldr	r2, [r7, #24]
 8009994:	f7fd f9c8 	bl	8006d28 <disk_read>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d009      	beq.n	80099b2 <f_read+0x286>
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2201      	movs	r2, #1
 80099a2:	755a      	strb	r2, [r3, #21]
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	2101      	movs	r1, #1
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7fd fb31 	bl	8007010 <unlock_fs>
 80099ae:	2301      	movs	r3, #1
 80099b0:	e046      	b.n	8009a40 <f_read+0x314>
			}
#endif
			fp->sect = sect;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	69ba      	ldr	r2, [r7, #24]
 80099b6:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	899b      	ldrh	r3, [r3, #12]
 80099bc:	4618      	mov	r0, r3
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	699b      	ldr	r3, [r3, #24]
 80099c2:	697a      	ldr	r2, [r7, #20]
 80099c4:	8992      	ldrh	r2, [r2, #12]
 80099c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80099ca:	fb01 f202 	mul.w	r2, r1, r2
 80099ce:	1a9b      	subs	r3, r3, r2
 80099d0:	1ac3      	subs	r3, r0, r3
 80099d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80099d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d901      	bls.n	80099e0 <f_read+0x2b4>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	8992      	ldrh	r2, [r2, #12]
 80099ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80099f2:	fb00 f202 	mul.w	r2, r0, r2
 80099f6:	1a9b      	subs	r3, r3, r2
 80099f8:	440b      	add	r3, r1
 80099fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80099fc:	4619      	mov	r1, r3
 80099fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009a00:	f7fd fa72 	bl	8006ee8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009a04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a08:	4413      	add	r3, r2
 8009a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	699a      	ldr	r2, [r3, #24]
 8009a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a12:	441a      	add	r2, r3
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	619a      	str	r2, [r3, #24]
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a1e:	441a      	add	r2, r3
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	601a      	str	r2, [r3, #0]
 8009a24:	687a      	ldr	r2, [r7, #4]
 8009a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a28:	1ad3      	subs	r3, r2, r3
 8009a2a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	f47f aec3 	bne.w	80097ba <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	2100      	movs	r1, #0
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f7fd fae9 	bl	8007010 <unlock_fs>
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3738      	adds	r7, #56	@ 0x38
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b086      	sub	sp, #24
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f107 0208 	add.w	r2, r7, #8
 8009a56:	4611      	mov	r1, r2
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7ff fbd7 	bl	800920c <validate>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009a62:	7dfb      	ldrb	r3, [r7, #23]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d16d      	bne.n	8009b44 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	7d1b      	ldrb	r3, [r3, #20]
 8009a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d067      	beq.n	8009b44 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	7d1b      	ldrb	r3, [r3, #20]
 8009a78:	b25b      	sxtb	r3, r3
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	da1a      	bge.n	8009ab4 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	7858      	ldrb	r0, [r3, #1]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6a1a      	ldr	r2, [r3, #32]
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	f7fd f96b 	bl	8006d68 <disk_write>
 8009a92:	4603      	mov	r3, r0
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d006      	beq.n	8009aa6 <f_sync+0x5e>
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	2101      	movs	r1, #1
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f7fd fab7 	bl	8007010 <unlock_fs>
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	e055      	b.n	8009b52 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	7d1b      	ldrb	r3, [r3, #20]
 8009aaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009aae:	b2da      	uxtb	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009ab4:	f7fd f898 	bl	8006be8 <get_fattime>
 8009ab8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ac0:	4619      	mov	r1, r3
 8009ac2:	4610      	mov	r0, r2
 8009ac4:	f7fd fc70 	bl	80073a8 <move_window>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009acc:	7dfb      	ldrb	r3, [r7, #23]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d138      	bne.n	8009b44 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	330b      	adds	r3, #11
 8009adc:	781a      	ldrb	r2, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	330b      	adds	r3, #11
 8009ae2:	f042 0220 	orr.w	r2, r2, #32
 8009ae6:	b2d2      	uxtb	r2, r2
 8009ae8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6818      	ldr	r0, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	689b      	ldr	r3, [r3, #8]
 8009af2:	461a      	mov	r2, r3
 8009af4:	68f9      	ldr	r1, [r7, #12]
 8009af6:	f7fe f9fb 	bl	8007ef0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f103 021c 	add.w	r2, r3, #28
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	4619      	mov	r1, r3
 8009b06:	4610      	mov	r0, r2
 8009b08:	f7fd f9c2 	bl	8006e90 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	3316      	adds	r3, #22
 8009b10:	6939      	ldr	r1, [r7, #16]
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7fd f9bc 	bl	8006e90 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	3312      	adds	r3, #18
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7fd f99b 	bl	8006e5a <st_word>
					fs->wflag = 1;
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	2201      	movs	r2, #1
 8009b28:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7fd fc69 	bl	8007404 <sync_fs>
 8009b32:	4603      	mov	r3, r0
 8009b34:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	7d1b      	ldrb	r3, [r3, #20]
 8009b3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b3e:	b2da      	uxtb	r2, r3
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	7dfa      	ldrb	r2, [r7, #23]
 8009b48:	4611      	mov	r1, r2
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7fd fa60 	bl	8007010 <unlock_fs>
 8009b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3718      	adds	r7, #24
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b084      	sub	sp, #16
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f7ff ff70 	bl	8009a48 <f_sync>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009b6c:	7bfb      	ldrb	r3, [r7, #15]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d11d      	bne.n	8009bae <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f107 0208 	add.w	r2, r7, #8
 8009b78:	4611      	mov	r1, r2
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7ff fb46 	bl	800920c <validate>
 8009b80:	4603      	mov	r3, r0
 8009b82:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009b84:	7bfb      	ldrb	r3, [r7, #15]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d111      	bne.n	8009bae <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	691b      	ldr	r3, [r3, #16]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f7fd fb66 	bl	8007260 <dec_lock>
 8009b94:	4603      	mov	r3, r0
 8009b96:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009b98:	7bfb      	ldrb	r3, [r7, #15]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d102      	bne.n	8009ba4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	4618      	mov	r0, r3
 8009baa:	f7fd fa31 	bl	8007010 <unlock_fs>
#endif
		}
	}
	return res;
 8009bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b092      	sub	sp, #72	@ 0x48
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8009bc2:	f107 010c 	add.w	r1, r7, #12
 8009bc6:	1d3b      	adds	r3, r7, #4
 8009bc8:	2200      	movs	r2, #0
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7ff f896 	bl	8008cfc <find_volume>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8009bd6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d134      	bne.n	8009c48 <f_stat+0x90>
		INIT_NAMBUF(dj.obj.fs);
 8009bde:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009be2:	f000 f9eb 	bl	8009fbc <ff_memalloc>
 8009be6:	6438      	str	r0, [r7, #64]	@ 0x40
 8009be8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d106      	bne.n	8009bfc <f_stat+0x44>
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2111      	movs	r1, #17
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7fd fa0c 	bl	8007010 <unlock_fs>
 8009bf8:	2311      	movs	r3, #17
 8009bfa:	e02e      	b.n	8009c5a <f_stat+0xa2>
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c00:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	f107 030c 	add.w	r3, r7, #12
 8009c08:	4611      	mov	r1, r2
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7fe ff66 	bl	8008adc <follow_path>
 8009c10:	4603      	mov	r3, r0
 8009c12:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		if (res == FR_OK) {				/* Follow completed */
 8009c16:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d111      	bne.n	8009c42 <f_stat+0x8a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8009c1e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8009c22:	b25b      	sxtb	r3, r3
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	da03      	bge.n	8009c30 <f_stat+0x78>
				res = FR_INVALID_NAME;
 8009c28:	2306      	movs	r3, #6
 8009c2a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009c2e:	e008      	b.n	8009c42 <f_stat+0x8a>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d005      	beq.n	8009c42 <f_stat+0x8a>
 8009c36:	f107 030c 	add.w	r3, r7, #12
 8009c3a:	6839      	ldr	r1, [r7, #0]
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7fe fcb7 	bl	80085b0 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
 8009c42:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8009c44:	f000 f9c6 	bl	8009fd4 <ff_memfree>
	}

	LEAVE_FF(dj.obj.fs, res);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8009c4e:	4611      	mov	r1, r2
 8009c50:	4618      	mov	r0, r3
 8009c52:	f7fd f9dd 	bl	8007010 <unlock_fs>
 8009c56:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3748      	adds	r7, #72	@ 0x48
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b088      	sub	sp, #32
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	60f8      	str	r0, [r7, #12]
 8009c6a:	60b9      	str	r1, [r7, #8]
 8009c6c:	607a      	str	r2, [r7, #4]
	int n = 0;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009c76:	e01c      	b.n	8009cb2 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009c78:	f107 0310 	add.w	r3, r7, #16
 8009c7c:	f107 0114 	add.w	r1, r7, #20
 8009c80:	2201      	movs	r2, #1
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f7ff fd52 	bl	800972c <f_read>
		if (rc != 1) break;
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	2b01      	cmp	r3, #1
 8009c8c:	d117      	bne.n	8009cbe <f_gets+0x5c>
		c = s[0];
 8009c8e:	7d3b      	ldrb	r3, [r7, #20]
 8009c90:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009c92:	7dfb      	ldrb	r3, [r7, #23]
 8009c94:	2b0d      	cmp	r3, #13
 8009c96:	d00b      	beq.n	8009cb0 <f_gets+0x4e>
		*p++ = c;
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	1c5a      	adds	r2, r3, #1
 8009c9c:	61ba      	str	r2, [r7, #24]
 8009c9e:	7dfa      	ldrb	r2, [r7, #23]
 8009ca0:	701a      	strb	r2, [r3, #0]
		n++;
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8009ca8:	7dfb      	ldrb	r3, [r7, #23]
 8009caa:	2b0a      	cmp	r3, #10
 8009cac:	d009      	beq.n	8009cc2 <f_gets+0x60>
 8009cae:	e000      	b.n	8009cb2 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009cb0:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	69fa      	ldr	r2, [r7, #28]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	dbdd      	blt.n	8009c78 <f_gets+0x16>
 8009cbc:	e002      	b.n	8009cc4 <f_gets+0x62>
		if (rc != 1) break;
 8009cbe:	bf00      	nop
 8009cc0:	e000      	b.n	8009cc4 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8009cc2:	bf00      	nop
	}
	*p = 0;
 8009cc4:	69bb      	ldr	r3, [r7, #24]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d001      	beq.n	8009cd4 <f_gets+0x72>
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	e000      	b.n	8009cd6 <f_gets+0x74>
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3720      	adds	r7, #32
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
	...

08009ce0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b087      	sub	sp, #28
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	4613      	mov	r3, r2
 8009cec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8009d74 <FATFS_LinkDriverEx+0x94>)
 8009cf8:	7a5b      	ldrb	r3, [r3, #9]
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d131      	bne.n	8009d64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009d00:	4b1c      	ldr	r3, [pc, #112]	@ (8009d74 <FATFS_LinkDriverEx+0x94>)
 8009d02:	7a5b      	ldrb	r3, [r3, #9]
 8009d04:	b2db      	uxtb	r3, r3
 8009d06:	461a      	mov	r2, r3
 8009d08:	4b1a      	ldr	r3, [pc, #104]	@ (8009d74 <FATFS_LinkDriverEx+0x94>)
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009d0e:	4b19      	ldr	r3, [pc, #100]	@ (8009d74 <FATFS_LinkDriverEx+0x94>)
 8009d10:	7a5b      	ldrb	r3, [r3, #9]
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	4a17      	ldr	r2, [pc, #92]	@ (8009d74 <FATFS_LinkDriverEx+0x94>)
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4413      	add	r3, r2
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009d1e:	4b15      	ldr	r3, [pc, #84]	@ (8009d74 <FATFS_LinkDriverEx+0x94>)
 8009d20:	7a5b      	ldrb	r3, [r3, #9]
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	461a      	mov	r2, r3
 8009d26:	4b13      	ldr	r3, [pc, #76]	@ (8009d74 <FATFS_LinkDriverEx+0x94>)
 8009d28:	4413      	add	r3, r2
 8009d2a:	79fa      	ldrb	r2, [r7, #7]
 8009d2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009d2e:	4b11      	ldr	r3, [pc, #68]	@ (8009d74 <FATFS_LinkDriverEx+0x94>)
 8009d30:	7a5b      	ldrb	r3, [r3, #9]
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	1c5a      	adds	r2, r3, #1
 8009d36:	b2d1      	uxtb	r1, r2
 8009d38:	4a0e      	ldr	r2, [pc, #56]	@ (8009d74 <FATFS_LinkDriverEx+0x94>)
 8009d3a:	7251      	strb	r1, [r2, #9]
 8009d3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009d3e:	7dbb      	ldrb	r3, [r7, #22]
 8009d40:	3330      	adds	r3, #48	@ 0x30
 8009d42:	b2da      	uxtb	r2, r3
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	223a      	movs	r2, #58	@ 0x3a
 8009d4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	3302      	adds	r3, #2
 8009d54:	222f      	movs	r2, #47	@ 0x2f
 8009d56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	3303      	adds	r3, #3
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009d60:	2300      	movs	r3, #0
 8009d62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	371c      	adds	r7, #28
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	20002afc 	.word	0x20002afc

08009d78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
 8009d80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009d82:	2200      	movs	r2, #0
 8009d84:	6839      	ldr	r1, [r7, #0]
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f7ff ffaa 	bl	8009ce0 <FATFS_LinkDriverEx>
 8009d8c:	4603      	mov	r3, r0
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3708      	adds	r7, #8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
	...

08009d98 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	4603      	mov	r3, r0
 8009da0:	6039      	str	r1, [r7, #0]
 8009da2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009da4:	88fb      	ldrh	r3, [r7, #6]
 8009da6:	2b7f      	cmp	r3, #127	@ 0x7f
 8009da8:	d802      	bhi.n	8009db0 <ff_convert+0x18>
		c = chr;
 8009daa:	88fb      	ldrh	r3, [r7, #6]
 8009dac:	81fb      	strh	r3, [r7, #14]
 8009dae:	e025      	b.n	8009dfc <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00b      	beq.n	8009dce <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009db6:	88fb      	ldrh	r3, [r7, #6]
 8009db8:	2bff      	cmp	r3, #255	@ 0xff
 8009dba:	d805      	bhi.n	8009dc8 <ff_convert+0x30>
 8009dbc:	88fb      	ldrh	r3, [r7, #6]
 8009dbe:	3b80      	subs	r3, #128	@ 0x80
 8009dc0:	4a12      	ldr	r2, [pc, #72]	@ (8009e0c <ff_convert+0x74>)
 8009dc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dc6:	e000      	b.n	8009dca <ff_convert+0x32>
 8009dc8:	2300      	movs	r3, #0
 8009dca:	81fb      	strh	r3, [r7, #14]
 8009dcc:	e016      	b.n	8009dfc <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009dce:	2300      	movs	r3, #0
 8009dd0:	81fb      	strh	r3, [r7, #14]
 8009dd2:	e009      	b.n	8009de8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009dd4:	89fb      	ldrh	r3, [r7, #14]
 8009dd6:	4a0d      	ldr	r2, [pc, #52]	@ (8009e0c <ff_convert+0x74>)
 8009dd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ddc:	88fa      	ldrh	r2, [r7, #6]
 8009dde:	429a      	cmp	r2, r3
 8009de0:	d006      	beq.n	8009df0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009de2:	89fb      	ldrh	r3, [r7, #14]
 8009de4:	3301      	adds	r3, #1
 8009de6:	81fb      	strh	r3, [r7, #14]
 8009de8:	89fb      	ldrh	r3, [r7, #14]
 8009dea:	2b7f      	cmp	r3, #127	@ 0x7f
 8009dec:	d9f2      	bls.n	8009dd4 <ff_convert+0x3c>
 8009dee:	e000      	b.n	8009df2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009df0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009df2:	89fb      	ldrh	r3, [r7, #14]
 8009df4:	3380      	adds	r3, #128	@ 0x80
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	b2db      	uxtb	r3, r3
 8009dfa:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009dfc:	89fb      	ldrh	r3, [r7, #14]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3714      	adds	r7, #20
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	0800fda4 	.word	0x0800fda4

08009e10 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009e10:	b480      	push	{r7}
 8009e12:	b087      	sub	sp, #28
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	4603      	mov	r3, r0
 8009e18:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009e1a:	88fb      	ldrh	r3, [r7, #6]
 8009e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e20:	d201      	bcs.n	8009e26 <ff_wtoupper+0x16>
 8009e22:	4b3e      	ldr	r3, [pc, #248]	@ (8009f1c <ff_wtoupper+0x10c>)
 8009e24:	e000      	b.n	8009e28 <ff_wtoupper+0x18>
 8009e26:	4b3e      	ldr	r3, [pc, #248]	@ (8009f20 <ff_wtoupper+0x110>)
 8009e28:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	1c9a      	adds	r2, r3, #2
 8009e2e:	617a      	str	r2, [r7, #20]
 8009e30:	881b      	ldrh	r3, [r3, #0]
 8009e32:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009e34:	8a7b      	ldrh	r3, [r7, #18]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d068      	beq.n	8009f0c <ff_wtoupper+0xfc>
 8009e3a:	88fa      	ldrh	r2, [r7, #6]
 8009e3c:	8a7b      	ldrh	r3, [r7, #18]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d364      	bcc.n	8009f0c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	1c9a      	adds	r2, r3, #2
 8009e46:	617a      	str	r2, [r7, #20]
 8009e48:	881b      	ldrh	r3, [r3, #0]
 8009e4a:	823b      	strh	r3, [r7, #16]
 8009e4c:	8a3b      	ldrh	r3, [r7, #16]
 8009e4e:	0a1b      	lsrs	r3, r3, #8
 8009e50:	81fb      	strh	r3, [r7, #14]
 8009e52:	8a3b      	ldrh	r3, [r7, #16]
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009e58:	88fa      	ldrh	r2, [r7, #6]
 8009e5a:	8a79      	ldrh	r1, [r7, #18]
 8009e5c:	8a3b      	ldrh	r3, [r7, #16]
 8009e5e:	440b      	add	r3, r1
 8009e60:	429a      	cmp	r2, r3
 8009e62:	da49      	bge.n	8009ef8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8009e64:	89fb      	ldrh	r3, [r7, #14]
 8009e66:	2b08      	cmp	r3, #8
 8009e68:	d84f      	bhi.n	8009f0a <ff_wtoupper+0xfa>
 8009e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e70 <ff_wtoupper+0x60>)
 8009e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e70:	08009e95 	.word	0x08009e95
 8009e74:	08009ea7 	.word	0x08009ea7
 8009e78:	08009ebd 	.word	0x08009ebd
 8009e7c:	08009ec5 	.word	0x08009ec5
 8009e80:	08009ecd 	.word	0x08009ecd
 8009e84:	08009ed5 	.word	0x08009ed5
 8009e88:	08009edd 	.word	0x08009edd
 8009e8c:	08009ee5 	.word	0x08009ee5
 8009e90:	08009eed 	.word	0x08009eed
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009e94:	88fa      	ldrh	r2, [r7, #6]
 8009e96:	8a7b      	ldrh	r3, [r7, #18]
 8009e98:	1ad3      	subs	r3, r2, r3
 8009e9a:	005b      	lsls	r3, r3, #1
 8009e9c:	697a      	ldr	r2, [r7, #20]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	881b      	ldrh	r3, [r3, #0]
 8009ea2:	80fb      	strh	r3, [r7, #6]
 8009ea4:	e027      	b.n	8009ef6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009ea6:	88fa      	ldrh	r2, [r7, #6]
 8009ea8:	8a7b      	ldrh	r3, [r7, #18]
 8009eaa:	1ad3      	subs	r3, r2, r3
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	f003 0301 	and.w	r3, r3, #1
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	88fa      	ldrh	r2, [r7, #6]
 8009eb6:	1ad3      	subs	r3, r2, r3
 8009eb8:	80fb      	strh	r3, [r7, #6]
 8009eba:	e01c      	b.n	8009ef6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009ebc:	88fb      	ldrh	r3, [r7, #6]
 8009ebe:	3b10      	subs	r3, #16
 8009ec0:	80fb      	strh	r3, [r7, #6]
 8009ec2:	e018      	b.n	8009ef6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009ec4:	88fb      	ldrh	r3, [r7, #6]
 8009ec6:	3b20      	subs	r3, #32
 8009ec8:	80fb      	strh	r3, [r7, #6]
 8009eca:	e014      	b.n	8009ef6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009ecc:	88fb      	ldrh	r3, [r7, #6]
 8009ece:	3b30      	subs	r3, #48	@ 0x30
 8009ed0:	80fb      	strh	r3, [r7, #6]
 8009ed2:	e010      	b.n	8009ef6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009ed4:	88fb      	ldrh	r3, [r7, #6]
 8009ed6:	3b1a      	subs	r3, #26
 8009ed8:	80fb      	strh	r3, [r7, #6]
 8009eda:	e00c      	b.n	8009ef6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009edc:	88fb      	ldrh	r3, [r7, #6]
 8009ede:	3308      	adds	r3, #8
 8009ee0:	80fb      	strh	r3, [r7, #6]
 8009ee2:	e008      	b.n	8009ef6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009ee4:	88fb      	ldrh	r3, [r7, #6]
 8009ee6:	3b50      	subs	r3, #80	@ 0x50
 8009ee8:	80fb      	strh	r3, [r7, #6]
 8009eea:	e004      	b.n	8009ef6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009eec:	88fb      	ldrh	r3, [r7, #6]
 8009eee:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8009ef2:	80fb      	strh	r3, [r7, #6]
 8009ef4:	bf00      	nop
			}
			break;
 8009ef6:	e008      	b.n	8009f0a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009ef8:	89fb      	ldrh	r3, [r7, #14]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d195      	bne.n	8009e2a <ff_wtoupper+0x1a>
 8009efe:	8a3b      	ldrh	r3, [r7, #16]
 8009f00:	005b      	lsls	r3, r3, #1
 8009f02:	697a      	ldr	r2, [r7, #20]
 8009f04:	4413      	add	r3, r2
 8009f06:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009f08:	e78f      	b.n	8009e2a <ff_wtoupper+0x1a>
			break;
 8009f0a:	bf00      	nop
	}

	return chr;
 8009f0c:	88fb      	ldrh	r3, [r7, #6]
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	371c      	adds	r7, #28
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
 8009f1a:	bf00      	nop
 8009f1c:	0800fea4 	.word	0x0800fea4
 8009f20:	08010098 	.word	0x08010098

08009f24 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b086      	sub	sp, #24
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	6039      	str	r1, [r7, #0]
 8009f2e:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8009f30:	2300      	movs	r3, #0
 8009f32:	60fb      	str	r3, [r7, #12]
 8009f34:	2300      	movs	r3, #0
 8009f36:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8009f38:	f107 030c 	add.w	r3, r7, #12
 8009f3c:	2101      	movs	r1, #1
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f000 f865 	bl	800a00e <osSemaphoreCreate>
 8009f44:	4602      	mov	r2, r0
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	bf14      	ite	ne
 8009f52:	2301      	movne	r3, #1
 8009f54:	2300      	moveq	r3, #0
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	617b      	str	r3, [r7, #20]

    return ret;
 8009f5a:	697b      	ldr	r3, [r7, #20]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3718      	adds	r7, #24
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 f905 	bl	800a17c <osSemaphoreDelete>
#endif
    return 1;
 8009f72:	2301      	movs	r3, #1
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3708      	adds	r7, #8
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8009f84:	2300      	movs	r3, #0
 8009f86:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8009f88:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 f871 	bl	800a074 <osSemaphoreWait>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d101      	bne.n	8009f9c <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8009fa6:	b580      	push	{r7, lr}
 8009fa8:	b082      	sub	sp, #8
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 f8ae 	bl	800a110 <osSemaphoreRelease>
#endif
}
 8009fb4:	bf00      	nop
 8009fb6:	3708      	adds	r7, #8
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f002 fac1 	bl	800c54c <pvPortMalloc>
 8009fca:	4603      	mov	r3, r0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3708      	adds	r7, #8
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b082      	sub	sp, #8
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f002 fb83 	bl	800c6e8 <vPortFree>
}
 8009fe2:	bf00      	nop
 8009fe4:	3708      	adds	r7, #8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009fea:	b480      	push	{r7}
 8009fec:	b083      	sub	sp, #12
 8009fee:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ff0:	f3ef 8305 	mrs	r3, IPSR
 8009ff4:	607b      	str	r3, [r7, #4]
  return(result);
 8009ff6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	bf14      	ite	ne
 8009ffc:	2301      	movne	r3, #1
 8009ffe:	2300      	moveq	r3, #0
 800a000:	b2db      	uxtb	r3, r3
}
 800a002:	4618      	mov	r0, r3
 800a004:	370c      	adds	r7, #12
 800a006:	46bd      	mov	sp, r7
 800a008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00c:	4770      	bx	lr

0800a00e <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a00e:	b580      	push	{r7, lr}
 800a010:	b086      	sub	sp, #24
 800a012:	af02      	add	r7, sp, #8
 800a014:	6078      	str	r0, [r7, #4]
 800a016:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d00f      	beq.n	800a040 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d10a      	bne.n	800a03c <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	2203      	movs	r2, #3
 800a02c:	9200      	str	r2, [sp, #0]
 800a02e:	2200      	movs	r2, #0
 800a030:	2100      	movs	r1, #0
 800a032:	2001      	movs	r0, #1
 800a034:	f000 f9d4 	bl	800a3e0 <xQueueGenericCreateStatic>
 800a038:	4603      	mov	r3, r0
 800a03a:	e016      	b.n	800a06a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a03c:	2300      	movs	r3, #0
 800a03e:	e014      	b.n	800a06a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	2b01      	cmp	r3, #1
 800a044:	d110      	bne.n	800a068 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800a046:	2203      	movs	r2, #3
 800a048:	2100      	movs	r1, #0
 800a04a:	2001      	movs	r0, #1
 800a04c:	f000 fa45 	bl	800a4da <xQueueGenericCreate>
 800a050:	60f8      	str	r0, [r7, #12]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d005      	beq.n	800a064 <osSemaphoreCreate+0x56>
 800a058:	2300      	movs	r3, #0
 800a05a:	2200      	movs	r2, #0
 800a05c:	2100      	movs	r1, #0
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f000 fa96 	bl	800a590 <xQueueGenericSend>
      return sema;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	e000      	b.n	800a06a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a068:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
	...

0800a074 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
 800a07c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a07e:	2300      	movs	r3, #0
 800a080:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d101      	bne.n	800a08c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a088:	2380      	movs	r3, #128	@ 0x80
 800a08a:	e03a      	b.n	800a102 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a08c:	2300      	movs	r3, #0
 800a08e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a096:	d103      	bne.n	800a0a0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a098:	f04f 33ff 	mov.w	r3, #4294967295
 800a09c:	60fb      	str	r3, [r7, #12]
 800a09e:	e009      	b.n	800a0b4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d006      	beq.n	800a0b4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d101      	bne.n	800a0b4 <osSemaphoreWait+0x40>
      ticks = 1;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a0b4:	f7ff ff99 	bl	8009fea <inHandlerMode>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d017      	beq.n	800a0ee <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a0be:	f107 0308 	add.w	r3, r7, #8
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 fde6 	bl	800ac98 <xQueueReceiveFromISR>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d001      	beq.n	800a0d6 <osSemaphoreWait+0x62>
      return osErrorOS;
 800a0d2:	23ff      	movs	r3, #255	@ 0xff
 800a0d4:	e015      	b.n	800a102 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d011      	beq.n	800a100 <osSemaphoreWait+0x8c>
 800a0dc:	4b0b      	ldr	r3, [pc, #44]	@ (800a10c <osSemaphoreWait+0x98>)
 800a0de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0e2:	601a      	str	r2, [r3, #0]
 800a0e4:	f3bf 8f4f 	dsb	sy
 800a0e8:	f3bf 8f6f 	isb	sy
 800a0ec:	e008      	b.n	800a100 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a0ee:	68f9      	ldr	r1, [r7, #12]
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f000 fcc1 	bl	800aa78 <xQueueSemaphoreTake>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d001      	beq.n	800a100 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a0fc:	23ff      	movs	r3, #255	@ 0xff
 800a0fe:	e000      	b.n	800a102 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3710      	adds	r7, #16
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	e000ed04 	.word	0xe000ed04

0800a110 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a118:	2300      	movs	r3, #0
 800a11a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a11c:	2300      	movs	r3, #0
 800a11e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a120:	f7ff ff63 	bl	8009fea <inHandlerMode>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d016      	beq.n	800a158 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a12a:	f107 0308 	add.w	r3, r7, #8
 800a12e:	4619      	mov	r1, r3
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 fb2f 	bl	800a794 <xQueueGiveFromISR>
 800a136:	4603      	mov	r3, r0
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d001      	beq.n	800a140 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a13c:	23ff      	movs	r3, #255	@ 0xff
 800a13e:	e017      	b.n	800a170 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d013      	beq.n	800a16e <osSemaphoreRelease+0x5e>
 800a146:	4b0c      	ldr	r3, [pc, #48]	@ (800a178 <osSemaphoreRelease+0x68>)
 800a148:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a14c:	601a      	str	r2, [r3, #0]
 800a14e:	f3bf 8f4f 	dsb	sy
 800a152:	f3bf 8f6f 	isb	sy
 800a156:	e00a      	b.n	800a16e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a158:	2300      	movs	r3, #0
 800a15a:	2200      	movs	r2, #0
 800a15c:	2100      	movs	r1, #0
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f000 fa16 	bl	800a590 <xQueueGenericSend>
 800a164:	4603      	mov	r3, r0
 800a166:	2b01      	cmp	r3, #1
 800a168:	d001      	beq.n	800a16e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a16a:	23ff      	movs	r3, #255	@ 0xff
 800a16c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a16e:	68fb      	ldr	r3, [r7, #12]
}
 800a170:	4618      	mov	r0, r3
 800a172:	3710      	adds	r7, #16
 800a174:	46bd      	mov	sp, r7
 800a176:	bd80      	pop	{r7, pc}
 800a178:	e000ed04 	.word	0xe000ed04

0800a17c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a184:	f7ff ff31 	bl	8009fea <inHandlerMode>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d001      	beq.n	800a192 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800a18e:	2382      	movs	r3, #130	@ 0x82
 800a190:	e003      	b.n	800a19a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 fe02 	bl	800ad9c <vQueueDelete>

  return osOK; 
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3708      	adds	r7, #8
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a1a2:	b480      	push	{r7}
 800a1a4:	b083      	sub	sp, #12
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f103 0208 	add.w	r2, r3, #8
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ba:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f103 0208 	add.w	r2, r3, #8
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f103 0208 	add.w	r2, r3, #8
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a1d6:	bf00      	nop
 800a1d8:	370c      	adds	r7, #12
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr

0800a1e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	b083      	sub	sp, #12
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a1f0:	bf00      	nop
 800a1f2:	370c      	adds	r7, #12
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fa:	4770      	bx	lr

0800a1fc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	68fa      	ldr	r2, [r7, #12]
 800a210:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	689a      	ldr	r2, [r3, #8]
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	689b      	ldr	r3, [r3, #8]
 800a21e:	683a      	ldr	r2, [r7, #0]
 800a220:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	683a      	ldr	r2, [r7, #0]
 800a226:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	1c5a      	adds	r2, r3, #1
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	601a      	str	r2, [r3, #0]
}
 800a238:	bf00      	nop
 800a23a:	3714      	adds	r7, #20
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
 800a24c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a25a:	d103      	bne.n	800a264 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	60fb      	str	r3, [r7, #12]
 800a262:	e00c      	b.n	800a27e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	3308      	adds	r3, #8
 800a268:	60fb      	str	r3, [r7, #12]
 800a26a:	e002      	b.n	800a272 <vListInsert+0x2e>
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	60fb      	str	r3, [r7, #12]
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	685b      	ldr	r3, [r3, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d2f6      	bcs.n	800a26c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	685a      	ldr	r2, [r3, #4]
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	683a      	ldr	r2, [r7, #0]
 800a28c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	68fa      	ldr	r2, [r7, #12]
 800a292:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	683a      	ldr	r2, [r7, #0]
 800a298:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	687a      	ldr	r2, [r7, #4]
 800a29e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	1c5a      	adds	r2, r3, #1
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	601a      	str	r2, [r3, #0]
}
 800a2aa:	bf00      	nop
 800a2ac:	3714      	adds	r7, #20
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr

0800a2b6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a2b6:	b480      	push	{r7}
 800a2b8:	b085      	sub	sp, #20
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	691b      	ldr	r3, [r3, #16]
 800a2c2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	685b      	ldr	r3, [r3, #4]
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	6892      	ldr	r2, [r2, #8]
 800a2cc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	6852      	ldr	r2, [r2, #4]
 800a2d6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d103      	bne.n	800a2ea <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	689a      	ldr	r2, [r3, #8]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	1e5a      	subs	r2, r3, #1
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3714      	adds	r7, #20
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
	...

0800a30c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10b      	bne.n	800a338 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a332:	bf00      	nop
 800a334:	bf00      	nop
 800a336:	e7fd      	b.n	800a334 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a338:	f001 ffe6 	bl	800c308 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681a      	ldr	r2, [r3, #0]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a344:	68f9      	ldr	r1, [r7, #12]
 800a346:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a348:	fb01 f303 	mul.w	r3, r1, r3
 800a34c:	441a      	add	r2, r3
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2200      	movs	r2, #0
 800a356:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a368:	3b01      	subs	r3, #1
 800a36a:	68f9      	ldr	r1, [r7, #12]
 800a36c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a36e:	fb01 f303 	mul.w	r3, r1, r3
 800a372:	441a      	add	r2, r3
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	22ff      	movs	r2, #255	@ 0xff
 800a37c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	22ff      	movs	r2, #255	@ 0xff
 800a384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d114      	bne.n	800a3b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	691b      	ldr	r3, [r3, #16]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d01a      	beq.n	800a3cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	3310      	adds	r3, #16
 800a39a:	4618      	mov	r0, r3
 800a39c:	f001 fa9c 	bl	800b8d8 <xTaskRemoveFromEventList>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d012      	beq.n	800a3cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a3a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a3dc <xQueueGenericReset+0xd0>)
 800a3a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3ac:	601a      	str	r2, [r3, #0]
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	f3bf 8f6f 	isb	sy
 800a3b6:	e009      	b.n	800a3cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	3310      	adds	r3, #16
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7ff fef0 	bl	800a1a2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	3324      	adds	r3, #36	@ 0x24
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	f7ff feeb 	bl	800a1a2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a3cc:	f001 ffce 	bl	800c36c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a3d0:	2301      	movs	r3, #1
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3710      	adds	r7, #16
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	e000ed04 	.word	0xe000ed04

0800a3e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b08e      	sub	sp, #56	@ 0x38
 800a3e4:	af02      	add	r7, sp, #8
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
 800a3ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d10b      	bne.n	800a40c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a3f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3f8:	f383 8811 	msr	BASEPRI, r3
 800a3fc:	f3bf 8f6f 	isb	sy
 800a400:	f3bf 8f4f 	dsb	sy
 800a404:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a406:	bf00      	nop
 800a408:	bf00      	nop
 800a40a:	e7fd      	b.n	800a408 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d10b      	bne.n	800a42a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a416:	f383 8811 	msr	BASEPRI, r3
 800a41a:	f3bf 8f6f 	isb	sy
 800a41e:	f3bf 8f4f 	dsb	sy
 800a422:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a424:	bf00      	nop
 800a426:	bf00      	nop
 800a428:	e7fd      	b.n	800a426 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d002      	beq.n	800a436 <xQueueGenericCreateStatic+0x56>
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d001      	beq.n	800a43a <xQueueGenericCreateStatic+0x5a>
 800a436:	2301      	movs	r3, #1
 800a438:	e000      	b.n	800a43c <xQueueGenericCreateStatic+0x5c>
 800a43a:	2300      	movs	r3, #0
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d10b      	bne.n	800a458 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a444:	f383 8811 	msr	BASEPRI, r3
 800a448:	f3bf 8f6f 	isb	sy
 800a44c:	f3bf 8f4f 	dsb	sy
 800a450:	623b      	str	r3, [r7, #32]
}
 800a452:	bf00      	nop
 800a454:	bf00      	nop
 800a456:	e7fd      	b.n	800a454 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d102      	bne.n	800a464 <xQueueGenericCreateStatic+0x84>
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d101      	bne.n	800a468 <xQueueGenericCreateStatic+0x88>
 800a464:	2301      	movs	r3, #1
 800a466:	e000      	b.n	800a46a <xQueueGenericCreateStatic+0x8a>
 800a468:	2300      	movs	r3, #0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10b      	bne.n	800a486 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a472:	f383 8811 	msr	BASEPRI, r3
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	f3bf 8f4f 	dsb	sy
 800a47e:	61fb      	str	r3, [r7, #28]
}
 800a480:	bf00      	nop
 800a482:	bf00      	nop
 800a484:	e7fd      	b.n	800a482 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a486:	2348      	movs	r3, #72	@ 0x48
 800a488:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	2b48      	cmp	r3, #72	@ 0x48
 800a48e:	d00b      	beq.n	800a4a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a494:	f383 8811 	msr	BASEPRI, r3
 800a498:	f3bf 8f6f 	isb	sy
 800a49c:	f3bf 8f4f 	dsb	sy
 800a4a0:	61bb      	str	r3, [r7, #24]
}
 800a4a2:	bf00      	nop
 800a4a4:	bf00      	nop
 800a4a6:	e7fd      	b.n	800a4a4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a4a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a4ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d00d      	beq.n	800a4d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a4bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c2:	9300      	str	r3, [sp, #0]
 800a4c4:	4613      	mov	r3, r2
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	68b9      	ldr	r1, [r7, #8]
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f000 f840 	bl	800a550 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3730      	adds	r7, #48	@ 0x30
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b08a      	sub	sp, #40	@ 0x28
 800a4de:	af02      	add	r7, sp, #8
 800a4e0:	60f8      	str	r0, [r7, #12]
 800a4e2:	60b9      	str	r1, [r7, #8]
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d10b      	bne.n	800a506 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f2:	f383 8811 	msr	BASEPRI, r3
 800a4f6:	f3bf 8f6f 	isb	sy
 800a4fa:	f3bf 8f4f 	dsb	sy
 800a4fe:	613b      	str	r3, [r7, #16]
}
 800a500:	bf00      	nop
 800a502:	bf00      	nop
 800a504:	e7fd      	b.n	800a502 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	68ba      	ldr	r2, [r7, #8]
 800a50a:	fb02 f303 	mul.w	r3, r2, r3
 800a50e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	3348      	adds	r3, #72	@ 0x48
 800a514:	4618      	mov	r0, r3
 800a516:	f002 f819 	bl	800c54c <pvPortMalloc>
 800a51a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a51c:	69bb      	ldr	r3, [r7, #24]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d011      	beq.n	800a546 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a522:	69bb      	ldr	r3, [r7, #24]
 800a524:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	3348      	adds	r3, #72	@ 0x48
 800a52a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a534:	79fa      	ldrb	r2, [r7, #7]
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	9300      	str	r3, [sp, #0]
 800a53a:	4613      	mov	r3, r2
 800a53c:	697a      	ldr	r2, [r7, #20]
 800a53e:	68b9      	ldr	r1, [r7, #8]
 800a540:	68f8      	ldr	r0, [r7, #12]
 800a542:	f000 f805 	bl	800a550 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a546:	69bb      	ldr	r3, [r7, #24]
	}
 800a548:	4618      	mov	r0, r3
 800a54a:	3720      	adds	r7, #32
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
 800a55c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d103      	bne.n	800a56c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a564:	69bb      	ldr	r3, [r7, #24]
 800a566:	69ba      	ldr	r2, [r7, #24]
 800a568:	601a      	str	r2, [r3, #0]
 800a56a:	e002      	b.n	800a572 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a572:	69bb      	ldr	r3, [r7, #24]
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	68ba      	ldr	r2, [r7, #8]
 800a57c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a57e:	2101      	movs	r1, #1
 800a580:	69b8      	ldr	r0, [r7, #24]
 800a582:	f7ff fec3 	bl	800a30c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a586:	bf00      	nop
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
	...

0800a590 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b08e      	sub	sp, #56	@ 0x38
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]
 800a59c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a5a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d10b      	bne.n	800a5c4 <xQueueGenericSend+0x34>
	__asm volatile
 800a5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b0:	f383 8811 	msr	BASEPRI, r3
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a5be:	bf00      	nop
 800a5c0:	bf00      	nop
 800a5c2:	e7fd      	b.n	800a5c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d103      	bne.n	800a5d2 <xQueueGenericSend+0x42>
 800a5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d101      	bne.n	800a5d6 <xQueueGenericSend+0x46>
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e000      	b.n	800a5d8 <xQueueGenericSend+0x48>
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d10b      	bne.n	800a5f4 <xQueueGenericSend+0x64>
	__asm volatile
 800a5dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a5ee:	bf00      	nop
 800a5f0:	bf00      	nop
 800a5f2:	e7fd      	b.n	800a5f0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d103      	bne.n	800a602 <xQueueGenericSend+0x72>
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d101      	bne.n	800a606 <xQueueGenericSend+0x76>
 800a602:	2301      	movs	r3, #1
 800a604:	e000      	b.n	800a608 <xQueueGenericSend+0x78>
 800a606:	2300      	movs	r3, #0
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d10b      	bne.n	800a624 <xQueueGenericSend+0x94>
	__asm volatile
 800a60c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a610:	f383 8811 	msr	BASEPRI, r3
 800a614:	f3bf 8f6f 	isb	sy
 800a618:	f3bf 8f4f 	dsb	sy
 800a61c:	623b      	str	r3, [r7, #32]
}
 800a61e:	bf00      	nop
 800a620:	bf00      	nop
 800a622:	e7fd      	b.n	800a620 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a624:	f001 fb18 	bl	800bc58 <xTaskGetSchedulerState>
 800a628:	4603      	mov	r3, r0
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d102      	bne.n	800a634 <xQueueGenericSend+0xa4>
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d101      	bne.n	800a638 <xQueueGenericSend+0xa8>
 800a634:	2301      	movs	r3, #1
 800a636:	e000      	b.n	800a63a <xQueueGenericSend+0xaa>
 800a638:	2300      	movs	r3, #0
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d10b      	bne.n	800a656 <xQueueGenericSend+0xc6>
	__asm volatile
 800a63e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a642:	f383 8811 	msr	BASEPRI, r3
 800a646:	f3bf 8f6f 	isb	sy
 800a64a:	f3bf 8f4f 	dsb	sy
 800a64e:	61fb      	str	r3, [r7, #28]
}
 800a650:	bf00      	nop
 800a652:	bf00      	nop
 800a654:	e7fd      	b.n	800a652 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a656:	f001 fe57 	bl	800c308 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a65c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a65e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a662:	429a      	cmp	r2, r3
 800a664:	d302      	bcc.n	800a66c <xQueueGenericSend+0xdc>
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	2b02      	cmp	r3, #2
 800a66a:	d129      	bne.n	800a6c0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a66c:	683a      	ldr	r2, [r7, #0]
 800a66e:	68b9      	ldr	r1, [r7, #8]
 800a670:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a672:	f000 fbcf 	bl	800ae14 <prvCopyDataToQueue>
 800a676:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a67a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d010      	beq.n	800a6a2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a682:	3324      	adds	r3, #36	@ 0x24
 800a684:	4618      	mov	r0, r3
 800a686:	f001 f927 	bl	800b8d8 <xTaskRemoveFromEventList>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d013      	beq.n	800a6b8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a690:	4b3f      	ldr	r3, [pc, #252]	@ (800a790 <xQueueGenericSend+0x200>)
 800a692:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a696:	601a      	str	r2, [r3, #0]
 800a698:	f3bf 8f4f 	dsb	sy
 800a69c:	f3bf 8f6f 	isb	sy
 800a6a0:	e00a      	b.n	800a6b8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a6a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d007      	beq.n	800a6b8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a6a8:	4b39      	ldr	r3, [pc, #228]	@ (800a790 <xQueueGenericSend+0x200>)
 800a6aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a6ae:	601a      	str	r2, [r3, #0]
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a6b8:	f001 fe58 	bl	800c36c <vPortExitCritical>
				return pdPASS;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e063      	b.n	800a788 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d103      	bne.n	800a6ce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6c6:	f001 fe51 	bl	800c36c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	e05c      	b.n	800a788 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d106      	bne.n	800a6e2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6d4:	f107 0314 	add.w	r3, r7, #20
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f001 f961 	bl	800b9a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6e2:	f001 fe43 	bl	800c36c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6e6:	f000 feff 	bl	800b4e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6ea:	f001 fe0d 	bl	800c308 <vPortEnterCritical>
 800a6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6f4:	b25b      	sxtb	r3, r3
 800a6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6fa:	d103      	bne.n	800a704 <xQueueGenericSend+0x174>
 800a6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fe:	2200      	movs	r2, #0
 800a700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a704:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a706:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a70a:	b25b      	sxtb	r3, r3
 800a70c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a710:	d103      	bne.n	800a71a <xQueueGenericSend+0x18a>
 800a712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a714:	2200      	movs	r2, #0
 800a716:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a71a:	f001 fe27 	bl	800c36c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a71e:	1d3a      	adds	r2, r7, #4
 800a720:	f107 0314 	add.w	r3, r7, #20
 800a724:	4611      	mov	r1, r2
 800a726:	4618      	mov	r0, r3
 800a728:	f001 f950 	bl	800b9cc <xTaskCheckForTimeOut>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d124      	bne.n	800a77c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a732:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a734:	f000 fc66 	bl	800b004 <prvIsQueueFull>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d018      	beq.n	800a770 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a740:	3310      	adds	r3, #16
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	4611      	mov	r1, r2
 800a746:	4618      	mov	r0, r3
 800a748:	f001 f8a0 	bl	800b88c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a74c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a74e:	f000 fbf1 	bl	800af34 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a752:	f000 fed7 	bl	800b504 <xTaskResumeAll>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f47f af7c 	bne.w	800a656 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a75e:	4b0c      	ldr	r3, [pc, #48]	@ (800a790 <xQueueGenericSend+0x200>)
 800a760:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a764:	601a      	str	r2, [r3, #0]
 800a766:	f3bf 8f4f 	dsb	sy
 800a76a:	f3bf 8f6f 	isb	sy
 800a76e:	e772      	b.n	800a656 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a770:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a772:	f000 fbdf 	bl	800af34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a776:	f000 fec5 	bl	800b504 <xTaskResumeAll>
 800a77a:	e76c      	b.n	800a656 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a77c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a77e:	f000 fbd9 	bl	800af34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a782:	f000 febf 	bl	800b504 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a786:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a788:	4618      	mov	r0, r3
 800a78a:	3738      	adds	r7, #56	@ 0x38
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bd80      	pop	{r7, pc}
 800a790:	e000ed04 	.word	0xe000ed04

0800a794 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b08e      	sub	sp, #56	@ 0x38
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d10b      	bne.n	800a7c0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a7a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ac:	f383 8811 	msr	BASEPRI, r3
 800a7b0:	f3bf 8f6f 	isb	sy
 800a7b4:	f3bf 8f4f 	dsb	sy
 800a7b8:	623b      	str	r3, [r7, #32]
}
 800a7ba:	bf00      	nop
 800a7bc:	bf00      	nop
 800a7be:	e7fd      	b.n	800a7bc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d00b      	beq.n	800a7e0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a7c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7cc:	f383 8811 	msr	BASEPRI, r3
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	61fb      	str	r3, [r7, #28]
}
 800a7da:	bf00      	nop
 800a7dc:	bf00      	nop
 800a7de:	e7fd      	b.n	800a7dc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d103      	bne.n	800a7f0 <xQueueGiveFromISR+0x5c>
 800a7e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ea:	689b      	ldr	r3, [r3, #8]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <xQueueGiveFromISR+0x60>
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e000      	b.n	800a7f6 <xQueueGiveFromISR+0x62>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d10b      	bne.n	800a812 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a7fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7fe:	f383 8811 	msr	BASEPRI, r3
 800a802:	f3bf 8f6f 	isb	sy
 800a806:	f3bf 8f4f 	dsb	sy
 800a80a:	61bb      	str	r3, [r7, #24]
}
 800a80c:	bf00      	nop
 800a80e:	bf00      	nop
 800a810:	e7fd      	b.n	800a80e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a812:	f001 fe59 	bl	800c4c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a816:	f3ef 8211 	mrs	r2, BASEPRI
 800a81a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a81e:	f383 8811 	msr	BASEPRI, r3
 800a822:	f3bf 8f6f 	isb	sy
 800a826:	f3bf 8f4f 	dsb	sy
 800a82a:	617a      	str	r2, [r7, #20]
 800a82c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a82e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a830:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a836:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a83a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a83c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a83e:	429a      	cmp	r2, r3
 800a840:	d22b      	bcs.n	800a89a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a844:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a848:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a84e:	1c5a      	adds	r2, r3, #1
 800a850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a852:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a854:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a85c:	d112      	bne.n	800a884 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a85e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a862:	2b00      	cmp	r3, #0
 800a864:	d016      	beq.n	800a894 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a868:	3324      	adds	r3, #36	@ 0x24
 800a86a:	4618      	mov	r0, r3
 800a86c:	f001 f834 	bl	800b8d8 <xTaskRemoveFromEventList>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00e      	beq.n	800a894 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00b      	beq.n	800a894 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	2201      	movs	r2, #1
 800a880:	601a      	str	r2, [r3, #0]
 800a882:	e007      	b.n	800a894 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a884:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a888:	3301      	adds	r3, #1
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	b25a      	sxtb	r2, r3
 800a88e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a894:	2301      	movs	r3, #1
 800a896:	637b      	str	r3, [r7, #52]	@ 0x34
 800a898:	e001      	b.n	800a89e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a89a:	2300      	movs	r3, #0
 800a89c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a89e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a0:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a8a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	3738      	adds	r7, #56	@ 0x38
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b08c      	sub	sp, #48	@ 0x30
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a8c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d10b      	bne.n	800a8e6 <xQueueReceive+0x32>
	__asm volatile
 800a8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	623b      	str	r3, [r7, #32]
}
 800a8e0:	bf00      	nop
 800a8e2:	bf00      	nop
 800a8e4:	e7fd      	b.n	800a8e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a8e6:	68bb      	ldr	r3, [r7, #8]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d103      	bne.n	800a8f4 <xQueueReceive+0x40>
 800a8ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d101      	bne.n	800a8f8 <xQueueReceive+0x44>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e000      	b.n	800a8fa <xQueueReceive+0x46>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d10b      	bne.n	800a916 <xQueueReceive+0x62>
	__asm volatile
 800a8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a902:	f383 8811 	msr	BASEPRI, r3
 800a906:	f3bf 8f6f 	isb	sy
 800a90a:	f3bf 8f4f 	dsb	sy
 800a90e:	61fb      	str	r3, [r7, #28]
}
 800a910:	bf00      	nop
 800a912:	bf00      	nop
 800a914:	e7fd      	b.n	800a912 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a916:	f001 f99f 	bl	800bc58 <xTaskGetSchedulerState>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d102      	bne.n	800a926 <xQueueReceive+0x72>
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d101      	bne.n	800a92a <xQueueReceive+0x76>
 800a926:	2301      	movs	r3, #1
 800a928:	e000      	b.n	800a92c <xQueueReceive+0x78>
 800a92a:	2300      	movs	r3, #0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d10b      	bne.n	800a948 <xQueueReceive+0x94>
	__asm volatile
 800a930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a934:	f383 8811 	msr	BASEPRI, r3
 800a938:	f3bf 8f6f 	isb	sy
 800a93c:	f3bf 8f4f 	dsb	sy
 800a940:	61bb      	str	r3, [r7, #24]
}
 800a942:	bf00      	nop
 800a944:	bf00      	nop
 800a946:	e7fd      	b.n	800a944 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a948:	f001 fcde 	bl	800c308 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a94c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a94e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a950:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a954:	2b00      	cmp	r3, #0
 800a956:	d01f      	beq.n	800a998 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a958:	68b9      	ldr	r1, [r7, #8]
 800a95a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a95c:	f000 fac4 	bl	800aee8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a962:	1e5a      	subs	r2, r3, #1
 800a964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a966:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a96a:	691b      	ldr	r3, [r3, #16]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00f      	beq.n	800a990 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a972:	3310      	adds	r3, #16
 800a974:	4618      	mov	r0, r3
 800a976:	f000 ffaf 	bl	800b8d8 <xTaskRemoveFromEventList>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d007      	beq.n	800a990 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a980:	4b3c      	ldr	r3, [pc, #240]	@ (800aa74 <xQueueReceive+0x1c0>)
 800a982:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a986:	601a      	str	r2, [r3, #0]
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a990:	f001 fcec 	bl	800c36c <vPortExitCritical>
				return pdPASS;
 800a994:	2301      	movs	r3, #1
 800a996:	e069      	b.n	800aa6c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d103      	bne.n	800a9a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a99e:	f001 fce5 	bl	800c36c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	e062      	b.n	800aa6c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a9a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d106      	bne.n	800a9ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a9ac:	f107 0310 	add.w	r3, r7, #16
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f000 fff5 	bl	800b9a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9ba:	f001 fcd7 	bl	800c36c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9be:	f000 fd93 	bl	800b4e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9c2:	f001 fca1 	bl	800c308 <vPortEnterCritical>
 800a9c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9cc:	b25b      	sxtb	r3, r3
 800a9ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9d2:	d103      	bne.n	800a9dc <xQueueReceive+0x128>
 800a9d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9e2:	b25b      	sxtb	r3, r3
 800a9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9e8:	d103      	bne.n	800a9f2 <xQueueReceive+0x13e>
 800a9ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a9f2:	f001 fcbb 	bl	800c36c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9f6:	1d3a      	adds	r2, r7, #4
 800a9f8:	f107 0310 	add.w	r3, r7, #16
 800a9fc:	4611      	mov	r1, r2
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f000 ffe4 	bl	800b9cc <xTaskCheckForTimeOut>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d123      	bne.n	800aa52 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa0c:	f000 fae4 	bl	800afd8 <prvIsQueueEmpty>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d017      	beq.n	800aa46 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa18:	3324      	adds	r3, #36	@ 0x24
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	4611      	mov	r1, r2
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f000 ff34 	bl	800b88c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa26:	f000 fa85 	bl	800af34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa2a:	f000 fd6b 	bl	800b504 <xTaskResumeAll>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d189      	bne.n	800a948 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800aa34:	4b0f      	ldr	r3, [pc, #60]	@ (800aa74 <xQueueReceive+0x1c0>)
 800aa36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa3a:	601a      	str	r2, [r3, #0]
 800aa3c:	f3bf 8f4f 	dsb	sy
 800aa40:	f3bf 8f6f 	isb	sy
 800aa44:	e780      	b.n	800a948 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aa46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa48:	f000 fa74 	bl	800af34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa4c:	f000 fd5a 	bl	800b504 <xTaskResumeAll>
 800aa50:	e77a      	b.n	800a948 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800aa52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa54:	f000 fa6e 	bl	800af34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa58:	f000 fd54 	bl	800b504 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa5e:	f000 fabb 	bl	800afd8 <prvIsQueueEmpty>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	f43f af6f 	beq.w	800a948 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa6a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3730      	adds	r7, #48	@ 0x30
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}
 800aa74:	e000ed04 	.word	0xe000ed04

0800aa78 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b08e      	sub	sp, #56	@ 0x38
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa82:	2300      	movs	r3, #0
 800aa84:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d10b      	bne.n	800aaac <xQueueSemaphoreTake+0x34>
	__asm volatile
 800aa94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa98:	f383 8811 	msr	BASEPRI, r3
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	f3bf 8f4f 	dsb	sy
 800aaa4:	623b      	str	r3, [r7, #32]
}
 800aaa6:	bf00      	nop
 800aaa8:	bf00      	nop
 800aaaa:	e7fd      	b.n	800aaa8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aaac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d00b      	beq.n	800aacc <xQueueSemaphoreTake+0x54>
	__asm volatile
 800aab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aab8:	f383 8811 	msr	BASEPRI, r3
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	f3bf 8f4f 	dsb	sy
 800aac4:	61fb      	str	r3, [r7, #28]
}
 800aac6:	bf00      	nop
 800aac8:	bf00      	nop
 800aaca:	e7fd      	b.n	800aac8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aacc:	f001 f8c4 	bl	800bc58 <xTaskGetSchedulerState>
 800aad0:	4603      	mov	r3, r0
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d102      	bne.n	800aadc <xQueueSemaphoreTake+0x64>
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d101      	bne.n	800aae0 <xQueueSemaphoreTake+0x68>
 800aadc:	2301      	movs	r3, #1
 800aade:	e000      	b.n	800aae2 <xQueueSemaphoreTake+0x6a>
 800aae0:	2300      	movs	r3, #0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d10b      	bne.n	800aafe <xQueueSemaphoreTake+0x86>
	__asm volatile
 800aae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaea:	f383 8811 	msr	BASEPRI, r3
 800aaee:	f3bf 8f6f 	isb	sy
 800aaf2:	f3bf 8f4f 	dsb	sy
 800aaf6:	61bb      	str	r3, [r7, #24]
}
 800aaf8:	bf00      	nop
 800aafa:	bf00      	nop
 800aafc:	e7fd      	b.n	800aafa <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aafe:	f001 fc03 	bl	800c308 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ab02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab06:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ab08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d024      	beq.n	800ab58 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ab0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab10:	1e5a      	subs	r2, r3, #1
 800ab12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab14:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d104      	bne.n	800ab28 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ab1e:	f001 fa47 	bl	800bfb0 <pvTaskIncrementMutexHeldCount>
 800ab22:	4602      	mov	r2, r0
 800ab24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab26:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab2a:	691b      	ldr	r3, [r3, #16]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d00f      	beq.n	800ab50 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab32:	3310      	adds	r3, #16
 800ab34:	4618      	mov	r0, r3
 800ab36:	f000 fecf 	bl	800b8d8 <xTaskRemoveFromEventList>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d007      	beq.n	800ab50 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ab40:	4b54      	ldr	r3, [pc, #336]	@ (800ac94 <xQueueSemaphoreTake+0x21c>)
 800ab42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab46:	601a      	str	r2, [r3, #0]
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ab50:	f001 fc0c 	bl	800c36c <vPortExitCritical>
				return pdPASS;
 800ab54:	2301      	movs	r3, #1
 800ab56:	e098      	b.n	800ac8a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d112      	bne.n	800ab84 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d00b      	beq.n	800ab7c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800ab64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab68:	f383 8811 	msr	BASEPRI, r3
 800ab6c:	f3bf 8f6f 	isb	sy
 800ab70:	f3bf 8f4f 	dsb	sy
 800ab74:	617b      	str	r3, [r7, #20]
}
 800ab76:	bf00      	nop
 800ab78:	bf00      	nop
 800ab7a:	e7fd      	b.n	800ab78 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ab7c:	f001 fbf6 	bl	800c36c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab80:	2300      	movs	r3, #0
 800ab82:	e082      	b.n	800ac8a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d106      	bne.n	800ab98 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab8a:	f107 030c 	add.w	r3, r7, #12
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f000 ff06 	bl	800b9a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab94:	2301      	movs	r3, #1
 800ab96:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab98:	f001 fbe8 	bl	800c36c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab9c:	f000 fca4 	bl	800b4e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aba0:	f001 fbb2 	bl	800c308 <vPortEnterCritical>
 800aba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aba6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800abaa:	b25b      	sxtb	r3, r3
 800abac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb0:	d103      	bne.n	800abba <xQueueSemaphoreTake+0x142>
 800abb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb4:	2200      	movs	r2, #0
 800abb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800abba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abbc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800abc0:	b25b      	sxtb	r3, r3
 800abc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc6:	d103      	bne.n	800abd0 <xQueueSemaphoreTake+0x158>
 800abc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abca:	2200      	movs	r2, #0
 800abcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800abd0:	f001 fbcc 	bl	800c36c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abd4:	463a      	mov	r2, r7
 800abd6:	f107 030c 	add.w	r3, r7, #12
 800abda:	4611      	mov	r1, r2
 800abdc:	4618      	mov	r0, r3
 800abde:	f000 fef5 	bl	800b9cc <xTaskCheckForTimeOut>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d132      	bne.n	800ac4e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800abe8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800abea:	f000 f9f5 	bl	800afd8 <prvIsQueueEmpty>
 800abee:	4603      	mov	r3, r0
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d026      	beq.n	800ac42 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800abf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d109      	bne.n	800ac10 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800abfc:	f001 fb84 	bl	800c308 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ac00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	4618      	mov	r0, r3
 800ac06:	f001 f845 	bl	800bc94 <xTaskPriorityInherit>
 800ac0a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ac0c:	f001 fbae 	bl	800c36c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac12:	3324      	adds	r3, #36	@ 0x24
 800ac14:	683a      	ldr	r2, [r7, #0]
 800ac16:	4611      	mov	r1, r2
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f000 fe37 	bl	800b88c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ac1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ac20:	f000 f988 	bl	800af34 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ac24:	f000 fc6e 	bl	800b504 <xTaskResumeAll>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	f47f af67 	bne.w	800aafe <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ac30:	4b18      	ldr	r3, [pc, #96]	@ (800ac94 <xQueueSemaphoreTake+0x21c>)
 800ac32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac36:	601a      	str	r2, [r3, #0]
 800ac38:	f3bf 8f4f 	dsb	sy
 800ac3c:	f3bf 8f6f 	isb	sy
 800ac40:	e75d      	b.n	800aafe <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ac42:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ac44:	f000 f976 	bl	800af34 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac48:	f000 fc5c 	bl	800b504 <xTaskResumeAll>
 800ac4c:	e757      	b.n	800aafe <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ac4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ac50:	f000 f970 	bl	800af34 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac54:	f000 fc56 	bl	800b504 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ac5a:	f000 f9bd 	bl	800afd8 <prvIsQueueEmpty>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f43f af4c 	beq.w	800aafe <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ac66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00d      	beq.n	800ac88 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800ac6c:	f001 fb4c 	bl	800c308 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ac70:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ac72:	f000 f8b7 	bl	800ade4 <prvGetDisinheritPriorityAfterTimeout>
 800ac76:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ac78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f001 f906 	bl	800be90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ac84:	f001 fb72 	bl	800c36c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3738      	adds	r7, #56	@ 0x38
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	e000ed04 	.word	0xe000ed04

0800ac98 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b08e      	sub	sp, #56	@ 0x38
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800aca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d10b      	bne.n	800acc6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800acae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acb2:	f383 8811 	msr	BASEPRI, r3
 800acb6:	f3bf 8f6f 	isb	sy
 800acba:	f3bf 8f4f 	dsb	sy
 800acbe:	623b      	str	r3, [r7, #32]
}
 800acc0:	bf00      	nop
 800acc2:	bf00      	nop
 800acc4:	e7fd      	b.n	800acc2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d103      	bne.n	800acd4 <xQueueReceiveFromISR+0x3c>
 800accc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d101      	bne.n	800acd8 <xQueueReceiveFromISR+0x40>
 800acd4:	2301      	movs	r3, #1
 800acd6:	e000      	b.n	800acda <xQueueReceiveFromISR+0x42>
 800acd8:	2300      	movs	r3, #0
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d10b      	bne.n	800acf6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800acde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ace2:	f383 8811 	msr	BASEPRI, r3
 800ace6:	f3bf 8f6f 	isb	sy
 800acea:	f3bf 8f4f 	dsb	sy
 800acee:	61fb      	str	r3, [r7, #28]
}
 800acf0:	bf00      	nop
 800acf2:	bf00      	nop
 800acf4:	e7fd      	b.n	800acf2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800acf6:	f001 fbe7 	bl	800c4c8 <vPortValidateInterruptPriority>
	__asm volatile
 800acfa:	f3ef 8211 	mrs	r2, BASEPRI
 800acfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad02:	f383 8811 	msr	BASEPRI, r3
 800ad06:	f3bf 8f6f 	isb	sy
 800ad0a:	f3bf 8f4f 	dsb	sy
 800ad0e:	61ba      	str	r2, [r7, #24]
 800ad10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ad12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad14:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad1a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d02f      	beq.n	800ad82 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ad22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad2c:	68b9      	ldr	r1, [r7, #8]
 800ad2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad30:	f000 f8da 	bl	800aee8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad36:	1e5a      	subs	r2, r3, #1
 800ad38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad3a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ad3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800ad40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad44:	d112      	bne.n	800ad6c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad48:	691b      	ldr	r3, [r3, #16]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d016      	beq.n	800ad7c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad50:	3310      	adds	r3, #16
 800ad52:	4618      	mov	r0, r3
 800ad54:	f000 fdc0 	bl	800b8d8 <xTaskRemoveFromEventList>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d00e      	beq.n	800ad7c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d00b      	beq.n	800ad7c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2201      	movs	r2, #1
 800ad68:	601a      	str	r2, [r3, #0]
 800ad6a:	e007      	b.n	800ad7c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ad6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ad70:	3301      	adds	r3, #1
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	b25a      	sxtb	r2, r3
 800ad76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad80:	e001      	b.n	800ad86 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800ad82:	2300      	movs	r3, #0
 800ad84:	637b      	str	r3, [r7, #52]	@ 0x34
 800ad86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad88:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	f383 8811 	msr	BASEPRI, r3
}
 800ad90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3738      	adds	r7, #56	@ 0x38
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d10b      	bne.n	800adc6 <vQueueDelete+0x2a>
	__asm volatile
 800adae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb2:	f383 8811 	msr	BASEPRI, r3
 800adb6:	f3bf 8f6f 	isb	sy
 800adba:	f3bf 8f4f 	dsb	sy
 800adbe:	60bb      	str	r3, [r7, #8]
}
 800adc0:	bf00      	nop
 800adc2:	bf00      	nop
 800adc4:	e7fd      	b.n	800adc2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800adc6:	68f8      	ldr	r0, [r7, #12]
 800adc8:	f000 f934 	bl	800b034 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800add2:	2b00      	cmp	r3, #0
 800add4:	d102      	bne.n	800addc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800add6:	68f8      	ldr	r0, [r7, #12]
 800add8:	f001 fc86 	bl	800c6e8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800addc:	bf00      	nop
 800adde:	3710      	adds	r7, #16
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ade4:	b480      	push	{r7}
 800ade6:	b085      	sub	sp, #20
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d006      	beq.n	800ae02 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f1c3 0307 	rsb	r3, r3, #7
 800adfe:	60fb      	str	r3, [r7, #12]
 800ae00:	e001      	b.n	800ae06 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ae02:	2300      	movs	r3, #0
 800ae04:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ae06:	68fb      	ldr	r3, [r7, #12]
	}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3714      	adds	r7, #20
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b086      	sub	sp, #24
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae20:	2300      	movs	r3, #0
 800ae22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d10d      	bne.n	800ae4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d14d      	bne.n	800aed6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f000 ff9e 	bl	800bd80 <xTaskPriorityDisinherit>
 800ae44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	2200      	movs	r2, #0
 800ae4a:	609a      	str	r2, [r3, #8]
 800ae4c:	e043      	b.n	800aed6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d119      	bne.n	800ae88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6858      	ldr	r0, [r3, #4]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	68b9      	ldr	r1, [r7, #8]
 800ae60:	f001 ff3f 	bl	800cce2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	685a      	ldr	r2, [r3, #4]
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae6c:	441a      	add	r2, r3
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	685a      	ldr	r2, [r3, #4]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	429a      	cmp	r2, r3
 800ae7c:	d32b      	bcc.n	800aed6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	605a      	str	r2, [r3, #4]
 800ae86:	e026      	b.n	800aed6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	68d8      	ldr	r0, [r3, #12]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae90:	461a      	mov	r2, r3
 800ae92:	68b9      	ldr	r1, [r7, #8]
 800ae94:	f001 ff25 	bl	800cce2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	68da      	ldr	r2, [r3, #12]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aea0:	425b      	negs	r3, r3
 800aea2:	441a      	add	r2, r3
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	68da      	ldr	r2, [r3, #12]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d207      	bcs.n	800aec4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	689a      	ldr	r2, [r3, #8]
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aebc:	425b      	negs	r3, r3
 800aebe:	441a      	add	r2, r3
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	d105      	bne.n	800aed6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d002      	beq.n	800aed6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	3b01      	subs	r3, #1
 800aed4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	1c5a      	adds	r2, r3, #1
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800aede:	697b      	ldr	r3, [r7, #20]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3718      	adds	r7, #24
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b082      	sub	sp, #8
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d018      	beq.n	800af2c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	68da      	ldr	r2, [r3, #12]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af02:	441a      	add	r2, r3
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	68da      	ldr	r2, [r3, #12]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	429a      	cmp	r2, r3
 800af12:	d303      	bcc.n	800af1c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	68d9      	ldr	r1, [r3, #12]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af24:	461a      	mov	r2, r3
 800af26:	6838      	ldr	r0, [r7, #0]
 800af28:	f001 fedb 	bl	800cce2 <memcpy>
	}
}
 800af2c:	bf00      	nop
 800af2e:	3708      	adds	r7, #8
 800af30:	46bd      	mov	sp, r7
 800af32:	bd80      	pop	{r7, pc}

0800af34 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b084      	sub	sp, #16
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800af3c:	f001 f9e4 	bl	800c308 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af46:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af48:	e011      	b.n	800af6e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d012      	beq.n	800af78 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	3324      	adds	r3, #36	@ 0x24
 800af56:	4618      	mov	r0, r3
 800af58:	f000 fcbe 	bl	800b8d8 <xTaskRemoveFromEventList>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d001      	beq.n	800af66 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af62:	f000 fd97 	bl	800ba94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af66:	7bfb      	ldrb	r3, [r7, #15]
 800af68:	3b01      	subs	r3, #1
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af72:	2b00      	cmp	r3, #0
 800af74:	dce9      	bgt.n	800af4a <prvUnlockQueue+0x16>
 800af76:	e000      	b.n	800af7a <prvUnlockQueue+0x46>
					break;
 800af78:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	22ff      	movs	r2, #255	@ 0xff
 800af7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800af82:	f001 f9f3 	bl	800c36c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800af86:	f001 f9bf 	bl	800c308 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af90:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af92:	e011      	b.n	800afb8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	691b      	ldr	r3, [r3, #16]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d012      	beq.n	800afc2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	3310      	adds	r3, #16
 800afa0:	4618      	mov	r0, r3
 800afa2:	f000 fc99 	bl	800b8d8 <xTaskRemoveFromEventList>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d001      	beq.n	800afb0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800afac:	f000 fd72 	bl	800ba94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800afb0:	7bbb      	ldrb	r3, [r7, #14]
 800afb2:	3b01      	subs	r3, #1
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800afb8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	dce9      	bgt.n	800af94 <prvUnlockQueue+0x60>
 800afc0:	e000      	b.n	800afc4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800afc2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	22ff      	movs	r2, #255	@ 0xff
 800afc8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800afcc:	f001 f9ce 	bl	800c36c <vPortExitCritical>
}
 800afd0:	bf00      	nop
 800afd2:	3710      	adds	r7, #16
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b084      	sub	sp, #16
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800afe0:	f001 f992 	bl	800c308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d102      	bne.n	800aff2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800afec:	2301      	movs	r3, #1
 800afee:	60fb      	str	r3, [r7, #12]
 800aff0:	e001      	b.n	800aff6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aff2:	2300      	movs	r3, #0
 800aff4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aff6:	f001 f9b9 	bl	800c36c <vPortExitCritical>

	return xReturn;
 800affa:	68fb      	ldr	r3, [r7, #12]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3710      	adds	r7, #16
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b00c:	f001 f97c 	bl	800c308 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b018:	429a      	cmp	r2, r3
 800b01a:	d102      	bne.n	800b022 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b01c:	2301      	movs	r3, #1
 800b01e:	60fb      	str	r3, [r7, #12]
 800b020:	e001      	b.n	800b026 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b022:	2300      	movs	r3, #0
 800b024:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b026:	f001 f9a1 	bl	800c36c <vPortExitCritical>

	return xReturn;
 800b02a:	68fb      	ldr	r3, [r7, #12]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3710      	adds	r7, #16
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b034:	b480      	push	{r7}
 800b036:	b085      	sub	sp, #20
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b03c:	2300      	movs	r3, #0
 800b03e:	60fb      	str	r3, [r7, #12]
 800b040:	e016      	b.n	800b070 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b042:	4a10      	ldr	r2, [pc, #64]	@ (800b084 <vQueueUnregisterQueue+0x50>)
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	00db      	lsls	r3, r3, #3
 800b048:	4413      	add	r3, r2
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d10b      	bne.n	800b06a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b052:	4a0c      	ldr	r2, [pc, #48]	@ (800b084 <vQueueUnregisterQueue+0x50>)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2100      	movs	r1, #0
 800b058:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b05c:	4a09      	ldr	r2, [pc, #36]	@ (800b084 <vQueueUnregisterQueue+0x50>)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	00db      	lsls	r3, r3, #3
 800b062:	4413      	add	r3, r2
 800b064:	2200      	movs	r2, #0
 800b066:	605a      	str	r2, [r3, #4]
				break;
 800b068:	e006      	b.n	800b078 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	3301      	adds	r3, #1
 800b06e:	60fb      	str	r3, [r7, #12]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2b07      	cmp	r3, #7
 800b074:	d9e5      	bls.n	800b042 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b076:	bf00      	nop
 800b078:	bf00      	nop
 800b07a:	3714      	adds	r7, #20
 800b07c:	46bd      	mov	sp, r7
 800b07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b082:	4770      	bx	lr
 800b084:	20002b08 	.word	0x20002b08

0800b088 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b08e      	sub	sp, #56	@ 0x38
 800b08c:	af04      	add	r7, sp, #16
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
 800b094:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d10b      	bne.n	800b0b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b09c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0a0:	f383 8811 	msr	BASEPRI, r3
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	623b      	str	r3, [r7, #32]
}
 800b0ae:	bf00      	nop
 800b0b0:	bf00      	nop
 800b0b2:	e7fd      	b.n	800b0b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d10b      	bne.n	800b0d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b0ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0be:	f383 8811 	msr	BASEPRI, r3
 800b0c2:	f3bf 8f6f 	isb	sy
 800b0c6:	f3bf 8f4f 	dsb	sy
 800b0ca:	61fb      	str	r3, [r7, #28]
}
 800b0cc:	bf00      	nop
 800b0ce:	bf00      	nop
 800b0d0:	e7fd      	b.n	800b0ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b0d2:	2354      	movs	r3, #84	@ 0x54
 800b0d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	2b54      	cmp	r3, #84	@ 0x54
 800b0da:	d00b      	beq.n	800b0f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e0:	f383 8811 	msr	BASEPRI, r3
 800b0e4:	f3bf 8f6f 	isb	sy
 800b0e8:	f3bf 8f4f 	dsb	sy
 800b0ec:	61bb      	str	r3, [r7, #24]
}
 800b0ee:	bf00      	nop
 800b0f0:	bf00      	nop
 800b0f2:	e7fd      	b.n	800b0f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b0f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b0f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d01e      	beq.n	800b13a <xTaskCreateStatic+0xb2>
 800b0fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d01b      	beq.n	800b13a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b104:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b108:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b10a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b10e:	2202      	movs	r2, #2
 800b110:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b114:	2300      	movs	r3, #0
 800b116:	9303      	str	r3, [sp, #12]
 800b118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11a:	9302      	str	r3, [sp, #8]
 800b11c:	f107 0314 	add.w	r3, r7, #20
 800b120:	9301      	str	r3, [sp, #4]
 800b122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b124:	9300      	str	r3, [sp, #0]
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	68b9      	ldr	r1, [r7, #8]
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	f000 f850 	bl	800b1d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b132:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b134:	f000 f8d6 	bl	800b2e4 <prvAddNewTaskToReadyList>
 800b138:	e001      	b.n	800b13e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b13a:	2300      	movs	r3, #0
 800b13c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b13e:	697b      	ldr	r3, [r7, #20]
	}
 800b140:	4618      	mov	r0, r3
 800b142:	3728      	adds	r7, #40	@ 0x28
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b08c      	sub	sp, #48	@ 0x30
 800b14c:	af04      	add	r7, sp, #16
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	603b      	str	r3, [r7, #0]
 800b154:	4613      	mov	r3, r2
 800b156:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b158:	88fb      	ldrh	r3, [r7, #6]
 800b15a:	009b      	lsls	r3, r3, #2
 800b15c:	4618      	mov	r0, r3
 800b15e:	f001 f9f5 	bl	800c54c <pvPortMalloc>
 800b162:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b164:	697b      	ldr	r3, [r7, #20]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00e      	beq.n	800b188 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b16a:	2054      	movs	r0, #84	@ 0x54
 800b16c:	f001 f9ee 	bl	800c54c <pvPortMalloc>
 800b170:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d003      	beq.n	800b180 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	697a      	ldr	r2, [r7, #20]
 800b17c:	631a      	str	r2, [r3, #48]	@ 0x30
 800b17e:	e005      	b.n	800b18c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b180:	6978      	ldr	r0, [r7, #20]
 800b182:	f001 fab1 	bl	800c6e8 <vPortFree>
 800b186:	e001      	b.n	800b18c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b188:	2300      	movs	r3, #0
 800b18a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b18c:	69fb      	ldr	r3, [r7, #28]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d017      	beq.n	800b1c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b192:	69fb      	ldr	r3, [r7, #28]
 800b194:	2200      	movs	r2, #0
 800b196:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b19a:	88fa      	ldrh	r2, [r7, #6]
 800b19c:	2300      	movs	r3, #0
 800b19e:	9303      	str	r3, [sp, #12]
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	9302      	str	r3, [sp, #8]
 800b1a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1a6:	9301      	str	r3, [sp, #4]
 800b1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1aa:	9300      	str	r3, [sp, #0]
 800b1ac:	683b      	ldr	r3, [r7, #0]
 800b1ae:	68b9      	ldr	r1, [r7, #8]
 800b1b0:	68f8      	ldr	r0, [r7, #12]
 800b1b2:	f000 f80e 	bl	800b1d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1b6:	69f8      	ldr	r0, [r7, #28]
 800b1b8:	f000 f894 	bl	800b2e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	61bb      	str	r3, [r7, #24]
 800b1c0:	e002      	b.n	800b1c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b1c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b1c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b1c8:	69bb      	ldr	r3, [r7, #24]
	}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3720      	adds	r7, #32
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b088      	sub	sp, #32
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	60f8      	str	r0, [r7, #12]
 800b1da:	60b9      	str	r1, [r7, #8]
 800b1dc:	607a      	str	r2, [r7, #4]
 800b1de:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b1e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	009b      	lsls	r3, r3, #2
 800b1ee:	4413      	add	r3, r2
 800b1f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	f023 0307 	bic.w	r3, r3, #7
 800b1f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	f003 0307 	and.w	r3, r3, #7
 800b200:	2b00      	cmp	r3, #0
 800b202:	d00b      	beq.n	800b21c <prvInitialiseNewTask+0x4a>
	__asm volatile
 800b204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b208:	f383 8811 	msr	BASEPRI, r3
 800b20c:	f3bf 8f6f 	isb	sy
 800b210:	f3bf 8f4f 	dsb	sy
 800b214:	617b      	str	r3, [r7, #20]
}
 800b216:	bf00      	nop
 800b218:	bf00      	nop
 800b21a:	e7fd      	b.n	800b218 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d01f      	beq.n	800b262 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b222:	2300      	movs	r3, #0
 800b224:	61fb      	str	r3, [r7, #28]
 800b226:	e012      	b.n	800b24e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b228:	68ba      	ldr	r2, [r7, #8]
 800b22a:	69fb      	ldr	r3, [r7, #28]
 800b22c:	4413      	add	r3, r2
 800b22e:	7819      	ldrb	r1, [r3, #0]
 800b230:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b232:	69fb      	ldr	r3, [r7, #28]
 800b234:	4413      	add	r3, r2
 800b236:	3334      	adds	r3, #52	@ 0x34
 800b238:	460a      	mov	r2, r1
 800b23a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b23c:	68ba      	ldr	r2, [r7, #8]
 800b23e:	69fb      	ldr	r3, [r7, #28]
 800b240:	4413      	add	r3, r2
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d006      	beq.n	800b256 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b248:	69fb      	ldr	r3, [r7, #28]
 800b24a:	3301      	adds	r3, #1
 800b24c:	61fb      	str	r3, [r7, #28]
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	2b0f      	cmp	r3, #15
 800b252:	d9e9      	bls.n	800b228 <prvInitialiseNewTask+0x56>
 800b254:	e000      	b.n	800b258 <prvInitialiseNewTask+0x86>
			{
				break;
 800b256:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b25a:	2200      	movs	r2, #0
 800b25c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b260:	e003      	b.n	800b26a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b264:	2200      	movs	r2, #0
 800b266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b26c:	2b06      	cmp	r3, #6
 800b26e:	d901      	bls.n	800b274 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b270:	2306      	movs	r3, #6
 800b272:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b276:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b278:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b27c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b27e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b282:	2200      	movs	r2, #0
 800b284:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b288:	3304      	adds	r3, #4
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7fe ffa9 	bl	800a1e2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b292:	3318      	adds	r3, #24
 800b294:	4618      	mov	r0, r3
 800b296:	f7fe ffa4 	bl	800a1e2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b29a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b29c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b29e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a2:	f1c3 0207 	rsb	r2, r3, #7
 800b2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b2aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2ae:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b2b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b2be:	683a      	ldr	r2, [r7, #0]
 800b2c0:	68f9      	ldr	r1, [r7, #12]
 800b2c2:	69b8      	ldr	r0, [r7, #24]
 800b2c4:	f000 feee 	bl	800c0a4 <pxPortInitialiseStack>
 800b2c8:	4602      	mov	r2, r0
 800b2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b2ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d002      	beq.n	800b2da <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2da:	bf00      	nop
 800b2dc:	3720      	adds	r7, #32
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
	...

0800b2e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b2ec:	f001 f80c 	bl	800c308 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b2f0:	4b2a      	ldr	r3, [pc, #168]	@ (800b39c <prvAddNewTaskToReadyList+0xb8>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	4a29      	ldr	r2, [pc, #164]	@ (800b39c <prvAddNewTaskToReadyList+0xb8>)
 800b2f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b2fa:	4b29      	ldr	r3, [pc, #164]	@ (800b3a0 <prvAddNewTaskToReadyList+0xbc>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d109      	bne.n	800b316 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b302:	4a27      	ldr	r2, [pc, #156]	@ (800b3a0 <prvAddNewTaskToReadyList+0xbc>)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b308:	4b24      	ldr	r3, [pc, #144]	@ (800b39c <prvAddNewTaskToReadyList+0xb8>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d110      	bne.n	800b332 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b310:	f000 fbe4 	bl	800badc <prvInitialiseTaskLists>
 800b314:	e00d      	b.n	800b332 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b316:	4b23      	ldr	r3, [pc, #140]	@ (800b3a4 <prvAddNewTaskToReadyList+0xc0>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d109      	bne.n	800b332 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b31e:	4b20      	ldr	r3, [pc, #128]	@ (800b3a0 <prvAddNewTaskToReadyList+0xbc>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b328:	429a      	cmp	r2, r3
 800b32a:	d802      	bhi.n	800b332 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b32c:	4a1c      	ldr	r2, [pc, #112]	@ (800b3a0 <prvAddNewTaskToReadyList+0xbc>)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b332:	4b1d      	ldr	r3, [pc, #116]	@ (800b3a8 <prvAddNewTaskToReadyList+0xc4>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	3301      	adds	r3, #1
 800b338:	4a1b      	ldr	r2, [pc, #108]	@ (800b3a8 <prvAddNewTaskToReadyList+0xc4>)
 800b33a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b340:	2201      	movs	r2, #1
 800b342:	409a      	lsls	r2, r3
 800b344:	4b19      	ldr	r3, [pc, #100]	@ (800b3ac <prvAddNewTaskToReadyList+0xc8>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4313      	orrs	r3, r2
 800b34a:	4a18      	ldr	r2, [pc, #96]	@ (800b3ac <prvAddNewTaskToReadyList+0xc8>)
 800b34c:	6013      	str	r3, [r2, #0]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b352:	4613      	mov	r3, r2
 800b354:	009b      	lsls	r3, r3, #2
 800b356:	4413      	add	r3, r2
 800b358:	009b      	lsls	r3, r3, #2
 800b35a:	4a15      	ldr	r2, [pc, #84]	@ (800b3b0 <prvAddNewTaskToReadyList+0xcc>)
 800b35c:	441a      	add	r2, r3
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	3304      	adds	r3, #4
 800b362:	4619      	mov	r1, r3
 800b364:	4610      	mov	r0, r2
 800b366:	f7fe ff49 	bl	800a1fc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b36a:	f000 ffff 	bl	800c36c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b36e:	4b0d      	ldr	r3, [pc, #52]	@ (800b3a4 <prvAddNewTaskToReadyList+0xc0>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d00e      	beq.n	800b394 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b376:	4b0a      	ldr	r3, [pc, #40]	@ (800b3a0 <prvAddNewTaskToReadyList+0xbc>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b380:	429a      	cmp	r2, r3
 800b382:	d207      	bcs.n	800b394 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b384:	4b0b      	ldr	r3, [pc, #44]	@ (800b3b4 <prvAddNewTaskToReadyList+0xd0>)
 800b386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b38a:	601a      	str	r2, [r3, #0]
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b394:	bf00      	nop
 800b396:	3708      	adds	r7, #8
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	20002c48 	.word	0x20002c48
 800b3a0:	20002b48 	.word	0x20002b48
 800b3a4:	20002c54 	.word	0x20002c54
 800b3a8:	20002c64 	.word	0x20002c64
 800b3ac:	20002c50 	.word	0x20002c50
 800b3b0:	20002b4c 	.word	0x20002b4c
 800b3b4:	e000ed04 	.word	0xe000ed04

0800b3b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d018      	beq.n	800b3fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b3ca:	4b14      	ldr	r3, [pc, #80]	@ (800b41c <vTaskDelay+0x64>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d00b      	beq.n	800b3ea <vTaskDelay+0x32>
	__asm volatile
 800b3d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d6:	f383 8811 	msr	BASEPRI, r3
 800b3da:	f3bf 8f6f 	isb	sy
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	60bb      	str	r3, [r7, #8]
}
 800b3e4:	bf00      	nop
 800b3e6:	bf00      	nop
 800b3e8:	e7fd      	b.n	800b3e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b3ea:	f000 f87d 	bl	800b4e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b3ee:	2100      	movs	r1, #0
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f000 fdf1 	bl	800bfd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b3f6:	f000 f885 	bl	800b504 <xTaskResumeAll>
 800b3fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d107      	bne.n	800b412 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b402:	4b07      	ldr	r3, [pc, #28]	@ (800b420 <vTaskDelay+0x68>)
 800b404:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b408:	601a      	str	r2, [r3, #0]
 800b40a:	f3bf 8f4f 	dsb	sy
 800b40e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b412:	bf00      	nop
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	20002c70 	.word	0x20002c70
 800b420:	e000ed04 	.word	0xe000ed04

0800b424 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b08a      	sub	sp, #40	@ 0x28
 800b428:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b42a:	2300      	movs	r3, #0
 800b42c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b42e:	2300      	movs	r3, #0
 800b430:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b432:	463a      	mov	r2, r7
 800b434:	1d39      	adds	r1, r7, #4
 800b436:	f107 0308 	add.w	r3, r7, #8
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7f5 f8b0 	bl	80005a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b440:	6839      	ldr	r1, [r7, #0]
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	9202      	str	r2, [sp, #8]
 800b448:	9301      	str	r3, [sp, #4]
 800b44a:	2300      	movs	r3, #0
 800b44c:	9300      	str	r3, [sp, #0]
 800b44e:	2300      	movs	r3, #0
 800b450:	460a      	mov	r2, r1
 800b452:	491f      	ldr	r1, [pc, #124]	@ (800b4d0 <vTaskStartScheduler+0xac>)
 800b454:	481f      	ldr	r0, [pc, #124]	@ (800b4d4 <vTaskStartScheduler+0xb0>)
 800b456:	f7ff fe17 	bl	800b088 <xTaskCreateStatic>
 800b45a:	4603      	mov	r3, r0
 800b45c:	4a1e      	ldr	r2, [pc, #120]	@ (800b4d8 <vTaskStartScheduler+0xb4>)
 800b45e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b460:	4b1d      	ldr	r3, [pc, #116]	@ (800b4d8 <vTaskStartScheduler+0xb4>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d002      	beq.n	800b46e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b468:	2301      	movs	r3, #1
 800b46a:	617b      	str	r3, [r7, #20]
 800b46c:	e001      	b.n	800b472 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b46e:	2300      	movs	r3, #0
 800b470:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	2b01      	cmp	r3, #1
 800b476:	d116      	bne.n	800b4a6 <vTaskStartScheduler+0x82>
	__asm volatile
 800b478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b47c:	f383 8811 	msr	BASEPRI, r3
 800b480:	f3bf 8f6f 	isb	sy
 800b484:	f3bf 8f4f 	dsb	sy
 800b488:	613b      	str	r3, [r7, #16]
}
 800b48a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b48c:	4b13      	ldr	r3, [pc, #76]	@ (800b4dc <vTaskStartScheduler+0xb8>)
 800b48e:	f04f 32ff 	mov.w	r2, #4294967295
 800b492:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b494:	4b12      	ldr	r3, [pc, #72]	@ (800b4e0 <vTaskStartScheduler+0xbc>)
 800b496:	2201      	movs	r2, #1
 800b498:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b49a:	4b12      	ldr	r3, [pc, #72]	@ (800b4e4 <vTaskStartScheduler+0xc0>)
 800b49c:	2200      	movs	r2, #0
 800b49e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b4a0:	f000 fe8e 	bl	800c1c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b4a4:	e00f      	b.n	800b4c6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ac:	d10b      	bne.n	800b4c6 <vTaskStartScheduler+0xa2>
	__asm volatile
 800b4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4b2:	f383 8811 	msr	BASEPRI, r3
 800b4b6:	f3bf 8f6f 	isb	sy
 800b4ba:	f3bf 8f4f 	dsb	sy
 800b4be:	60fb      	str	r3, [r7, #12]
}
 800b4c0:	bf00      	nop
 800b4c2:	bf00      	nop
 800b4c4:	e7fd      	b.n	800b4c2 <vTaskStartScheduler+0x9e>
}
 800b4c6:	bf00      	nop
 800b4c8:	3718      	adds	r7, #24
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	0800dc2c 	.word	0x0800dc2c
 800b4d4:	0800baad 	.word	0x0800baad
 800b4d8:	20002c6c 	.word	0x20002c6c
 800b4dc:	20002c68 	.word	0x20002c68
 800b4e0:	20002c54 	.word	0x20002c54
 800b4e4:	20002c4c 	.word	0x20002c4c

0800b4e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b4ec:	4b04      	ldr	r3, [pc, #16]	@ (800b500 <vTaskSuspendAll+0x18>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	4a03      	ldr	r2, [pc, #12]	@ (800b500 <vTaskSuspendAll+0x18>)
 800b4f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b4f6:	bf00      	nop
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr
 800b500:	20002c70 	.word	0x20002c70

0800b504 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b50a:	2300      	movs	r3, #0
 800b50c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b50e:	2300      	movs	r3, #0
 800b510:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b512:	4b42      	ldr	r3, [pc, #264]	@ (800b61c <xTaskResumeAll+0x118>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d10b      	bne.n	800b532 <xTaskResumeAll+0x2e>
	__asm volatile
 800b51a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b51e:	f383 8811 	msr	BASEPRI, r3
 800b522:	f3bf 8f6f 	isb	sy
 800b526:	f3bf 8f4f 	dsb	sy
 800b52a:	603b      	str	r3, [r7, #0]
}
 800b52c:	bf00      	nop
 800b52e:	bf00      	nop
 800b530:	e7fd      	b.n	800b52e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b532:	f000 fee9 	bl	800c308 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b536:	4b39      	ldr	r3, [pc, #228]	@ (800b61c <xTaskResumeAll+0x118>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	3b01      	subs	r3, #1
 800b53c:	4a37      	ldr	r2, [pc, #220]	@ (800b61c <xTaskResumeAll+0x118>)
 800b53e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b540:	4b36      	ldr	r3, [pc, #216]	@ (800b61c <xTaskResumeAll+0x118>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d161      	bne.n	800b60c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b548:	4b35      	ldr	r3, [pc, #212]	@ (800b620 <xTaskResumeAll+0x11c>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d05d      	beq.n	800b60c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b550:	e02e      	b.n	800b5b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b552:	4b34      	ldr	r3, [pc, #208]	@ (800b624 <xTaskResumeAll+0x120>)
 800b554:	68db      	ldr	r3, [r3, #12]
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	3318      	adds	r3, #24
 800b55e:	4618      	mov	r0, r3
 800b560:	f7fe fea9 	bl	800a2b6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	3304      	adds	r3, #4
 800b568:	4618      	mov	r0, r3
 800b56a:	f7fe fea4 	bl	800a2b6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b572:	2201      	movs	r2, #1
 800b574:	409a      	lsls	r2, r3
 800b576:	4b2c      	ldr	r3, [pc, #176]	@ (800b628 <xTaskResumeAll+0x124>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	4a2a      	ldr	r2, [pc, #168]	@ (800b628 <xTaskResumeAll+0x124>)
 800b57e:	6013      	str	r3, [r2, #0]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b584:	4613      	mov	r3, r2
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	4413      	add	r3, r2
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	4a27      	ldr	r2, [pc, #156]	@ (800b62c <xTaskResumeAll+0x128>)
 800b58e:	441a      	add	r2, r3
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	3304      	adds	r3, #4
 800b594:	4619      	mov	r1, r3
 800b596:	4610      	mov	r0, r2
 800b598:	f7fe fe30 	bl	800a1fc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5a0:	4b23      	ldr	r3, [pc, #140]	@ (800b630 <xTaskResumeAll+0x12c>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d302      	bcc.n	800b5b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b5aa:	4b22      	ldr	r3, [pc, #136]	@ (800b634 <xTaskResumeAll+0x130>)
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5b0:	4b1c      	ldr	r3, [pc, #112]	@ (800b624 <xTaskResumeAll+0x120>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1cc      	bne.n	800b552 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d001      	beq.n	800b5c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b5be:	f000 fb2b 	bl	800bc18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b5c2:	4b1d      	ldr	r3, [pc, #116]	@ (800b638 <xTaskResumeAll+0x134>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d010      	beq.n	800b5f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b5ce:	f000 f847 	bl	800b660 <xTaskIncrementTick>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d002      	beq.n	800b5de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b5d8:	4b16      	ldr	r3, [pc, #88]	@ (800b634 <xTaskResumeAll+0x130>)
 800b5da:	2201      	movs	r2, #1
 800b5dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	3b01      	subs	r3, #1
 800b5e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d1f1      	bne.n	800b5ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b5ea:	4b13      	ldr	r3, [pc, #76]	@ (800b638 <xTaskResumeAll+0x134>)
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b5f0:	4b10      	ldr	r3, [pc, #64]	@ (800b634 <xTaskResumeAll+0x130>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d009      	beq.n	800b60c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b5fc:	4b0f      	ldr	r3, [pc, #60]	@ (800b63c <xTaskResumeAll+0x138>)
 800b5fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b602:	601a      	str	r2, [r3, #0]
 800b604:	f3bf 8f4f 	dsb	sy
 800b608:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b60c:	f000 feae 	bl	800c36c <vPortExitCritical>

	return xAlreadyYielded;
 800b610:	68bb      	ldr	r3, [r7, #8]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	20002c70 	.word	0x20002c70
 800b620:	20002c48 	.word	0x20002c48
 800b624:	20002c08 	.word	0x20002c08
 800b628:	20002c50 	.word	0x20002c50
 800b62c:	20002b4c 	.word	0x20002b4c
 800b630:	20002b48 	.word	0x20002b48
 800b634:	20002c5c 	.word	0x20002c5c
 800b638:	20002c58 	.word	0x20002c58
 800b63c:	e000ed04 	.word	0xe000ed04

0800b640 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b640:	b480      	push	{r7}
 800b642:	b083      	sub	sp, #12
 800b644:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b646:	4b05      	ldr	r3, [pc, #20]	@ (800b65c <xTaskGetTickCount+0x1c>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b64c:	687b      	ldr	r3, [r7, #4]
}
 800b64e:	4618      	mov	r0, r3
 800b650:	370c      	adds	r7, #12
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop
 800b65c:	20002c4c 	.word	0x20002c4c

0800b660 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b086      	sub	sp, #24
 800b664:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b666:	2300      	movs	r3, #0
 800b668:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b66a:	4b4f      	ldr	r3, [pc, #316]	@ (800b7a8 <xTaskIncrementTick+0x148>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	f040 808f 	bne.w	800b792 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b674:	4b4d      	ldr	r3, [pc, #308]	@ (800b7ac <xTaskIncrementTick+0x14c>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	3301      	adds	r3, #1
 800b67a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b67c:	4a4b      	ldr	r2, [pc, #300]	@ (800b7ac <xTaskIncrementTick+0x14c>)
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d121      	bne.n	800b6cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b688:	4b49      	ldr	r3, [pc, #292]	@ (800b7b0 <xTaskIncrementTick+0x150>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d00b      	beq.n	800b6aa <xTaskIncrementTick+0x4a>
	__asm volatile
 800b692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b696:	f383 8811 	msr	BASEPRI, r3
 800b69a:	f3bf 8f6f 	isb	sy
 800b69e:	f3bf 8f4f 	dsb	sy
 800b6a2:	603b      	str	r3, [r7, #0]
}
 800b6a4:	bf00      	nop
 800b6a6:	bf00      	nop
 800b6a8:	e7fd      	b.n	800b6a6 <xTaskIncrementTick+0x46>
 800b6aa:	4b41      	ldr	r3, [pc, #260]	@ (800b7b0 <xTaskIncrementTick+0x150>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	60fb      	str	r3, [r7, #12]
 800b6b0:	4b40      	ldr	r3, [pc, #256]	@ (800b7b4 <xTaskIncrementTick+0x154>)
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4a3e      	ldr	r2, [pc, #248]	@ (800b7b0 <xTaskIncrementTick+0x150>)
 800b6b6:	6013      	str	r3, [r2, #0]
 800b6b8:	4a3e      	ldr	r2, [pc, #248]	@ (800b7b4 <xTaskIncrementTick+0x154>)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	6013      	str	r3, [r2, #0]
 800b6be:	4b3e      	ldr	r3, [pc, #248]	@ (800b7b8 <xTaskIncrementTick+0x158>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	3301      	adds	r3, #1
 800b6c4:	4a3c      	ldr	r2, [pc, #240]	@ (800b7b8 <xTaskIncrementTick+0x158>)
 800b6c6:	6013      	str	r3, [r2, #0]
 800b6c8:	f000 faa6 	bl	800bc18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b6cc:	4b3b      	ldr	r3, [pc, #236]	@ (800b7bc <xTaskIncrementTick+0x15c>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	693a      	ldr	r2, [r7, #16]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d348      	bcc.n	800b768 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6d6:	4b36      	ldr	r3, [pc, #216]	@ (800b7b0 <xTaskIncrementTick+0x150>)
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d104      	bne.n	800b6ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6e0:	4b36      	ldr	r3, [pc, #216]	@ (800b7bc <xTaskIncrementTick+0x15c>)
 800b6e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6e6:	601a      	str	r2, [r3, #0]
					break;
 800b6e8:	e03e      	b.n	800b768 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6ea:	4b31      	ldr	r3, [pc, #196]	@ (800b7b0 <xTaskIncrementTick+0x150>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	68db      	ldr	r3, [r3, #12]
 800b6f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	685b      	ldr	r3, [r3, #4]
 800b6f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b6fa:	693a      	ldr	r2, [r7, #16]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d203      	bcs.n	800b70a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b702:	4a2e      	ldr	r2, [pc, #184]	@ (800b7bc <xTaskIncrementTick+0x15c>)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b708:	e02e      	b.n	800b768 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	3304      	adds	r3, #4
 800b70e:	4618      	mov	r0, r3
 800b710:	f7fe fdd1 	bl	800a2b6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d004      	beq.n	800b726 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	3318      	adds	r3, #24
 800b720:	4618      	mov	r0, r3
 800b722:	f7fe fdc8 	bl	800a2b6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b72a:	2201      	movs	r2, #1
 800b72c:	409a      	lsls	r2, r3
 800b72e:	4b24      	ldr	r3, [pc, #144]	@ (800b7c0 <xTaskIncrementTick+0x160>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	4313      	orrs	r3, r2
 800b734:	4a22      	ldr	r2, [pc, #136]	@ (800b7c0 <xTaskIncrementTick+0x160>)
 800b736:	6013      	str	r3, [r2, #0]
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b73c:	4613      	mov	r3, r2
 800b73e:	009b      	lsls	r3, r3, #2
 800b740:	4413      	add	r3, r2
 800b742:	009b      	lsls	r3, r3, #2
 800b744:	4a1f      	ldr	r2, [pc, #124]	@ (800b7c4 <xTaskIncrementTick+0x164>)
 800b746:	441a      	add	r2, r3
 800b748:	68bb      	ldr	r3, [r7, #8]
 800b74a:	3304      	adds	r3, #4
 800b74c:	4619      	mov	r1, r3
 800b74e:	4610      	mov	r0, r2
 800b750:	f7fe fd54 	bl	800a1fc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b758:	4b1b      	ldr	r3, [pc, #108]	@ (800b7c8 <xTaskIncrementTick+0x168>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b75e:	429a      	cmp	r2, r3
 800b760:	d3b9      	bcc.n	800b6d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b762:	2301      	movs	r3, #1
 800b764:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b766:	e7b6      	b.n	800b6d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b768:	4b17      	ldr	r3, [pc, #92]	@ (800b7c8 <xTaskIncrementTick+0x168>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b76e:	4915      	ldr	r1, [pc, #84]	@ (800b7c4 <xTaskIncrementTick+0x164>)
 800b770:	4613      	mov	r3, r2
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	4413      	add	r3, r2
 800b776:	009b      	lsls	r3, r3, #2
 800b778:	440b      	add	r3, r1
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d901      	bls.n	800b784 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b780:	2301      	movs	r3, #1
 800b782:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b784:	4b11      	ldr	r3, [pc, #68]	@ (800b7cc <xTaskIncrementTick+0x16c>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d007      	beq.n	800b79c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b78c:	2301      	movs	r3, #1
 800b78e:	617b      	str	r3, [r7, #20]
 800b790:	e004      	b.n	800b79c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b792:	4b0f      	ldr	r3, [pc, #60]	@ (800b7d0 <xTaskIncrementTick+0x170>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	3301      	adds	r3, #1
 800b798:	4a0d      	ldr	r2, [pc, #52]	@ (800b7d0 <xTaskIncrementTick+0x170>)
 800b79a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b79c:	697b      	ldr	r3, [r7, #20]
}
 800b79e:	4618      	mov	r0, r3
 800b7a0:	3718      	adds	r7, #24
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}
 800b7a6:	bf00      	nop
 800b7a8:	20002c70 	.word	0x20002c70
 800b7ac:	20002c4c 	.word	0x20002c4c
 800b7b0:	20002c00 	.word	0x20002c00
 800b7b4:	20002c04 	.word	0x20002c04
 800b7b8:	20002c60 	.word	0x20002c60
 800b7bc:	20002c68 	.word	0x20002c68
 800b7c0:	20002c50 	.word	0x20002c50
 800b7c4:	20002b4c 	.word	0x20002b4c
 800b7c8:	20002b48 	.word	0x20002b48
 800b7cc:	20002c5c 	.word	0x20002c5c
 800b7d0:	20002c58 	.word	0x20002c58

0800b7d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b087      	sub	sp, #28
 800b7d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b7da:	4b27      	ldr	r3, [pc, #156]	@ (800b878 <vTaskSwitchContext+0xa4>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d003      	beq.n	800b7ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b7e2:	4b26      	ldr	r3, [pc, #152]	@ (800b87c <vTaskSwitchContext+0xa8>)
 800b7e4:	2201      	movs	r2, #1
 800b7e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b7e8:	e040      	b.n	800b86c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b7ea:	4b24      	ldr	r3, [pc, #144]	@ (800b87c <vTaskSwitchContext+0xa8>)
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7f0:	4b23      	ldr	r3, [pc, #140]	@ (800b880 <vTaskSwitchContext+0xac>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	fab3 f383 	clz	r3, r3
 800b7fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b7fe:	7afb      	ldrb	r3, [r7, #11]
 800b800:	f1c3 031f 	rsb	r3, r3, #31
 800b804:	617b      	str	r3, [r7, #20]
 800b806:	491f      	ldr	r1, [pc, #124]	@ (800b884 <vTaskSwitchContext+0xb0>)
 800b808:	697a      	ldr	r2, [r7, #20]
 800b80a:	4613      	mov	r3, r2
 800b80c:	009b      	lsls	r3, r3, #2
 800b80e:	4413      	add	r3, r2
 800b810:	009b      	lsls	r3, r3, #2
 800b812:	440b      	add	r3, r1
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d10b      	bne.n	800b832 <vTaskSwitchContext+0x5e>
	__asm volatile
 800b81a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b81e:	f383 8811 	msr	BASEPRI, r3
 800b822:	f3bf 8f6f 	isb	sy
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	607b      	str	r3, [r7, #4]
}
 800b82c:	bf00      	nop
 800b82e:	bf00      	nop
 800b830:	e7fd      	b.n	800b82e <vTaskSwitchContext+0x5a>
 800b832:	697a      	ldr	r2, [r7, #20]
 800b834:	4613      	mov	r3, r2
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	4413      	add	r3, r2
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	4a11      	ldr	r2, [pc, #68]	@ (800b884 <vTaskSwitchContext+0xb0>)
 800b83e:	4413      	add	r3, r2
 800b840:	613b      	str	r3, [r7, #16]
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	685a      	ldr	r2, [r3, #4]
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	605a      	str	r2, [r3, #4]
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	685a      	ldr	r2, [r3, #4]
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	3308      	adds	r3, #8
 800b854:	429a      	cmp	r2, r3
 800b856:	d104      	bne.n	800b862 <vTaskSwitchContext+0x8e>
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	685a      	ldr	r2, [r3, #4]
 800b85e:	693b      	ldr	r3, [r7, #16]
 800b860:	605a      	str	r2, [r3, #4]
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	68db      	ldr	r3, [r3, #12]
 800b868:	4a07      	ldr	r2, [pc, #28]	@ (800b888 <vTaskSwitchContext+0xb4>)
 800b86a:	6013      	str	r3, [r2, #0]
}
 800b86c:	bf00      	nop
 800b86e:	371c      	adds	r7, #28
 800b870:	46bd      	mov	sp, r7
 800b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b876:	4770      	bx	lr
 800b878:	20002c70 	.word	0x20002c70
 800b87c:	20002c5c 	.word	0x20002c5c
 800b880:	20002c50 	.word	0x20002c50
 800b884:	20002b4c 	.word	0x20002b4c
 800b888:	20002b48 	.word	0x20002b48

0800b88c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b084      	sub	sp, #16
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d10b      	bne.n	800b8b4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b89c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8a0:	f383 8811 	msr	BASEPRI, r3
 800b8a4:	f3bf 8f6f 	isb	sy
 800b8a8:	f3bf 8f4f 	dsb	sy
 800b8ac:	60fb      	str	r3, [r7, #12]
}
 800b8ae:	bf00      	nop
 800b8b0:	bf00      	nop
 800b8b2:	e7fd      	b.n	800b8b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8b4:	4b07      	ldr	r3, [pc, #28]	@ (800b8d4 <vTaskPlaceOnEventList+0x48>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	3318      	adds	r3, #24
 800b8ba:	4619      	mov	r1, r3
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f7fe fcc1 	bl	800a244 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b8c2:	2101      	movs	r1, #1
 800b8c4:	6838      	ldr	r0, [r7, #0]
 800b8c6:	f000 fb87 	bl	800bfd8 <prvAddCurrentTaskToDelayedList>
}
 800b8ca:	bf00      	nop
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	20002b48 	.word	0x20002b48

0800b8d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b086      	sub	sp, #24
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d10b      	bne.n	800b906 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f2:	f383 8811 	msr	BASEPRI, r3
 800b8f6:	f3bf 8f6f 	isb	sy
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	60fb      	str	r3, [r7, #12]
}
 800b900:	bf00      	nop
 800b902:	bf00      	nop
 800b904:	e7fd      	b.n	800b902 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b906:	693b      	ldr	r3, [r7, #16]
 800b908:	3318      	adds	r3, #24
 800b90a:	4618      	mov	r0, r3
 800b90c:	f7fe fcd3 	bl	800a2b6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b910:	4b1d      	ldr	r3, [pc, #116]	@ (800b988 <xTaskRemoveFromEventList+0xb0>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d11c      	bne.n	800b952 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	3304      	adds	r3, #4
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7fe fcca 	bl	800a2b6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b926:	2201      	movs	r2, #1
 800b928:	409a      	lsls	r2, r3
 800b92a:	4b18      	ldr	r3, [pc, #96]	@ (800b98c <xTaskRemoveFromEventList+0xb4>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4313      	orrs	r3, r2
 800b930:	4a16      	ldr	r2, [pc, #88]	@ (800b98c <xTaskRemoveFromEventList+0xb4>)
 800b932:	6013      	str	r3, [r2, #0]
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b938:	4613      	mov	r3, r2
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	4413      	add	r3, r2
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	4a13      	ldr	r2, [pc, #76]	@ (800b990 <xTaskRemoveFromEventList+0xb8>)
 800b942:	441a      	add	r2, r3
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	3304      	adds	r3, #4
 800b948:	4619      	mov	r1, r3
 800b94a:	4610      	mov	r0, r2
 800b94c:	f7fe fc56 	bl	800a1fc <vListInsertEnd>
 800b950:	e005      	b.n	800b95e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	3318      	adds	r3, #24
 800b956:	4619      	mov	r1, r3
 800b958:	480e      	ldr	r0, [pc, #56]	@ (800b994 <xTaskRemoveFromEventList+0xbc>)
 800b95a:	f7fe fc4f 	bl	800a1fc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b962:	4b0d      	ldr	r3, [pc, #52]	@ (800b998 <xTaskRemoveFromEventList+0xc0>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b968:	429a      	cmp	r2, r3
 800b96a:	d905      	bls.n	800b978 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b96c:	2301      	movs	r3, #1
 800b96e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b970:	4b0a      	ldr	r3, [pc, #40]	@ (800b99c <xTaskRemoveFromEventList+0xc4>)
 800b972:	2201      	movs	r2, #1
 800b974:	601a      	str	r2, [r3, #0]
 800b976:	e001      	b.n	800b97c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b978:	2300      	movs	r3, #0
 800b97a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b97c:	697b      	ldr	r3, [r7, #20]
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3718      	adds	r7, #24
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	20002c70 	.word	0x20002c70
 800b98c:	20002c50 	.word	0x20002c50
 800b990:	20002b4c 	.word	0x20002b4c
 800b994:	20002c08 	.word	0x20002c08
 800b998:	20002b48 	.word	0x20002b48
 800b99c:	20002c5c 	.word	0x20002c5c

0800b9a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b083      	sub	sp, #12
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b9a8:	4b06      	ldr	r3, [pc, #24]	@ (800b9c4 <vTaskInternalSetTimeOutState+0x24>)
 800b9aa:	681a      	ldr	r2, [r3, #0]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b9b0:	4b05      	ldr	r3, [pc, #20]	@ (800b9c8 <vTaskInternalSetTimeOutState+0x28>)
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	605a      	str	r2, [r3, #4]
}
 800b9b8:	bf00      	nop
 800b9ba:	370c      	adds	r7, #12
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr
 800b9c4:	20002c60 	.word	0x20002c60
 800b9c8:	20002c4c 	.word	0x20002c4c

0800b9cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b088      	sub	sp, #32
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d10b      	bne.n	800b9f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b9dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9e0:	f383 8811 	msr	BASEPRI, r3
 800b9e4:	f3bf 8f6f 	isb	sy
 800b9e8:	f3bf 8f4f 	dsb	sy
 800b9ec:	613b      	str	r3, [r7, #16]
}
 800b9ee:	bf00      	nop
 800b9f0:	bf00      	nop
 800b9f2:	e7fd      	b.n	800b9f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d10b      	bne.n	800ba12 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b9fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9fe:	f383 8811 	msr	BASEPRI, r3
 800ba02:	f3bf 8f6f 	isb	sy
 800ba06:	f3bf 8f4f 	dsb	sy
 800ba0a:	60fb      	str	r3, [r7, #12]
}
 800ba0c:	bf00      	nop
 800ba0e:	bf00      	nop
 800ba10:	e7fd      	b.n	800ba0e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ba12:	f000 fc79 	bl	800c308 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba16:	4b1d      	ldr	r3, [pc, #116]	@ (800ba8c <xTaskCheckForTimeOut+0xc0>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	69ba      	ldr	r2, [r7, #24]
 800ba22:	1ad3      	subs	r3, r2, r3
 800ba24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba2e:	d102      	bne.n	800ba36 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba30:	2300      	movs	r3, #0
 800ba32:	61fb      	str	r3, [r7, #28]
 800ba34:	e023      	b.n	800ba7e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	4b15      	ldr	r3, [pc, #84]	@ (800ba90 <xTaskCheckForTimeOut+0xc4>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	429a      	cmp	r2, r3
 800ba40:	d007      	beq.n	800ba52 <xTaskCheckForTimeOut+0x86>
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	69ba      	ldr	r2, [r7, #24]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d302      	bcc.n	800ba52 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	61fb      	str	r3, [r7, #28]
 800ba50:	e015      	b.n	800ba7e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	697a      	ldr	r2, [r7, #20]
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d20b      	bcs.n	800ba74 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	1ad2      	subs	r2, r2, r3
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f7ff ff99 	bl	800b9a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ba6e:	2300      	movs	r3, #0
 800ba70:	61fb      	str	r3, [r7, #28]
 800ba72:	e004      	b.n	800ba7e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	2200      	movs	r2, #0
 800ba78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ba7e:	f000 fc75 	bl	800c36c <vPortExitCritical>

	return xReturn;
 800ba82:	69fb      	ldr	r3, [r7, #28]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3720      	adds	r7, #32
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	20002c4c 	.word	0x20002c4c
 800ba90:	20002c60 	.word	0x20002c60

0800ba94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ba94:	b480      	push	{r7}
 800ba96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ba98:	4b03      	ldr	r3, [pc, #12]	@ (800baa8 <vTaskMissedYield+0x14>)
 800ba9a:	2201      	movs	r2, #1
 800ba9c:	601a      	str	r2, [r3, #0]
}
 800ba9e:	bf00      	nop
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr
 800baa8:	20002c5c 	.word	0x20002c5c

0800baac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b082      	sub	sp, #8
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bab4:	f000 f852 	bl	800bb5c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bab8:	4b06      	ldr	r3, [pc, #24]	@ (800bad4 <prvIdleTask+0x28>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2b01      	cmp	r3, #1
 800babe:	d9f9      	bls.n	800bab4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bac0:	4b05      	ldr	r3, [pc, #20]	@ (800bad8 <prvIdleTask+0x2c>)
 800bac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bac6:	601a      	str	r2, [r3, #0]
 800bac8:	f3bf 8f4f 	dsb	sy
 800bacc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bad0:	e7f0      	b.n	800bab4 <prvIdleTask+0x8>
 800bad2:	bf00      	nop
 800bad4:	20002b4c 	.word	0x20002b4c
 800bad8:	e000ed04 	.word	0xe000ed04

0800badc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bae2:	2300      	movs	r3, #0
 800bae4:	607b      	str	r3, [r7, #4]
 800bae6:	e00c      	b.n	800bb02 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	4613      	mov	r3, r2
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	4413      	add	r3, r2
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	4a12      	ldr	r2, [pc, #72]	@ (800bb3c <prvInitialiseTaskLists+0x60>)
 800baf4:	4413      	add	r3, r2
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7fe fb53 	bl	800a1a2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	3301      	adds	r3, #1
 800bb00:	607b      	str	r3, [r7, #4]
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2b06      	cmp	r3, #6
 800bb06:	d9ef      	bls.n	800bae8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb08:	480d      	ldr	r0, [pc, #52]	@ (800bb40 <prvInitialiseTaskLists+0x64>)
 800bb0a:	f7fe fb4a 	bl	800a1a2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb0e:	480d      	ldr	r0, [pc, #52]	@ (800bb44 <prvInitialiseTaskLists+0x68>)
 800bb10:	f7fe fb47 	bl	800a1a2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb14:	480c      	ldr	r0, [pc, #48]	@ (800bb48 <prvInitialiseTaskLists+0x6c>)
 800bb16:	f7fe fb44 	bl	800a1a2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb1a:	480c      	ldr	r0, [pc, #48]	@ (800bb4c <prvInitialiseTaskLists+0x70>)
 800bb1c:	f7fe fb41 	bl	800a1a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb20:	480b      	ldr	r0, [pc, #44]	@ (800bb50 <prvInitialiseTaskLists+0x74>)
 800bb22:	f7fe fb3e 	bl	800a1a2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb26:	4b0b      	ldr	r3, [pc, #44]	@ (800bb54 <prvInitialiseTaskLists+0x78>)
 800bb28:	4a05      	ldr	r2, [pc, #20]	@ (800bb40 <prvInitialiseTaskLists+0x64>)
 800bb2a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb2c:	4b0a      	ldr	r3, [pc, #40]	@ (800bb58 <prvInitialiseTaskLists+0x7c>)
 800bb2e:	4a05      	ldr	r2, [pc, #20]	@ (800bb44 <prvInitialiseTaskLists+0x68>)
 800bb30:	601a      	str	r2, [r3, #0]
}
 800bb32:	bf00      	nop
 800bb34:	3708      	adds	r7, #8
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	20002b4c 	.word	0x20002b4c
 800bb40:	20002bd8 	.word	0x20002bd8
 800bb44:	20002bec 	.word	0x20002bec
 800bb48:	20002c08 	.word	0x20002c08
 800bb4c:	20002c1c 	.word	0x20002c1c
 800bb50:	20002c34 	.word	0x20002c34
 800bb54:	20002c00 	.word	0x20002c00
 800bb58:	20002c04 	.word	0x20002c04

0800bb5c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb62:	e019      	b.n	800bb98 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bb64:	f000 fbd0 	bl	800c308 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb68:	4b10      	ldr	r3, [pc, #64]	@ (800bbac <prvCheckTasksWaitingTermination+0x50>)
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	68db      	ldr	r3, [r3, #12]
 800bb6e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	3304      	adds	r3, #4
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7fe fb9e 	bl	800a2b6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bb7a:	4b0d      	ldr	r3, [pc, #52]	@ (800bbb0 <prvCheckTasksWaitingTermination+0x54>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	3b01      	subs	r3, #1
 800bb80:	4a0b      	ldr	r2, [pc, #44]	@ (800bbb0 <prvCheckTasksWaitingTermination+0x54>)
 800bb82:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bb84:	4b0b      	ldr	r3, [pc, #44]	@ (800bbb4 <prvCheckTasksWaitingTermination+0x58>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	3b01      	subs	r3, #1
 800bb8a:	4a0a      	ldr	r2, [pc, #40]	@ (800bbb4 <prvCheckTasksWaitingTermination+0x58>)
 800bb8c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bb8e:	f000 fbed 	bl	800c36c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 f810 	bl	800bbb8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb98:	4b06      	ldr	r3, [pc, #24]	@ (800bbb4 <prvCheckTasksWaitingTermination+0x58>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d1e1      	bne.n	800bb64 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bba0:	bf00      	nop
 800bba2:	bf00      	nop
 800bba4:	3708      	adds	r7, #8
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	20002c1c 	.word	0x20002c1c
 800bbb0:	20002c48 	.word	0x20002c48
 800bbb4:	20002c30 	.word	0x20002c30

0800bbb8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b084      	sub	sp, #16
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d108      	bne.n	800bbdc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f000 fd8a 	bl	800c6e8 <vPortFree>
				vPortFree( pxTCB );
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 fd87 	bl	800c6e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bbda:	e019      	b.n	800bc10 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	d103      	bne.n	800bbee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f000 fd7e 	bl	800c6e8 <vPortFree>
	}
 800bbec:	e010      	b.n	800bc10 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800bbf4:	2b02      	cmp	r3, #2
 800bbf6:	d00b      	beq.n	800bc10 <prvDeleteTCB+0x58>
	__asm volatile
 800bbf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbfc:	f383 8811 	msr	BASEPRI, r3
 800bc00:	f3bf 8f6f 	isb	sy
 800bc04:	f3bf 8f4f 	dsb	sy
 800bc08:	60fb      	str	r3, [r7, #12]
}
 800bc0a:	bf00      	nop
 800bc0c:	bf00      	nop
 800bc0e:	e7fd      	b.n	800bc0c <prvDeleteTCB+0x54>
	}
 800bc10:	bf00      	nop
 800bc12:	3710      	adds	r7, #16
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b083      	sub	sp, #12
 800bc1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc1e:	4b0c      	ldr	r3, [pc, #48]	@ (800bc50 <prvResetNextTaskUnblockTime+0x38>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d104      	bne.n	800bc32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc28:	4b0a      	ldr	r3, [pc, #40]	@ (800bc54 <prvResetNextTaskUnblockTime+0x3c>)
 800bc2a:	f04f 32ff 	mov.w	r2, #4294967295
 800bc2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc30:	e008      	b.n	800bc44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc32:	4b07      	ldr	r3, [pc, #28]	@ (800bc50 <prvResetNextTaskUnblockTime+0x38>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	68db      	ldr	r3, [r3, #12]
 800bc38:	68db      	ldr	r3, [r3, #12]
 800bc3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	685b      	ldr	r3, [r3, #4]
 800bc40:	4a04      	ldr	r2, [pc, #16]	@ (800bc54 <prvResetNextTaskUnblockTime+0x3c>)
 800bc42:	6013      	str	r3, [r2, #0]
}
 800bc44:	bf00      	nop
 800bc46:	370c      	adds	r7, #12
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4e:	4770      	bx	lr
 800bc50:	20002c00 	.word	0x20002c00
 800bc54:	20002c68 	.word	0x20002c68

0800bc58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc58:	b480      	push	{r7}
 800bc5a:	b083      	sub	sp, #12
 800bc5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc5e:	4b0b      	ldr	r3, [pc, #44]	@ (800bc8c <xTaskGetSchedulerState+0x34>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d102      	bne.n	800bc6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bc66:	2301      	movs	r3, #1
 800bc68:	607b      	str	r3, [r7, #4]
 800bc6a:	e008      	b.n	800bc7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc6c:	4b08      	ldr	r3, [pc, #32]	@ (800bc90 <xTaskGetSchedulerState+0x38>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d102      	bne.n	800bc7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bc74:	2302      	movs	r3, #2
 800bc76:	607b      	str	r3, [r7, #4]
 800bc78:	e001      	b.n	800bc7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bc7e:	687b      	ldr	r3, [r7, #4]
	}
 800bc80:	4618      	mov	r0, r3
 800bc82:	370c      	adds	r7, #12
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr
 800bc8c:	20002c54 	.word	0x20002c54
 800bc90:	20002c70 	.word	0x20002c70

0800bc94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bca0:	2300      	movs	r3, #0
 800bca2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d05e      	beq.n	800bd68 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcae:	4b31      	ldr	r3, [pc, #196]	@ (800bd74 <xTaskPriorityInherit+0xe0>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d24e      	bcs.n	800bd56 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	699b      	ldr	r3, [r3, #24]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	db06      	blt.n	800bcce <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcc0:	4b2c      	ldr	r3, [pc, #176]	@ (800bd74 <xTaskPriorityInherit+0xe0>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcc6:	f1c3 0207 	rsb	r2, r3, #7
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	6959      	ldr	r1, [r3, #20]
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	4413      	add	r3, r2
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	4a26      	ldr	r2, [pc, #152]	@ (800bd78 <xTaskPriorityInherit+0xe4>)
 800bce0:	4413      	add	r3, r2
 800bce2:	4299      	cmp	r1, r3
 800bce4:	d12f      	bne.n	800bd46 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	3304      	adds	r3, #4
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fe fae3 	bl	800a2b6 <uxListRemove>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d10a      	bne.n	800bd0c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	fa02 f303 	lsl.w	r3, r2, r3
 800bd00:	43da      	mvns	r2, r3
 800bd02:	4b1e      	ldr	r3, [pc, #120]	@ (800bd7c <xTaskPriorityInherit+0xe8>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4013      	ands	r3, r2
 800bd08:	4a1c      	ldr	r2, [pc, #112]	@ (800bd7c <xTaskPriorityInherit+0xe8>)
 800bd0a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd0c:	4b19      	ldr	r3, [pc, #100]	@ (800bd74 <xTaskPriorityInherit+0xe0>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	409a      	lsls	r2, r3
 800bd1e:	4b17      	ldr	r3, [pc, #92]	@ (800bd7c <xTaskPriorityInherit+0xe8>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	4313      	orrs	r3, r2
 800bd24:	4a15      	ldr	r2, [pc, #84]	@ (800bd7c <xTaskPriorityInherit+0xe8>)
 800bd26:	6013      	str	r3, [r2, #0]
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd2c:	4613      	mov	r3, r2
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	4413      	add	r3, r2
 800bd32:	009b      	lsls	r3, r3, #2
 800bd34:	4a10      	ldr	r2, [pc, #64]	@ (800bd78 <xTaskPriorityInherit+0xe4>)
 800bd36:	441a      	add	r2, r3
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	3304      	adds	r3, #4
 800bd3c:	4619      	mov	r1, r3
 800bd3e:	4610      	mov	r0, r2
 800bd40:	f7fe fa5c 	bl	800a1fc <vListInsertEnd>
 800bd44:	e004      	b.n	800bd50 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd46:	4b0b      	ldr	r3, [pc, #44]	@ (800bd74 <xTaskPriorityInherit+0xe0>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bd50:	2301      	movs	r3, #1
 800bd52:	60fb      	str	r3, [r7, #12]
 800bd54:	e008      	b.n	800bd68 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bd56:	68bb      	ldr	r3, [r7, #8]
 800bd58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bd5a:	4b06      	ldr	r3, [pc, #24]	@ (800bd74 <xTaskPriorityInherit+0xe0>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d201      	bcs.n	800bd68 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bd64:	2301      	movs	r3, #1
 800bd66:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd68:	68fb      	ldr	r3, [r7, #12]
	}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	20002b48 	.word	0x20002b48
 800bd78:	20002b4c 	.word	0x20002b4c
 800bd7c:	20002c50 	.word	0x20002c50

0800bd80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b086      	sub	sp, #24
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d070      	beq.n	800be78 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bd96:	4b3b      	ldr	r3, [pc, #236]	@ (800be84 <xTaskPriorityDisinherit+0x104>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	693a      	ldr	r2, [r7, #16]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d00b      	beq.n	800bdb8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bda0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bda4:	f383 8811 	msr	BASEPRI, r3
 800bda8:	f3bf 8f6f 	isb	sy
 800bdac:	f3bf 8f4f 	dsb	sy
 800bdb0:	60fb      	str	r3, [r7, #12]
}
 800bdb2:	bf00      	nop
 800bdb4:	bf00      	nop
 800bdb6:	e7fd      	b.n	800bdb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d10b      	bne.n	800bdd8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bdc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	60bb      	str	r3, [r7, #8]
}
 800bdd2:	bf00      	nop
 800bdd4:	bf00      	nop
 800bdd6:	e7fd      	b.n	800bdd4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bddc:	1e5a      	subs	r2, r3, #1
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d044      	beq.n	800be78 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d140      	bne.n	800be78 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	3304      	adds	r3, #4
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f7fe fa5b 	bl	800a2b6 <uxListRemove>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d115      	bne.n	800be32 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be0a:	491f      	ldr	r1, [pc, #124]	@ (800be88 <xTaskPriorityDisinherit+0x108>)
 800be0c:	4613      	mov	r3, r2
 800be0e:	009b      	lsls	r3, r3, #2
 800be10:	4413      	add	r3, r2
 800be12:	009b      	lsls	r3, r3, #2
 800be14:	440b      	add	r3, r1
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d10a      	bne.n	800be32 <xTaskPriorityDisinherit+0xb2>
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be20:	2201      	movs	r2, #1
 800be22:	fa02 f303 	lsl.w	r3, r2, r3
 800be26:	43da      	mvns	r2, r3
 800be28:	4b18      	ldr	r3, [pc, #96]	@ (800be8c <xTaskPriorityDisinherit+0x10c>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	4013      	ands	r3, r2
 800be2e:	4a17      	ldr	r2, [pc, #92]	@ (800be8c <xTaskPriorityDisinherit+0x10c>)
 800be30:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be3e:	f1c3 0207 	rsb	r2, r3, #7
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be4a:	2201      	movs	r2, #1
 800be4c:	409a      	lsls	r2, r3
 800be4e:	4b0f      	ldr	r3, [pc, #60]	@ (800be8c <xTaskPriorityDisinherit+0x10c>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	4313      	orrs	r3, r2
 800be54:	4a0d      	ldr	r2, [pc, #52]	@ (800be8c <xTaskPriorityDisinherit+0x10c>)
 800be56:	6013      	str	r3, [r2, #0]
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be5c:	4613      	mov	r3, r2
 800be5e:	009b      	lsls	r3, r3, #2
 800be60:	4413      	add	r3, r2
 800be62:	009b      	lsls	r3, r3, #2
 800be64:	4a08      	ldr	r2, [pc, #32]	@ (800be88 <xTaskPriorityDisinherit+0x108>)
 800be66:	441a      	add	r2, r3
 800be68:	693b      	ldr	r3, [r7, #16]
 800be6a:	3304      	adds	r3, #4
 800be6c:	4619      	mov	r1, r3
 800be6e:	4610      	mov	r0, r2
 800be70:	f7fe f9c4 	bl	800a1fc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800be74:	2301      	movs	r3, #1
 800be76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be78:	697b      	ldr	r3, [r7, #20]
	}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3718      	adds	r7, #24
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	20002b48 	.word	0x20002b48
 800be88:	20002b4c 	.word	0x20002b4c
 800be8c:	20002c50 	.word	0x20002c50

0800be90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800be90:	b580      	push	{r7, lr}
 800be92:	b088      	sub	sp, #32
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800be9e:	2301      	movs	r3, #1
 800bea0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d079      	beq.n	800bf9c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bea8:	69bb      	ldr	r3, [r7, #24]
 800beaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800beac:	2b00      	cmp	r3, #0
 800beae:	d10b      	bne.n	800bec8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800beb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb4:	f383 8811 	msr	BASEPRI, r3
 800beb8:	f3bf 8f6f 	isb	sy
 800bebc:	f3bf 8f4f 	dsb	sy
 800bec0:	60fb      	str	r3, [r7, #12]
}
 800bec2:	bf00      	nop
 800bec4:	bf00      	nop
 800bec6:	e7fd      	b.n	800bec4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800becc:	683a      	ldr	r2, [r7, #0]
 800bece:	429a      	cmp	r2, r3
 800bed0:	d902      	bls.n	800bed8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	61fb      	str	r3, [r7, #28]
 800bed6:	e002      	b.n	800bede <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bed8:	69bb      	ldr	r3, [r7, #24]
 800beda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bedc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bede:	69bb      	ldr	r3, [r7, #24]
 800bee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bee2:	69fa      	ldr	r2, [r7, #28]
 800bee4:	429a      	cmp	r2, r3
 800bee6:	d059      	beq.n	800bf9c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bee8:	69bb      	ldr	r3, [r7, #24]
 800beea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800beec:	697a      	ldr	r2, [r7, #20]
 800beee:	429a      	cmp	r2, r3
 800bef0:	d154      	bne.n	800bf9c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bef2:	4b2c      	ldr	r3, [pc, #176]	@ (800bfa4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	69ba      	ldr	r2, [r7, #24]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d10b      	bne.n	800bf14 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800befc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf00:	f383 8811 	msr	BASEPRI, r3
 800bf04:	f3bf 8f6f 	isb	sy
 800bf08:	f3bf 8f4f 	dsb	sy
 800bf0c:	60bb      	str	r3, [r7, #8]
}
 800bf0e:	bf00      	nop
 800bf10:	bf00      	nop
 800bf12:	e7fd      	b.n	800bf10 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bf14:	69bb      	ldr	r3, [r7, #24]
 800bf16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf18:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bf1a:	69bb      	ldr	r3, [r7, #24]
 800bf1c:	69fa      	ldr	r2, [r7, #28]
 800bf1e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	699b      	ldr	r3, [r3, #24]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	db04      	blt.n	800bf32 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	f1c3 0207 	rsb	r2, r3, #7
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bf32:	69bb      	ldr	r3, [r7, #24]
 800bf34:	6959      	ldr	r1, [r3, #20]
 800bf36:	693a      	ldr	r2, [r7, #16]
 800bf38:	4613      	mov	r3, r2
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	4413      	add	r3, r2
 800bf3e:	009b      	lsls	r3, r3, #2
 800bf40:	4a19      	ldr	r2, [pc, #100]	@ (800bfa8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bf42:	4413      	add	r3, r2
 800bf44:	4299      	cmp	r1, r3
 800bf46:	d129      	bne.n	800bf9c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	3304      	adds	r3, #4
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f7fe f9b2 	bl	800a2b6 <uxListRemove>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d10a      	bne.n	800bf6e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	fa02 f303 	lsl.w	r3, r2, r3
 800bf62:	43da      	mvns	r2, r3
 800bf64:	4b11      	ldr	r3, [pc, #68]	@ (800bfac <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	4013      	ands	r3, r2
 800bf6a:	4a10      	ldr	r2, [pc, #64]	@ (800bfac <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800bf6c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf72:	2201      	movs	r2, #1
 800bf74:	409a      	lsls	r2, r3
 800bf76:	4b0d      	ldr	r3, [pc, #52]	@ (800bfac <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	4a0b      	ldr	r2, [pc, #44]	@ (800bfac <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800bf7e:	6013      	str	r3, [r2, #0]
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf84:	4613      	mov	r3, r2
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	4413      	add	r3, r2
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	4a06      	ldr	r2, [pc, #24]	@ (800bfa8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bf8e:	441a      	add	r2, r3
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	3304      	adds	r3, #4
 800bf94:	4619      	mov	r1, r3
 800bf96:	4610      	mov	r0, r2
 800bf98:	f7fe f930 	bl	800a1fc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf9c:	bf00      	nop
 800bf9e:	3720      	adds	r7, #32
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	20002b48 	.word	0x20002b48
 800bfa8:	20002b4c 	.word	0x20002b4c
 800bfac:	20002c50 	.word	0x20002c50

0800bfb0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bfb0:	b480      	push	{r7}
 800bfb2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bfb4:	4b07      	ldr	r3, [pc, #28]	@ (800bfd4 <pvTaskIncrementMutexHeldCount+0x24>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d004      	beq.n	800bfc6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bfbc:	4b05      	ldr	r3, [pc, #20]	@ (800bfd4 <pvTaskIncrementMutexHeldCount+0x24>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bfc2:	3201      	adds	r2, #1
 800bfc4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800bfc6:	4b03      	ldr	r3, [pc, #12]	@ (800bfd4 <pvTaskIncrementMutexHeldCount+0x24>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
	}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr
 800bfd4:	20002b48 	.word	0x20002b48

0800bfd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bfe2:	4b29      	ldr	r3, [pc, #164]	@ (800c088 <prvAddCurrentTaskToDelayedList+0xb0>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfe8:	4b28      	ldr	r3, [pc, #160]	@ (800c08c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	3304      	adds	r3, #4
 800bfee:	4618      	mov	r0, r3
 800bff0:	f7fe f961 	bl	800a2b6 <uxListRemove>
 800bff4:	4603      	mov	r3, r0
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d10b      	bne.n	800c012 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bffa:	4b24      	ldr	r3, [pc, #144]	@ (800c08c <prvAddCurrentTaskToDelayedList+0xb4>)
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c000:	2201      	movs	r2, #1
 800c002:	fa02 f303 	lsl.w	r3, r2, r3
 800c006:	43da      	mvns	r2, r3
 800c008:	4b21      	ldr	r3, [pc, #132]	@ (800c090 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	4013      	ands	r3, r2
 800c00e:	4a20      	ldr	r2, [pc, #128]	@ (800c090 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c010:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c018:	d10a      	bne.n	800c030 <prvAddCurrentTaskToDelayedList+0x58>
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d007      	beq.n	800c030 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c020:	4b1a      	ldr	r3, [pc, #104]	@ (800c08c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	3304      	adds	r3, #4
 800c026:	4619      	mov	r1, r3
 800c028:	481a      	ldr	r0, [pc, #104]	@ (800c094 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c02a:	f7fe f8e7 	bl	800a1fc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c02e:	e026      	b.n	800c07e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c030:	68fa      	ldr	r2, [r7, #12]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	4413      	add	r3, r2
 800c036:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c038:	4b14      	ldr	r3, [pc, #80]	@ (800c08c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	68ba      	ldr	r2, [r7, #8]
 800c03e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c040:	68ba      	ldr	r2, [r7, #8]
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	429a      	cmp	r2, r3
 800c046:	d209      	bcs.n	800c05c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c048:	4b13      	ldr	r3, [pc, #76]	@ (800c098 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c04a:	681a      	ldr	r2, [r3, #0]
 800c04c:	4b0f      	ldr	r3, [pc, #60]	@ (800c08c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	3304      	adds	r3, #4
 800c052:	4619      	mov	r1, r3
 800c054:	4610      	mov	r0, r2
 800c056:	f7fe f8f5 	bl	800a244 <vListInsert>
}
 800c05a:	e010      	b.n	800c07e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c05c:	4b0f      	ldr	r3, [pc, #60]	@ (800c09c <prvAddCurrentTaskToDelayedList+0xc4>)
 800c05e:	681a      	ldr	r2, [r3, #0]
 800c060:	4b0a      	ldr	r3, [pc, #40]	@ (800c08c <prvAddCurrentTaskToDelayedList+0xb4>)
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	3304      	adds	r3, #4
 800c066:	4619      	mov	r1, r3
 800c068:	4610      	mov	r0, r2
 800c06a:	f7fe f8eb 	bl	800a244 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c06e:	4b0c      	ldr	r3, [pc, #48]	@ (800c0a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	68ba      	ldr	r2, [r7, #8]
 800c074:	429a      	cmp	r2, r3
 800c076:	d202      	bcs.n	800c07e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c078:	4a09      	ldr	r2, [pc, #36]	@ (800c0a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	6013      	str	r3, [r2, #0]
}
 800c07e:	bf00      	nop
 800c080:	3710      	adds	r7, #16
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	20002c4c 	.word	0x20002c4c
 800c08c:	20002b48 	.word	0x20002b48
 800c090:	20002c50 	.word	0x20002c50
 800c094:	20002c34 	.word	0x20002c34
 800c098:	20002c04 	.word	0x20002c04
 800c09c:	20002c00 	.word	0x20002c00
 800c0a0:	20002c68 	.word	0x20002c68

0800c0a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	60b9      	str	r1, [r7, #8]
 800c0ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	3b04      	subs	r3, #4
 800c0b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c0bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	3b04      	subs	r3, #4
 800c0c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	f023 0201 	bic.w	r2, r3, #1
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	3b04      	subs	r3, #4
 800c0d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c0d4:	4a0c      	ldr	r2, [pc, #48]	@ (800c108 <pxPortInitialiseStack+0x64>)
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	3b14      	subs	r3, #20
 800c0de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	3b04      	subs	r3, #4
 800c0ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f06f 0202 	mvn.w	r2, #2
 800c0f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	3b20      	subs	r3, #32
 800c0f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3714      	adds	r7, #20
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr
 800c108:	0800c10d 	.word	0x0800c10d

0800c10c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c10c:	b480      	push	{r7}
 800c10e:	b085      	sub	sp, #20
 800c110:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c112:	2300      	movs	r3, #0
 800c114:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c116:	4b13      	ldr	r3, [pc, #76]	@ (800c164 <prvTaskExitError+0x58>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c11e:	d00b      	beq.n	800c138 <prvTaskExitError+0x2c>
	__asm volatile
 800c120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c124:	f383 8811 	msr	BASEPRI, r3
 800c128:	f3bf 8f6f 	isb	sy
 800c12c:	f3bf 8f4f 	dsb	sy
 800c130:	60fb      	str	r3, [r7, #12]
}
 800c132:	bf00      	nop
 800c134:	bf00      	nop
 800c136:	e7fd      	b.n	800c134 <prvTaskExitError+0x28>
	__asm volatile
 800c138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c13c:	f383 8811 	msr	BASEPRI, r3
 800c140:	f3bf 8f6f 	isb	sy
 800c144:	f3bf 8f4f 	dsb	sy
 800c148:	60bb      	str	r3, [r7, #8]
}
 800c14a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c14c:	bf00      	nop
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d0fc      	beq.n	800c14e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c154:	bf00      	nop
 800c156:	bf00      	nop
 800c158:	3714      	adds	r7, #20
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	20000040 	.word	0x20000040
	...

0800c170 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c170:	4b07      	ldr	r3, [pc, #28]	@ (800c190 <pxCurrentTCBConst2>)
 800c172:	6819      	ldr	r1, [r3, #0]
 800c174:	6808      	ldr	r0, [r1, #0]
 800c176:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c17a:	f380 8809 	msr	PSP, r0
 800c17e:	f3bf 8f6f 	isb	sy
 800c182:	f04f 0000 	mov.w	r0, #0
 800c186:	f380 8811 	msr	BASEPRI, r0
 800c18a:	4770      	bx	lr
 800c18c:	f3af 8000 	nop.w

0800c190 <pxCurrentTCBConst2>:
 800c190:	20002b48 	.word	0x20002b48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c194:	bf00      	nop
 800c196:	bf00      	nop

0800c198 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c198:	4808      	ldr	r0, [pc, #32]	@ (800c1bc <prvPortStartFirstTask+0x24>)
 800c19a:	6800      	ldr	r0, [r0, #0]
 800c19c:	6800      	ldr	r0, [r0, #0]
 800c19e:	f380 8808 	msr	MSP, r0
 800c1a2:	f04f 0000 	mov.w	r0, #0
 800c1a6:	f380 8814 	msr	CONTROL, r0
 800c1aa:	b662      	cpsie	i
 800c1ac:	b661      	cpsie	f
 800c1ae:	f3bf 8f4f 	dsb	sy
 800c1b2:	f3bf 8f6f 	isb	sy
 800c1b6:	df00      	svc	0
 800c1b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c1ba:	bf00      	nop
 800c1bc:	e000ed08 	.word	0xe000ed08

0800c1c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b086      	sub	sp, #24
 800c1c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c1c6:	4b47      	ldr	r3, [pc, #284]	@ (800c2e4 <xPortStartScheduler+0x124>)
 800c1c8:	681b      	ldr	r3, [r3, #0]
 800c1ca:	4a47      	ldr	r2, [pc, #284]	@ (800c2e8 <xPortStartScheduler+0x128>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d10b      	bne.n	800c1e8 <xPortStartScheduler+0x28>
	__asm volatile
 800c1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d4:	f383 8811 	msr	BASEPRI, r3
 800c1d8:	f3bf 8f6f 	isb	sy
 800c1dc:	f3bf 8f4f 	dsb	sy
 800c1e0:	613b      	str	r3, [r7, #16]
}
 800c1e2:	bf00      	nop
 800c1e4:	bf00      	nop
 800c1e6:	e7fd      	b.n	800c1e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c1e8:	4b3e      	ldr	r3, [pc, #248]	@ (800c2e4 <xPortStartScheduler+0x124>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4a3f      	ldr	r2, [pc, #252]	@ (800c2ec <xPortStartScheduler+0x12c>)
 800c1ee:	4293      	cmp	r3, r2
 800c1f0:	d10b      	bne.n	800c20a <xPortStartScheduler+0x4a>
	__asm volatile
 800c1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f6:	f383 8811 	msr	BASEPRI, r3
 800c1fa:	f3bf 8f6f 	isb	sy
 800c1fe:	f3bf 8f4f 	dsb	sy
 800c202:	60fb      	str	r3, [r7, #12]
}
 800c204:	bf00      	nop
 800c206:	bf00      	nop
 800c208:	e7fd      	b.n	800c206 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c20a:	4b39      	ldr	r3, [pc, #228]	@ (800c2f0 <xPortStartScheduler+0x130>)
 800c20c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	781b      	ldrb	r3, [r3, #0]
 800c212:	b2db      	uxtb	r3, r3
 800c214:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	22ff      	movs	r2, #255	@ 0xff
 800c21a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	b2db      	uxtb	r3, r3
 800c222:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c224:	78fb      	ldrb	r3, [r7, #3]
 800c226:	b2db      	uxtb	r3, r3
 800c228:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c22c:	b2da      	uxtb	r2, r3
 800c22e:	4b31      	ldr	r3, [pc, #196]	@ (800c2f4 <xPortStartScheduler+0x134>)
 800c230:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c232:	4b31      	ldr	r3, [pc, #196]	@ (800c2f8 <xPortStartScheduler+0x138>)
 800c234:	2207      	movs	r2, #7
 800c236:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c238:	e009      	b.n	800c24e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c23a:	4b2f      	ldr	r3, [pc, #188]	@ (800c2f8 <xPortStartScheduler+0x138>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	3b01      	subs	r3, #1
 800c240:	4a2d      	ldr	r2, [pc, #180]	@ (800c2f8 <xPortStartScheduler+0x138>)
 800c242:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c244:	78fb      	ldrb	r3, [r7, #3]
 800c246:	b2db      	uxtb	r3, r3
 800c248:	005b      	lsls	r3, r3, #1
 800c24a:	b2db      	uxtb	r3, r3
 800c24c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c24e:	78fb      	ldrb	r3, [r7, #3]
 800c250:	b2db      	uxtb	r3, r3
 800c252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c256:	2b80      	cmp	r3, #128	@ 0x80
 800c258:	d0ef      	beq.n	800c23a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c25a:	4b27      	ldr	r3, [pc, #156]	@ (800c2f8 <xPortStartScheduler+0x138>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f1c3 0307 	rsb	r3, r3, #7
 800c262:	2b04      	cmp	r3, #4
 800c264:	d00b      	beq.n	800c27e <xPortStartScheduler+0xbe>
	__asm volatile
 800c266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c26a:	f383 8811 	msr	BASEPRI, r3
 800c26e:	f3bf 8f6f 	isb	sy
 800c272:	f3bf 8f4f 	dsb	sy
 800c276:	60bb      	str	r3, [r7, #8]
}
 800c278:	bf00      	nop
 800c27a:	bf00      	nop
 800c27c:	e7fd      	b.n	800c27a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c27e:	4b1e      	ldr	r3, [pc, #120]	@ (800c2f8 <xPortStartScheduler+0x138>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	021b      	lsls	r3, r3, #8
 800c284:	4a1c      	ldr	r2, [pc, #112]	@ (800c2f8 <xPortStartScheduler+0x138>)
 800c286:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c288:	4b1b      	ldr	r3, [pc, #108]	@ (800c2f8 <xPortStartScheduler+0x138>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c290:	4a19      	ldr	r2, [pc, #100]	@ (800c2f8 <xPortStartScheduler+0x138>)
 800c292:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	b2da      	uxtb	r2, r3
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c29c:	4b17      	ldr	r3, [pc, #92]	@ (800c2fc <xPortStartScheduler+0x13c>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a16      	ldr	r2, [pc, #88]	@ (800c2fc <xPortStartScheduler+0x13c>)
 800c2a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c2a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c2a8:	4b14      	ldr	r3, [pc, #80]	@ (800c2fc <xPortStartScheduler+0x13c>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4a13      	ldr	r2, [pc, #76]	@ (800c2fc <xPortStartScheduler+0x13c>)
 800c2ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c2b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c2b4:	f000 f8da 	bl	800c46c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c2b8:	4b11      	ldr	r3, [pc, #68]	@ (800c300 <xPortStartScheduler+0x140>)
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c2be:	f000 f8f9 	bl	800c4b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c2c2:	4b10      	ldr	r3, [pc, #64]	@ (800c304 <xPortStartScheduler+0x144>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4a0f      	ldr	r2, [pc, #60]	@ (800c304 <xPortStartScheduler+0x144>)
 800c2c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c2cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c2ce:	f7ff ff63 	bl	800c198 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c2d2:	f7ff fa7f 	bl	800b7d4 <vTaskSwitchContext>
	prvTaskExitError();
 800c2d6:	f7ff ff19 	bl	800c10c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c2da:	2300      	movs	r3, #0
}
 800c2dc:	4618      	mov	r0, r3
 800c2de:	3718      	adds	r7, #24
 800c2e0:	46bd      	mov	sp, r7
 800c2e2:	bd80      	pop	{r7, pc}
 800c2e4:	e000ed00 	.word	0xe000ed00
 800c2e8:	410fc271 	.word	0x410fc271
 800c2ec:	410fc270 	.word	0x410fc270
 800c2f0:	e000e400 	.word	0xe000e400
 800c2f4:	20002c74 	.word	0x20002c74
 800c2f8:	20002c78 	.word	0x20002c78
 800c2fc:	e000ed20 	.word	0xe000ed20
 800c300:	20000040 	.word	0x20000040
 800c304:	e000ef34 	.word	0xe000ef34

0800c308 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c308:	b480      	push	{r7}
 800c30a:	b083      	sub	sp, #12
 800c30c:	af00      	add	r7, sp, #0
	__asm volatile
 800c30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c312:	f383 8811 	msr	BASEPRI, r3
 800c316:	f3bf 8f6f 	isb	sy
 800c31a:	f3bf 8f4f 	dsb	sy
 800c31e:	607b      	str	r3, [r7, #4]
}
 800c320:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c322:	4b10      	ldr	r3, [pc, #64]	@ (800c364 <vPortEnterCritical+0x5c>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	3301      	adds	r3, #1
 800c328:	4a0e      	ldr	r2, [pc, #56]	@ (800c364 <vPortEnterCritical+0x5c>)
 800c32a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c32c:	4b0d      	ldr	r3, [pc, #52]	@ (800c364 <vPortEnterCritical+0x5c>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2b01      	cmp	r3, #1
 800c332:	d110      	bne.n	800c356 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c334:	4b0c      	ldr	r3, [pc, #48]	@ (800c368 <vPortEnterCritical+0x60>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	b2db      	uxtb	r3, r3
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d00b      	beq.n	800c356 <vPortEnterCritical+0x4e>
	__asm volatile
 800c33e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c342:	f383 8811 	msr	BASEPRI, r3
 800c346:	f3bf 8f6f 	isb	sy
 800c34a:	f3bf 8f4f 	dsb	sy
 800c34e:	603b      	str	r3, [r7, #0]
}
 800c350:	bf00      	nop
 800c352:	bf00      	nop
 800c354:	e7fd      	b.n	800c352 <vPortEnterCritical+0x4a>
	}
}
 800c356:	bf00      	nop
 800c358:	370c      	adds	r7, #12
 800c35a:	46bd      	mov	sp, r7
 800c35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c360:	4770      	bx	lr
 800c362:	bf00      	nop
 800c364:	20000040 	.word	0x20000040
 800c368:	e000ed04 	.word	0xe000ed04

0800c36c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c372:	4b12      	ldr	r3, [pc, #72]	@ (800c3bc <vPortExitCritical+0x50>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d10b      	bne.n	800c392 <vPortExitCritical+0x26>
	__asm volatile
 800c37a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c37e:	f383 8811 	msr	BASEPRI, r3
 800c382:	f3bf 8f6f 	isb	sy
 800c386:	f3bf 8f4f 	dsb	sy
 800c38a:	607b      	str	r3, [r7, #4]
}
 800c38c:	bf00      	nop
 800c38e:	bf00      	nop
 800c390:	e7fd      	b.n	800c38e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c392:	4b0a      	ldr	r3, [pc, #40]	@ (800c3bc <vPortExitCritical+0x50>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	3b01      	subs	r3, #1
 800c398:	4a08      	ldr	r2, [pc, #32]	@ (800c3bc <vPortExitCritical+0x50>)
 800c39a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c39c:	4b07      	ldr	r3, [pc, #28]	@ (800c3bc <vPortExitCritical+0x50>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d105      	bne.n	800c3b0 <vPortExitCritical+0x44>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	f383 8811 	msr	BASEPRI, r3
}
 800c3ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c3b0:	bf00      	nop
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr
 800c3bc:	20000040 	.word	0x20000040

0800c3c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c3c0:	f3ef 8009 	mrs	r0, PSP
 800c3c4:	f3bf 8f6f 	isb	sy
 800c3c8:	4b15      	ldr	r3, [pc, #84]	@ (800c420 <pxCurrentTCBConst>)
 800c3ca:	681a      	ldr	r2, [r3, #0]
 800c3cc:	f01e 0f10 	tst.w	lr, #16
 800c3d0:	bf08      	it	eq
 800c3d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c3d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3da:	6010      	str	r0, [r2, #0]
 800c3dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c3e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c3e4:	f380 8811 	msr	BASEPRI, r0
 800c3e8:	f3bf 8f4f 	dsb	sy
 800c3ec:	f3bf 8f6f 	isb	sy
 800c3f0:	f7ff f9f0 	bl	800b7d4 <vTaskSwitchContext>
 800c3f4:	f04f 0000 	mov.w	r0, #0
 800c3f8:	f380 8811 	msr	BASEPRI, r0
 800c3fc:	bc09      	pop	{r0, r3}
 800c3fe:	6819      	ldr	r1, [r3, #0]
 800c400:	6808      	ldr	r0, [r1, #0]
 800c402:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c406:	f01e 0f10 	tst.w	lr, #16
 800c40a:	bf08      	it	eq
 800c40c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c410:	f380 8809 	msr	PSP, r0
 800c414:	f3bf 8f6f 	isb	sy
 800c418:	4770      	bx	lr
 800c41a:	bf00      	nop
 800c41c:	f3af 8000 	nop.w

0800c420 <pxCurrentTCBConst>:
 800c420:	20002b48 	.word	0x20002b48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c424:	bf00      	nop
 800c426:	bf00      	nop

0800c428 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b082      	sub	sp, #8
 800c42c:	af00      	add	r7, sp, #0
	__asm volatile
 800c42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c432:	f383 8811 	msr	BASEPRI, r3
 800c436:	f3bf 8f6f 	isb	sy
 800c43a:	f3bf 8f4f 	dsb	sy
 800c43e:	607b      	str	r3, [r7, #4]
}
 800c440:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c442:	f7ff f90d 	bl	800b660 <xTaskIncrementTick>
 800c446:	4603      	mov	r3, r0
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d003      	beq.n	800c454 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c44c:	4b06      	ldr	r3, [pc, #24]	@ (800c468 <SysTick_Handler+0x40>)
 800c44e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c452:	601a      	str	r2, [r3, #0]
 800c454:	2300      	movs	r3, #0
 800c456:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	f383 8811 	msr	BASEPRI, r3
}
 800c45e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c460:	bf00      	nop
 800c462:	3708      	adds	r7, #8
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}
 800c468:	e000ed04 	.word	0xe000ed04

0800c46c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c46c:	b480      	push	{r7}
 800c46e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c470:	4b0b      	ldr	r3, [pc, #44]	@ (800c4a0 <vPortSetupTimerInterrupt+0x34>)
 800c472:	2200      	movs	r2, #0
 800c474:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c476:	4b0b      	ldr	r3, [pc, #44]	@ (800c4a4 <vPortSetupTimerInterrupt+0x38>)
 800c478:	2200      	movs	r2, #0
 800c47a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c47c:	4b0a      	ldr	r3, [pc, #40]	@ (800c4a8 <vPortSetupTimerInterrupt+0x3c>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	4a0a      	ldr	r2, [pc, #40]	@ (800c4ac <vPortSetupTimerInterrupt+0x40>)
 800c482:	fba2 2303 	umull	r2, r3, r2, r3
 800c486:	099b      	lsrs	r3, r3, #6
 800c488:	4a09      	ldr	r2, [pc, #36]	@ (800c4b0 <vPortSetupTimerInterrupt+0x44>)
 800c48a:	3b01      	subs	r3, #1
 800c48c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c48e:	4b04      	ldr	r3, [pc, #16]	@ (800c4a0 <vPortSetupTimerInterrupt+0x34>)
 800c490:	2207      	movs	r2, #7
 800c492:	601a      	str	r2, [r3, #0]
}
 800c494:	bf00      	nop
 800c496:	46bd      	mov	sp, r7
 800c498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49c:	4770      	bx	lr
 800c49e:	bf00      	nop
 800c4a0:	e000e010 	.word	0xe000e010
 800c4a4:	e000e018 	.word	0xe000e018
 800c4a8:	20000000 	.word	0x20000000
 800c4ac:	10624dd3 	.word	0x10624dd3
 800c4b0:	e000e014 	.word	0xe000e014

0800c4b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c4b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c4c4 <vPortEnableVFP+0x10>
 800c4b8:	6801      	ldr	r1, [r0, #0]
 800c4ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c4be:	6001      	str	r1, [r0, #0]
 800c4c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c4c2:	bf00      	nop
 800c4c4:	e000ed88 	.word	0xe000ed88

0800c4c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c4c8:	b480      	push	{r7}
 800c4ca:	b085      	sub	sp, #20
 800c4cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c4ce:	f3ef 8305 	mrs	r3, IPSR
 800c4d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2b0f      	cmp	r3, #15
 800c4d8:	d915      	bls.n	800c506 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c4da:	4a18      	ldr	r2, [pc, #96]	@ (800c53c <vPortValidateInterruptPriority+0x74>)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	4413      	add	r3, r2
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c4e4:	4b16      	ldr	r3, [pc, #88]	@ (800c540 <vPortValidateInterruptPriority+0x78>)
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	7afa      	ldrb	r2, [r7, #11]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d20b      	bcs.n	800c506 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c4ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4f2:	f383 8811 	msr	BASEPRI, r3
 800c4f6:	f3bf 8f6f 	isb	sy
 800c4fa:	f3bf 8f4f 	dsb	sy
 800c4fe:	607b      	str	r3, [r7, #4]
}
 800c500:	bf00      	nop
 800c502:	bf00      	nop
 800c504:	e7fd      	b.n	800c502 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c506:	4b0f      	ldr	r3, [pc, #60]	@ (800c544 <vPortValidateInterruptPriority+0x7c>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c50e:	4b0e      	ldr	r3, [pc, #56]	@ (800c548 <vPortValidateInterruptPriority+0x80>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	429a      	cmp	r2, r3
 800c514:	d90b      	bls.n	800c52e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c51a:	f383 8811 	msr	BASEPRI, r3
 800c51e:	f3bf 8f6f 	isb	sy
 800c522:	f3bf 8f4f 	dsb	sy
 800c526:	603b      	str	r3, [r7, #0]
}
 800c528:	bf00      	nop
 800c52a:	bf00      	nop
 800c52c:	e7fd      	b.n	800c52a <vPortValidateInterruptPriority+0x62>
	}
 800c52e:	bf00      	nop
 800c530:	3714      	adds	r7, #20
 800c532:	46bd      	mov	sp, r7
 800c534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c538:	4770      	bx	lr
 800c53a:	bf00      	nop
 800c53c:	e000e3f0 	.word	0xe000e3f0
 800c540:	20002c74 	.word	0x20002c74
 800c544:	e000ed0c 	.word	0xe000ed0c
 800c548:	20002c78 	.word	0x20002c78

0800c54c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b08a      	sub	sp, #40	@ 0x28
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c554:	2300      	movs	r3, #0
 800c556:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c558:	f7fe ffc6 	bl	800b4e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c55c:	4b5c      	ldr	r3, [pc, #368]	@ (800c6d0 <pvPortMalloc+0x184>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d101      	bne.n	800c568 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c564:	f000 f924 	bl	800c7b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c568:	4b5a      	ldr	r3, [pc, #360]	@ (800c6d4 <pvPortMalloc+0x188>)
 800c56a:	681a      	ldr	r2, [r3, #0]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	4013      	ands	r3, r2
 800c570:	2b00      	cmp	r3, #0
 800c572:	f040 8095 	bne.w	800c6a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d01e      	beq.n	800c5ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c57c:	2208      	movs	r2, #8
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	4413      	add	r3, r2
 800c582:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f003 0307 	and.w	r3, r3, #7
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d015      	beq.n	800c5ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f023 0307 	bic.w	r3, r3, #7
 800c594:	3308      	adds	r3, #8
 800c596:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	f003 0307 	and.w	r3, r3, #7
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d00b      	beq.n	800c5ba <pvPortMalloc+0x6e>
	__asm volatile
 800c5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5a6:	f383 8811 	msr	BASEPRI, r3
 800c5aa:	f3bf 8f6f 	isb	sy
 800c5ae:	f3bf 8f4f 	dsb	sy
 800c5b2:	617b      	str	r3, [r7, #20]
}
 800c5b4:	bf00      	nop
 800c5b6:	bf00      	nop
 800c5b8:	e7fd      	b.n	800c5b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d06f      	beq.n	800c6a0 <pvPortMalloc+0x154>
 800c5c0:	4b45      	ldr	r3, [pc, #276]	@ (800c6d8 <pvPortMalloc+0x18c>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	687a      	ldr	r2, [r7, #4]
 800c5c6:	429a      	cmp	r2, r3
 800c5c8:	d86a      	bhi.n	800c6a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c5ca:	4b44      	ldr	r3, [pc, #272]	@ (800c6dc <pvPortMalloc+0x190>)
 800c5cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c5ce:	4b43      	ldr	r3, [pc, #268]	@ (800c6dc <pvPortMalloc+0x190>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5d4:	e004      	b.n	800c5e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e2:	685b      	ldr	r3, [r3, #4]
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	429a      	cmp	r2, r3
 800c5e8:	d903      	bls.n	800c5f2 <pvPortMalloc+0xa6>
 800c5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d1f1      	bne.n	800c5d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c5f2:	4b37      	ldr	r3, [pc, #220]	@ (800c6d0 <pvPortMalloc+0x184>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5f8:	429a      	cmp	r2, r3
 800c5fa:	d051      	beq.n	800c6a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c5fc:	6a3b      	ldr	r3, [r7, #32]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2208      	movs	r2, #8
 800c602:	4413      	add	r3, r2
 800c604:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c608:	681a      	ldr	r2, [r3, #0]
 800c60a:	6a3b      	ldr	r3, [r7, #32]
 800c60c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c610:	685a      	ldr	r2, [r3, #4]
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	1ad2      	subs	r2, r2, r3
 800c616:	2308      	movs	r3, #8
 800c618:	005b      	lsls	r3, r3, #1
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d920      	bls.n	800c660 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c61e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	4413      	add	r3, r2
 800c624:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	f003 0307 	and.w	r3, r3, #7
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d00b      	beq.n	800c648 <pvPortMalloc+0xfc>
	__asm volatile
 800c630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c634:	f383 8811 	msr	BASEPRI, r3
 800c638:	f3bf 8f6f 	isb	sy
 800c63c:	f3bf 8f4f 	dsb	sy
 800c640:	613b      	str	r3, [r7, #16]
}
 800c642:	bf00      	nop
 800c644:	bf00      	nop
 800c646:	e7fd      	b.n	800c644 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c64a:	685a      	ldr	r2, [r3, #4]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	1ad2      	subs	r2, r2, r3
 800c650:	69bb      	ldr	r3, [r7, #24]
 800c652:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c65a:	69b8      	ldr	r0, [r7, #24]
 800c65c:	f000 f90a 	bl	800c874 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c660:	4b1d      	ldr	r3, [pc, #116]	@ (800c6d8 <pvPortMalloc+0x18c>)
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	1ad3      	subs	r3, r2, r3
 800c66a:	4a1b      	ldr	r2, [pc, #108]	@ (800c6d8 <pvPortMalloc+0x18c>)
 800c66c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c66e:	4b1a      	ldr	r3, [pc, #104]	@ (800c6d8 <pvPortMalloc+0x18c>)
 800c670:	681a      	ldr	r2, [r3, #0]
 800c672:	4b1b      	ldr	r3, [pc, #108]	@ (800c6e0 <pvPortMalloc+0x194>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	429a      	cmp	r2, r3
 800c678:	d203      	bcs.n	800c682 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c67a:	4b17      	ldr	r3, [pc, #92]	@ (800c6d8 <pvPortMalloc+0x18c>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	4a18      	ldr	r2, [pc, #96]	@ (800c6e0 <pvPortMalloc+0x194>)
 800c680:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c684:	685a      	ldr	r2, [r3, #4]
 800c686:	4b13      	ldr	r3, [pc, #76]	@ (800c6d4 <pvPortMalloc+0x188>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	431a      	orrs	r2, r3
 800c68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c68e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c692:	2200      	movs	r2, #0
 800c694:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c696:	4b13      	ldr	r3, [pc, #76]	@ (800c6e4 <pvPortMalloc+0x198>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	3301      	adds	r3, #1
 800c69c:	4a11      	ldr	r2, [pc, #68]	@ (800c6e4 <pvPortMalloc+0x198>)
 800c69e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c6a0:	f7fe ff30 	bl	800b504 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	f003 0307 	and.w	r3, r3, #7
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00b      	beq.n	800c6c6 <pvPortMalloc+0x17a>
	__asm volatile
 800c6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b2:	f383 8811 	msr	BASEPRI, r3
 800c6b6:	f3bf 8f6f 	isb	sy
 800c6ba:	f3bf 8f4f 	dsb	sy
 800c6be:	60fb      	str	r3, [r7, #12]
}
 800c6c0:	bf00      	nop
 800c6c2:	bf00      	nop
 800c6c4:	e7fd      	b.n	800c6c2 <pvPortMalloc+0x176>
	return pvReturn;
 800c6c6:	69fb      	ldr	r3, [r7, #28]
}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3728      	adds	r7, #40	@ 0x28
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}
 800c6d0:	20006884 	.word	0x20006884
 800c6d4:	20006898 	.word	0x20006898
 800c6d8:	20006888 	.word	0x20006888
 800c6dc:	2000687c 	.word	0x2000687c
 800c6e0:	2000688c 	.word	0x2000688c
 800c6e4:	20006890 	.word	0x20006890

0800c6e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b086      	sub	sp, #24
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d04f      	beq.n	800c79a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c6fa:	2308      	movs	r3, #8
 800c6fc:	425b      	negs	r3, r3
 800c6fe:	697a      	ldr	r2, [r7, #20]
 800c700:	4413      	add	r3, r2
 800c702:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	685a      	ldr	r2, [r3, #4]
 800c70c:	4b25      	ldr	r3, [pc, #148]	@ (800c7a4 <vPortFree+0xbc>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4013      	ands	r3, r2
 800c712:	2b00      	cmp	r3, #0
 800c714:	d10b      	bne.n	800c72e <vPortFree+0x46>
	__asm volatile
 800c716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c71a:	f383 8811 	msr	BASEPRI, r3
 800c71e:	f3bf 8f6f 	isb	sy
 800c722:	f3bf 8f4f 	dsb	sy
 800c726:	60fb      	str	r3, [r7, #12]
}
 800c728:	bf00      	nop
 800c72a:	bf00      	nop
 800c72c:	e7fd      	b.n	800c72a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c72e:	693b      	ldr	r3, [r7, #16]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	2b00      	cmp	r3, #0
 800c734:	d00b      	beq.n	800c74e <vPortFree+0x66>
	__asm volatile
 800c736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c73a:	f383 8811 	msr	BASEPRI, r3
 800c73e:	f3bf 8f6f 	isb	sy
 800c742:	f3bf 8f4f 	dsb	sy
 800c746:	60bb      	str	r3, [r7, #8]
}
 800c748:	bf00      	nop
 800c74a:	bf00      	nop
 800c74c:	e7fd      	b.n	800c74a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	685a      	ldr	r2, [r3, #4]
 800c752:	4b14      	ldr	r3, [pc, #80]	@ (800c7a4 <vPortFree+0xbc>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	4013      	ands	r3, r2
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d01e      	beq.n	800c79a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d11a      	bne.n	800c79a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c764:	693b      	ldr	r3, [r7, #16]
 800c766:	685a      	ldr	r2, [r3, #4]
 800c768:	4b0e      	ldr	r3, [pc, #56]	@ (800c7a4 <vPortFree+0xbc>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	43db      	mvns	r3, r3
 800c76e:	401a      	ands	r2, r3
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c774:	f7fe feb8 	bl	800b4e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	685a      	ldr	r2, [r3, #4]
 800c77c:	4b0a      	ldr	r3, [pc, #40]	@ (800c7a8 <vPortFree+0xc0>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	4413      	add	r3, r2
 800c782:	4a09      	ldr	r2, [pc, #36]	@ (800c7a8 <vPortFree+0xc0>)
 800c784:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c786:	6938      	ldr	r0, [r7, #16]
 800c788:	f000 f874 	bl	800c874 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c78c:	4b07      	ldr	r3, [pc, #28]	@ (800c7ac <vPortFree+0xc4>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	3301      	adds	r3, #1
 800c792:	4a06      	ldr	r2, [pc, #24]	@ (800c7ac <vPortFree+0xc4>)
 800c794:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c796:	f7fe feb5 	bl	800b504 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c79a:	bf00      	nop
 800c79c:	3718      	adds	r7, #24
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	20006898 	.word	0x20006898
 800c7a8:	20006888 	.word	0x20006888
 800c7ac:	20006894 	.word	0x20006894

0800c7b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b085      	sub	sp, #20
 800c7b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c7b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c7ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c7bc:	4b27      	ldr	r3, [pc, #156]	@ (800c85c <prvHeapInit+0xac>)
 800c7be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f003 0307 	and.w	r3, r3, #7
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00c      	beq.n	800c7e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	3307      	adds	r3, #7
 800c7ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f023 0307 	bic.w	r3, r3, #7
 800c7d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c7d8:	68ba      	ldr	r2, [r7, #8]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	1ad3      	subs	r3, r2, r3
 800c7de:	4a1f      	ldr	r2, [pc, #124]	@ (800c85c <prvHeapInit+0xac>)
 800c7e0:	4413      	add	r3, r2
 800c7e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c7e8:	4a1d      	ldr	r2, [pc, #116]	@ (800c860 <prvHeapInit+0xb0>)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c7ee:	4b1c      	ldr	r3, [pc, #112]	@ (800c860 <prvHeapInit+0xb0>)
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	68ba      	ldr	r2, [r7, #8]
 800c7f8:	4413      	add	r3, r2
 800c7fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c7fc:	2208      	movs	r2, #8
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	1a9b      	subs	r3, r3, r2
 800c802:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	f023 0307 	bic.w	r3, r3, #7
 800c80a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	4a15      	ldr	r2, [pc, #84]	@ (800c864 <prvHeapInit+0xb4>)
 800c810:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c812:	4b14      	ldr	r3, [pc, #80]	@ (800c864 <prvHeapInit+0xb4>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	2200      	movs	r2, #0
 800c818:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c81a:	4b12      	ldr	r3, [pc, #72]	@ (800c864 <prvHeapInit+0xb4>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	2200      	movs	r2, #0
 800c820:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	68fa      	ldr	r2, [r7, #12]
 800c82a:	1ad2      	subs	r2, r2, r3
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c830:	4b0c      	ldr	r3, [pc, #48]	@ (800c864 <prvHeapInit+0xb4>)
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	4a0a      	ldr	r2, [pc, #40]	@ (800c868 <prvHeapInit+0xb8>)
 800c83e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	685b      	ldr	r3, [r3, #4]
 800c844:	4a09      	ldr	r2, [pc, #36]	@ (800c86c <prvHeapInit+0xbc>)
 800c846:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c848:	4b09      	ldr	r3, [pc, #36]	@ (800c870 <prvHeapInit+0xc0>)
 800c84a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c84e:	601a      	str	r2, [r3, #0]
}
 800c850:	bf00      	nop
 800c852:	3714      	adds	r7, #20
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr
 800c85c:	20002c7c 	.word	0x20002c7c
 800c860:	2000687c 	.word	0x2000687c
 800c864:	20006884 	.word	0x20006884
 800c868:	2000688c 	.word	0x2000688c
 800c86c:	20006888 	.word	0x20006888
 800c870:	20006898 	.word	0x20006898

0800c874 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c874:	b480      	push	{r7}
 800c876:	b085      	sub	sp, #20
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c87c:	4b28      	ldr	r3, [pc, #160]	@ (800c920 <prvInsertBlockIntoFreeList+0xac>)
 800c87e:	60fb      	str	r3, [r7, #12]
 800c880:	e002      	b.n	800c888 <prvInsertBlockIntoFreeList+0x14>
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	60fb      	str	r3, [r7, #12]
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	687a      	ldr	r2, [r7, #4]
 800c88e:	429a      	cmp	r2, r3
 800c890:	d8f7      	bhi.n	800c882 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	68ba      	ldr	r2, [r7, #8]
 800c89c:	4413      	add	r3, r2
 800c89e:	687a      	ldr	r2, [r7, #4]
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d108      	bne.n	800c8b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	685a      	ldr	r2, [r3, #4]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	441a      	add	r2, r3
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	685b      	ldr	r3, [r3, #4]
 800c8be:	68ba      	ldr	r2, [r7, #8]
 800c8c0:	441a      	add	r2, r3
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	429a      	cmp	r2, r3
 800c8c8:	d118      	bne.n	800c8fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	4b15      	ldr	r3, [pc, #84]	@ (800c924 <prvInsertBlockIntoFreeList+0xb0>)
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	d00d      	beq.n	800c8f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	685a      	ldr	r2, [r3, #4]
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	441a      	add	r2, r3
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	681a      	ldr	r2, [r3, #0]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	601a      	str	r2, [r3, #0]
 800c8f0:	e008      	b.n	800c904 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c8f2:	4b0c      	ldr	r3, [pc, #48]	@ (800c924 <prvInsertBlockIntoFreeList+0xb0>)
 800c8f4:	681a      	ldr	r2, [r3, #0]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	601a      	str	r2, [r3, #0]
 800c8fa:	e003      	b.n	800c904 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c904:	68fa      	ldr	r2, [r7, #12]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	429a      	cmp	r2, r3
 800c90a:	d002      	beq.n	800c912 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	687a      	ldr	r2, [r7, #4]
 800c910:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c912:	bf00      	nop
 800c914:	3714      	adds	r7, #20
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr
 800c91e:	bf00      	nop
 800c920:	2000687c 	.word	0x2000687c
 800c924:	20006884 	.word	0x20006884

0800c928 <std>:
 800c928:	2300      	movs	r3, #0
 800c92a:	b510      	push	{r4, lr}
 800c92c:	4604      	mov	r4, r0
 800c92e:	e9c0 3300 	strd	r3, r3, [r0]
 800c932:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c936:	6083      	str	r3, [r0, #8]
 800c938:	8181      	strh	r1, [r0, #12]
 800c93a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c93c:	81c2      	strh	r2, [r0, #14]
 800c93e:	6183      	str	r3, [r0, #24]
 800c940:	4619      	mov	r1, r3
 800c942:	2208      	movs	r2, #8
 800c944:	305c      	adds	r0, #92	@ 0x5c
 800c946:	f000 f8f4 	bl	800cb32 <memset>
 800c94a:	4b0d      	ldr	r3, [pc, #52]	@ (800c980 <std+0x58>)
 800c94c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c94e:	4b0d      	ldr	r3, [pc, #52]	@ (800c984 <std+0x5c>)
 800c950:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c952:	4b0d      	ldr	r3, [pc, #52]	@ (800c988 <std+0x60>)
 800c954:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c956:	4b0d      	ldr	r3, [pc, #52]	@ (800c98c <std+0x64>)
 800c958:	6323      	str	r3, [r4, #48]	@ 0x30
 800c95a:	4b0d      	ldr	r3, [pc, #52]	@ (800c990 <std+0x68>)
 800c95c:	6224      	str	r4, [r4, #32]
 800c95e:	429c      	cmp	r4, r3
 800c960:	d006      	beq.n	800c970 <std+0x48>
 800c962:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c966:	4294      	cmp	r4, r2
 800c968:	d002      	beq.n	800c970 <std+0x48>
 800c96a:	33d0      	adds	r3, #208	@ 0xd0
 800c96c:	429c      	cmp	r4, r3
 800c96e:	d105      	bne.n	800c97c <std+0x54>
 800c970:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c978:	f000 b9b0 	b.w	800ccdc <__retarget_lock_init_recursive>
 800c97c:	bd10      	pop	{r4, pc}
 800c97e:	bf00      	nop
 800c980:	0800caad 	.word	0x0800caad
 800c984:	0800cacf 	.word	0x0800cacf
 800c988:	0800cb07 	.word	0x0800cb07
 800c98c:	0800cb2b 	.word	0x0800cb2b
 800c990:	2000689c 	.word	0x2000689c

0800c994 <stdio_exit_handler>:
 800c994:	4a02      	ldr	r2, [pc, #8]	@ (800c9a0 <stdio_exit_handler+0xc>)
 800c996:	4903      	ldr	r1, [pc, #12]	@ (800c9a4 <stdio_exit_handler+0x10>)
 800c998:	4803      	ldr	r0, [pc, #12]	@ (800c9a8 <stdio_exit_handler+0x14>)
 800c99a:	f000 b869 	b.w	800ca70 <_fwalk_sglue>
 800c99e:	bf00      	nop
 800c9a0:	20000044 	.word	0x20000044
 800c9a4:	0800d361 	.word	0x0800d361
 800c9a8:	20000054 	.word	0x20000054

0800c9ac <cleanup_stdio>:
 800c9ac:	6841      	ldr	r1, [r0, #4]
 800c9ae:	4b0c      	ldr	r3, [pc, #48]	@ (800c9e0 <cleanup_stdio+0x34>)
 800c9b0:	4299      	cmp	r1, r3
 800c9b2:	b510      	push	{r4, lr}
 800c9b4:	4604      	mov	r4, r0
 800c9b6:	d001      	beq.n	800c9bc <cleanup_stdio+0x10>
 800c9b8:	f000 fcd2 	bl	800d360 <_fflush_r>
 800c9bc:	68a1      	ldr	r1, [r4, #8]
 800c9be:	4b09      	ldr	r3, [pc, #36]	@ (800c9e4 <cleanup_stdio+0x38>)
 800c9c0:	4299      	cmp	r1, r3
 800c9c2:	d002      	beq.n	800c9ca <cleanup_stdio+0x1e>
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	f000 fccb 	bl	800d360 <_fflush_r>
 800c9ca:	68e1      	ldr	r1, [r4, #12]
 800c9cc:	4b06      	ldr	r3, [pc, #24]	@ (800c9e8 <cleanup_stdio+0x3c>)
 800c9ce:	4299      	cmp	r1, r3
 800c9d0:	d004      	beq.n	800c9dc <cleanup_stdio+0x30>
 800c9d2:	4620      	mov	r0, r4
 800c9d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9d8:	f000 bcc2 	b.w	800d360 <_fflush_r>
 800c9dc:	bd10      	pop	{r4, pc}
 800c9de:	bf00      	nop
 800c9e0:	2000689c 	.word	0x2000689c
 800c9e4:	20006904 	.word	0x20006904
 800c9e8:	2000696c 	.word	0x2000696c

0800c9ec <global_stdio_init.part.0>:
 800c9ec:	b510      	push	{r4, lr}
 800c9ee:	4b0b      	ldr	r3, [pc, #44]	@ (800ca1c <global_stdio_init.part.0+0x30>)
 800c9f0:	4c0b      	ldr	r4, [pc, #44]	@ (800ca20 <global_stdio_init.part.0+0x34>)
 800c9f2:	4a0c      	ldr	r2, [pc, #48]	@ (800ca24 <global_stdio_init.part.0+0x38>)
 800c9f4:	601a      	str	r2, [r3, #0]
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	2104      	movs	r1, #4
 800c9fc:	f7ff ff94 	bl	800c928 <std>
 800ca00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ca04:	2201      	movs	r2, #1
 800ca06:	2109      	movs	r1, #9
 800ca08:	f7ff ff8e 	bl	800c928 <std>
 800ca0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ca10:	2202      	movs	r2, #2
 800ca12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca16:	2112      	movs	r1, #18
 800ca18:	f7ff bf86 	b.w	800c928 <std>
 800ca1c:	200069d4 	.word	0x200069d4
 800ca20:	2000689c 	.word	0x2000689c
 800ca24:	0800c995 	.word	0x0800c995

0800ca28 <__sfp_lock_acquire>:
 800ca28:	4801      	ldr	r0, [pc, #4]	@ (800ca30 <__sfp_lock_acquire+0x8>)
 800ca2a:	f000 b958 	b.w	800ccde <__retarget_lock_acquire_recursive>
 800ca2e:	bf00      	nop
 800ca30:	200069dd 	.word	0x200069dd

0800ca34 <__sfp_lock_release>:
 800ca34:	4801      	ldr	r0, [pc, #4]	@ (800ca3c <__sfp_lock_release+0x8>)
 800ca36:	f000 b953 	b.w	800cce0 <__retarget_lock_release_recursive>
 800ca3a:	bf00      	nop
 800ca3c:	200069dd 	.word	0x200069dd

0800ca40 <__sinit>:
 800ca40:	b510      	push	{r4, lr}
 800ca42:	4604      	mov	r4, r0
 800ca44:	f7ff fff0 	bl	800ca28 <__sfp_lock_acquire>
 800ca48:	6a23      	ldr	r3, [r4, #32]
 800ca4a:	b11b      	cbz	r3, 800ca54 <__sinit+0x14>
 800ca4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca50:	f7ff bff0 	b.w	800ca34 <__sfp_lock_release>
 800ca54:	4b04      	ldr	r3, [pc, #16]	@ (800ca68 <__sinit+0x28>)
 800ca56:	6223      	str	r3, [r4, #32]
 800ca58:	4b04      	ldr	r3, [pc, #16]	@ (800ca6c <__sinit+0x2c>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d1f5      	bne.n	800ca4c <__sinit+0xc>
 800ca60:	f7ff ffc4 	bl	800c9ec <global_stdio_init.part.0>
 800ca64:	e7f2      	b.n	800ca4c <__sinit+0xc>
 800ca66:	bf00      	nop
 800ca68:	0800c9ad 	.word	0x0800c9ad
 800ca6c:	200069d4 	.word	0x200069d4

0800ca70 <_fwalk_sglue>:
 800ca70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca74:	4607      	mov	r7, r0
 800ca76:	4688      	mov	r8, r1
 800ca78:	4614      	mov	r4, r2
 800ca7a:	2600      	movs	r6, #0
 800ca7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca80:	f1b9 0901 	subs.w	r9, r9, #1
 800ca84:	d505      	bpl.n	800ca92 <_fwalk_sglue+0x22>
 800ca86:	6824      	ldr	r4, [r4, #0]
 800ca88:	2c00      	cmp	r4, #0
 800ca8a:	d1f7      	bne.n	800ca7c <_fwalk_sglue+0xc>
 800ca8c:	4630      	mov	r0, r6
 800ca8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca92:	89ab      	ldrh	r3, [r5, #12]
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d907      	bls.n	800caa8 <_fwalk_sglue+0x38>
 800ca98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca9c:	3301      	adds	r3, #1
 800ca9e:	d003      	beq.n	800caa8 <_fwalk_sglue+0x38>
 800caa0:	4629      	mov	r1, r5
 800caa2:	4638      	mov	r0, r7
 800caa4:	47c0      	blx	r8
 800caa6:	4306      	orrs	r6, r0
 800caa8:	3568      	adds	r5, #104	@ 0x68
 800caaa:	e7e9      	b.n	800ca80 <_fwalk_sglue+0x10>

0800caac <__sread>:
 800caac:	b510      	push	{r4, lr}
 800caae:	460c      	mov	r4, r1
 800cab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cab4:	f000 f8c4 	bl	800cc40 <_read_r>
 800cab8:	2800      	cmp	r0, #0
 800caba:	bfab      	itete	ge
 800cabc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cabe:	89a3      	ldrhlt	r3, [r4, #12]
 800cac0:	181b      	addge	r3, r3, r0
 800cac2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cac6:	bfac      	ite	ge
 800cac8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800caca:	81a3      	strhlt	r3, [r4, #12]
 800cacc:	bd10      	pop	{r4, pc}

0800cace <__swrite>:
 800cace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cad2:	461f      	mov	r7, r3
 800cad4:	898b      	ldrh	r3, [r1, #12]
 800cad6:	05db      	lsls	r3, r3, #23
 800cad8:	4605      	mov	r5, r0
 800cada:	460c      	mov	r4, r1
 800cadc:	4616      	mov	r6, r2
 800cade:	d505      	bpl.n	800caec <__swrite+0x1e>
 800cae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cae4:	2302      	movs	r3, #2
 800cae6:	2200      	movs	r2, #0
 800cae8:	f000 f898 	bl	800cc1c <_lseek_r>
 800caec:	89a3      	ldrh	r3, [r4, #12]
 800caee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800caf2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800caf6:	81a3      	strh	r3, [r4, #12]
 800caf8:	4632      	mov	r2, r6
 800cafa:	463b      	mov	r3, r7
 800cafc:	4628      	mov	r0, r5
 800cafe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb02:	f000 b8af 	b.w	800cc64 <_write_r>

0800cb06 <__sseek>:
 800cb06:	b510      	push	{r4, lr}
 800cb08:	460c      	mov	r4, r1
 800cb0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb0e:	f000 f885 	bl	800cc1c <_lseek_r>
 800cb12:	1c43      	adds	r3, r0, #1
 800cb14:	89a3      	ldrh	r3, [r4, #12]
 800cb16:	bf15      	itete	ne
 800cb18:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cb1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cb1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cb22:	81a3      	strheq	r3, [r4, #12]
 800cb24:	bf18      	it	ne
 800cb26:	81a3      	strhne	r3, [r4, #12]
 800cb28:	bd10      	pop	{r4, pc}

0800cb2a <__sclose>:
 800cb2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb2e:	f000 b865 	b.w	800cbfc <_close_r>

0800cb32 <memset>:
 800cb32:	4402      	add	r2, r0
 800cb34:	4603      	mov	r3, r0
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d100      	bne.n	800cb3c <memset+0xa>
 800cb3a:	4770      	bx	lr
 800cb3c:	f803 1b01 	strb.w	r1, [r3], #1
 800cb40:	e7f9      	b.n	800cb36 <memset+0x4>
	...

0800cb44 <strtok>:
 800cb44:	4b16      	ldr	r3, [pc, #88]	@ (800cba0 <strtok+0x5c>)
 800cb46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb4a:	681f      	ldr	r7, [r3, #0]
 800cb4c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800cb4e:	4605      	mov	r5, r0
 800cb50:	460e      	mov	r6, r1
 800cb52:	b9ec      	cbnz	r4, 800cb90 <strtok+0x4c>
 800cb54:	2050      	movs	r0, #80	@ 0x50
 800cb56:	f000 f93b 	bl	800cdd0 <malloc>
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	6478      	str	r0, [r7, #68]	@ 0x44
 800cb5e:	b920      	cbnz	r0, 800cb6a <strtok+0x26>
 800cb60:	4b10      	ldr	r3, [pc, #64]	@ (800cba4 <strtok+0x60>)
 800cb62:	4811      	ldr	r0, [pc, #68]	@ (800cba8 <strtok+0x64>)
 800cb64:	215b      	movs	r1, #91	@ 0x5b
 800cb66:	f000 f8cb 	bl	800cd00 <__assert_func>
 800cb6a:	e9c0 4400 	strd	r4, r4, [r0]
 800cb6e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800cb72:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800cb76:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800cb7a:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800cb7e:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800cb82:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800cb86:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800cb8a:	6184      	str	r4, [r0, #24]
 800cb8c:	7704      	strb	r4, [r0, #28]
 800cb8e:	6244      	str	r4, [r0, #36]	@ 0x24
 800cb90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cb92:	4631      	mov	r1, r6
 800cb94:	4628      	mov	r0, r5
 800cb96:	2301      	movs	r3, #1
 800cb98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb9c:	f000 b806 	b.w	800cbac <__strtok_r>
 800cba0:	20000050 	.word	0x20000050
 800cba4:	08010154 	.word	0x08010154
 800cba8:	0801016b 	.word	0x0801016b

0800cbac <__strtok_r>:
 800cbac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbae:	4604      	mov	r4, r0
 800cbb0:	b908      	cbnz	r0, 800cbb6 <__strtok_r+0xa>
 800cbb2:	6814      	ldr	r4, [r2, #0]
 800cbb4:	b144      	cbz	r4, 800cbc8 <__strtok_r+0x1c>
 800cbb6:	4620      	mov	r0, r4
 800cbb8:	f814 5b01 	ldrb.w	r5, [r4], #1
 800cbbc:	460f      	mov	r7, r1
 800cbbe:	f817 6b01 	ldrb.w	r6, [r7], #1
 800cbc2:	b91e      	cbnz	r6, 800cbcc <__strtok_r+0x20>
 800cbc4:	b965      	cbnz	r5, 800cbe0 <__strtok_r+0x34>
 800cbc6:	6015      	str	r5, [r2, #0]
 800cbc8:	2000      	movs	r0, #0
 800cbca:	e005      	b.n	800cbd8 <__strtok_r+0x2c>
 800cbcc:	42b5      	cmp	r5, r6
 800cbce:	d1f6      	bne.n	800cbbe <__strtok_r+0x12>
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d1f0      	bne.n	800cbb6 <__strtok_r+0xa>
 800cbd4:	6014      	str	r4, [r2, #0]
 800cbd6:	7003      	strb	r3, [r0, #0]
 800cbd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbda:	461c      	mov	r4, r3
 800cbdc:	e00c      	b.n	800cbf8 <__strtok_r+0x4c>
 800cbde:	b915      	cbnz	r5, 800cbe6 <__strtok_r+0x3a>
 800cbe0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cbe4:	460e      	mov	r6, r1
 800cbe6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800cbea:	42ab      	cmp	r3, r5
 800cbec:	d1f7      	bne.n	800cbde <__strtok_r+0x32>
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d0f3      	beq.n	800cbda <__strtok_r+0x2e>
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800cbf8:	6014      	str	r4, [r2, #0]
 800cbfa:	e7ed      	b.n	800cbd8 <__strtok_r+0x2c>

0800cbfc <_close_r>:
 800cbfc:	b538      	push	{r3, r4, r5, lr}
 800cbfe:	4d06      	ldr	r5, [pc, #24]	@ (800cc18 <_close_r+0x1c>)
 800cc00:	2300      	movs	r3, #0
 800cc02:	4604      	mov	r4, r0
 800cc04:	4608      	mov	r0, r1
 800cc06:	602b      	str	r3, [r5, #0]
 800cc08:	f7f4 fac4 	bl	8001194 <_close>
 800cc0c:	1c43      	adds	r3, r0, #1
 800cc0e:	d102      	bne.n	800cc16 <_close_r+0x1a>
 800cc10:	682b      	ldr	r3, [r5, #0]
 800cc12:	b103      	cbz	r3, 800cc16 <_close_r+0x1a>
 800cc14:	6023      	str	r3, [r4, #0]
 800cc16:	bd38      	pop	{r3, r4, r5, pc}
 800cc18:	200069d8 	.word	0x200069d8

0800cc1c <_lseek_r>:
 800cc1c:	b538      	push	{r3, r4, r5, lr}
 800cc1e:	4d07      	ldr	r5, [pc, #28]	@ (800cc3c <_lseek_r+0x20>)
 800cc20:	4604      	mov	r4, r0
 800cc22:	4608      	mov	r0, r1
 800cc24:	4611      	mov	r1, r2
 800cc26:	2200      	movs	r2, #0
 800cc28:	602a      	str	r2, [r5, #0]
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	f7f4 fad9 	bl	80011e2 <_lseek>
 800cc30:	1c43      	adds	r3, r0, #1
 800cc32:	d102      	bne.n	800cc3a <_lseek_r+0x1e>
 800cc34:	682b      	ldr	r3, [r5, #0]
 800cc36:	b103      	cbz	r3, 800cc3a <_lseek_r+0x1e>
 800cc38:	6023      	str	r3, [r4, #0]
 800cc3a:	bd38      	pop	{r3, r4, r5, pc}
 800cc3c:	200069d8 	.word	0x200069d8

0800cc40 <_read_r>:
 800cc40:	b538      	push	{r3, r4, r5, lr}
 800cc42:	4d07      	ldr	r5, [pc, #28]	@ (800cc60 <_read_r+0x20>)
 800cc44:	4604      	mov	r4, r0
 800cc46:	4608      	mov	r0, r1
 800cc48:	4611      	mov	r1, r2
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	602a      	str	r2, [r5, #0]
 800cc4e:	461a      	mov	r2, r3
 800cc50:	f7f4 fa67 	bl	8001122 <_read>
 800cc54:	1c43      	adds	r3, r0, #1
 800cc56:	d102      	bne.n	800cc5e <_read_r+0x1e>
 800cc58:	682b      	ldr	r3, [r5, #0]
 800cc5a:	b103      	cbz	r3, 800cc5e <_read_r+0x1e>
 800cc5c:	6023      	str	r3, [r4, #0]
 800cc5e:	bd38      	pop	{r3, r4, r5, pc}
 800cc60:	200069d8 	.word	0x200069d8

0800cc64 <_write_r>:
 800cc64:	b538      	push	{r3, r4, r5, lr}
 800cc66:	4d07      	ldr	r5, [pc, #28]	@ (800cc84 <_write_r+0x20>)
 800cc68:	4604      	mov	r4, r0
 800cc6a:	4608      	mov	r0, r1
 800cc6c:	4611      	mov	r1, r2
 800cc6e:	2200      	movs	r2, #0
 800cc70:	602a      	str	r2, [r5, #0]
 800cc72:	461a      	mov	r2, r3
 800cc74:	f7f4 fa72 	bl	800115c <_write>
 800cc78:	1c43      	adds	r3, r0, #1
 800cc7a:	d102      	bne.n	800cc82 <_write_r+0x1e>
 800cc7c:	682b      	ldr	r3, [r5, #0]
 800cc7e:	b103      	cbz	r3, 800cc82 <_write_r+0x1e>
 800cc80:	6023      	str	r3, [r4, #0]
 800cc82:	bd38      	pop	{r3, r4, r5, pc}
 800cc84:	200069d8 	.word	0x200069d8

0800cc88 <__errno>:
 800cc88:	4b01      	ldr	r3, [pc, #4]	@ (800cc90 <__errno+0x8>)
 800cc8a:	6818      	ldr	r0, [r3, #0]
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	20000050 	.word	0x20000050

0800cc94 <__libc_init_array>:
 800cc94:	b570      	push	{r4, r5, r6, lr}
 800cc96:	4d0d      	ldr	r5, [pc, #52]	@ (800cccc <__libc_init_array+0x38>)
 800cc98:	4c0d      	ldr	r4, [pc, #52]	@ (800ccd0 <__libc_init_array+0x3c>)
 800cc9a:	1b64      	subs	r4, r4, r5
 800cc9c:	10a4      	asrs	r4, r4, #2
 800cc9e:	2600      	movs	r6, #0
 800cca0:	42a6      	cmp	r6, r4
 800cca2:	d109      	bne.n	800ccb8 <__libc_init_array+0x24>
 800cca4:	4d0b      	ldr	r5, [pc, #44]	@ (800ccd4 <__libc_init_array+0x40>)
 800cca6:	4c0c      	ldr	r4, [pc, #48]	@ (800ccd8 <__libc_init_array+0x44>)
 800cca8:	f000 fe48 	bl	800d93c <_init>
 800ccac:	1b64      	subs	r4, r4, r5
 800ccae:	10a4      	asrs	r4, r4, #2
 800ccb0:	2600      	movs	r6, #0
 800ccb2:	42a6      	cmp	r6, r4
 800ccb4:	d105      	bne.n	800ccc2 <__libc_init_array+0x2e>
 800ccb6:	bd70      	pop	{r4, r5, r6, pc}
 800ccb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccbc:	4798      	blx	r3
 800ccbe:	3601      	adds	r6, #1
 800ccc0:	e7ee      	b.n	800cca0 <__libc_init_array+0xc>
 800ccc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccc6:	4798      	blx	r3
 800ccc8:	3601      	adds	r6, #1
 800ccca:	e7f2      	b.n	800ccb2 <__libc_init_array+0x1e>
 800cccc:	0801023c 	.word	0x0801023c
 800ccd0:	0801023c 	.word	0x0801023c
 800ccd4:	0801023c 	.word	0x0801023c
 800ccd8:	08010240 	.word	0x08010240

0800ccdc <__retarget_lock_init_recursive>:
 800ccdc:	4770      	bx	lr

0800ccde <__retarget_lock_acquire_recursive>:
 800ccde:	4770      	bx	lr

0800cce0 <__retarget_lock_release_recursive>:
 800cce0:	4770      	bx	lr

0800cce2 <memcpy>:
 800cce2:	440a      	add	r2, r1
 800cce4:	4291      	cmp	r1, r2
 800cce6:	f100 33ff 	add.w	r3, r0, #4294967295
 800ccea:	d100      	bne.n	800ccee <memcpy+0xc>
 800ccec:	4770      	bx	lr
 800ccee:	b510      	push	{r4, lr}
 800ccf0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ccf4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ccf8:	4291      	cmp	r1, r2
 800ccfa:	d1f9      	bne.n	800ccf0 <memcpy+0xe>
 800ccfc:	bd10      	pop	{r4, pc}
	...

0800cd00 <__assert_func>:
 800cd00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cd02:	4614      	mov	r4, r2
 800cd04:	461a      	mov	r2, r3
 800cd06:	4b09      	ldr	r3, [pc, #36]	@ (800cd2c <__assert_func+0x2c>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	4605      	mov	r5, r0
 800cd0c:	68d8      	ldr	r0, [r3, #12]
 800cd0e:	b954      	cbnz	r4, 800cd26 <__assert_func+0x26>
 800cd10:	4b07      	ldr	r3, [pc, #28]	@ (800cd30 <__assert_func+0x30>)
 800cd12:	461c      	mov	r4, r3
 800cd14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cd18:	9100      	str	r1, [sp, #0]
 800cd1a:	462b      	mov	r3, r5
 800cd1c:	4905      	ldr	r1, [pc, #20]	@ (800cd34 <__assert_func+0x34>)
 800cd1e:	f000 fb47 	bl	800d3b0 <fiprintf>
 800cd22:	f000 fb67 	bl	800d3f4 <abort>
 800cd26:	4b04      	ldr	r3, [pc, #16]	@ (800cd38 <__assert_func+0x38>)
 800cd28:	e7f4      	b.n	800cd14 <__assert_func+0x14>
 800cd2a:	bf00      	nop
 800cd2c:	20000050 	.word	0x20000050
 800cd30:	08010200 	.word	0x08010200
 800cd34:	080101d2 	.word	0x080101d2
 800cd38:	080101c5 	.word	0x080101c5

0800cd3c <_free_r>:
 800cd3c:	b538      	push	{r3, r4, r5, lr}
 800cd3e:	4605      	mov	r5, r0
 800cd40:	2900      	cmp	r1, #0
 800cd42:	d041      	beq.n	800cdc8 <_free_r+0x8c>
 800cd44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd48:	1f0c      	subs	r4, r1, #4
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	bfb8      	it	lt
 800cd4e:	18e4      	addlt	r4, r4, r3
 800cd50:	f000 f8e8 	bl	800cf24 <__malloc_lock>
 800cd54:	4a1d      	ldr	r2, [pc, #116]	@ (800cdcc <_free_r+0x90>)
 800cd56:	6813      	ldr	r3, [r2, #0]
 800cd58:	b933      	cbnz	r3, 800cd68 <_free_r+0x2c>
 800cd5a:	6063      	str	r3, [r4, #4]
 800cd5c:	6014      	str	r4, [r2, #0]
 800cd5e:	4628      	mov	r0, r5
 800cd60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd64:	f000 b8e4 	b.w	800cf30 <__malloc_unlock>
 800cd68:	42a3      	cmp	r3, r4
 800cd6a:	d908      	bls.n	800cd7e <_free_r+0x42>
 800cd6c:	6820      	ldr	r0, [r4, #0]
 800cd6e:	1821      	adds	r1, r4, r0
 800cd70:	428b      	cmp	r3, r1
 800cd72:	bf01      	itttt	eq
 800cd74:	6819      	ldreq	r1, [r3, #0]
 800cd76:	685b      	ldreq	r3, [r3, #4]
 800cd78:	1809      	addeq	r1, r1, r0
 800cd7a:	6021      	streq	r1, [r4, #0]
 800cd7c:	e7ed      	b.n	800cd5a <_free_r+0x1e>
 800cd7e:	461a      	mov	r2, r3
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	b10b      	cbz	r3, 800cd88 <_free_r+0x4c>
 800cd84:	42a3      	cmp	r3, r4
 800cd86:	d9fa      	bls.n	800cd7e <_free_r+0x42>
 800cd88:	6811      	ldr	r1, [r2, #0]
 800cd8a:	1850      	adds	r0, r2, r1
 800cd8c:	42a0      	cmp	r0, r4
 800cd8e:	d10b      	bne.n	800cda8 <_free_r+0x6c>
 800cd90:	6820      	ldr	r0, [r4, #0]
 800cd92:	4401      	add	r1, r0
 800cd94:	1850      	adds	r0, r2, r1
 800cd96:	4283      	cmp	r3, r0
 800cd98:	6011      	str	r1, [r2, #0]
 800cd9a:	d1e0      	bne.n	800cd5e <_free_r+0x22>
 800cd9c:	6818      	ldr	r0, [r3, #0]
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	6053      	str	r3, [r2, #4]
 800cda2:	4408      	add	r0, r1
 800cda4:	6010      	str	r0, [r2, #0]
 800cda6:	e7da      	b.n	800cd5e <_free_r+0x22>
 800cda8:	d902      	bls.n	800cdb0 <_free_r+0x74>
 800cdaa:	230c      	movs	r3, #12
 800cdac:	602b      	str	r3, [r5, #0]
 800cdae:	e7d6      	b.n	800cd5e <_free_r+0x22>
 800cdb0:	6820      	ldr	r0, [r4, #0]
 800cdb2:	1821      	adds	r1, r4, r0
 800cdb4:	428b      	cmp	r3, r1
 800cdb6:	bf04      	itt	eq
 800cdb8:	6819      	ldreq	r1, [r3, #0]
 800cdba:	685b      	ldreq	r3, [r3, #4]
 800cdbc:	6063      	str	r3, [r4, #4]
 800cdbe:	bf04      	itt	eq
 800cdc0:	1809      	addeq	r1, r1, r0
 800cdc2:	6021      	streq	r1, [r4, #0]
 800cdc4:	6054      	str	r4, [r2, #4]
 800cdc6:	e7ca      	b.n	800cd5e <_free_r+0x22>
 800cdc8:	bd38      	pop	{r3, r4, r5, pc}
 800cdca:	bf00      	nop
 800cdcc:	200069e4 	.word	0x200069e4

0800cdd0 <malloc>:
 800cdd0:	4b02      	ldr	r3, [pc, #8]	@ (800cddc <malloc+0xc>)
 800cdd2:	4601      	mov	r1, r0
 800cdd4:	6818      	ldr	r0, [r3, #0]
 800cdd6:	f000 b825 	b.w	800ce24 <_malloc_r>
 800cdda:	bf00      	nop
 800cddc:	20000050 	.word	0x20000050

0800cde0 <sbrk_aligned>:
 800cde0:	b570      	push	{r4, r5, r6, lr}
 800cde2:	4e0f      	ldr	r6, [pc, #60]	@ (800ce20 <sbrk_aligned+0x40>)
 800cde4:	460c      	mov	r4, r1
 800cde6:	6831      	ldr	r1, [r6, #0]
 800cde8:	4605      	mov	r5, r0
 800cdea:	b911      	cbnz	r1, 800cdf2 <sbrk_aligned+0x12>
 800cdec:	f000 faf2 	bl	800d3d4 <_sbrk_r>
 800cdf0:	6030      	str	r0, [r6, #0]
 800cdf2:	4621      	mov	r1, r4
 800cdf4:	4628      	mov	r0, r5
 800cdf6:	f000 faed 	bl	800d3d4 <_sbrk_r>
 800cdfa:	1c43      	adds	r3, r0, #1
 800cdfc:	d103      	bne.n	800ce06 <sbrk_aligned+0x26>
 800cdfe:	f04f 34ff 	mov.w	r4, #4294967295
 800ce02:	4620      	mov	r0, r4
 800ce04:	bd70      	pop	{r4, r5, r6, pc}
 800ce06:	1cc4      	adds	r4, r0, #3
 800ce08:	f024 0403 	bic.w	r4, r4, #3
 800ce0c:	42a0      	cmp	r0, r4
 800ce0e:	d0f8      	beq.n	800ce02 <sbrk_aligned+0x22>
 800ce10:	1a21      	subs	r1, r4, r0
 800ce12:	4628      	mov	r0, r5
 800ce14:	f000 fade 	bl	800d3d4 <_sbrk_r>
 800ce18:	3001      	adds	r0, #1
 800ce1a:	d1f2      	bne.n	800ce02 <sbrk_aligned+0x22>
 800ce1c:	e7ef      	b.n	800cdfe <sbrk_aligned+0x1e>
 800ce1e:	bf00      	nop
 800ce20:	200069e0 	.word	0x200069e0

0800ce24 <_malloc_r>:
 800ce24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce28:	1ccd      	adds	r5, r1, #3
 800ce2a:	f025 0503 	bic.w	r5, r5, #3
 800ce2e:	3508      	adds	r5, #8
 800ce30:	2d0c      	cmp	r5, #12
 800ce32:	bf38      	it	cc
 800ce34:	250c      	movcc	r5, #12
 800ce36:	2d00      	cmp	r5, #0
 800ce38:	4606      	mov	r6, r0
 800ce3a:	db01      	blt.n	800ce40 <_malloc_r+0x1c>
 800ce3c:	42a9      	cmp	r1, r5
 800ce3e:	d904      	bls.n	800ce4a <_malloc_r+0x26>
 800ce40:	230c      	movs	r3, #12
 800ce42:	6033      	str	r3, [r6, #0]
 800ce44:	2000      	movs	r0, #0
 800ce46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cf20 <_malloc_r+0xfc>
 800ce4e:	f000 f869 	bl	800cf24 <__malloc_lock>
 800ce52:	f8d8 3000 	ldr.w	r3, [r8]
 800ce56:	461c      	mov	r4, r3
 800ce58:	bb44      	cbnz	r4, 800ceac <_malloc_r+0x88>
 800ce5a:	4629      	mov	r1, r5
 800ce5c:	4630      	mov	r0, r6
 800ce5e:	f7ff ffbf 	bl	800cde0 <sbrk_aligned>
 800ce62:	1c43      	adds	r3, r0, #1
 800ce64:	4604      	mov	r4, r0
 800ce66:	d158      	bne.n	800cf1a <_malloc_r+0xf6>
 800ce68:	f8d8 4000 	ldr.w	r4, [r8]
 800ce6c:	4627      	mov	r7, r4
 800ce6e:	2f00      	cmp	r7, #0
 800ce70:	d143      	bne.n	800cefa <_malloc_r+0xd6>
 800ce72:	2c00      	cmp	r4, #0
 800ce74:	d04b      	beq.n	800cf0e <_malloc_r+0xea>
 800ce76:	6823      	ldr	r3, [r4, #0]
 800ce78:	4639      	mov	r1, r7
 800ce7a:	4630      	mov	r0, r6
 800ce7c:	eb04 0903 	add.w	r9, r4, r3
 800ce80:	f000 faa8 	bl	800d3d4 <_sbrk_r>
 800ce84:	4581      	cmp	r9, r0
 800ce86:	d142      	bne.n	800cf0e <_malloc_r+0xea>
 800ce88:	6821      	ldr	r1, [r4, #0]
 800ce8a:	1a6d      	subs	r5, r5, r1
 800ce8c:	4629      	mov	r1, r5
 800ce8e:	4630      	mov	r0, r6
 800ce90:	f7ff ffa6 	bl	800cde0 <sbrk_aligned>
 800ce94:	3001      	adds	r0, #1
 800ce96:	d03a      	beq.n	800cf0e <_malloc_r+0xea>
 800ce98:	6823      	ldr	r3, [r4, #0]
 800ce9a:	442b      	add	r3, r5
 800ce9c:	6023      	str	r3, [r4, #0]
 800ce9e:	f8d8 3000 	ldr.w	r3, [r8]
 800cea2:	685a      	ldr	r2, [r3, #4]
 800cea4:	bb62      	cbnz	r2, 800cf00 <_malloc_r+0xdc>
 800cea6:	f8c8 7000 	str.w	r7, [r8]
 800ceaa:	e00f      	b.n	800cecc <_malloc_r+0xa8>
 800ceac:	6822      	ldr	r2, [r4, #0]
 800ceae:	1b52      	subs	r2, r2, r5
 800ceb0:	d420      	bmi.n	800cef4 <_malloc_r+0xd0>
 800ceb2:	2a0b      	cmp	r2, #11
 800ceb4:	d917      	bls.n	800cee6 <_malloc_r+0xc2>
 800ceb6:	1961      	adds	r1, r4, r5
 800ceb8:	42a3      	cmp	r3, r4
 800ceba:	6025      	str	r5, [r4, #0]
 800cebc:	bf18      	it	ne
 800cebe:	6059      	strne	r1, [r3, #4]
 800cec0:	6863      	ldr	r3, [r4, #4]
 800cec2:	bf08      	it	eq
 800cec4:	f8c8 1000 	streq.w	r1, [r8]
 800cec8:	5162      	str	r2, [r4, r5]
 800ceca:	604b      	str	r3, [r1, #4]
 800cecc:	4630      	mov	r0, r6
 800cece:	f000 f82f 	bl	800cf30 <__malloc_unlock>
 800ced2:	f104 000b 	add.w	r0, r4, #11
 800ced6:	1d23      	adds	r3, r4, #4
 800ced8:	f020 0007 	bic.w	r0, r0, #7
 800cedc:	1ac2      	subs	r2, r0, r3
 800cede:	bf1c      	itt	ne
 800cee0:	1a1b      	subne	r3, r3, r0
 800cee2:	50a3      	strne	r3, [r4, r2]
 800cee4:	e7af      	b.n	800ce46 <_malloc_r+0x22>
 800cee6:	6862      	ldr	r2, [r4, #4]
 800cee8:	42a3      	cmp	r3, r4
 800ceea:	bf0c      	ite	eq
 800ceec:	f8c8 2000 	streq.w	r2, [r8]
 800cef0:	605a      	strne	r2, [r3, #4]
 800cef2:	e7eb      	b.n	800cecc <_malloc_r+0xa8>
 800cef4:	4623      	mov	r3, r4
 800cef6:	6864      	ldr	r4, [r4, #4]
 800cef8:	e7ae      	b.n	800ce58 <_malloc_r+0x34>
 800cefa:	463c      	mov	r4, r7
 800cefc:	687f      	ldr	r7, [r7, #4]
 800cefe:	e7b6      	b.n	800ce6e <_malloc_r+0x4a>
 800cf00:	461a      	mov	r2, r3
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	42a3      	cmp	r3, r4
 800cf06:	d1fb      	bne.n	800cf00 <_malloc_r+0xdc>
 800cf08:	2300      	movs	r3, #0
 800cf0a:	6053      	str	r3, [r2, #4]
 800cf0c:	e7de      	b.n	800cecc <_malloc_r+0xa8>
 800cf0e:	230c      	movs	r3, #12
 800cf10:	6033      	str	r3, [r6, #0]
 800cf12:	4630      	mov	r0, r6
 800cf14:	f000 f80c 	bl	800cf30 <__malloc_unlock>
 800cf18:	e794      	b.n	800ce44 <_malloc_r+0x20>
 800cf1a:	6005      	str	r5, [r0, #0]
 800cf1c:	e7d6      	b.n	800cecc <_malloc_r+0xa8>
 800cf1e:	bf00      	nop
 800cf20:	200069e4 	.word	0x200069e4

0800cf24 <__malloc_lock>:
 800cf24:	4801      	ldr	r0, [pc, #4]	@ (800cf2c <__malloc_lock+0x8>)
 800cf26:	f7ff beda 	b.w	800ccde <__retarget_lock_acquire_recursive>
 800cf2a:	bf00      	nop
 800cf2c:	200069dc 	.word	0x200069dc

0800cf30 <__malloc_unlock>:
 800cf30:	4801      	ldr	r0, [pc, #4]	@ (800cf38 <__malloc_unlock+0x8>)
 800cf32:	f7ff bed5 	b.w	800cce0 <__retarget_lock_release_recursive>
 800cf36:	bf00      	nop
 800cf38:	200069dc 	.word	0x200069dc

0800cf3c <_printf_common>:
 800cf3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf40:	4616      	mov	r6, r2
 800cf42:	4698      	mov	r8, r3
 800cf44:	688a      	ldr	r2, [r1, #8]
 800cf46:	690b      	ldr	r3, [r1, #16]
 800cf48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	bfb8      	it	lt
 800cf50:	4613      	movlt	r3, r2
 800cf52:	6033      	str	r3, [r6, #0]
 800cf54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cf58:	4607      	mov	r7, r0
 800cf5a:	460c      	mov	r4, r1
 800cf5c:	b10a      	cbz	r2, 800cf62 <_printf_common+0x26>
 800cf5e:	3301      	adds	r3, #1
 800cf60:	6033      	str	r3, [r6, #0]
 800cf62:	6823      	ldr	r3, [r4, #0]
 800cf64:	0699      	lsls	r1, r3, #26
 800cf66:	bf42      	ittt	mi
 800cf68:	6833      	ldrmi	r3, [r6, #0]
 800cf6a:	3302      	addmi	r3, #2
 800cf6c:	6033      	strmi	r3, [r6, #0]
 800cf6e:	6825      	ldr	r5, [r4, #0]
 800cf70:	f015 0506 	ands.w	r5, r5, #6
 800cf74:	d106      	bne.n	800cf84 <_printf_common+0x48>
 800cf76:	f104 0a19 	add.w	sl, r4, #25
 800cf7a:	68e3      	ldr	r3, [r4, #12]
 800cf7c:	6832      	ldr	r2, [r6, #0]
 800cf7e:	1a9b      	subs	r3, r3, r2
 800cf80:	42ab      	cmp	r3, r5
 800cf82:	dc26      	bgt.n	800cfd2 <_printf_common+0x96>
 800cf84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800cf88:	6822      	ldr	r2, [r4, #0]
 800cf8a:	3b00      	subs	r3, #0
 800cf8c:	bf18      	it	ne
 800cf8e:	2301      	movne	r3, #1
 800cf90:	0692      	lsls	r2, r2, #26
 800cf92:	d42b      	bmi.n	800cfec <_printf_common+0xb0>
 800cf94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cf98:	4641      	mov	r1, r8
 800cf9a:	4638      	mov	r0, r7
 800cf9c:	47c8      	blx	r9
 800cf9e:	3001      	adds	r0, #1
 800cfa0:	d01e      	beq.n	800cfe0 <_printf_common+0xa4>
 800cfa2:	6823      	ldr	r3, [r4, #0]
 800cfa4:	6922      	ldr	r2, [r4, #16]
 800cfa6:	f003 0306 	and.w	r3, r3, #6
 800cfaa:	2b04      	cmp	r3, #4
 800cfac:	bf02      	ittt	eq
 800cfae:	68e5      	ldreq	r5, [r4, #12]
 800cfb0:	6833      	ldreq	r3, [r6, #0]
 800cfb2:	1aed      	subeq	r5, r5, r3
 800cfb4:	68a3      	ldr	r3, [r4, #8]
 800cfb6:	bf0c      	ite	eq
 800cfb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cfbc:	2500      	movne	r5, #0
 800cfbe:	4293      	cmp	r3, r2
 800cfc0:	bfc4      	itt	gt
 800cfc2:	1a9b      	subgt	r3, r3, r2
 800cfc4:	18ed      	addgt	r5, r5, r3
 800cfc6:	2600      	movs	r6, #0
 800cfc8:	341a      	adds	r4, #26
 800cfca:	42b5      	cmp	r5, r6
 800cfcc:	d11a      	bne.n	800d004 <_printf_common+0xc8>
 800cfce:	2000      	movs	r0, #0
 800cfd0:	e008      	b.n	800cfe4 <_printf_common+0xa8>
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	4652      	mov	r2, sl
 800cfd6:	4641      	mov	r1, r8
 800cfd8:	4638      	mov	r0, r7
 800cfda:	47c8      	blx	r9
 800cfdc:	3001      	adds	r0, #1
 800cfde:	d103      	bne.n	800cfe8 <_printf_common+0xac>
 800cfe0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfe8:	3501      	adds	r5, #1
 800cfea:	e7c6      	b.n	800cf7a <_printf_common+0x3e>
 800cfec:	18e1      	adds	r1, r4, r3
 800cfee:	1c5a      	adds	r2, r3, #1
 800cff0:	2030      	movs	r0, #48	@ 0x30
 800cff2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cff6:	4422      	add	r2, r4
 800cff8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cffc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d000:	3302      	adds	r3, #2
 800d002:	e7c7      	b.n	800cf94 <_printf_common+0x58>
 800d004:	2301      	movs	r3, #1
 800d006:	4622      	mov	r2, r4
 800d008:	4641      	mov	r1, r8
 800d00a:	4638      	mov	r0, r7
 800d00c:	47c8      	blx	r9
 800d00e:	3001      	adds	r0, #1
 800d010:	d0e6      	beq.n	800cfe0 <_printf_common+0xa4>
 800d012:	3601      	adds	r6, #1
 800d014:	e7d9      	b.n	800cfca <_printf_common+0x8e>
	...

0800d018 <_printf_i>:
 800d018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d01c:	7e0f      	ldrb	r7, [r1, #24]
 800d01e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d020:	2f78      	cmp	r7, #120	@ 0x78
 800d022:	4691      	mov	r9, r2
 800d024:	4680      	mov	r8, r0
 800d026:	460c      	mov	r4, r1
 800d028:	469a      	mov	sl, r3
 800d02a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d02e:	d807      	bhi.n	800d040 <_printf_i+0x28>
 800d030:	2f62      	cmp	r7, #98	@ 0x62
 800d032:	d80a      	bhi.n	800d04a <_printf_i+0x32>
 800d034:	2f00      	cmp	r7, #0
 800d036:	f000 80d2 	beq.w	800d1de <_printf_i+0x1c6>
 800d03a:	2f58      	cmp	r7, #88	@ 0x58
 800d03c:	f000 80b9 	beq.w	800d1b2 <_printf_i+0x19a>
 800d040:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d044:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d048:	e03a      	b.n	800d0c0 <_printf_i+0xa8>
 800d04a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d04e:	2b15      	cmp	r3, #21
 800d050:	d8f6      	bhi.n	800d040 <_printf_i+0x28>
 800d052:	a101      	add	r1, pc, #4	@ (adr r1, 800d058 <_printf_i+0x40>)
 800d054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d058:	0800d0b1 	.word	0x0800d0b1
 800d05c:	0800d0c5 	.word	0x0800d0c5
 800d060:	0800d041 	.word	0x0800d041
 800d064:	0800d041 	.word	0x0800d041
 800d068:	0800d041 	.word	0x0800d041
 800d06c:	0800d041 	.word	0x0800d041
 800d070:	0800d0c5 	.word	0x0800d0c5
 800d074:	0800d041 	.word	0x0800d041
 800d078:	0800d041 	.word	0x0800d041
 800d07c:	0800d041 	.word	0x0800d041
 800d080:	0800d041 	.word	0x0800d041
 800d084:	0800d1c5 	.word	0x0800d1c5
 800d088:	0800d0ef 	.word	0x0800d0ef
 800d08c:	0800d17f 	.word	0x0800d17f
 800d090:	0800d041 	.word	0x0800d041
 800d094:	0800d041 	.word	0x0800d041
 800d098:	0800d1e7 	.word	0x0800d1e7
 800d09c:	0800d041 	.word	0x0800d041
 800d0a0:	0800d0ef 	.word	0x0800d0ef
 800d0a4:	0800d041 	.word	0x0800d041
 800d0a8:	0800d041 	.word	0x0800d041
 800d0ac:	0800d187 	.word	0x0800d187
 800d0b0:	6833      	ldr	r3, [r6, #0]
 800d0b2:	1d1a      	adds	r2, r3, #4
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	6032      	str	r2, [r6, #0]
 800d0b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d0bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	e09d      	b.n	800d200 <_printf_i+0x1e8>
 800d0c4:	6833      	ldr	r3, [r6, #0]
 800d0c6:	6820      	ldr	r0, [r4, #0]
 800d0c8:	1d19      	adds	r1, r3, #4
 800d0ca:	6031      	str	r1, [r6, #0]
 800d0cc:	0606      	lsls	r6, r0, #24
 800d0ce:	d501      	bpl.n	800d0d4 <_printf_i+0xbc>
 800d0d0:	681d      	ldr	r5, [r3, #0]
 800d0d2:	e003      	b.n	800d0dc <_printf_i+0xc4>
 800d0d4:	0645      	lsls	r5, r0, #25
 800d0d6:	d5fb      	bpl.n	800d0d0 <_printf_i+0xb8>
 800d0d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d0dc:	2d00      	cmp	r5, #0
 800d0de:	da03      	bge.n	800d0e8 <_printf_i+0xd0>
 800d0e0:	232d      	movs	r3, #45	@ 0x2d
 800d0e2:	426d      	negs	r5, r5
 800d0e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d0e8:	4859      	ldr	r0, [pc, #356]	@ (800d250 <_printf_i+0x238>)
 800d0ea:	230a      	movs	r3, #10
 800d0ec:	e011      	b.n	800d112 <_printf_i+0xfa>
 800d0ee:	6821      	ldr	r1, [r4, #0]
 800d0f0:	6833      	ldr	r3, [r6, #0]
 800d0f2:	0608      	lsls	r0, r1, #24
 800d0f4:	f853 5b04 	ldr.w	r5, [r3], #4
 800d0f8:	d402      	bmi.n	800d100 <_printf_i+0xe8>
 800d0fa:	0649      	lsls	r1, r1, #25
 800d0fc:	bf48      	it	mi
 800d0fe:	b2ad      	uxthmi	r5, r5
 800d100:	2f6f      	cmp	r7, #111	@ 0x6f
 800d102:	4853      	ldr	r0, [pc, #332]	@ (800d250 <_printf_i+0x238>)
 800d104:	6033      	str	r3, [r6, #0]
 800d106:	bf14      	ite	ne
 800d108:	230a      	movne	r3, #10
 800d10a:	2308      	moveq	r3, #8
 800d10c:	2100      	movs	r1, #0
 800d10e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d112:	6866      	ldr	r6, [r4, #4]
 800d114:	60a6      	str	r6, [r4, #8]
 800d116:	2e00      	cmp	r6, #0
 800d118:	bfa2      	ittt	ge
 800d11a:	6821      	ldrge	r1, [r4, #0]
 800d11c:	f021 0104 	bicge.w	r1, r1, #4
 800d120:	6021      	strge	r1, [r4, #0]
 800d122:	b90d      	cbnz	r5, 800d128 <_printf_i+0x110>
 800d124:	2e00      	cmp	r6, #0
 800d126:	d04b      	beq.n	800d1c0 <_printf_i+0x1a8>
 800d128:	4616      	mov	r6, r2
 800d12a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d12e:	fb03 5711 	mls	r7, r3, r1, r5
 800d132:	5dc7      	ldrb	r7, [r0, r7]
 800d134:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d138:	462f      	mov	r7, r5
 800d13a:	42bb      	cmp	r3, r7
 800d13c:	460d      	mov	r5, r1
 800d13e:	d9f4      	bls.n	800d12a <_printf_i+0x112>
 800d140:	2b08      	cmp	r3, #8
 800d142:	d10b      	bne.n	800d15c <_printf_i+0x144>
 800d144:	6823      	ldr	r3, [r4, #0]
 800d146:	07df      	lsls	r7, r3, #31
 800d148:	d508      	bpl.n	800d15c <_printf_i+0x144>
 800d14a:	6923      	ldr	r3, [r4, #16]
 800d14c:	6861      	ldr	r1, [r4, #4]
 800d14e:	4299      	cmp	r1, r3
 800d150:	bfde      	ittt	le
 800d152:	2330      	movle	r3, #48	@ 0x30
 800d154:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d158:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d15c:	1b92      	subs	r2, r2, r6
 800d15e:	6122      	str	r2, [r4, #16]
 800d160:	f8cd a000 	str.w	sl, [sp]
 800d164:	464b      	mov	r3, r9
 800d166:	aa03      	add	r2, sp, #12
 800d168:	4621      	mov	r1, r4
 800d16a:	4640      	mov	r0, r8
 800d16c:	f7ff fee6 	bl	800cf3c <_printf_common>
 800d170:	3001      	adds	r0, #1
 800d172:	d14a      	bne.n	800d20a <_printf_i+0x1f2>
 800d174:	f04f 30ff 	mov.w	r0, #4294967295
 800d178:	b004      	add	sp, #16
 800d17a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d17e:	6823      	ldr	r3, [r4, #0]
 800d180:	f043 0320 	orr.w	r3, r3, #32
 800d184:	6023      	str	r3, [r4, #0]
 800d186:	4833      	ldr	r0, [pc, #204]	@ (800d254 <_printf_i+0x23c>)
 800d188:	2778      	movs	r7, #120	@ 0x78
 800d18a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d18e:	6823      	ldr	r3, [r4, #0]
 800d190:	6831      	ldr	r1, [r6, #0]
 800d192:	061f      	lsls	r7, r3, #24
 800d194:	f851 5b04 	ldr.w	r5, [r1], #4
 800d198:	d402      	bmi.n	800d1a0 <_printf_i+0x188>
 800d19a:	065f      	lsls	r7, r3, #25
 800d19c:	bf48      	it	mi
 800d19e:	b2ad      	uxthmi	r5, r5
 800d1a0:	6031      	str	r1, [r6, #0]
 800d1a2:	07d9      	lsls	r1, r3, #31
 800d1a4:	bf44      	itt	mi
 800d1a6:	f043 0320 	orrmi.w	r3, r3, #32
 800d1aa:	6023      	strmi	r3, [r4, #0]
 800d1ac:	b11d      	cbz	r5, 800d1b6 <_printf_i+0x19e>
 800d1ae:	2310      	movs	r3, #16
 800d1b0:	e7ac      	b.n	800d10c <_printf_i+0xf4>
 800d1b2:	4827      	ldr	r0, [pc, #156]	@ (800d250 <_printf_i+0x238>)
 800d1b4:	e7e9      	b.n	800d18a <_printf_i+0x172>
 800d1b6:	6823      	ldr	r3, [r4, #0]
 800d1b8:	f023 0320 	bic.w	r3, r3, #32
 800d1bc:	6023      	str	r3, [r4, #0]
 800d1be:	e7f6      	b.n	800d1ae <_printf_i+0x196>
 800d1c0:	4616      	mov	r6, r2
 800d1c2:	e7bd      	b.n	800d140 <_printf_i+0x128>
 800d1c4:	6833      	ldr	r3, [r6, #0]
 800d1c6:	6825      	ldr	r5, [r4, #0]
 800d1c8:	6961      	ldr	r1, [r4, #20]
 800d1ca:	1d18      	adds	r0, r3, #4
 800d1cc:	6030      	str	r0, [r6, #0]
 800d1ce:	062e      	lsls	r6, r5, #24
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	d501      	bpl.n	800d1d8 <_printf_i+0x1c0>
 800d1d4:	6019      	str	r1, [r3, #0]
 800d1d6:	e002      	b.n	800d1de <_printf_i+0x1c6>
 800d1d8:	0668      	lsls	r0, r5, #25
 800d1da:	d5fb      	bpl.n	800d1d4 <_printf_i+0x1bc>
 800d1dc:	8019      	strh	r1, [r3, #0]
 800d1de:	2300      	movs	r3, #0
 800d1e0:	6123      	str	r3, [r4, #16]
 800d1e2:	4616      	mov	r6, r2
 800d1e4:	e7bc      	b.n	800d160 <_printf_i+0x148>
 800d1e6:	6833      	ldr	r3, [r6, #0]
 800d1e8:	1d1a      	adds	r2, r3, #4
 800d1ea:	6032      	str	r2, [r6, #0]
 800d1ec:	681e      	ldr	r6, [r3, #0]
 800d1ee:	6862      	ldr	r2, [r4, #4]
 800d1f0:	2100      	movs	r1, #0
 800d1f2:	4630      	mov	r0, r6
 800d1f4:	f7f3 f80c 	bl	8000210 <memchr>
 800d1f8:	b108      	cbz	r0, 800d1fe <_printf_i+0x1e6>
 800d1fa:	1b80      	subs	r0, r0, r6
 800d1fc:	6060      	str	r0, [r4, #4]
 800d1fe:	6863      	ldr	r3, [r4, #4]
 800d200:	6123      	str	r3, [r4, #16]
 800d202:	2300      	movs	r3, #0
 800d204:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d208:	e7aa      	b.n	800d160 <_printf_i+0x148>
 800d20a:	6923      	ldr	r3, [r4, #16]
 800d20c:	4632      	mov	r2, r6
 800d20e:	4649      	mov	r1, r9
 800d210:	4640      	mov	r0, r8
 800d212:	47d0      	blx	sl
 800d214:	3001      	adds	r0, #1
 800d216:	d0ad      	beq.n	800d174 <_printf_i+0x15c>
 800d218:	6823      	ldr	r3, [r4, #0]
 800d21a:	079b      	lsls	r3, r3, #30
 800d21c:	d413      	bmi.n	800d246 <_printf_i+0x22e>
 800d21e:	68e0      	ldr	r0, [r4, #12]
 800d220:	9b03      	ldr	r3, [sp, #12]
 800d222:	4298      	cmp	r0, r3
 800d224:	bfb8      	it	lt
 800d226:	4618      	movlt	r0, r3
 800d228:	e7a6      	b.n	800d178 <_printf_i+0x160>
 800d22a:	2301      	movs	r3, #1
 800d22c:	4632      	mov	r2, r6
 800d22e:	4649      	mov	r1, r9
 800d230:	4640      	mov	r0, r8
 800d232:	47d0      	blx	sl
 800d234:	3001      	adds	r0, #1
 800d236:	d09d      	beq.n	800d174 <_printf_i+0x15c>
 800d238:	3501      	adds	r5, #1
 800d23a:	68e3      	ldr	r3, [r4, #12]
 800d23c:	9903      	ldr	r1, [sp, #12]
 800d23e:	1a5b      	subs	r3, r3, r1
 800d240:	42ab      	cmp	r3, r5
 800d242:	dcf2      	bgt.n	800d22a <_printf_i+0x212>
 800d244:	e7eb      	b.n	800d21e <_printf_i+0x206>
 800d246:	2500      	movs	r5, #0
 800d248:	f104 0619 	add.w	r6, r4, #25
 800d24c:	e7f5      	b.n	800d23a <_printf_i+0x222>
 800d24e:	bf00      	nop
 800d250:	08010201 	.word	0x08010201
 800d254:	08010212 	.word	0x08010212

0800d258 <__sflush_r>:
 800d258:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d260:	0716      	lsls	r6, r2, #28
 800d262:	4605      	mov	r5, r0
 800d264:	460c      	mov	r4, r1
 800d266:	d454      	bmi.n	800d312 <__sflush_r+0xba>
 800d268:	684b      	ldr	r3, [r1, #4]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	dc02      	bgt.n	800d274 <__sflush_r+0x1c>
 800d26e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d270:	2b00      	cmp	r3, #0
 800d272:	dd48      	ble.n	800d306 <__sflush_r+0xae>
 800d274:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d276:	2e00      	cmp	r6, #0
 800d278:	d045      	beq.n	800d306 <__sflush_r+0xae>
 800d27a:	2300      	movs	r3, #0
 800d27c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d280:	682f      	ldr	r7, [r5, #0]
 800d282:	6a21      	ldr	r1, [r4, #32]
 800d284:	602b      	str	r3, [r5, #0]
 800d286:	d030      	beq.n	800d2ea <__sflush_r+0x92>
 800d288:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d28a:	89a3      	ldrh	r3, [r4, #12]
 800d28c:	0759      	lsls	r1, r3, #29
 800d28e:	d505      	bpl.n	800d29c <__sflush_r+0x44>
 800d290:	6863      	ldr	r3, [r4, #4]
 800d292:	1ad2      	subs	r2, r2, r3
 800d294:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d296:	b10b      	cbz	r3, 800d29c <__sflush_r+0x44>
 800d298:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d29a:	1ad2      	subs	r2, r2, r3
 800d29c:	2300      	movs	r3, #0
 800d29e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d2a0:	6a21      	ldr	r1, [r4, #32]
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	47b0      	blx	r6
 800d2a6:	1c43      	adds	r3, r0, #1
 800d2a8:	89a3      	ldrh	r3, [r4, #12]
 800d2aa:	d106      	bne.n	800d2ba <__sflush_r+0x62>
 800d2ac:	6829      	ldr	r1, [r5, #0]
 800d2ae:	291d      	cmp	r1, #29
 800d2b0:	d82b      	bhi.n	800d30a <__sflush_r+0xb2>
 800d2b2:	4a2a      	ldr	r2, [pc, #168]	@ (800d35c <__sflush_r+0x104>)
 800d2b4:	410a      	asrs	r2, r1
 800d2b6:	07d6      	lsls	r6, r2, #31
 800d2b8:	d427      	bmi.n	800d30a <__sflush_r+0xb2>
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	6062      	str	r2, [r4, #4]
 800d2be:	04d9      	lsls	r1, r3, #19
 800d2c0:	6922      	ldr	r2, [r4, #16]
 800d2c2:	6022      	str	r2, [r4, #0]
 800d2c4:	d504      	bpl.n	800d2d0 <__sflush_r+0x78>
 800d2c6:	1c42      	adds	r2, r0, #1
 800d2c8:	d101      	bne.n	800d2ce <__sflush_r+0x76>
 800d2ca:	682b      	ldr	r3, [r5, #0]
 800d2cc:	b903      	cbnz	r3, 800d2d0 <__sflush_r+0x78>
 800d2ce:	6560      	str	r0, [r4, #84]	@ 0x54
 800d2d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d2d2:	602f      	str	r7, [r5, #0]
 800d2d4:	b1b9      	cbz	r1, 800d306 <__sflush_r+0xae>
 800d2d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d2da:	4299      	cmp	r1, r3
 800d2dc:	d002      	beq.n	800d2e4 <__sflush_r+0x8c>
 800d2de:	4628      	mov	r0, r5
 800d2e0:	f7ff fd2c 	bl	800cd3c <_free_r>
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	6363      	str	r3, [r4, #52]	@ 0x34
 800d2e8:	e00d      	b.n	800d306 <__sflush_r+0xae>
 800d2ea:	2301      	movs	r3, #1
 800d2ec:	4628      	mov	r0, r5
 800d2ee:	47b0      	blx	r6
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	1c50      	adds	r0, r2, #1
 800d2f4:	d1c9      	bne.n	800d28a <__sflush_r+0x32>
 800d2f6:	682b      	ldr	r3, [r5, #0]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d0c6      	beq.n	800d28a <__sflush_r+0x32>
 800d2fc:	2b1d      	cmp	r3, #29
 800d2fe:	d001      	beq.n	800d304 <__sflush_r+0xac>
 800d300:	2b16      	cmp	r3, #22
 800d302:	d11e      	bne.n	800d342 <__sflush_r+0xea>
 800d304:	602f      	str	r7, [r5, #0]
 800d306:	2000      	movs	r0, #0
 800d308:	e022      	b.n	800d350 <__sflush_r+0xf8>
 800d30a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d30e:	b21b      	sxth	r3, r3
 800d310:	e01b      	b.n	800d34a <__sflush_r+0xf2>
 800d312:	690f      	ldr	r7, [r1, #16]
 800d314:	2f00      	cmp	r7, #0
 800d316:	d0f6      	beq.n	800d306 <__sflush_r+0xae>
 800d318:	0793      	lsls	r3, r2, #30
 800d31a:	680e      	ldr	r6, [r1, #0]
 800d31c:	bf08      	it	eq
 800d31e:	694b      	ldreq	r3, [r1, #20]
 800d320:	600f      	str	r7, [r1, #0]
 800d322:	bf18      	it	ne
 800d324:	2300      	movne	r3, #0
 800d326:	eba6 0807 	sub.w	r8, r6, r7
 800d32a:	608b      	str	r3, [r1, #8]
 800d32c:	f1b8 0f00 	cmp.w	r8, #0
 800d330:	dde9      	ble.n	800d306 <__sflush_r+0xae>
 800d332:	6a21      	ldr	r1, [r4, #32]
 800d334:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d336:	4643      	mov	r3, r8
 800d338:	463a      	mov	r2, r7
 800d33a:	4628      	mov	r0, r5
 800d33c:	47b0      	blx	r6
 800d33e:	2800      	cmp	r0, #0
 800d340:	dc08      	bgt.n	800d354 <__sflush_r+0xfc>
 800d342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d34a:	81a3      	strh	r3, [r4, #12]
 800d34c:	f04f 30ff 	mov.w	r0, #4294967295
 800d350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d354:	4407      	add	r7, r0
 800d356:	eba8 0800 	sub.w	r8, r8, r0
 800d35a:	e7e7      	b.n	800d32c <__sflush_r+0xd4>
 800d35c:	dfbffffe 	.word	0xdfbffffe

0800d360 <_fflush_r>:
 800d360:	b538      	push	{r3, r4, r5, lr}
 800d362:	690b      	ldr	r3, [r1, #16]
 800d364:	4605      	mov	r5, r0
 800d366:	460c      	mov	r4, r1
 800d368:	b913      	cbnz	r3, 800d370 <_fflush_r+0x10>
 800d36a:	2500      	movs	r5, #0
 800d36c:	4628      	mov	r0, r5
 800d36e:	bd38      	pop	{r3, r4, r5, pc}
 800d370:	b118      	cbz	r0, 800d37a <_fflush_r+0x1a>
 800d372:	6a03      	ldr	r3, [r0, #32]
 800d374:	b90b      	cbnz	r3, 800d37a <_fflush_r+0x1a>
 800d376:	f7ff fb63 	bl	800ca40 <__sinit>
 800d37a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d0f3      	beq.n	800d36a <_fflush_r+0xa>
 800d382:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d384:	07d0      	lsls	r0, r2, #31
 800d386:	d404      	bmi.n	800d392 <_fflush_r+0x32>
 800d388:	0599      	lsls	r1, r3, #22
 800d38a:	d402      	bmi.n	800d392 <_fflush_r+0x32>
 800d38c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d38e:	f7ff fca6 	bl	800ccde <__retarget_lock_acquire_recursive>
 800d392:	4628      	mov	r0, r5
 800d394:	4621      	mov	r1, r4
 800d396:	f7ff ff5f 	bl	800d258 <__sflush_r>
 800d39a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d39c:	07da      	lsls	r2, r3, #31
 800d39e:	4605      	mov	r5, r0
 800d3a0:	d4e4      	bmi.n	800d36c <_fflush_r+0xc>
 800d3a2:	89a3      	ldrh	r3, [r4, #12]
 800d3a4:	059b      	lsls	r3, r3, #22
 800d3a6:	d4e1      	bmi.n	800d36c <_fflush_r+0xc>
 800d3a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d3aa:	f7ff fc99 	bl	800cce0 <__retarget_lock_release_recursive>
 800d3ae:	e7dd      	b.n	800d36c <_fflush_r+0xc>

0800d3b0 <fiprintf>:
 800d3b0:	b40e      	push	{r1, r2, r3}
 800d3b2:	b503      	push	{r0, r1, lr}
 800d3b4:	4601      	mov	r1, r0
 800d3b6:	ab03      	add	r3, sp, #12
 800d3b8:	4805      	ldr	r0, [pc, #20]	@ (800d3d0 <fiprintf+0x20>)
 800d3ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3be:	6800      	ldr	r0, [r0, #0]
 800d3c0:	9301      	str	r3, [sp, #4]
 800d3c2:	f000 f847 	bl	800d454 <_vfiprintf_r>
 800d3c6:	b002      	add	sp, #8
 800d3c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800d3cc:	b003      	add	sp, #12
 800d3ce:	4770      	bx	lr
 800d3d0:	20000050 	.word	0x20000050

0800d3d4 <_sbrk_r>:
 800d3d4:	b538      	push	{r3, r4, r5, lr}
 800d3d6:	4d06      	ldr	r5, [pc, #24]	@ (800d3f0 <_sbrk_r+0x1c>)
 800d3d8:	2300      	movs	r3, #0
 800d3da:	4604      	mov	r4, r0
 800d3dc:	4608      	mov	r0, r1
 800d3de:	602b      	str	r3, [r5, #0]
 800d3e0:	f7f3 ff0c 	bl	80011fc <_sbrk>
 800d3e4:	1c43      	adds	r3, r0, #1
 800d3e6:	d102      	bne.n	800d3ee <_sbrk_r+0x1a>
 800d3e8:	682b      	ldr	r3, [r5, #0]
 800d3ea:	b103      	cbz	r3, 800d3ee <_sbrk_r+0x1a>
 800d3ec:	6023      	str	r3, [r4, #0]
 800d3ee:	bd38      	pop	{r3, r4, r5, pc}
 800d3f0:	200069d8 	.word	0x200069d8

0800d3f4 <abort>:
 800d3f4:	b508      	push	{r3, lr}
 800d3f6:	2006      	movs	r0, #6
 800d3f8:	f000 fa00 	bl	800d7fc <raise>
 800d3fc:	2001      	movs	r0, #1
 800d3fe:	f7f3 fe85 	bl	800110c <_exit>

0800d402 <__sfputc_r>:
 800d402:	6893      	ldr	r3, [r2, #8]
 800d404:	3b01      	subs	r3, #1
 800d406:	2b00      	cmp	r3, #0
 800d408:	b410      	push	{r4}
 800d40a:	6093      	str	r3, [r2, #8]
 800d40c:	da08      	bge.n	800d420 <__sfputc_r+0x1e>
 800d40e:	6994      	ldr	r4, [r2, #24]
 800d410:	42a3      	cmp	r3, r4
 800d412:	db01      	blt.n	800d418 <__sfputc_r+0x16>
 800d414:	290a      	cmp	r1, #10
 800d416:	d103      	bne.n	800d420 <__sfputc_r+0x1e>
 800d418:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d41c:	f000 b932 	b.w	800d684 <__swbuf_r>
 800d420:	6813      	ldr	r3, [r2, #0]
 800d422:	1c58      	adds	r0, r3, #1
 800d424:	6010      	str	r0, [r2, #0]
 800d426:	7019      	strb	r1, [r3, #0]
 800d428:	4608      	mov	r0, r1
 800d42a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d42e:	4770      	bx	lr

0800d430 <__sfputs_r>:
 800d430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d432:	4606      	mov	r6, r0
 800d434:	460f      	mov	r7, r1
 800d436:	4614      	mov	r4, r2
 800d438:	18d5      	adds	r5, r2, r3
 800d43a:	42ac      	cmp	r4, r5
 800d43c:	d101      	bne.n	800d442 <__sfputs_r+0x12>
 800d43e:	2000      	movs	r0, #0
 800d440:	e007      	b.n	800d452 <__sfputs_r+0x22>
 800d442:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d446:	463a      	mov	r2, r7
 800d448:	4630      	mov	r0, r6
 800d44a:	f7ff ffda 	bl	800d402 <__sfputc_r>
 800d44e:	1c43      	adds	r3, r0, #1
 800d450:	d1f3      	bne.n	800d43a <__sfputs_r+0xa>
 800d452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d454 <_vfiprintf_r>:
 800d454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d458:	460d      	mov	r5, r1
 800d45a:	b09d      	sub	sp, #116	@ 0x74
 800d45c:	4614      	mov	r4, r2
 800d45e:	4698      	mov	r8, r3
 800d460:	4606      	mov	r6, r0
 800d462:	b118      	cbz	r0, 800d46c <_vfiprintf_r+0x18>
 800d464:	6a03      	ldr	r3, [r0, #32]
 800d466:	b90b      	cbnz	r3, 800d46c <_vfiprintf_r+0x18>
 800d468:	f7ff faea 	bl	800ca40 <__sinit>
 800d46c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d46e:	07d9      	lsls	r1, r3, #31
 800d470:	d405      	bmi.n	800d47e <_vfiprintf_r+0x2a>
 800d472:	89ab      	ldrh	r3, [r5, #12]
 800d474:	059a      	lsls	r2, r3, #22
 800d476:	d402      	bmi.n	800d47e <_vfiprintf_r+0x2a>
 800d478:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d47a:	f7ff fc30 	bl	800ccde <__retarget_lock_acquire_recursive>
 800d47e:	89ab      	ldrh	r3, [r5, #12]
 800d480:	071b      	lsls	r3, r3, #28
 800d482:	d501      	bpl.n	800d488 <_vfiprintf_r+0x34>
 800d484:	692b      	ldr	r3, [r5, #16]
 800d486:	b99b      	cbnz	r3, 800d4b0 <_vfiprintf_r+0x5c>
 800d488:	4629      	mov	r1, r5
 800d48a:	4630      	mov	r0, r6
 800d48c:	f000 f938 	bl	800d700 <__swsetup_r>
 800d490:	b170      	cbz	r0, 800d4b0 <_vfiprintf_r+0x5c>
 800d492:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d494:	07dc      	lsls	r4, r3, #31
 800d496:	d504      	bpl.n	800d4a2 <_vfiprintf_r+0x4e>
 800d498:	f04f 30ff 	mov.w	r0, #4294967295
 800d49c:	b01d      	add	sp, #116	@ 0x74
 800d49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4a2:	89ab      	ldrh	r3, [r5, #12]
 800d4a4:	0598      	lsls	r0, r3, #22
 800d4a6:	d4f7      	bmi.n	800d498 <_vfiprintf_r+0x44>
 800d4a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d4aa:	f7ff fc19 	bl	800cce0 <__retarget_lock_release_recursive>
 800d4ae:	e7f3      	b.n	800d498 <_vfiprintf_r+0x44>
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d4b4:	2320      	movs	r3, #32
 800d4b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d4ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4be:	2330      	movs	r3, #48	@ 0x30
 800d4c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d670 <_vfiprintf_r+0x21c>
 800d4c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d4c8:	f04f 0901 	mov.w	r9, #1
 800d4cc:	4623      	mov	r3, r4
 800d4ce:	469a      	mov	sl, r3
 800d4d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4d4:	b10a      	cbz	r2, 800d4da <_vfiprintf_r+0x86>
 800d4d6:	2a25      	cmp	r2, #37	@ 0x25
 800d4d8:	d1f9      	bne.n	800d4ce <_vfiprintf_r+0x7a>
 800d4da:	ebba 0b04 	subs.w	fp, sl, r4
 800d4de:	d00b      	beq.n	800d4f8 <_vfiprintf_r+0xa4>
 800d4e0:	465b      	mov	r3, fp
 800d4e2:	4622      	mov	r2, r4
 800d4e4:	4629      	mov	r1, r5
 800d4e6:	4630      	mov	r0, r6
 800d4e8:	f7ff ffa2 	bl	800d430 <__sfputs_r>
 800d4ec:	3001      	adds	r0, #1
 800d4ee:	f000 80a7 	beq.w	800d640 <_vfiprintf_r+0x1ec>
 800d4f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d4f4:	445a      	add	r2, fp
 800d4f6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d4f8:	f89a 3000 	ldrb.w	r3, [sl]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	f000 809f 	beq.w	800d640 <_vfiprintf_r+0x1ec>
 800d502:	2300      	movs	r3, #0
 800d504:	f04f 32ff 	mov.w	r2, #4294967295
 800d508:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d50c:	f10a 0a01 	add.w	sl, sl, #1
 800d510:	9304      	str	r3, [sp, #16]
 800d512:	9307      	str	r3, [sp, #28]
 800d514:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d518:	931a      	str	r3, [sp, #104]	@ 0x68
 800d51a:	4654      	mov	r4, sl
 800d51c:	2205      	movs	r2, #5
 800d51e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d522:	4853      	ldr	r0, [pc, #332]	@ (800d670 <_vfiprintf_r+0x21c>)
 800d524:	f7f2 fe74 	bl	8000210 <memchr>
 800d528:	9a04      	ldr	r2, [sp, #16]
 800d52a:	b9d8      	cbnz	r0, 800d564 <_vfiprintf_r+0x110>
 800d52c:	06d1      	lsls	r1, r2, #27
 800d52e:	bf44      	itt	mi
 800d530:	2320      	movmi	r3, #32
 800d532:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d536:	0713      	lsls	r3, r2, #28
 800d538:	bf44      	itt	mi
 800d53a:	232b      	movmi	r3, #43	@ 0x2b
 800d53c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d540:	f89a 3000 	ldrb.w	r3, [sl]
 800d544:	2b2a      	cmp	r3, #42	@ 0x2a
 800d546:	d015      	beq.n	800d574 <_vfiprintf_r+0x120>
 800d548:	9a07      	ldr	r2, [sp, #28]
 800d54a:	4654      	mov	r4, sl
 800d54c:	2000      	movs	r0, #0
 800d54e:	f04f 0c0a 	mov.w	ip, #10
 800d552:	4621      	mov	r1, r4
 800d554:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d558:	3b30      	subs	r3, #48	@ 0x30
 800d55a:	2b09      	cmp	r3, #9
 800d55c:	d94b      	bls.n	800d5f6 <_vfiprintf_r+0x1a2>
 800d55e:	b1b0      	cbz	r0, 800d58e <_vfiprintf_r+0x13a>
 800d560:	9207      	str	r2, [sp, #28]
 800d562:	e014      	b.n	800d58e <_vfiprintf_r+0x13a>
 800d564:	eba0 0308 	sub.w	r3, r0, r8
 800d568:	fa09 f303 	lsl.w	r3, r9, r3
 800d56c:	4313      	orrs	r3, r2
 800d56e:	9304      	str	r3, [sp, #16]
 800d570:	46a2      	mov	sl, r4
 800d572:	e7d2      	b.n	800d51a <_vfiprintf_r+0xc6>
 800d574:	9b03      	ldr	r3, [sp, #12]
 800d576:	1d19      	adds	r1, r3, #4
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	9103      	str	r1, [sp, #12]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	bfbb      	ittet	lt
 800d580:	425b      	neglt	r3, r3
 800d582:	f042 0202 	orrlt.w	r2, r2, #2
 800d586:	9307      	strge	r3, [sp, #28]
 800d588:	9307      	strlt	r3, [sp, #28]
 800d58a:	bfb8      	it	lt
 800d58c:	9204      	strlt	r2, [sp, #16]
 800d58e:	7823      	ldrb	r3, [r4, #0]
 800d590:	2b2e      	cmp	r3, #46	@ 0x2e
 800d592:	d10a      	bne.n	800d5aa <_vfiprintf_r+0x156>
 800d594:	7863      	ldrb	r3, [r4, #1]
 800d596:	2b2a      	cmp	r3, #42	@ 0x2a
 800d598:	d132      	bne.n	800d600 <_vfiprintf_r+0x1ac>
 800d59a:	9b03      	ldr	r3, [sp, #12]
 800d59c:	1d1a      	adds	r2, r3, #4
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	9203      	str	r2, [sp, #12]
 800d5a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d5a6:	3402      	adds	r4, #2
 800d5a8:	9305      	str	r3, [sp, #20]
 800d5aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d680 <_vfiprintf_r+0x22c>
 800d5ae:	7821      	ldrb	r1, [r4, #0]
 800d5b0:	2203      	movs	r2, #3
 800d5b2:	4650      	mov	r0, sl
 800d5b4:	f7f2 fe2c 	bl	8000210 <memchr>
 800d5b8:	b138      	cbz	r0, 800d5ca <_vfiprintf_r+0x176>
 800d5ba:	9b04      	ldr	r3, [sp, #16]
 800d5bc:	eba0 000a 	sub.w	r0, r0, sl
 800d5c0:	2240      	movs	r2, #64	@ 0x40
 800d5c2:	4082      	lsls	r2, r0
 800d5c4:	4313      	orrs	r3, r2
 800d5c6:	3401      	adds	r4, #1
 800d5c8:	9304      	str	r3, [sp, #16]
 800d5ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5ce:	4829      	ldr	r0, [pc, #164]	@ (800d674 <_vfiprintf_r+0x220>)
 800d5d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d5d4:	2206      	movs	r2, #6
 800d5d6:	f7f2 fe1b 	bl	8000210 <memchr>
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	d03f      	beq.n	800d65e <_vfiprintf_r+0x20a>
 800d5de:	4b26      	ldr	r3, [pc, #152]	@ (800d678 <_vfiprintf_r+0x224>)
 800d5e0:	bb1b      	cbnz	r3, 800d62a <_vfiprintf_r+0x1d6>
 800d5e2:	9b03      	ldr	r3, [sp, #12]
 800d5e4:	3307      	adds	r3, #7
 800d5e6:	f023 0307 	bic.w	r3, r3, #7
 800d5ea:	3308      	adds	r3, #8
 800d5ec:	9303      	str	r3, [sp, #12]
 800d5ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5f0:	443b      	add	r3, r7
 800d5f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d5f4:	e76a      	b.n	800d4cc <_vfiprintf_r+0x78>
 800d5f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5fa:	460c      	mov	r4, r1
 800d5fc:	2001      	movs	r0, #1
 800d5fe:	e7a8      	b.n	800d552 <_vfiprintf_r+0xfe>
 800d600:	2300      	movs	r3, #0
 800d602:	3401      	adds	r4, #1
 800d604:	9305      	str	r3, [sp, #20]
 800d606:	4619      	mov	r1, r3
 800d608:	f04f 0c0a 	mov.w	ip, #10
 800d60c:	4620      	mov	r0, r4
 800d60e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d612:	3a30      	subs	r2, #48	@ 0x30
 800d614:	2a09      	cmp	r2, #9
 800d616:	d903      	bls.n	800d620 <_vfiprintf_r+0x1cc>
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d0c6      	beq.n	800d5aa <_vfiprintf_r+0x156>
 800d61c:	9105      	str	r1, [sp, #20]
 800d61e:	e7c4      	b.n	800d5aa <_vfiprintf_r+0x156>
 800d620:	fb0c 2101 	mla	r1, ip, r1, r2
 800d624:	4604      	mov	r4, r0
 800d626:	2301      	movs	r3, #1
 800d628:	e7f0      	b.n	800d60c <_vfiprintf_r+0x1b8>
 800d62a:	ab03      	add	r3, sp, #12
 800d62c:	9300      	str	r3, [sp, #0]
 800d62e:	462a      	mov	r2, r5
 800d630:	4b12      	ldr	r3, [pc, #72]	@ (800d67c <_vfiprintf_r+0x228>)
 800d632:	a904      	add	r1, sp, #16
 800d634:	4630      	mov	r0, r6
 800d636:	f3af 8000 	nop.w
 800d63a:	4607      	mov	r7, r0
 800d63c:	1c78      	adds	r0, r7, #1
 800d63e:	d1d6      	bne.n	800d5ee <_vfiprintf_r+0x19a>
 800d640:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d642:	07d9      	lsls	r1, r3, #31
 800d644:	d405      	bmi.n	800d652 <_vfiprintf_r+0x1fe>
 800d646:	89ab      	ldrh	r3, [r5, #12]
 800d648:	059a      	lsls	r2, r3, #22
 800d64a:	d402      	bmi.n	800d652 <_vfiprintf_r+0x1fe>
 800d64c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d64e:	f7ff fb47 	bl	800cce0 <__retarget_lock_release_recursive>
 800d652:	89ab      	ldrh	r3, [r5, #12]
 800d654:	065b      	lsls	r3, r3, #25
 800d656:	f53f af1f 	bmi.w	800d498 <_vfiprintf_r+0x44>
 800d65a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d65c:	e71e      	b.n	800d49c <_vfiprintf_r+0x48>
 800d65e:	ab03      	add	r3, sp, #12
 800d660:	9300      	str	r3, [sp, #0]
 800d662:	462a      	mov	r2, r5
 800d664:	4b05      	ldr	r3, [pc, #20]	@ (800d67c <_vfiprintf_r+0x228>)
 800d666:	a904      	add	r1, sp, #16
 800d668:	4630      	mov	r0, r6
 800d66a:	f7ff fcd5 	bl	800d018 <_printf_i>
 800d66e:	e7e4      	b.n	800d63a <_vfiprintf_r+0x1e6>
 800d670:	08010223 	.word	0x08010223
 800d674:	0801022d 	.word	0x0801022d
 800d678:	00000000 	.word	0x00000000
 800d67c:	0800d431 	.word	0x0800d431
 800d680:	08010229 	.word	0x08010229

0800d684 <__swbuf_r>:
 800d684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d686:	460e      	mov	r6, r1
 800d688:	4614      	mov	r4, r2
 800d68a:	4605      	mov	r5, r0
 800d68c:	b118      	cbz	r0, 800d696 <__swbuf_r+0x12>
 800d68e:	6a03      	ldr	r3, [r0, #32]
 800d690:	b90b      	cbnz	r3, 800d696 <__swbuf_r+0x12>
 800d692:	f7ff f9d5 	bl	800ca40 <__sinit>
 800d696:	69a3      	ldr	r3, [r4, #24]
 800d698:	60a3      	str	r3, [r4, #8]
 800d69a:	89a3      	ldrh	r3, [r4, #12]
 800d69c:	071a      	lsls	r2, r3, #28
 800d69e:	d501      	bpl.n	800d6a4 <__swbuf_r+0x20>
 800d6a0:	6923      	ldr	r3, [r4, #16]
 800d6a2:	b943      	cbnz	r3, 800d6b6 <__swbuf_r+0x32>
 800d6a4:	4621      	mov	r1, r4
 800d6a6:	4628      	mov	r0, r5
 800d6a8:	f000 f82a 	bl	800d700 <__swsetup_r>
 800d6ac:	b118      	cbz	r0, 800d6b6 <__swbuf_r+0x32>
 800d6ae:	f04f 37ff 	mov.w	r7, #4294967295
 800d6b2:	4638      	mov	r0, r7
 800d6b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6b6:	6823      	ldr	r3, [r4, #0]
 800d6b8:	6922      	ldr	r2, [r4, #16]
 800d6ba:	1a98      	subs	r0, r3, r2
 800d6bc:	6963      	ldr	r3, [r4, #20]
 800d6be:	b2f6      	uxtb	r6, r6
 800d6c0:	4283      	cmp	r3, r0
 800d6c2:	4637      	mov	r7, r6
 800d6c4:	dc05      	bgt.n	800d6d2 <__swbuf_r+0x4e>
 800d6c6:	4621      	mov	r1, r4
 800d6c8:	4628      	mov	r0, r5
 800d6ca:	f7ff fe49 	bl	800d360 <_fflush_r>
 800d6ce:	2800      	cmp	r0, #0
 800d6d0:	d1ed      	bne.n	800d6ae <__swbuf_r+0x2a>
 800d6d2:	68a3      	ldr	r3, [r4, #8]
 800d6d4:	3b01      	subs	r3, #1
 800d6d6:	60a3      	str	r3, [r4, #8]
 800d6d8:	6823      	ldr	r3, [r4, #0]
 800d6da:	1c5a      	adds	r2, r3, #1
 800d6dc:	6022      	str	r2, [r4, #0]
 800d6de:	701e      	strb	r6, [r3, #0]
 800d6e0:	6962      	ldr	r2, [r4, #20]
 800d6e2:	1c43      	adds	r3, r0, #1
 800d6e4:	429a      	cmp	r2, r3
 800d6e6:	d004      	beq.n	800d6f2 <__swbuf_r+0x6e>
 800d6e8:	89a3      	ldrh	r3, [r4, #12]
 800d6ea:	07db      	lsls	r3, r3, #31
 800d6ec:	d5e1      	bpl.n	800d6b2 <__swbuf_r+0x2e>
 800d6ee:	2e0a      	cmp	r6, #10
 800d6f0:	d1df      	bne.n	800d6b2 <__swbuf_r+0x2e>
 800d6f2:	4621      	mov	r1, r4
 800d6f4:	4628      	mov	r0, r5
 800d6f6:	f7ff fe33 	bl	800d360 <_fflush_r>
 800d6fa:	2800      	cmp	r0, #0
 800d6fc:	d0d9      	beq.n	800d6b2 <__swbuf_r+0x2e>
 800d6fe:	e7d6      	b.n	800d6ae <__swbuf_r+0x2a>

0800d700 <__swsetup_r>:
 800d700:	b538      	push	{r3, r4, r5, lr}
 800d702:	4b29      	ldr	r3, [pc, #164]	@ (800d7a8 <__swsetup_r+0xa8>)
 800d704:	4605      	mov	r5, r0
 800d706:	6818      	ldr	r0, [r3, #0]
 800d708:	460c      	mov	r4, r1
 800d70a:	b118      	cbz	r0, 800d714 <__swsetup_r+0x14>
 800d70c:	6a03      	ldr	r3, [r0, #32]
 800d70e:	b90b      	cbnz	r3, 800d714 <__swsetup_r+0x14>
 800d710:	f7ff f996 	bl	800ca40 <__sinit>
 800d714:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d718:	0719      	lsls	r1, r3, #28
 800d71a:	d422      	bmi.n	800d762 <__swsetup_r+0x62>
 800d71c:	06da      	lsls	r2, r3, #27
 800d71e:	d407      	bmi.n	800d730 <__swsetup_r+0x30>
 800d720:	2209      	movs	r2, #9
 800d722:	602a      	str	r2, [r5, #0]
 800d724:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d728:	81a3      	strh	r3, [r4, #12]
 800d72a:	f04f 30ff 	mov.w	r0, #4294967295
 800d72e:	e033      	b.n	800d798 <__swsetup_r+0x98>
 800d730:	0758      	lsls	r0, r3, #29
 800d732:	d512      	bpl.n	800d75a <__swsetup_r+0x5a>
 800d734:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d736:	b141      	cbz	r1, 800d74a <__swsetup_r+0x4a>
 800d738:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d73c:	4299      	cmp	r1, r3
 800d73e:	d002      	beq.n	800d746 <__swsetup_r+0x46>
 800d740:	4628      	mov	r0, r5
 800d742:	f7ff fafb 	bl	800cd3c <_free_r>
 800d746:	2300      	movs	r3, #0
 800d748:	6363      	str	r3, [r4, #52]	@ 0x34
 800d74a:	89a3      	ldrh	r3, [r4, #12]
 800d74c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d750:	81a3      	strh	r3, [r4, #12]
 800d752:	2300      	movs	r3, #0
 800d754:	6063      	str	r3, [r4, #4]
 800d756:	6923      	ldr	r3, [r4, #16]
 800d758:	6023      	str	r3, [r4, #0]
 800d75a:	89a3      	ldrh	r3, [r4, #12]
 800d75c:	f043 0308 	orr.w	r3, r3, #8
 800d760:	81a3      	strh	r3, [r4, #12]
 800d762:	6923      	ldr	r3, [r4, #16]
 800d764:	b94b      	cbnz	r3, 800d77a <__swsetup_r+0x7a>
 800d766:	89a3      	ldrh	r3, [r4, #12]
 800d768:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d76c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d770:	d003      	beq.n	800d77a <__swsetup_r+0x7a>
 800d772:	4621      	mov	r1, r4
 800d774:	4628      	mov	r0, r5
 800d776:	f000 f883 	bl	800d880 <__smakebuf_r>
 800d77a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d77e:	f013 0201 	ands.w	r2, r3, #1
 800d782:	d00a      	beq.n	800d79a <__swsetup_r+0x9a>
 800d784:	2200      	movs	r2, #0
 800d786:	60a2      	str	r2, [r4, #8]
 800d788:	6962      	ldr	r2, [r4, #20]
 800d78a:	4252      	negs	r2, r2
 800d78c:	61a2      	str	r2, [r4, #24]
 800d78e:	6922      	ldr	r2, [r4, #16]
 800d790:	b942      	cbnz	r2, 800d7a4 <__swsetup_r+0xa4>
 800d792:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d796:	d1c5      	bne.n	800d724 <__swsetup_r+0x24>
 800d798:	bd38      	pop	{r3, r4, r5, pc}
 800d79a:	0799      	lsls	r1, r3, #30
 800d79c:	bf58      	it	pl
 800d79e:	6962      	ldrpl	r2, [r4, #20]
 800d7a0:	60a2      	str	r2, [r4, #8]
 800d7a2:	e7f4      	b.n	800d78e <__swsetup_r+0x8e>
 800d7a4:	2000      	movs	r0, #0
 800d7a6:	e7f7      	b.n	800d798 <__swsetup_r+0x98>
 800d7a8:	20000050 	.word	0x20000050

0800d7ac <_raise_r>:
 800d7ac:	291f      	cmp	r1, #31
 800d7ae:	b538      	push	{r3, r4, r5, lr}
 800d7b0:	4605      	mov	r5, r0
 800d7b2:	460c      	mov	r4, r1
 800d7b4:	d904      	bls.n	800d7c0 <_raise_r+0x14>
 800d7b6:	2316      	movs	r3, #22
 800d7b8:	6003      	str	r3, [r0, #0]
 800d7ba:	f04f 30ff 	mov.w	r0, #4294967295
 800d7be:	bd38      	pop	{r3, r4, r5, pc}
 800d7c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d7c2:	b112      	cbz	r2, 800d7ca <_raise_r+0x1e>
 800d7c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d7c8:	b94b      	cbnz	r3, 800d7de <_raise_r+0x32>
 800d7ca:	4628      	mov	r0, r5
 800d7cc:	f000 f830 	bl	800d830 <_getpid_r>
 800d7d0:	4622      	mov	r2, r4
 800d7d2:	4601      	mov	r1, r0
 800d7d4:	4628      	mov	r0, r5
 800d7d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7da:	f000 b817 	b.w	800d80c <_kill_r>
 800d7de:	2b01      	cmp	r3, #1
 800d7e0:	d00a      	beq.n	800d7f8 <_raise_r+0x4c>
 800d7e2:	1c59      	adds	r1, r3, #1
 800d7e4:	d103      	bne.n	800d7ee <_raise_r+0x42>
 800d7e6:	2316      	movs	r3, #22
 800d7e8:	6003      	str	r3, [r0, #0]
 800d7ea:	2001      	movs	r0, #1
 800d7ec:	e7e7      	b.n	800d7be <_raise_r+0x12>
 800d7ee:	2100      	movs	r1, #0
 800d7f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	4798      	blx	r3
 800d7f8:	2000      	movs	r0, #0
 800d7fa:	e7e0      	b.n	800d7be <_raise_r+0x12>

0800d7fc <raise>:
 800d7fc:	4b02      	ldr	r3, [pc, #8]	@ (800d808 <raise+0xc>)
 800d7fe:	4601      	mov	r1, r0
 800d800:	6818      	ldr	r0, [r3, #0]
 800d802:	f7ff bfd3 	b.w	800d7ac <_raise_r>
 800d806:	bf00      	nop
 800d808:	20000050 	.word	0x20000050

0800d80c <_kill_r>:
 800d80c:	b538      	push	{r3, r4, r5, lr}
 800d80e:	4d07      	ldr	r5, [pc, #28]	@ (800d82c <_kill_r+0x20>)
 800d810:	2300      	movs	r3, #0
 800d812:	4604      	mov	r4, r0
 800d814:	4608      	mov	r0, r1
 800d816:	4611      	mov	r1, r2
 800d818:	602b      	str	r3, [r5, #0]
 800d81a:	f7f3 fc67 	bl	80010ec <_kill>
 800d81e:	1c43      	adds	r3, r0, #1
 800d820:	d102      	bne.n	800d828 <_kill_r+0x1c>
 800d822:	682b      	ldr	r3, [r5, #0]
 800d824:	b103      	cbz	r3, 800d828 <_kill_r+0x1c>
 800d826:	6023      	str	r3, [r4, #0]
 800d828:	bd38      	pop	{r3, r4, r5, pc}
 800d82a:	bf00      	nop
 800d82c:	200069d8 	.word	0x200069d8

0800d830 <_getpid_r>:
 800d830:	f7f3 bc54 	b.w	80010dc <_getpid>

0800d834 <__swhatbuf_r>:
 800d834:	b570      	push	{r4, r5, r6, lr}
 800d836:	460c      	mov	r4, r1
 800d838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d83c:	2900      	cmp	r1, #0
 800d83e:	b096      	sub	sp, #88	@ 0x58
 800d840:	4615      	mov	r5, r2
 800d842:	461e      	mov	r6, r3
 800d844:	da0d      	bge.n	800d862 <__swhatbuf_r+0x2e>
 800d846:	89a3      	ldrh	r3, [r4, #12]
 800d848:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d84c:	f04f 0100 	mov.w	r1, #0
 800d850:	bf14      	ite	ne
 800d852:	2340      	movne	r3, #64	@ 0x40
 800d854:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d858:	2000      	movs	r0, #0
 800d85a:	6031      	str	r1, [r6, #0]
 800d85c:	602b      	str	r3, [r5, #0]
 800d85e:	b016      	add	sp, #88	@ 0x58
 800d860:	bd70      	pop	{r4, r5, r6, pc}
 800d862:	466a      	mov	r2, sp
 800d864:	f000 f848 	bl	800d8f8 <_fstat_r>
 800d868:	2800      	cmp	r0, #0
 800d86a:	dbec      	blt.n	800d846 <__swhatbuf_r+0x12>
 800d86c:	9901      	ldr	r1, [sp, #4]
 800d86e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d872:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d876:	4259      	negs	r1, r3
 800d878:	4159      	adcs	r1, r3
 800d87a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d87e:	e7eb      	b.n	800d858 <__swhatbuf_r+0x24>

0800d880 <__smakebuf_r>:
 800d880:	898b      	ldrh	r3, [r1, #12]
 800d882:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d884:	079d      	lsls	r5, r3, #30
 800d886:	4606      	mov	r6, r0
 800d888:	460c      	mov	r4, r1
 800d88a:	d507      	bpl.n	800d89c <__smakebuf_r+0x1c>
 800d88c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d890:	6023      	str	r3, [r4, #0]
 800d892:	6123      	str	r3, [r4, #16]
 800d894:	2301      	movs	r3, #1
 800d896:	6163      	str	r3, [r4, #20]
 800d898:	b003      	add	sp, #12
 800d89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d89c:	ab01      	add	r3, sp, #4
 800d89e:	466a      	mov	r2, sp
 800d8a0:	f7ff ffc8 	bl	800d834 <__swhatbuf_r>
 800d8a4:	9f00      	ldr	r7, [sp, #0]
 800d8a6:	4605      	mov	r5, r0
 800d8a8:	4639      	mov	r1, r7
 800d8aa:	4630      	mov	r0, r6
 800d8ac:	f7ff faba 	bl	800ce24 <_malloc_r>
 800d8b0:	b948      	cbnz	r0, 800d8c6 <__smakebuf_r+0x46>
 800d8b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8b6:	059a      	lsls	r2, r3, #22
 800d8b8:	d4ee      	bmi.n	800d898 <__smakebuf_r+0x18>
 800d8ba:	f023 0303 	bic.w	r3, r3, #3
 800d8be:	f043 0302 	orr.w	r3, r3, #2
 800d8c2:	81a3      	strh	r3, [r4, #12]
 800d8c4:	e7e2      	b.n	800d88c <__smakebuf_r+0xc>
 800d8c6:	89a3      	ldrh	r3, [r4, #12]
 800d8c8:	6020      	str	r0, [r4, #0]
 800d8ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d8ce:	81a3      	strh	r3, [r4, #12]
 800d8d0:	9b01      	ldr	r3, [sp, #4]
 800d8d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d8d6:	b15b      	cbz	r3, 800d8f0 <__smakebuf_r+0x70>
 800d8d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8dc:	4630      	mov	r0, r6
 800d8de:	f000 f81d 	bl	800d91c <_isatty_r>
 800d8e2:	b128      	cbz	r0, 800d8f0 <__smakebuf_r+0x70>
 800d8e4:	89a3      	ldrh	r3, [r4, #12]
 800d8e6:	f023 0303 	bic.w	r3, r3, #3
 800d8ea:	f043 0301 	orr.w	r3, r3, #1
 800d8ee:	81a3      	strh	r3, [r4, #12]
 800d8f0:	89a3      	ldrh	r3, [r4, #12]
 800d8f2:	431d      	orrs	r5, r3
 800d8f4:	81a5      	strh	r5, [r4, #12]
 800d8f6:	e7cf      	b.n	800d898 <__smakebuf_r+0x18>

0800d8f8 <_fstat_r>:
 800d8f8:	b538      	push	{r3, r4, r5, lr}
 800d8fa:	4d07      	ldr	r5, [pc, #28]	@ (800d918 <_fstat_r+0x20>)
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	4604      	mov	r4, r0
 800d900:	4608      	mov	r0, r1
 800d902:	4611      	mov	r1, r2
 800d904:	602b      	str	r3, [r5, #0]
 800d906:	f7f3 fc51 	bl	80011ac <_fstat>
 800d90a:	1c43      	adds	r3, r0, #1
 800d90c:	d102      	bne.n	800d914 <_fstat_r+0x1c>
 800d90e:	682b      	ldr	r3, [r5, #0]
 800d910:	b103      	cbz	r3, 800d914 <_fstat_r+0x1c>
 800d912:	6023      	str	r3, [r4, #0]
 800d914:	bd38      	pop	{r3, r4, r5, pc}
 800d916:	bf00      	nop
 800d918:	200069d8 	.word	0x200069d8

0800d91c <_isatty_r>:
 800d91c:	b538      	push	{r3, r4, r5, lr}
 800d91e:	4d06      	ldr	r5, [pc, #24]	@ (800d938 <_isatty_r+0x1c>)
 800d920:	2300      	movs	r3, #0
 800d922:	4604      	mov	r4, r0
 800d924:	4608      	mov	r0, r1
 800d926:	602b      	str	r3, [r5, #0]
 800d928:	f7f3 fc50 	bl	80011cc <_isatty>
 800d92c:	1c43      	adds	r3, r0, #1
 800d92e:	d102      	bne.n	800d936 <_isatty_r+0x1a>
 800d930:	682b      	ldr	r3, [r5, #0]
 800d932:	b103      	cbz	r3, 800d936 <_isatty_r+0x1a>
 800d934:	6023      	str	r3, [r4, #0]
 800d936:	bd38      	pop	{r3, r4, r5, pc}
 800d938:	200069d8 	.word	0x200069d8

0800d93c <_init>:
 800d93c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d93e:	bf00      	nop
 800d940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d942:	bc08      	pop	{r3}
 800d944:	469e      	mov	lr, r3
 800d946:	4770      	bx	lr

0800d948 <_fini>:
 800d948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d94a:	bf00      	nop
 800d94c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d94e:	bc08      	pop	{r3}
 800d950:	469e      	mov	lr, r3
 800d952:	4770      	bx	lr
