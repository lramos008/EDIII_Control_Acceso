
EDIII_Control_Acceso.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c74  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006e14  08006e14  00007e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e54  08006e54  00008028  2**0
                  CONTENTS
  4 .ARM          00000008  08006e54  08006e54  00007e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e5c  08006e5c  00008028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e5c  08006e5c  00007e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006e60  08006e60  00007e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08006e64  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041f4  20000028  08006e8c  00008028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000421c  08006e8c  0000821c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b47e  00000000  00000000  00008058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004251  00000000  00000000  000234d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f8  00000000  00000000  00027728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001386  00000000  00000000  00029020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005264  00000000  00000000  0002a3a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021abb  00000000  00000000  0002f60a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000adfc1  00000000  00000000  000510c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff086  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006858  00000000  00000000  000ff0cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  00105924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000028 	.word	0x20000028
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006dfc 	.word	0x08006dfc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000002c 	.word	0x2000002c
 80001dc:	08006dfc 	.word	0x08006dfc

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <captureVoice>:
 * @param psrc	 Puntero a los datos de entrada.
 * @param pdst	 Puntero al buffer donde se almacenarán los datos filtrados.
 *
 */

void captureVoice(uint16_t *buffer, uint32_t bufferSize){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*) buffer, bufferSize);
 80004da:	683a      	ldr	r2, [r7, #0]
 80004dc:	6879      	ldr	r1, [r7, #4]
 80004de:	4805      	ldr	r0, [pc, #20]	@ (80004f4 <captureVoice+0x24>)
 80004e0:	f001 fb6a 	bl	8001bb8 <HAL_ADC_Start_DMA>
	vTaskDelay(2000/portTICK_RATE_MS);
 80004e4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80004e8:	f005 fc66 	bl	8005db8 <vTaskDelay>
	return;
 80004ec:	bf00      	nop
}
 80004ee:	3708      	adds	r7, #8
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	2000029c 	.word	0x2000029c

080004f8 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2104      	movs	r1, #4
 8000500:	4803      	ldr	r0, [pc, #12]	@ (8000510 <SELECT+0x18>)
 8000502:	f002 fd9d 	bl	8003040 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000506:	2001      	movs	r0, #1
 8000508:	f001 faee 	bl	8001ae8 <HAL_Delay>
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	40020c00 	.word	0x40020c00

08000514 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2104      	movs	r1, #4
 800051c:	4803      	ldr	r0, [pc, #12]	@ (800052c <DESELECT+0x18>)
 800051e:	f002 fd8f 	bl	8003040 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000522:	2001      	movs	r0, #1
 8000524:	f001 fae0 	bl	8001ae8 <HAL_Delay>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40020c00 	.word	0x40020c00

08000530 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800053a:	bf00      	nop
 800053c:	4b08      	ldr	r3, [pc, #32]	@ (8000560 <SPI_TxByte+0x30>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	689b      	ldr	r3, [r3, #8]
 8000542:	f003 0302 	and.w	r3, r3, #2
 8000546:	2b02      	cmp	r3, #2
 8000548:	d1f8      	bne.n	800053c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800054a:	1df9      	adds	r1, r7, #7
 800054c:	2364      	movs	r3, #100	@ 0x64
 800054e:	2201      	movs	r2, #1
 8000550:	4803      	ldr	r0, [pc, #12]	@ (8000560 <SPI_TxByte+0x30>)
 8000552:	f003 ff56 	bl	8004402 <HAL_SPI_Transmit>
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	200003b8 	.word	0x200003b8

08000564 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	460b      	mov	r3, r1
 800056e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000570:	bf00      	nop
 8000572:	4b08      	ldr	r3, [pc, #32]	@ (8000594 <SPI_TxBuffer+0x30>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	689b      	ldr	r3, [r3, #8]
 8000578:	f003 0302 	and.w	r3, r3, #2
 800057c:	2b02      	cmp	r3, #2
 800057e:	d1f8      	bne.n	8000572 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000580:	887a      	ldrh	r2, [r7, #2]
 8000582:	2364      	movs	r3, #100	@ 0x64
 8000584:	6879      	ldr	r1, [r7, #4]
 8000586:	4803      	ldr	r0, [pc, #12]	@ (8000594 <SPI_TxBuffer+0x30>)
 8000588:	f003 ff3b 	bl	8004402 <HAL_SPI_Transmit>
}
 800058c:	bf00      	nop
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200003b8 	.word	0x200003b8

08000598 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800059e:	23ff      	movs	r3, #255	@ 0xff
 80005a0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005a2:	bf00      	nop
 80005a4:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <SPI_RxByte+0x34>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	689b      	ldr	r3, [r3, #8]
 80005aa:	f003 0302 	and.w	r3, r3, #2
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d1f8      	bne.n	80005a4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80005b2:	1dba      	adds	r2, r7, #6
 80005b4:	1df9      	adds	r1, r7, #7
 80005b6:	2364      	movs	r3, #100	@ 0x64
 80005b8:	9300      	str	r3, [sp, #0]
 80005ba:	2301      	movs	r3, #1
 80005bc:	4803      	ldr	r0, [pc, #12]	@ (80005cc <SPI_RxByte+0x34>)
 80005be:	f004 f863 	bl	8004688 <HAL_SPI_TransmitReceive>

	return data;
 80005c2:	79bb      	ldrb	r3, [r7, #6]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200003b8 	.word	0x200003b8

080005d0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80005d8:	f7ff ffde 	bl	8000598 <SPI_RxByte>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	701a      	strb	r2, [r3, #0]
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80005f2:	4b0a      	ldr	r3, [pc, #40]	@ (800061c <SD_ReadyWait+0x30>)
 80005f4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80005f8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80005fa:	f7ff ffcd 	bl	8000598 <SPI_RxByte>
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000602:	79fb      	ldrb	r3, [r7, #7]
 8000604:	2bff      	cmp	r3, #255	@ 0xff
 8000606:	d004      	beq.n	8000612 <SD_ReadyWait+0x26>
 8000608:	4b04      	ldr	r3, [pc, #16]	@ (800061c <SD_ReadyWait+0x30>)
 800060a:	881b      	ldrh	r3, [r3, #0]
 800060c:	b29b      	uxth	r3, r3
 800060e:	2b00      	cmp	r3, #0
 8000610:	d1f3      	bne.n	80005fa <SD_ReadyWait+0xe>

	return res;
 8000612:	79fb      	ldrb	r3, [r7, #7]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	200004ae 	.word	0x200004ae

08000620 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000626:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800062a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800062c:	f7ff ff72 	bl	8000514 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	e005      	b.n	8000642 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000636:	20ff      	movs	r0, #255	@ 0xff
 8000638:	f7ff ff7a 	bl	8000530 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	3301      	adds	r3, #1
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	2b09      	cmp	r3, #9
 8000646:	ddf6      	ble.n	8000636 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000648:	f7ff ff56 	bl	80004f8 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800064c:	2340      	movs	r3, #64	@ 0x40
 800064e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000660:	2395      	movs	r3, #149	@ 0x95
 8000662:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000664:	463b      	mov	r3, r7
 8000666:	2106      	movs	r1, #6
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ff7b 	bl	8000564 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800066e:	e002      	b.n	8000676 <SD_PowerOn+0x56>
	{
		cnt--;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	3b01      	subs	r3, #1
 8000674:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000676:	f7ff ff8f 	bl	8000598 <SPI_RxByte>
 800067a:	4603      	mov	r3, r0
 800067c:	2b01      	cmp	r3, #1
 800067e:	d002      	beq.n	8000686 <SD_PowerOn+0x66>
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d1f4      	bne.n	8000670 <SD_PowerOn+0x50>
	}

	DESELECT();
 8000686:	f7ff ff45 	bl	8000514 <DESELECT>
	SPI_TxByte(0XFF);
 800068a:	20ff      	movs	r0, #255	@ 0xff
 800068c:	f7ff ff50 	bl	8000530 <SPI_TxByte>

	PowerFlag = 1;
 8000690:	4b03      	ldr	r3, [pc, #12]	@ (80006a0 <SD_PowerOn+0x80>)
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000045 	.word	0x20000045

080006a4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80006a8:	4b03      	ldr	r3, [pc, #12]	@ (80006b8 <SD_PowerOff+0x14>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	20000045 	.word	0x20000045

080006bc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
	return PowerFlag;
 80006c0:	4b03      	ldr	r3, [pc, #12]	@ (80006d0 <SD_CheckPower+0x14>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	20000045 	.word	0x20000045

080006d4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80006de:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <SD_RxDataBlock+0x5c>)
 80006e0:	22c8      	movs	r2, #200	@ 0xc8
 80006e2:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80006e4:	f7ff ff58 	bl	8000598 <SPI_RxByte>
 80006e8:	4603      	mov	r3, r0
 80006ea:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	2bff      	cmp	r3, #255	@ 0xff
 80006f0:	d104      	bne.n	80006fc <SD_RxDataBlock+0x28>
 80006f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <SD_RxDataBlock+0x5c>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	b29b      	uxth	r3, r3
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1f3      	bne.n	80006e4 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	2bfe      	cmp	r3, #254	@ 0xfe
 8000700:	d001      	beq.n	8000706 <SD_RxDataBlock+0x32>
 8000702:	2300      	movs	r3, #0
 8000704:	e00f      	b.n	8000726 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	1c5a      	adds	r2, r3, #1
 800070a:	607a      	str	r2, [r7, #4]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff5f 	bl	80005d0 <SPI_RxBytePtr>
	} while(len--);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	1e5a      	subs	r2, r3, #1
 8000716:	603a      	str	r2, [r7, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d1f4      	bne.n	8000706 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 800071c:	f7ff ff3c 	bl	8000598 <SPI_RxByte>
	SPI_RxByte();
 8000720:	f7ff ff3a 	bl	8000598 <SPI_RxByte>

	return TRUE;
 8000724:	2301      	movs	r3, #1
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200004ad 	.word	0x200004ad

08000734 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000740:	2300      	movs	r3, #0
 8000742:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000744:	f7ff ff52 	bl	80005ec <SD_ReadyWait>
 8000748:	4603      	mov	r3, r0
 800074a:	2bff      	cmp	r3, #255	@ 0xff
 800074c:	d001      	beq.n	8000752 <SD_TxDataBlock+0x1e>
 800074e:	2300      	movs	r3, #0
 8000750:	e02f      	b.n	80007b2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000752:	78fb      	ldrb	r3, [r7, #3]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff feeb 	bl	8000530 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800075a:	78fb      	ldrb	r3, [r7, #3]
 800075c:	2bfd      	cmp	r3, #253	@ 0xfd
 800075e:	d020      	beq.n	80007a2 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000760:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff fefd 	bl	8000564 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800076a:	f7ff ff15 	bl	8000598 <SPI_RxByte>
		SPI_RxByte();
 800076e:	f7ff ff13 	bl	8000598 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000772:	e00b      	b.n	800078c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000774:	f7ff ff10 	bl	8000598 <SPI_RxByte>
 8000778:	4603      	mov	r3, r0
 800077a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	f003 031f 	and.w	r3, r3, #31
 8000782:	2b05      	cmp	r3, #5
 8000784:	d006      	beq.n	8000794 <SD_TxDataBlock+0x60>
			i++;
 8000786:	7bbb      	ldrb	r3, [r7, #14]
 8000788:	3301      	adds	r3, #1
 800078a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800078c:	7bbb      	ldrb	r3, [r7, #14]
 800078e:	2b40      	cmp	r3, #64	@ 0x40
 8000790:	d9f0      	bls.n	8000774 <SD_TxDataBlock+0x40>
 8000792:	e000      	b.n	8000796 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000794:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000796:	bf00      	nop
 8000798:	f7ff fefe 	bl	8000598 <SPI_RxByte>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d0fa      	beq.n	8000798 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
 80007a4:	f003 031f 	and.w	r3, r3, #31
 80007a8:	2b05      	cmp	r3, #5
 80007aa:	d101      	bne.n	80007b0 <SD_TxDataBlock+0x7c>
 80007ac:	2301      	movs	r3, #1
 80007ae:	e000      	b.n	80007b2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80007b0:	2300      	movs	r3, #0
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b084      	sub	sp, #16
 80007be:	af00      	add	r7, sp, #0
 80007c0:	4603      	mov	r3, r0
 80007c2:	6039      	str	r1, [r7, #0]
 80007c4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80007c6:	f7ff ff11 	bl	80005ec <SD_ReadyWait>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2bff      	cmp	r3, #255	@ 0xff
 80007ce:	d001      	beq.n	80007d4 <SD_SendCmd+0x1a>
 80007d0:	23ff      	movs	r3, #255	@ 0xff
 80007d2:	e042      	b.n	800085a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff feaa 	bl	8000530 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	0e1b      	lsrs	r3, r3, #24
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fea4 	bl	8000530 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	0c1b      	lsrs	r3, r3, #16
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff fe9e 	bl	8000530 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	0a1b      	lsrs	r3, r3, #8
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fe98 	bl	8000530 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff fe93 	bl	8000530 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 800080a:	79fb      	ldrb	r3, [r7, #7]
 800080c:	2b40      	cmp	r3, #64	@ 0x40
 800080e:	d102      	bne.n	8000816 <SD_SendCmd+0x5c>
 8000810:	2395      	movs	r3, #149	@ 0x95
 8000812:	73fb      	strb	r3, [r7, #15]
 8000814:	e007      	b.n	8000826 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b48      	cmp	r3, #72	@ 0x48
 800081a:	d102      	bne.n	8000822 <SD_SendCmd+0x68>
 800081c:	2387      	movs	r3, #135	@ 0x87
 800081e:	73fb      	strb	r3, [r7, #15]
 8000820:	e001      	b.n	8000826 <SD_SendCmd+0x6c>
	else crc = 1;
 8000822:	2301      	movs	r3, #1
 8000824:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff fe81 	bl	8000530 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b4c      	cmp	r3, #76	@ 0x4c
 8000832:	d101      	bne.n	8000838 <SD_SendCmd+0x7e>
 8000834:	f7ff feb0 	bl	8000598 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000838:	230a      	movs	r3, #10
 800083a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800083c:	f7ff feac 	bl	8000598 <SPI_RxByte>
 8000840:	4603      	mov	r3, r0
 8000842:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000844:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000848:	2b00      	cmp	r3, #0
 800084a:	da05      	bge.n	8000858 <SD_SendCmd+0x9e>
 800084c:	7bbb      	ldrb	r3, [r7, #14]
 800084e:	3b01      	subs	r3, #1
 8000850:	73bb      	strb	r3, [r7, #14]
 8000852:	7bbb      	ldrb	r3, [r7, #14]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d1f1      	bne.n	800083c <SD_SendCmd+0x82>

	return res;
 8000858:	7b7b      	ldrb	r3, [r7, #13]
}
 800085a:	4618      	mov	r0, r3
 800085c:	3710      	adds	r7, #16
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
	...

08000864 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	4603      	mov	r3, r0
 800086c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800086e:	79fb      	ldrb	r3, [r7, #7]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <SD_disk_initialize+0x14>
 8000874:	2301      	movs	r3, #1
 8000876:	e0d6      	b.n	8000a26 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000878:	4b6d      	ldr	r3, [pc, #436]	@ (8000a30 <SD_disk_initialize+0x1cc>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	2b00      	cmp	r3, #0
 8000884:	d003      	beq.n	800088e <SD_disk_initialize+0x2a>
 8000886:	4b6a      	ldr	r3, [pc, #424]	@ (8000a30 <SD_disk_initialize+0x1cc>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	b2db      	uxtb	r3, r3
 800088c:	e0cb      	b.n	8000a26 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800088e:	f7ff fec7 	bl	8000620 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000892:	f7ff fe31 	bl	80004f8 <SELECT>

	/* check disk type */
	type = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800089a:	2100      	movs	r1, #0
 800089c:	2040      	movs	r0, #64	@ 0x40
 800089e:	f7ff ff8c 	bl	80007ba <SD_SendCmd>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	f040 80a6 	bne.w	80009f6 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80008aa:	4b62      	ldr	r3, [pc, #392]	@ (8000a34 <SD_disk_initialize+0x1d0>)
 80008ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80008b2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80008b6:	2048      	movs	r0, #72	@ 0x48
 80008b8:	f7ff ff7f 	bl	80007ba <SD_SendCmd>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d158      	bne.n	8000974 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80008c2:	2300      	movs	r3, #0
 80008c4:	73fb      	strb	r3, [r7, #15]
 80008c6:	e00c      	b.n	80008e2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80008c8:	7bfc      	ldrb	r4, [r7, #15]
 80008ca:	f7ff fe65 	bl	8000598 <SPI_RxByte>
 80008ce:	4603      	mov	r3, r0
 80008d0:	461a      	mov	r2, r3
 80008d2:	f104 0310 	add.w	r3, r4, #16
 80008d6:	443b      	add	r3, r7
 80008d8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80008dc:	7bfb      	ldrb	r3, [r7, #15]
 80008de:	3301      	adds	r3, #1
 80008e0:	73fb      	strb	r3, [r7, #15]
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	2b03      	cmp	r3, #3
 80008e6:	d9ef      	bls.n	80008c8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80008e8:	7abb      	ldrb	r3, [r7, #10]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	f040 8083 	bne.w	80009f6 <SD_disk_initialize+0x192>
 80008f0:	7afb      	ldrb	r3, [r7, #11]
 80008f2:	2baa      	cmp	r3, #170	@ 0xaa
 80008f4:	d17f      	bne.n	80009f6 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80008f6:	2100      	movs	r1, #0
 80008f8:	2077      	movs	r0, #119	@ 0x77
 80008fa:	f7ff ff5e 	bl	80007ba <SD_SendCmd>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b01      	cmp	r3, #1
 8000902:	d807      	bhi.n	8000914 <SD_disk_initialize+0xb0>
 8000904:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000908:	2069      	movs	r0, #105	@ 0x69
 800090a:	f7ff ff56 	bl	80007ba <SD_SendCmd>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d005      	beq.n	8000920 <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000914:	4b47      	ldr	r3, [pc, #284]	@ (8000a34 <SD_disk_initialize+0x1d0>)
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	b29b      	uxth	r3, r3
 800091a:	2b00      	cmp	r3, #0
 800091c:	d1eb      	bne.n	80008f6 <SD_disk_initialize+0x92>
 800091e:	e000      	b.n	8000922 <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000920:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000922:	4b44      	ldr	r3, [pc, #272]	@ (8000a34 <SD_disk_initialize+0x1d0>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	b29b      	uxth	r3, r3
 8000928:	2b00      	cmp	r3, #0
 800092a:	d064      	beq.n	80009f6 <SD_disk_initialize+0x192>
 800092c:	2100      	movs	r1, #0
 800092e:	207a      	movs	r0, #122	@ 0x7a
 8000930:	f7ff ff43 	bl	80007ba <SD_SendCmd>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d15d      	bne.n	80009f6 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 800093a:	2300      	movs	r3, #0
 800093c:	73fb      	strb	r3, [r7, #15]
 800093e:	e00c      	b.n	800095a <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000940:	7bfc      	ldrb	r4, [r7, #15]
 8000942:	f7ff fe29 	bl	8000598 <SPI_RxByte>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	f104 0310 	add.w	r3, r4, #16
 800094e:	443b      	add	r3, r7
 8000950:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000954:	7bfb      	ldrb	r3, [r7, #15]
 8000956:	3301      	adds	r3, #1
 8000958:	73fb      	strb	r3, [r7, #15]
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	2b03      	cmp	r3, #3
 800095e:	d9ef      	bls.n	8000940 <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000960:	7a3b      	ldrb	r3, [r7, #8]
 8000962:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <SD_disk_initialize+0x10a>
 800096a:	230c      	movs	r3, #12
 800096c:	e000      	b.n	8000970 <SD_disk_initialize+0x10c>
 800096e:	2304      	movs	r3, #4
 8000970:	73bb      	strb	r3, [r7, #14]
 8000972:	e040      	b.n	80009f6 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000974:	2100      	movs	r1, #0
 8000976:	2077      	movs	r0, #119	@ 0x77
 8000978:	f7ff ff1f 	bl	80007ba <SD_SendCmd>
 800097c:	4603      	mov	r3, r0
 800097e:	2b01      	cmp	r3, #1
 8000980:	d808      	bhi.n	8000994 <SD_disk_initialize+0x130>
 8000982:	2100      	movs	r1, #0
 8000984:	2069      	movs	r0, #105	@ 0x69
 8000986:	f7ff ff18 	bl	80007ba <SD_SendCmd>
 800098a:	4603      	mov	r3, r0
 800098c:	2b01      	cmp	r3, #1
 800098e:	d801      	bhi.n	8000994 <SD_disk_initialize+0x130>
 8000990:	2302      	movs	r3, #2
 8000992:	e000      	b.n	8000996 <SD_disk_initialize+0x132>
 8000994:	2301      	movs	r3, #1
 8000996:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000998:	7bbb      	ldrb	r3, [r7, #14]
 800099a:	2b02      	cmp	r3, #2
 800099c:	d10e      	bne.n	80009bc <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800099e:	2100      	movs	r1, #0
 80009a0:	2077      	movs	r0, #119	@ 0x77
 80009a2:	f7ff ff0a 	bl	80007ba <SD_SendCmd>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d80e      	bhi.n	80009ca <SD_disk_initialize+0x166>
 80009ac:	2100      	movs	r1, #0
 80009ae:	2069      	movs	r0, #105	@ 0x69
 80009b0:	f7ff ff03 	bl	80007ba <SD_SendCmd>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d107      	bne.n	80009ca <SD_disk_initialize+0x166>
 80009ba:	e00d      	b.n	80009d8 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009bc:	2100      	movs	r1, #0
 80009be:	2041      	movs	r0, #65	@ 0x41
 80009c0:	f7ff fefb 	bl	80007ba <SD_SendCmd>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d005      	beq.n	80009d6 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 80009ca:	4b1a      	ldr	r3, [pc, #104]	@ (8000a34 <SD_disk_initialize+0x1d0>)
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d1e1      	bne.n	8000998 <SD_disk_initialize+0x134>
 80009d4:	e000      	b.n	80009d8 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80009d6:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80009d8:	4b16      	ldr	r3, [pc, #88]	@ (8000a34 <SD_disk_initialize+0x1d0>)
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	b29b      	uxth	r3, r3
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d007      	beq.n	80009f2 <SD_disk_initialize+0x18e>
 80009e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80009e6:	2050      	movs	r0, #80	@ 0x50
 80009e8:	f7ff fee7 	bl	80007ba <SD_SendCmd>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SD_disk_initialize+0x192>
 80009f2:	2300      	movs	r3, #0
 80009f4:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80009f6:	4a10      	ldr	r2, [pc, #64]	@ (8000a38 <SD_disk_initialize+0x1d4>)
 80009f8:	7bbb      	ldrb	r3, [r7, #14]
 80009fa:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80009fc:	f7ff fd8a 	bl	8000514 <DESELECT>
	SPI_RxByte();
 8000a00:	f7ff fdca 	bl	8000598 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000a04:	7bbb      	ldrb	r3, [r7, #14]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d008      	beq.n	8000a1c <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <SD_disk_initialize+0x1cc>)
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	f023 0301 	bic.w	r3, r3, #1
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <SD_disk_initialize+0x1cc>)
 8000a18:	701a      	strb	r2, [r3, #0]
 8000a1a:	e001      	b.n	8000a20 <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000a1c:	f7ff fe42 	bl	80006a4 <SD_PowerOff>
	}

	return Stat;
 8000a20:	4b03      	ldr	r3, [pc, #12]	@ (8000a30 <SD_disk_initialize+0x1cc>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	b2db      	uxtb	r3, r3
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3714      	adds	r7, #20
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd90      	pop	{r4, r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000000 	.word	0x20000000
 8000a34:	200004ad 	.word	0x200004ad
 8000a38:	20000044 	.word	0x20000044

08000a3c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SD_disk_status+0x14>
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e002      	b.n	8000a56 <SD_disk_status+0x1a>
	return Stat;
 8000a50:	4b04      	ldr	r3, [pc, #16]	@ (8000a64 <SD_disk_status+0x28>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b2db      	uxtb	r3, r3
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000000 	.word	0x20000000

08000a68 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60b9      	str	r1, [r7, #8]
 8000a70:	607a      	str	r2, [r7, #4]
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	4603      	mov	r3, r0
 8000a76:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d102      	bne.n	8000a84 <SD_disk_read+0x1c>
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d101      	bne.n	8000a88 <SD_disk_read+0x20>
 8000a84:	2304      	movs	r3, #4
 8000a86:	e051      	b.n	8000b2c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000a88:	4b2a      	ldr	r3, [pc, #168]	@ (8000b34 <SD_disk_read+0xcc>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <SD_disk_read+0x32>
 8000a96:	2303      	movs	r3, #3
 8000a98:	e048      	b.n	8000b2c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000a9a:	4b27      	ldr	r3, [pc, #156]	@ (8000b38 <SD_disk_read+0xd0>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	f003 0304 	and.w	r3, r3, #4
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d102      	bne.n	8000aac <SD_disk_read+0x44>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	607b      	str	r3, [r7, #4]

	SELECT();
 8000aac:	f7ff fd24 	bl	80004f8 <SELECT>

	if (count == 1)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d111      	bne.n	8000ada <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000ab6:	6879      	ldr	r1, [r7, #4]
 8000ab8:	2051      	movs	r0, #81	@ 0x51
 8000aba:	f7ff fe7e 	bl	80007ba <SD_SendCmd>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d129      	bne.n	8000b18 <SD_disk_read+0xb0>
 8000ac4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ac8:	68b8      	ldr	r0, [r7, #8]
 8000aca:	f7ff fe03 	bl	80006d4 <SD_RxDataBlock>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d021      	beq.n	8000b18 <SD_disk_read+0xb0>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	e01e      	b.n	8000b18 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	2052      	movs	r0, #82	@ 0x52
 8000ade:	f7ff fe6c 	bl	80007ba <SD_SendCmd>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d117      	bne.n	8000b18 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ae8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000aec:	68b8      	ldr	r0, [r7, #8]
 8000aee:	f7ff fdf1 	bl	80006d4 <SD_RxDataBlock>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d00a      	beq.n	8000b0e <SD_disk_read+0xa6>
				buff += 512;
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000afe:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	603b      	str	r3, [r7, #0]
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d1ed      	bne.n	8000ae8 <SD_disk_read+0x80>
 8000b0c:	e000      	b.n	8000b10 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000b0e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000b10:	2100      	movs	r1, #0
 8000b12:	204c      	movs	r0, #76	@ 0x4c
 8000b14:	f7ff fe51 	bl	80007ba <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000b18:	f7ff fcfc 	bl	8000514 <DESELECT>
	SPI_RxByte();
 8000b1c:	f7ff fd3c 	bl	8000598 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	bf14      	ite	ne
 8000b26:	2301      	movne	r3, #1
 8000b28:	2300      	moveq	r3, #0
 8000b2a:	b2db      	uxtb	r3, r3
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000000 	.word	0x20000000
 8000b38:	20000044 	.word	0x20000044

08000b3c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	4603      	mov	r3, r0
 8000b4a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d102      	bne.n	8000b58 <SD_disk_write+0x1c>
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d101      	bne.n	8000b5c <SD_disk_write+0x20>
 8000b58:	2304      	movs	r3, #4
 8000b5a:	e06b      	b.n	8000c34 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b5c:	4b37      	ldr	r3, [pc, #220]	@ (8000c3c <SD_disk_write+0x100>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SD_disk_write+0x32>
 8000b6a:	2303      	movs	r3, #3
 8000b6c:	e062      	b.n	8000c34 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000b6e:	4b33      	ldr	r3, [pc, #204]	@ (8000c3c <SD_disk_write+0x100>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SD_disk_write+0x44>
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	e059      	b.n	8000c34 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b80:	4b2f      	ldr	r3, [pc, #188]	@ (8000c40 <SD_disk_write+0x104>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d102      	bne.n	8000b92 <SD_disk_write+0x56>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	025b      	lsls	r3, r3, #9
 8000b90:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b92:	f7ff fcb1 	bl	80004f8 <SELECT>

	if (count == 1)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d110      	bne.n	8000bbe <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000b9c:	6879      	ldr	r1, [r7, #4]
 8000b9e:	2058      	movs	r0, #88	@ 0x58
 8000ba0:	f7ff fe0b 	bl	80007ba <SD_SendCmd>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d13a      	bne.n	8000c20 <SD_disk_write+0xe4>
 8000baa:	21fe      	movs	r1, #254	@ 0xfe
 8000bac:	68b8      	ldr	r0, [r7, #8]
 8000bae:	f7ff fdc1 	bl	8000734 <SD_TxDataBlock>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d033      	beq.n	8000c20 <SD_disk_write+0xe4>
			count = 0;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	e030      	b.n	8000c20 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000bbe:	4b20      	ldr	r3, [pc, #128]	@ (8000c40 <SD_disk_write+0x104>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d007      	beq.n	8000bda <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000bca:	2100      	movs	r1, #0
 8000bcc:	2077      	movs	r0, #119	@ 0x77
 8000bce:	f7ff fdf4 	bl	80007ba <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000bd2:	6839      	ldr	r1, [r7, #0]
 8000bd4:	2057      	movs	r0, #87	@ 0x57
 8000bd6:	f7ff fdf0 	bl	80007ba <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	2059      	movs	r0, #89	@ 0x59
 8000bde:	f7ff fdec 	bl	80007ba <SD_SendCmd>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d11b      	bne.n	8000c20 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000be8:	21fc      	movs	r1, #252	@ 0xfc
 8000bea:	68b8      	ldr	r0, [r7, #8]
 8000bec:	f7ff fda2 	bl	8000734 <SD_TxDataBlock>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d00a      	beq.n	8000c0c <SD_disk_write+0xd0>
				buff += 512;
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000bfc:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d1ee      	bne.n	8000be8 <SD_disk_write+0xac>
 8000c0a:	e000      	b.n	8000c0e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c0c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000c0e:	21fd      	movs	r1, #253	@ 0xfd
 8000c10:	2000      	movs	r0, #0
 8000c12:	f7ff fd8f 	bl	8000734 <SD_TxDataBlock>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d101      	bne.n	8000c20 <SD_disk_write+0xe4>
			{
				count = 1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000c20:	f7ff fc78 	bl	8000514 <DESELECT>
	SPI_RxByte();
 8000c24:	f7ff fcb8 	bl	8000598 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	bf14      	ite	ne
 8000c2e:	2301      	movne	r3, #1
 8000c30:	2300      	moveq	r3, #0
 8000c32:	b2db      	uxtb	r3, r3
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000000 	.word	0x20000000
 8000c40:	20000044 	.word	0x20000044

08000c44 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b08b      	sub	sp, #44	@ 0x2c
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	603a      	str	r2, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
 8000c50:	460b      	mov	r3, r1
 8000c52:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SD_disk_ioctl+0x1e>
 8000c5e:	2304      	movs	r3, #4
 8000c60:	e113      	b.n	8000e8a <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000c68:	79bb      	ldrb	r3, [r7, #6]
 8000c6a:	2b05      	cmp	r3, #5
 8000c6c:	d124      	bne.n	8000cb8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000c6e:	6a3b      	ldr	r3, [r7, #32]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d012      	beq.n	8000c9c <SD_disk_ioctl+0x58>
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	dc1a      	bgt.n	8000cb0 <SD_disk_ioctl+0x6c>
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d002      	beq.n	8000c84 <SD_disk_ioctl+0x40>
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d006      	beq.n	8000c90 <SD_disk_ioctl+0x4c>
 8000c82:	e015      	b.n	8000cb0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000c84:	f7ff fd0e 	bl	80006a4 <SD_PowerOff>
			res = RES_OK;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c8e:	e0fa      	b.n	8000e86 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000c90:	f7ff fcc6 	bl	8000620 <SD_PowerOn>
			res = RES_OK;
 8000c94:	2300      	movs	r3, #0
 8000c96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000c9a:	e0f4      	b.n	8000e86 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	1c5c      	adds	r4, r3, #1
 8000ca0:	f7ff fd0c 	bl	80006bc <SD_CheckPower>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000cae:	e0ea      	b.n	8000e86 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000cb6:	e0e6      	b.n	8000e86 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000cb8:	4b76      	ldr	r3, [pc, #472]	@ (8000e94 <SD_disk_ioctl+0x250>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SD_disk_ioctl+0x86>
 8000cc6:	2303      	movs	r3, #3
 8000cc8:	e0df      	b.n	8000e8a <SD_disk_ioctl+0x246>

		SELECT();
 8000cca:	f7ff fc15 	bl	80004f8 <SELECT>

		switch (ctrl)
 8000cce:	79bb      	ldrb	r3, [r7, #6]
 8000cd0:	2b0d      	cmp	r3, #13
 8000cd2:	f200 80c9 	bhi.w	8000e68 <SD_disk_ioctl+0x224>
 8000cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8000cdc <SD_disk_ioctl+0x98>)
 8000cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cdc:	08000dd3 	.word	0x08000dd3
 8000ce0:	08000d15 	.word	0x08000d15
 8000ce4:	08000dc3 	.word	0x08000dc3
 8000ce8:	08000e69 	.word	0x08000e69
 8000cec:	08000e69 	.word	0x08000e69
 8000cf0:	08000e69 	.word	0x08000e69
 8000cf4:	08000e69 	.word	0x08000e69
 8000cf8:	08000e69 	.word	0x08000e69
 8000cfc:	08000e69 	.word	0x08000e69
 8000d00:	08000e69 	.word	0x08000e69
 8000d04:	08000e69 	.word	0x08000e69
 8000d08:	08000de5 	.word	0x08000de5
 8000d0c:	08000e09 	.word	0x08000e09
 8000d10:	08000e2d 	.word	0x08000e2d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d14:	2100      	movs	r1, #0
 8000d16:	2049      	movs	r0, #73	@ 0x49
 8000d18:	f7ff fd4f 	bl	80007ba <SD_SendCmd>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	f040 80a6 	bne.w	8000e70 <SD_disk_ioctl+0x22c>
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	2110      	movs	r1, #16
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fcd2 	bl	80006d4 <SD_RxDataBlock>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 809c 	beq.w	8000e70 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000d38:	7b3b      	ldrb	r3, [r7, #12]
 8000d3a:	099b      	lsrs	r3, r3, #6
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d10d      	bne.n	8000d5e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000d42:	7d7b      	ldrb	r3, [r7, #21]
 8000d44:	461a      	mov	r2, r3
 8000d46:	7d3b      	ldrb	r3, [r7, #20]
 8000d48:	021b      	lsls	r3, r3, #8
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	4413      	add	r3, r2
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	3301      	adds	r3, #1
 8000d52:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000d54:	8bfb      	ldrh	r3, [r7, #30]
 8000d56:	029a      	lsls	r2, r3, #10
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	e02d      	b.n	8000dba <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000d5e:	7c7b      	ldrb	r3, [r7, #17]
 8000d60:	f003 030f 	and.w	r3, r3, #15
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	7dbb      	ldrb	r3, [r7, #22]
 8000d68:	09db      	lsrs	r3, r3, #7
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	4413      	add	r3, r2
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	7d7b      	ldrb	r3, [r7, #21]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	f003 0306 	and.w	r3, r3, #6
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	4413      	add	r3, r2
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	3302      	adds	r3, #2
 8000d82:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000d86:	7d3b      	ldrb	r3, [r7, #20]
 8000d88:	099b      	lsrs	r3, r3, #6
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	7cfb      	ldrb	r3, [r7, #19]
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	4413      	add	r3, r2
 8000d96:	b29a      	uxth	r2, r3
 8000d98:	7cbb      	ldrb	r3, [r7, #18]
 8000d9a:	029b      	lsls	r3, r3, #10
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	4413      	add	r3, r2
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	3301      	adds	r3, #1
 8000daa:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000dac:	8bfa      	ldrh	r2, [r7, #30]
 8000dae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000db2:	3b09      	subs	r3, #9
 8000db4:	409a      	lsls	r2, r3
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000dc0:	e056      	b.n	8000e70 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dc8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dd0:	e055      	b.n	8000e7e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000dd2:	f7ff fc0b 	bl	80005ec <SD_ReadyWait>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2bff      	cmp	r3, #255	@ 0xff
 8000dda:	d14b      	bne.n	8000e74 <SD_disk_ioctl+0x230>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000de2:	e047      	b.n	8000e74 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000de4:	2100      	movs	r1, #0
 8000de6:	2049      	movs	r0, #73	@ 0x49
 8000de8:	f7ff fce7 	bl	80007ba <SD_SendCmd>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d142      	bne.n	8000e78 <SD_disk_ioctl+0x234>
 8000df2:	2110      	movs	r1, #16
 8000df4:	6a38      	ldr	r0, [r7, #32]
 8000df6:	f7ff fc6d 	bl	80006d4 <SD_RxDataBlock>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d03b      	beq.n	8000e78 <SD_disk_ioctl+0x234>
 8000e00:	2300      	movs	r3, #0
 8000e02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000e06:	e037      	b.n	8000e78 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e08:	2100      	movs	r1, #0
 8000e0a:	204a      	movs	r0, #74	@ 0x4a
 8000e0c:	f7ff fcd5 	bl	80007ba <SD_SendCmd>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d132      	bne.n	8000e7c <SD_disk_ioctl+0x238>
 8000e16:	2110      	movs	r1, #16
 8000e18:	6a38      	ldr	r0, [r7, #32]
 8000e1a:	f7ff fc5b 	bl	80006d4 <SD_RxDataBlock>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d02b      	beq.n	8000e7c <SD_disk_ioctl+0x238>
 8000e24:	2300      	movs	r3, #0
 8000e26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000e2a:	e027      	b.n	8000e7c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	207a      	movs	r0, #122	@ 0x7a
 8000e30:	f7ff fcc3 	bl	80007ba <SD_SendCmd>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d116      	bne.n	8000e68 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e40:	e00b      	b.n	8000e5a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000e42:	6a3c      	ldr	r4, [r7, #32]
 8000e44:	1c63      	adds	r3, r4, #1
 8000e46:	623b      	str	r3, [r7, #32]
 8000e48:	f7ff fba6 	bl	8000598 <SPI_RxByte>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000e50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e54:	3301      	adds	r3, #1
 8000e56:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000e5a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	d9ef      	bls.n	8000e42 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000e62:	2300      	movs	r3, #0
 8000e64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000e68:	2304      	movs	r3, #4
 8000e6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000e6e:	e006      	b.n	8000e7e <SD_disk_ioctl+0x23a>
			break;
 8000e70:	bf00      	nop
 8000e72:	e004      	b.n	8000e7e <SD_disk_ioctl+0x23a>
			break;
 8000e74:	bf00      	nop
 8000e76:	e002      	b.n	8000e7e <SD_disk_ioctl+0x23a>
			break;
 8000e78:	bf00      	nop
 8000e7a:	e000      	b.n	8000e7e <SD_disk_ioctl+0x23a>
			break;
 8000e7c:	bf00      	nop
		}

		DESELECT();
 8000e7e:	f7ff fb49 	bl	8000514 <DESELECT>
		SPI_RxByte();
 8000e82:	f7ff fb89 	bl	8000598 <SPI_RxByte>
	}

	return res;
 8000e86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	372c      	adds	r7, #44	@ 0x2c
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd90      	pop	{r4, r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000000 	.word	0x20000000

08000e98 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4a07      	ldr	r2, [pc, #28]	@ (8000ec4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	4a06      	ldr	r2, [pc, #24]	@ (8000ec8 <vApplicationGetIdleTaskMemory+0x30>)
 8000eae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2280      	movs	r2, #128	@ 0x80
 8000eb4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eb6:	bf00      	nop
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	20000048 	.word	0x20000048
 8000ec8:	2000009c 	.word	0x2000009c

08000ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed2:	f000 fdc7 	bl	8001a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed6:	f000 f84f 	bl	8000f78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eda:	f000 fa13 	bl	8001304 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ede:	f000 f9f1 	bl	80012c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ee2:	f000 f9c5 	bl	8001270 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000ee6:	f000 f905 	bl	80010f4 <MX_I2C1_Init>
  MX_SPI3_Init();
 8000eea:	f000 f98b 	bl	8001204 <MX_SPI3_Init>
  MX_FATFS_Init();
 8000eee:	f004 fb8f 	bl	8005610 <MX_FATFS_Init>
  MX_RTC_Init();
 8000ef2:	f000 f92d 	bl	8001150 <MX_RTC_Init>
  MX_ADC1_Init();
 8000ef6:	f000 f8ab 	bl	8001050 <MX_ADC1_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  uiQueue = xQueueCreate(1, sizeof(eventoDisplay));
 8000efa:	2200      	movs	r2, #0
 8000efc:	2101      	movs	r1, #1
 8000efe:	2001      	movs	r0, #1
 8000f00:	f004 fd68 	bl	80059d4 <xQueueGenericCreate>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4a15      	ldr	r2, [pc, #84]	@ (8000f5c <main+0x90>)
 8000f08:	6013      	str	r3, [r2, #0]
  sequenceQueue = xQueueCreate(6, sizeof(char));
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	2006      	movs	r0, #6
 8000f10:	f004 fd60 	bl	80059d4 <xQueueGenericCreate>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4a12      	ldr	r2, [pc, #72]	@ (8000f60 <main+0x94>)
 8000f18:	6013      	str	r3, [r2, #0]
  lockQueue = xQueueCreate(1, sizeof(lockState));
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f004 fd58 	bl	80059d4 <xQueueGenericCreate>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a0f      	ldr	r2, [pc, #60]	@ (8000f64 <main+0x98>)
 8000f28:	6013      	str	r3, [r2, #0]
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  //xTaskCreate(ScreenManager, "Tarea 05", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 4, NULL);
  //xTaskCreate(LockControl, "Tarea 04", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL);
  xTaskCreate(VoiceProcessing, "Tarea 03", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	2302      	movs	r3, #2
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2300      	movs	r3, #0
 8000f34:	2280      	movs	r2, #128	@ 0x80
 8000f36:	490c      	ldr	r1, [pc, #48]	@ (8000f68 <main+0x9c>)
 8000f38:	480c      	ldr	r0, [pc, #48]	@ (8000f6c <main+0xa0>)
 8000f3a:	f004 fe05 	bl	8005b48 <xTaskCreate>
  //xTaskCreate(sdHandler, "Tarea 02", 8 * configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  //xTaskCreate(KeypadScanning, "Tarea 01", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
  xTaskCreate(IdleTask, "Tarea Idle", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 8000f3e:	2300      	movs	r3, #0
 8000f40:	9301      	str	r3, [sp, #4]
 8000f42:	2300      	movs	r3, #0
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2300      	movs	r3, #0
 8000f48:	2280      	movs	r2, #128	@ 0x80
 8000f4a:	4909      	ldr	r1, [pc, #36]	@ (8000f70 <main+0xa4>)
 8000f4c:	4809      	ldr	r0, [pc, #36]	@ (8000f74 <main+0xa8>)
 8000f4e:	f004 fdfb 	bl	8005b48 <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 8000f52:	f004 ff67 	bl	8005e24 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f56:	bf00      	nop
 8000f58:	e7fd      	b.n	8000f56 <main+0x8a>
 8000f5a:	bf00      	nop
 8000f5c:	20000458 	.word	0x20000458
 8000f60:	2000045c 	.word	0x2000045c
 8000f64:	20000460 	.word	0x20000460
 8000f68:	08006e14 	.word	0x08006e14
 8000f6c:	080019e5 	.word	0x080019e5
 8000f70:	08006e20 	.word	0x08006e20
 8000f74:	08001a03 	.word	0x08001a03

08000f78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b094      	sub	sp, #80	@ 0x50
 8000f7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f7e:	f107 0320 	add.w	r3, r7, #32
 8000f82:	2230      	movs	r2, #48	@ 0x30
 8000f84:	2100      	movs	r1, #0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f005 ff0c 	bl	8006da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f8c:	f107 030c 	add.w	r3, r7, #12
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	4b29      	ldr	r3, [pc, #164]	@ (8001048 <SystemClock_Config+0xd0>)
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa4:	4a28      	ldr	r2, [pc, #160]	@ (8001048 <SystemClock_Config+0xd0>)
 8000fa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000faa:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fac:	4b26      	ldr	r3, [pc, #152]	@ (8001048 <SystemClock_Config+0xd0>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fb8:	2300      	movs	r3, #0
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	4b23      	ldr	r3, [pc, #140]	@ (800104c <SystemClock_Config+0xd4>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000fc4:	4a21      	ldr	r2, [pc, #132]	@ (800104c <SystemClock_Config+0xd4>)
 8000fc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <SystemClock_Config+0xd4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000fd8:	2309      	movs	r3, #9
 8000fda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fdc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000ff4:	2340      	movs	r3, #64	@ 0x40
 8000ff6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ffc:	2307      	movs	r3, #7
 8000ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001000:	f107 0320 	add.w	r3, r7, #32
 8001004:	4618      	mov	r0, r3
 8001006:	f002 f979 	bl	80032fc <HAL_RCC_OscConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001010:	f000 fa48 	bl	80014a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001014:	230f      	movs	r3, #15
 8001016:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001018:	2302      	movs	r3, #2
 800101a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001020:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001024:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	2102      	movs	r1, #2
 8001030:	4618      	mov	r0, r3
 8001032:	f002 fbdb 	bl	80037ec <HAL_RCC_ClockConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800103c:	f000 fa32 	bl	80014a4 <Error_Handler>
  }
}
 8001040:	bf00      	nop
 8001042:	3750      	adds	r7, #80	@ 0x50
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40023800 	.word	0x40023800
 800104c:	40007000 	.word	0x40007000

08001050 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001056:	463b      	mov	r3, r7
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001062:	4b21      	ldr	r3, [pc, #132]	@ (80010e8 <MX_ADC1_Init+0x98>)
 8001064:	4a21      	ldr	r2, [pc, #132]	@ (80010ec <MX_ADC1_Init+0x9c>)
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001068:	4b1f      	ldr	r3, [pc, #124]	@ (80010e8 <MX_ADC1_Init+0x98>)
 800106a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <MX_ADC1_Init+0x98>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001076:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <MX_ADC1_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800107c:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <MX_ADC1_Init+0x98>)
 800107e:	2201      	movs	r2, #1
 8001080:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001082:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <MX_ADC1_Init+0x98>)
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800108a:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <MX_ADC1_Init+0x98>)
 800108c:	2200      	movs	r2, #0
 800108e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001090:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <MX_ADC1_Init+0x98>)
 8001092:	4a17      	ldr	r2, [pc, #92]	@ (80010f0 <MX_ADC1_Init+0xa0>)
 8001094:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001096:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <MX_ADC1_Init+0x98>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <MX_ADC1_Init+0x98>)
 800109e:	2201      	movs	r2, #1
 80010a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010a2:	4b11      	ldr	r3, [pc, #68]	@ (80010e8 <MX_ADC1_Init+0x98>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010aa:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <MX_ADC1_Init+0x98>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b0:	480d      	ldr	r0, [pc, #52]	@ (80010e8 <MX_ADC1_Init+0x98>)
 80010b2:	f000 fd3d 	bl	8001b30 <HAL_ADC_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010bc:	f000 f9f2 	bl	80014a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80010c0:	2308      	movs	r3, #8
 80010c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80010c8:	2307      	movs	r3, #7
 80010ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010cc:	463b      	mov	r3, r7
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	@ (80010e8 <MX_ADC1_Init+0x98>)
 80010d2:	f000 fecf 	bl	8001e74 <HAL_ADC_ConfigChannel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010dc:	f000 f9e2 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000029c 	.word	0x2000029c
 80010ec:	40012000 	.word	0x40012000
 80010f0:	0f000001 	.word	0x0f000001

080010f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010f8:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <MX_I2C1_Init+0x50>)
 80010fa:	4a13      	ldr	r2, [pc, #76]	@ (8001148 <MX_I2C1_Init+0x54>)
 80010fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010fe:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <MX_I2C1_Init+0x50>)
 8001100:	4a12      	ldr	r2, [pc, #72]	@ (800114c <MX_I2C1_Init+0x58>)
 8001102:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001104:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <MX_I2C1_Init+0x50>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800110a:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <MX_I2C1_Init+0x50>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001110:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <MX_I2C1_Init+0x50>)
 8001112:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001116:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001118:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <MX_I2C1_Init+0x50>)
 800111a:	2200      	movs	r2, #0
 800111c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800111e:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <MX_I2C1_Init+0x50>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001124:	4b07      	ldr	r3, [pc, #28]	@ (8001144 <MX_I2C1_Init+0x50>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800112a:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <MX_I2C1_Init+0x50>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001130:	4804      	ldr	r0, [pc, #16]	@ (8001144 <MX_I2C1_Init+0x50>)
 8001132:	f001 ff9f 	bl	8003074 <HAL_I2C_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800113c:	f000 f9b2 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000344 	.word	0x20000344
 8001148:	40005400 	.word	0x40005400
 800114c:	00061a80 	.word	0x00061a80

08001150 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001164:	2300      	movs	r3, #0
 8001166:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001168:	4b24      	ldr	r3, [pc, #144]	@ (80011fc <MX_RTC_Init+0xac>)
 800116a:	4a25      	ldr	r2, [pc, #148]	@ (8001200 <MX_RTC_Init+0xb0>)
 800116c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800116e:	4b23      	ldr	r3, [pc, #140]	@ (80011fc <MX_RTC_Init+0xac>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001174:	4b21      	ldr	r3, [pc, #132]	@ (80011fc <MX_RTC_Init+0xac>)
 8001176:	227f      	movs	r2, #127	@ 0x7f
 8001178:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800117a:	4b20      	ldr	r3, [pc, #128]	@ (80011fc <MX_RTC_Init+0xac>)
 800117c:	22ff      	movs	r2, #255	@ 0xff
 800117e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001180:	4b1e      	ldr	r3, [pc, #120]	@ (80011fc <MX_RTC_Init+0xac>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001186:	4b1d      	ldr	r3, [pc, #116]	@ (80011fc <MX_RTC_Init+0xac>)
 8001188:	2200      	movs	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800118c:	4b1b      	ldr	r3, [pc, #108]	@ (80011fc <MX_RTC_Init+0xac>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001192:	481a      	ldr	r0, [pc, #104]	@ (80011fc <MX_RTC_Init+0xac>)
 8001194:	f002 fe6a 	bl	8003e6c <HAL_RTC_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800119e:	f000 f981 	bl	80014a4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 80011a2:	230f      	movs	r3, #15
 80011a4:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2200      	movs	r2, #0
 80011ba:	4619      	mov	r1, r3
 80011bc:	480f      	ldr	r0, [pc, #60]	@ (80011fc <MX_RTC_Init+0xac>)
 80011be:	f002 fed8 	bl	8003f72 <HAL_RTC_SetTime>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80011c8:	f000 f96c 	bl	80014a4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80011cc:	2306      	movs	r3, #6
 80011ce:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 80011d0:	2307      	movs	r3, #7
 80011d2:	707b      	strb	r3, [r7, #1]
  sDate.Date = 6;
 80011d4:	2306      	movs	r3, #6
 80011d6:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 80011d8:	2318      	movs	r3, #24
 80011da:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80011dc:	463b      	mov	r3, r7
 80011de:	2200      	movs	r2, #0
 80011e0:	4619      	mov	r1, r3
 80011e2:	4806      	ldr	r0, [pc, #24]	@ (80011fc <MX_RTC_Init+0xac>)
 80011e4:	f002 ff5f 	bl	80040a6 <HAL_RTC_SetDate>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80011ee:	f000 f959 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	3718      	adds	r7, #24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000398 	.word	0x20000398
 8001200:	40002800 	.word	0x40002800

08001204 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001208:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <MX_SPI3_Init+0x64>)
 800120a:	4a18      	ldr	r2, [pc, #96]	@ (800126c <MX_SPI3_Init+0x68>)
 800120c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800120e:	4b16      	ldr	r3, [pc, #88]	@ (8001268 <MX_SPI3_Init+0x64>)
 8001210:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001214:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001216:	4b14      	ldr	r3, [pc, #80]	@ (8001268 <MX_SPI3_Init+0x64>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800121c:	4b12      	ldr	r3, [pc, #72]	@ (8001268 <MX_SPI3_Init+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001222:	4b11      	ldr	r3, [pc, #68]	@ (8001268 <MX_SPI3_Init+0x64>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001228:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <MX_SPI3_Init+0x64>)
 800122a:	2200      	movs	r2, #0
 800122c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800122e:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <MX_SPI3_Init+0x64>)
 8001230:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001234:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001236:	4b0c      	ldr	r3, [pc, #48]	@ (8001268 <MX_SPI3_Init+0x64>)
 8001238:	2210      	movs	r2, #16
 800123a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800123c:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <MX_SPI3_Init+0x64>)
 800123e:	2200      	movs	r2, #0
 8001240:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001242:	4b09      	ldr	r3, [pc, #36]	@ (8001268 <MX_SPI3_Init+0x64>)
 8001244:	2200      	movs	r2, #0
 8001246:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001248:	4b07      	ldr	r3, [pc, #28]	@ (8001268 <MX_SPI3_Init+0x64>)
 800124a:	2200      	movs	r2, #0
 800124c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800124e:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <MX_SPI3_Init+0x64>)
 8001250:	220a      	movs	r2, #10
 8001252:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001254:	4804      	ldr	r0, [pc, #16]	@ (8001268 <MX_SPI3_Init+0x64>)
 8001256:	f003 f84b 	bl	80042f0 <HAL_SPI_Init>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001260:	f000 f920 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	200003b8 	.word	0x200003b8
 800126c:	40003c00 	.word	0x40003c00

08001270 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001274:	4b11      	ldr	r3, [pc, #68]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 8001276:	4a12      	ldr	r2, [pc, #72]	@ (80012c0 <MX_USART2_UART_Init+0x50>)
 8001278:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800127a:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 800127c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001280:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001282:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001288:	4b0c      	ldr	r3, [pc, #48]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800128e:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001294:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 8001296:	220c      	movs	r2, #12
 8001298:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129a:	4b08      	ldr	r3, [pc, #32]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a0:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012a6:	4805      	ldr	r0, [pc, #20]	@ (80012bc <MX_USART2_UART_Init+0x4c>)
 80012a8:	f003 feee 	bl	8005088 <HAL_UART_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012b2:	f000 f8f7 	bl	80014a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000410 	.word	0x20000410
 80012c0:	40004400 	.word	0x40004400

080012c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
 80012ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <MX_DMA_Init+0x3c>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001300 <MX_DMA_Init+0x3c>)
 80012d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <MX_DMA_Init+0x3c>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2105      	movs	r1, #5
 80012ea:	2038      	movs	r0, #56	@ 0x38
 80012ec:	f001 f91a 	bl	8002524 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012f0:	2038      	movs	r0, #56	@ 0x38
 80012f2:	f001 f933 	bl	800255c <HAL_NVIC_EnableIRQ>

}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800

08001304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08a      	sub	sp, #40	@ 0x28
 8001308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	605a      	str	r2, [r3, #4]
 8001314:	609a      	str	r2, [r3, #8]
 8001316:	60da      	str	r2, [r3, #12]
 8001318:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	4b4e      	ldr	r3, [pc, #312]	@ (8001458 <MX_GPIO_Init+0x154>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	4a4d      	ldr	r2, [pc, #308]	@ (8001458 <MX_GPIO_Init+0x154>)
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	6313      	str	r3, [r2, #48]	@ 0x30
 800132a:	4b4b      	ldr	r3, [pc, #300]	@ (8001458 <MX_GPIO_Init+0x154>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b47      	ldr	r3, [pc, #284]	@ (8001458 <MX_GPIO_Init+0x154>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a46      	ldr	r2, [pc, #280]	@ (8001458 <MX_GPIO_Init+0x154>)
 8001340:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b44      	ldr	r3, [pc, #272]	@ (8001458 <MX_GPIO_Init+0x154>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	4b40      	ldr	r3, [pc, #256]	@ (8001458 <MX_GPIO_Init+0x154>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	4a3f      	ldr	r2, [pc, #252]	@ (8001458 <MX_GPIO_Init+0x154>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6313      	str	r3, [r2, #48]	@ 0x30
 8001362:	4b3d      	ldr	r3, [pc, #244]	@ (8001458 <MX_GPIO_Init+0x154>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	4b39      	ldr	r3, [pc, #228]	@ (8001458 <MX_GPIO_Init+0x154>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a38      	ldr	r2, [pc, #224]	@ (8001458 <MX_GPIO_Init+0x154>)
 8001378:	f043 0302 	orr.w	r3, r3, #2
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b36      	ldr	r3, [pc, #216]	@ (8001458 <MX_GPIO_Init+0x154>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	603b      	str	r3, [r7, #0]
 800138e:	4b32      	ldr	r3, [pc, #200]	@ (8001458 <MX_GPIO_Init+0x154>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a31      	ldr	r2, [pc, #196]	@ (8001458 <MX_GPIO_Init+0x154>)
 8001394:	f043 0308 	orr.w	r3, r3, #8
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b2f      	ldr	r3, [pc, #188]	@ (8001458 <MX_GPIO_Init+0x154>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	603b      	str	r3, [r7, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2120      	movs	r1, #32
 80013aa:	482c      	ldr	r0, [pc, #176]	@ (800145c <MX_GPIO_Init+0x158>)
 80013ac:	f001 fe48 	bl	8003040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80013b0:	2200      	movs	r2, #0
 80013b2:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 80013b6:	482a      	ldr	r0, [pc, #168]	@ (8001460 <MX_GPIO_Init+0x15c>)
 80013b8:	f001 fe42 	bl	8003040 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	2104      	movs	r1, #4
 80013c0:	4828      	ldr	r0, [pc, #160]	@ (8001464 <MX_GPIO_Init+0x160>)
 80013c2:	f001 fe3d 	bl	8003040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013cc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80013d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	4820      	ldr	r0, [pc, #128]	@ (8001460 <MX_GPIO_Init+0x15c>)
 80013de:	f001 fcab 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80013e2:	230f      	movs	r3, #15
 80013e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e6:	2300      	movs	r3, #0
 80013e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013ea:	2302      	movs	r3, #2
 80013ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	481a      	ldr	r0, [pc, #104]	@ (8001460 <MX_GPIO_Init+0x15c>)
 80013f6:	f001 fc9f 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013fa:	2320      	movs	r3, #32
 80013fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fe:	2301      	movs	r3, #1
 8001400:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001406:	2300      	movs	r3, #0
 8001408:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	4619      	mov	r1, r3
 8001410:	4812      	ldr	r0, [pc, #72]	@ (800145c <MX_GPIO_Init+0x158>)
 8001412:	f001 fc91 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lock_Pin PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001416:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 800141a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800141c:	2301      	movs	r3, #1
 800141e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	480c      	ldr	r0, [pc, #48]	@ (8001460 <MX_GPIO_Init+0x15c>)
 8001430:	f001 fc82 	bl	8002d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SD_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin;
 8001434:	2304      	movs	r3, #4
 8001436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_SD_GPIO_Port, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	4806      	ldr	r0, [pc, #24]	@ (8001464 <MX_GPIO_Init+0x160>)
 800144c:	f001 fc74 	bl	8002d38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001450:	bf00      	nop
 8001452:	3728      	adds	r7, #40	@ 0x28
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40023800 	.word	0x40023800
 800145c:	40020000 	.word	0x40020000
 8001460:	40020800 	.word	0x40020800
 8001464:	40020c00 	.word	0x40020c00

08001468 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001478:	d101      	bne.n	800147e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800147a:	f000 fb15 	bl	8001aa8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop_DMA(&hadc1);
 8001490:	4803      	ldr	r0, [pc, #12]	@ (80014a0 <HAL_ADC_ConvCpltCallback+0x18>)
 8001492:	f000 fc81 	bl	8001d98 <HAL_ADC_Stop_DMA>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	2000029c 	.word	0x2000029c

080014a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014a8:	b672      	cpsid	i
}
 80014aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <Error_Handler+0x8>

080014b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <HAL_MspInit+0x54>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014be:	4a11      	ldr	r2, [pc, #68]	@ (8001504 <HAL_MspInit+0x54>)
 80014c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001504 <HAL_MspInit+0x54>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <HAL_MspInit+0x54>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014da:	4a0a      	ldr	r2, [pc, #40]	@ (8001504 <HAL_MspInit+0x54>)
 80014dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014e2:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <HAL_MspInit+0x54>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	210f      	movs	r1, #15
 80014f2:	f06f 0001 	mvn.w	r0, #1
 80014f6:	f001 f815 	bl	8002524 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800

08001508 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	@ 0x28
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a2e      	ldr	r2, [pc, #184]	@ (80015e0 <HAL_ADC_MspInit+0xd8>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d156      	bne.n	80015d8 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	4b2d      	ldr	r3, [pc, #180]	@ (80015e4 <HAL_ADC_MspInit+0xdc>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001532:	4a2c      	ldr	r2, [pc, #176]	@ (80015e4 <HAL_ADC_MspInit+0xdc>)
 8001534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001538:	6453      	str	r3, [r2, #68]	@ 0x44
 800153a:	4b2a      	ldr	r3, [pc, #168]	@ (80015e4 <HAL_ADC_MspInit+0xdc>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b26      	ldr	r3, [pc, #152]	@ (80015e4 <HAL_ADC_MspInit+0xdc>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154e:	4a25      	ldr	r2, [pc, #148]	@ (80015e4 <HAL_ADC_MspInit+0xdc>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	6313      	str	r3, [r2, #48]	@ 0x30
 8001556:	4b23      	ldr	r3, [pc, #140]	@ (80015e4 <HAL_ADC_MspInit+0xdc>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001562:	2301      	movs	r3, #1
 8001564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001566:	2303      	movs	r3, #3
 8001568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	481c      	ldr	r0, [pc, #112]	@ (80015e8 <HAL_ADC_MspInit+0xe0>)
 8001576:	f001 fbdf 	bl	8002d38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800157a:	4b1c      	ldr	r3, [pc, #112]	@ (80015ec <HAL_ADC_MspInit+0xe4>)
 800157c:	4a1c      	ldr	r2, [pc, #112]	@ (80015f0 <HAL_ADC_MspInit+0xe8>)
 800157e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001580:	4b1a      	ldr	r3, [pc, #104]	@ (80015ec <HAL_ADC_MspInit+0xe4>)
 8001582:	2200      	movs	r2, #0
 8001584:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001586:	4b19      	ldr	r3, [pc, #100]	@ (80015ec <HAL_ADC_MspInit+0xe4>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800158c:	4b17      	ldr	r3, [pc, #92]	@ (80015ec <HAL_ADC_MspInit+0xe4>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001592:	4b16      	ldr	r3, [pc, #88]	@ (80015ec <HAL_ADC_MspInit+0xe4>)
 8001594:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001598:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800159a:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <HAL_ADC_MspInit+0xe4>)
 800159c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80015a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015a2:	4b12      	ldr	r3, [pc, #72]	@ (80015ec <HAL_ADC_MspInit+0xe4>)
 80015a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <HAL_ADC_MspInit+0xe4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80015b0:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <HAL_ADC_MspInit+0xe4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015b6:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <HAL_ADC_MspInit+0xe4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80015bc:	480b      	ldr	r0, [pc, #44]	@ (80015ec <HAL_ADC_MspInit+0xe4>)
 80015be:	f000 ffdb 	bl	8002578 <HAL_DMA_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80015c8:	f7ff ff6c 	bl	80014a4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	4a07      	ldr	r2, [pc, #28]	@ (80015ec <HAL_ADC_MspInit+0xe4>)
 80015d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80015d2:	4a06      	ldr	r2, [pc, #24]	@ (80015ec <HAL_ADC_MspInit+0xe4>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015d8:	bf00      	nop
 80015da:	3728      	adds	r7, #40	@ 0x28
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	40012000 	.word	0x40012000
 80015e4:	40023800 	.word	0x40023800
 80015e8:	40020400 	.word	0x40020400
 80015ec:	200002e4 	.word	0x200002e4
 80015f0:	40026410 	.word	0x40026410

080015f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	@ 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a19      	ldr	r2, [pc, #100]	@ (8001678 <HAL_I2C_MspInit+0x84>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d12b      	bne.n	800166e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	4b18      	ldr	r3, [pc, #96]	@ (800167c <HAL_I2C_MspInit+0x88>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a17      	ldr	r2, [pc, #92]	@ (800167c <HAL_I2C_MspInit+0x88>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b15      	ldr	r3, [pc, #84]	@ (800167c <HAL_I2C_MspInit+0x88>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001632:	23c0      	movs	r3, #192	@ 0xc0
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001636:	2312      	movs	r3, #18
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001642:	2304      	movs	r3, #4
 8001644:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	480c      	ldr	r0, [pc, #48]	@ (8001680 <HAL_I2C_MspInit+0x8c>)
 800164e:	f001 fb73 	bl	8002d38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b09      	ldr	r3, [pc, #36]	@ (800167c <HAL_I2C_MspInit+0x88>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165a:	4a08      	ldr	r2, [pc, #32]	@ (800167c <HAL_I2C_MspInit+0x88>)
 800165c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001660:	6413      	str	r3, [r2, #64]	@ 0x40
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <HAL_I2C_MspInit+0x88>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	@ 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40005400 	.word	0x40005400
 800167c:	40023800 	.word	0x40023800
 8001680:	40020400 	.word	0x40020400

08001684 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0c      	ldr	r2, [pc, #48]	@ (80016d4 <HAL_RTC_MspInit+0x50>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d111      	bne.n	80016ca <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80016a6:	2302      	movs	r3, #2
 80016a8:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80016aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016ae:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	4618      	mov	r0, r3
 80016b6:	f002 faeb 	bl	8003c90 <HAL_RCCEx_PeriphCLKConfig>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80016c0:	f7ff fef0 	bl	80014a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80016c4:	4b04      	ldr	r3, [pc, #16]	@ (80016d8 <HAL_RTC_MspInit+0x54>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80016ca:	bf00      	nop
 80016cc:	3720      	adds	r7, #32
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40002800 	.word	0x40002800
 80016d8:	42470e3c 	.word	0x42470e3c

080016dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	@ 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a19      	ldr	r2, [pc, #100]	@ (8001760 <HAL_SPI_MspInit+0x84>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d12c      	bne.n	8001758 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	4b18      	ldr	r3, [pc, #96]	@ (8001764 <HAL_SPI_MspInit+0x88>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	4a17      	ldr	r2, [pc, #92]	@ (8001764 <HAL_SPI_MspInit+0x88>)
 8001708:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800170c:	6413      	str	r3, [r2, #64]	@ 0x40
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <HAL_SPI_MspInit+0x88>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001712:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <HAL_SPI_MspInit+0x88>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	4a10      	ldr	r2, [pc, #64]	@ (8001764 <HAL_SPI_MspInit+0x88>)
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	6313      	str	r3, [r2, #48]	@ 0x30
 800172a:	4b0e      	ldr	r3, [pc, #56]	@ (8001764 <HAL_SPI_MspInit+0x88>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	f003 0304 	and.w	r3, r3, #4
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001736:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800173a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173c:	2302      	movs	r3, #2
 800173e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001740:	2300      	movs	r3, #0
 8001742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001744:	2303      	movs	r3, #3
 8001746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001748:	2306      	movs	r3, #6
 800174a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	4619      	mov	r1, r3
 8001752:	4805      	ldr	r0, [pc, #20]	@ (8001768 <HAL_SPI_MspInit+0x8c>)
 8001754:	f001 faf0 	bl	8002d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001758:	bf00      	nop
 800175a:	3728      	adds	r7, #40	@ 0x28
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40003c00 	.word	0x40003c00
 8001764:	40023800 	.word	0x40023800
 8001768:	40020800 	.word	0x40020800

0800176c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	@ 0x28
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a19      	ldr	r2, [pc, #100]	@ (80017f0 <HAL_UART_MspInit+0x84>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d12b      	bne.n	80017e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	4b18      	ldr	r3, [pc, #96]	@ (80017f4 <HAL_UART_MspInit+0x88>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	4a17      	ldr	r2, [pc, #92]	@ (80017f4 <HAL_UART_MspInit+0x88>)
 8001798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800179c:	6413      	str	r3, [r2, #64]	@ 0x40
 800179e:	4b15      	ldr	r3, [pc, #84]	@ (80017f4 <HAL_UART_MspInit+0x88>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <HAL_UART_MspInit+0x88>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b2:	4a10      	ldr	r2, [pc, #64]	@ (80017f4 <HAL_UART_MspInit+0x88>)
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ba:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <HAL_UART_MspInit+0x88>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017c6:	230c      	movs	r3, #12
 80017c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ca:	2302      	movs	r3, #2
 80017cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017d6:	2307      	movs	r3, #7
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017da:	f107 0314 	add.w	r3, r7, #20
 80017de:	4619      	mov	r1, r3
 80017e0:	4805      	ldr	r0, [pc, #20]	@ (80017f8 <HAL_UART_MspInit+0x8c>)
 80017e2:	f001 faa9 	bl	8002d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017e6:	bf00      	nop
 80017e8:	3728      	adds	r7, #40	@ 0x28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40004400 	.word	0x40004400
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020000 	.word	0x40020000

080017fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08e      	sub	sp, #56	@ 0x38
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001804:	2300      	movs	r3, #0
 8001806:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001808:	2300      	movs	r3, #0
 800180a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	4b34      	ldr	r3, [pc, #208]	@ (80018e4 <HAL_InitTick+0xe8>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001814:	4a33      	ldr	r2, [pc, #204]	@ (80018e4 <HAL_InitTick+0xe8>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	6413      	str	r3, [r2, #64]	@ 0x40
 800181c:	4b31      	ldr	r3, [pc, #196]	@ (80018e4 <HAL_InitTick+0xe8>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001828:	f107 0210 	add.w	r2, r7, #16
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4611      	mov	r1, r2
 8001832:	4618      	mov	r0, r3
 8001834:	f002 f9fa 	bl	8003c2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800183c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800183e:	2b00      	cmp	r3, #0
 8001840:	d103      	bne.n	800184a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001842:	f002 f9cb 	bl	8003bdc <HAL_RCC_GetPCLK1Freq>
 8001846:	6378      	str	r0, [r7, #52]	@ 0x34
 8001848:	e004      	b.n	8001854 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800184a:	f002 f9c7 	bl	8003bdc <HAL_RCC_GetPCLK1Freq>
 800184e:	4603      	mov	r3, r0
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001856:	4a24      	ldr	r2, [pc, #144]	@ (80018e8 <HAL_InitTick+0xec>)
 8001858:	fba2 2303 	umull	r2, r3, r2, r3
 800185c:	0c9b      	lsrs	r3, r3, #18
 800185e:	3b01      	subs	r3, #1
 8001860:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001862:	4b22      	ldr	r3, [pc, #136]	@ (80018ec <HAL_InitTick+0xf0>)
 8001864:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001868:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 800186a:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <HAL_InitTick+0xf0>)
 800186c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001870:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001872:	4a1e      	ldr	r2, [pc, #120]	@ (80018ec <HAL_InitTick+0xf0>)
 8001874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001876:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001878:	4b1c      	ldr	r3, [pc, #112]	@ (80018ec <HAL_InitTick+0xf0>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187e:	4b1b      	ldr	r3, [pc, #108]	@ (80018ec <HAL_InitTick+0xf0>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001884:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <HAL_InitTick+0xf0>)
 8001886:	2200      	movs	r2, #0
 8001888:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800188a:	4818      	ldr	r0, [pc, #96]	@ (80018ec <HAL_InitTick+0xf0>)
 800188c:	f003 f988 	bl	8004ba0 <HAL_TIM_Base_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001896:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800189a:	2b00      	cmp	r3, #0
 800189c:	d11b      	bne.n	80018d6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800189e:	4813      	ldr	r0, [pc, #76]	@ (80018ec <HAL_InitTick+0xf0>)
 80018a0:	f003 f9d8 	bl	8004c54 <HAL_TIM_Base_Start_IT>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80018aa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d111      	bne.n	80018d6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018b2:	201c      	movs	r0, #28
 80018b4:	f000 fe52 	bl	800255c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b0f      	cmp	r3, #15
 80018bc:	d808      	bhi.n	80018d0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 80018be:	2200      	movs	r2, #0
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	201c      	movs	r0, #28
 80018c4:	f000 fe2e 	bl	8002524 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018c8:	4a09      	ldr	r2, [pc, #36]	@ (80018f0 <HAL_InitTick+0xf4>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
 80018ce:	e002      	b.n	80018d6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80018d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3738      	adds	r7, #56	@ 0x38
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	431bde83 	.word	0x431bde83
 80018ec:	20000464 	.word	0x20000464
 80018f0:	20000008 	.word	0x20000008

080018f4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80018f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001934 <SDTimer_Handler+0x40>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d006      	beq.n	8001910 <SDTimer_Handler+0x1c>
    Timer1--;
 8001902:	4b0c      	ldr	r3, [pc, #48]	@ (8001934 <SDTimer_Handler+0x40>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	b2db      	uxtb	r3, r3
 8001908:	3b01      	subs	r3, #1
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <SDTimer_Handler+0x40>)
 800190e:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001910:	4b09      	ldr	r3, [pc, #36]	@ (8001938 <SDTimer_Handler+0x44>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d006      	beq.n	8001928 <SDTimer_Handler+0x34>
    Timer2--;
 800191a:	4b07      	ldr	r3, [pc, #28]	@ (8001938 <SDTimer_Handler+0x44>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	3b01      	subs	r3, #1
 8001922:	b2da      	uxtb	r2, r3
 8001924:	4b04      	ldr	r3, [pc, #16]	@ (8001938 <SDTimer_Handler+0x44>)
 8001926:	701a      	strb	r2, [r3, #0]
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	200004ad 	.word	0x200004ad
 8001938:	200004ae 	.word	0x200004ae

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001940:	bf00      	nop
 8001942:	e7fd      	b.n	8001940 <NMI_Handler+0x4>

08001944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <HardFault_Handler+0x4>

0800194c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <MemManage_Handler+0x4>

08001954 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <BusFault_Handler+0x4>

0800195c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <UsageFault_Handler+0x4>

08001964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  FatFsCnt++;
 8001978:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <TIM2_IRQHandler+0x30>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	3301      	adds	r3, #1
 8001980:	b2da      	uxtb	r2, r3
 8001982:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <TIM2_IRQHandler+0x30>)
 8001984:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10){
 8001986:	4b07      	ldr	r3, [pc, #28]	@ (80019a4 <TIM2_IRQHandler+0x30>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	b2db      	uxtb	r3, r3
 800198c:	2b09      	cmp	r3, #9
 800198e:	d904      	bls.n	800199a <TIM2_IRQHandler+0x26>
	  FatFsCnt = 0;
 8001990:	4b04      	ldr	r3, [pc, #16]	@ (80019a4 <TIM2_IRQHandler+0x30>)
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 8001996:	f7ff ffad 	bl	80018f4 <SDTimer_Handler>
  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800199a:	4803      	ldr	r0, [pc, #12]	@ (80019a8 <TIM2_IRQHandler+0x34>)
 800199c:	f003 f9bc 	bl	8004d18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	200004ac 	.word	0x200004ac
 80019a8:	20000464 	.word	0x20000464

080019ac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019b0:	4802      	ldr	r0, [pc, #8]	@ (80019bc <DMA2_Stream0_IRQHandler+0x10>)
 80019b2:	f000 ff57 	bl	8002864 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	200002e4 	.word	0x200002e4

080019c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019c4:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <SystemInit+0x20>)
 80019c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ca:	4a05      	ldr	r2, [pc, #20]	@ (80019e0 <SystemInit+0x20>)
 80019cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <VoiceProcessing>:
FSM StateMachine;
extern QueueHandle_t uiQueue;
extern QueueHandle_t sequenceQueue;
extern QueueHandle_t lockQueue;

void VoiceProcessing(void *pvParameters){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	uint16_t *buffer = pvPortMalloc(512 * sizeof(uint16_t));
 80019ec:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80019f0:	f004 ffea 	bl	80069c8 <pvPortMalloc>
 80019f4:	60f8      	str	r0, [r7, #12]
	while(1){
		captureVoice(buffer, 512);
 80019f6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	f7fe fd68 	bl	80004d0 <captureVoice>
 8001a00:	e7f9      	b.n	80019f6 <VoiceProcessing+0x12>

08001a02 <IdleTask>:
			if(magneticLockState == LOCK_ON) closeLock();
		}
	}
}

void IdleTask(void *pvParameters){
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
	while(1){
 8001a0a:	bf00      	nop
 8001a0c:	e7fd      	b.n	8001a0a <IdleTask+0x8>
	...

08001a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a14:	f7ff ffd4 	bl	80019c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a18:	480c      	ldr	r0, [pc, #48]	@ (8001a4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a1a:	490d      	ldr	r1, [pc, #52]	@ (8001a50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a20:	e002      	b.n	8001a28 <LoopCopyDataInit>

08001a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a26:	3304      	adds	r3, #4

08001a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a2c:	d3f9      	bcc.n	8001a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a30:	4c0a      	ldr	r4, [pc, #40]	@ (8001a5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a34:	e001      	b.n	8001a3a <LoopFillZerobss>

08001a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a38:	3204      	adds	r2, #4

08001a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a3c:	d3fb      	bcc.n	8001a36 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001a3e:	f005 f9b9 	bl	8006db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a42:	f7ff fa43 	bl	8000ecc <main>
  bx  lr    
 8001a46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a48:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a50:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001a54:	08006e64 	.word	0x08006e64
  ldr r2, =_sbss
 8001a58:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001a5c:	2000421c 	.word	0x2000421c

08001a60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a60:	e7fe      	b.n	8001a60 <ADC_IRQHandler>
	...

08001a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a68:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa4 <HAL_Init+0x40>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001aa4 <HAL_Init+0x40>)
 8001a6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a74:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <HAL_Init+0x40>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa4 <HAL_Init+0x40>)
 8001a7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a80:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <HAL_Init+0x40>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a07      	ldr	r2, [pc, #28]	@ (8001aa4 <HAL_Init+0x40>)
 8001a86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f000 fd3e 	bl	800250e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a92:	200f      	movs	r0, #15
 8001a94:	f7ff feb2 	bl	80017fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a98:	f7ff fd0a 	bl	80014b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40023c00 	.word	0x40023c00

08001aa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <HAL_IncTick+0x20>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b06      	ldr	r3, [pc, #24]	@ (8001acc <HAL_IncTick+0x24>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a04      	ldr	r2, [pc, #16]	@ (8001acc <HAL_IncTick+0x24>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	2000000c 	.word	0x2000000c
 8001acc:	200004b0 	.word	0x200004b0

08001ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad4:	4b03      	ldr	r3, [pc, #12]	@ (8001ae4 <HAL_GetTick+0x14>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	200004b0 	.word	0x200004b0

08001ae8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001af0:	f7ff ffee 	bl	8001ad0 <HAL_GetTick>
 8001af4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b00:	d005      	beq.n	8001b0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b02:	4b0a      	ldr	r3, [pc, #40]	@ (8001b2c <HAL_Delay+0x44>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	461a      	mov	r2, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b0e:	bf00      	nop
 8001b10:	f7ff ffde 	bl	8001ad0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d8f7      	bhi.n	8001b10 <HAL_Delay+0x28>
  {
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2000000c 	.word	0x2000000c

08001b30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e033      	b.n	8001bae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d109      	bne.n	8001b62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff fcda 	bl	8001508 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	f003 0310 	and.w	r3, r3, #16
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d118      	bne.n	8001ba0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b76:	f023 0302 	bic.w	r3, r3, #2
 8001b7a:	f043 0202 	orr.w	r2, r3, #2
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 fa98 	bl	80020b8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	f023 0303 	bic.w	r3, r3, #3
 8001b96:	f043 0201 	orr.w	r2, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b9e:	e001      	b.n	8001ba4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
	...

08001bb8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b086      	sub	sp, #24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d101      	bne.n	8001bd6 <HAL_ADC_Start_DMA+0x1e>
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	e0ce      	b.n	8001d74 <HAL_ADC_Start_DMA+0x1bc>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d018      	beq.n	8001c1e <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bfc:	4b5f      	ldr	r3, [pc, #380]	@ (8001d7c <HAL_ADC_Start_DMA+0x1c4>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a5f      	ldr	r2, [pc, #380]	@ (8001d80 <HAL_ADC_Start_DMA+0x1c8>)
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	0c9a      	lsrs	r2, r3, #18
 8001c08:	4613      	mov	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	4413      	add	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001c10:	e002      	b.n	8001c18 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	3b01      	subs	r3, #1
 8001c16:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1f9      	bne.n	8001c12 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c2c:	d107      	bne.n	8001c3e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c3c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	f040 8086 	bne.w	8001d5a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001c56:	f023 0301 	bic.w	r3, r3, #1
 8001c5a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d007      	beq.n	8001c80 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c74:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c78:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c8c:	d106      	bne.n	8001c9c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c92:	f023 0206 	bic.w	r2, r3, #6
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	645a      	str	r2, [r3, #68]	@ 0x44
 8001c9a:	e002      	b.n	8001ca2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001caa:	4b36      	ldr	r3, [pc, #216]	@ (8001d84 <HAL_ADC_Start_DMA+0x1cc>)
 8001cac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb2:	4a35      	ldr	r2, [pc, #212]	@ (8001d88 <HAL_ADC_Start_DMA+0x1d0>)
 8001cb4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cba:	4a34      	ldr	r2, [pc, #208]	@ (8001d8c <HAL_ADC_Start_DMA+0x1d4>)
 8001cbc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cc2:	4a33      	ldr	r2, [pc, #204]	@ (8001d90 <HAL_ADC_Start_DMA+0x1d8>)
 8001cc4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001cce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8001cde:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cee:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	334c      	adds	r3, #76	@ 0x4c
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	f000 fce8 	bl	80026d4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 031f 	and.w	r3, r3, #31
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d10f      	bne.n	8001d30 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d129      	bne.n	8001d72 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	e020      	b.n	8001d72 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a17      	ldr	r2, [pc, #92]	@ (8001d94 <HAL_ADC_Start_DMA+0x1dc>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d11b      	bne.n	8001d72 <HAL_ADC_Start_DMA+0x1ba>
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d114      	bne.n	8001d72 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	e00b      	b.n	8001d72 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	f043 0210 	orr.w	r2, r3, #16
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	f043 0201 	orr.w	r2, r3, #1
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	20000004 	.word	0x20000004
 8001d80:	431bde83 	.word	0x431bde83
 8001d84:	40012300 	.word	0x40012300
 8001d88:	080022b1 	.word	0x080022b1
 8001d8c:	0800236b 	.word	0x0800236b
 8001d90:	08002387 	.word	0x08002387
 8001d94:	40012000 	.word	0x40012000

08001d98 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001da0:	2300      	movs	r3, #0
 8001da2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d101      	bne.n	8001db2 <HAL_ADC_Stop_DMA+0x1a>
 8001dae:	2302      	movs	r3, #2
 8001db0:	e048      	b.n	8001e44 <HAL_ADC_Stop_DMA+0xac>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0201 	bic.w	r2, r2, #1
 8001dc8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d130      	bne.n	8001e3a <HAL_ADC_Stop_DMA+0xa2>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001de6:	609a      	str	r2, [r3, #8]

    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d10f      	bne.n	8001e16 <HAL_ADC_Stop_DMA+0x7e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 fcc2 	bl	8002784 <HAL_DMA_Abort>
 8001e00:	4603      	mov	r3, r0
 8001e02:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d005      	beq.n	8001e16 <HAL_ADC_Stop_DMA+0x7e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 6280 	bic.w	r2, r2, #67108864	@ 0x4000000
 8001e24:	605a      	str	r2, [r3, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001e2e:	f023 0301 	bic.w	r3, r3, #1
 8001e32:	f043 0201 	orr.w	r2, r3, #1
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d101      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x1c>
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	e105      	b.n	800209c <HAL_ADC_ConfigChannel+0x228>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b09      	cmp	r3, #9
 8001e9e:	d925      	bls.n	8001eec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68d9      	ldr	r1, [r3, #12]
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	461a      	mov	r2, r3
 8001eae:	4613      	mov	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3b1e      	subs	r3, #30
 8001eb6:	2207      	movs	r2, #7
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43da      	mvns	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	400a      	ands	r2, r1
 8001ec4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68d9      	ldr	r1, [r3, #12]
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	4603      	mov	r3, r0
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	4403      	add	r3, r0
 8001ede:	3b1e      	subs	r3, #30
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	e022      	b.n	8001f32 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6919      	ldr	r1, [r3, #16]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4613      	mov	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	4413      	add	r3, r2
 8001f00:	2207      	movs	r2, #7
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43da      	mvns	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6919      	ldr	r1, [r3, #16]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	4618      	mov	r0, r3
 8001f22:	4603      	mov	r3, r0
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	4403      	add	r3, r0
 8001f28:	409a      	lsls	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b06      	cmp	r3, #6
 8001f38:	d824      	bhi.n	8001f84 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	4413      	add	r3, r2
 8001f4a:	3b05      	subs	r3, #5
 8001f4c:	221f      	movs	r2, #31
 8001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f52:	43da      	mvns	r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	400a      	ands	r2, r1
 8001f5a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	4618      	mov	r0, r3
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685a      	ldr	r2, [r3, #4]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	3b05      	subs	r3, #5
 8001f76:	fa00 f203 	lsl.w	r2, r0, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f82:	e04c      	b.n	800201e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b0c      	cmp	r3, #12
 8001f8a:	d824      	bhi.n	8001fd6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	3b23      	subs	r3, #35	@ 0x23
 8001f9e:	221f      	movs	r2, #31
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	43da      	mvns	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	400a      	ands	r2, r1
 8001fac:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	4618      	mov	r0, r3
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	3b23      	subs	r3, #35	@ 0x23
 8001fc8:	fa00 f203 	lsl.w	r2, r0, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	631a      	str	r2, [r3, #48]	@ 0x30
 8001fd4:	e023      	b.n	800201e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3b41      	subs	r3, #65	@ 0x41
 8001fe8:	221f      	movs	r2, #31
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	4618      	mov	r0, r3
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	3b41      	subs	r3, #65	@ 0x41
 8002012:	fa00 f203 	lsl.w	r2, r0, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800201e:	4b22      	ldr	r3, [pc, #136]	@ (80020a8 <HAL_ADC_ConfigChannel+0x234>)
 8002020:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a21      	ldr	r2, [pc, #132]	@ (80020ac <HAL_ADC_ConfigChannel+0x238>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d109      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x1cc>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	2b12      	cmp	r3, #18
 8002032:	d105      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a19      	ldr	r2, [pc, #100]	@ (80020ac <HAL_ADC_ConfigChannel+0x238>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d123      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x21e>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2b10      	cmp	r3, #16
 8002050:	d003      	beq.n	800205a <HAL_ADC_ConfigChannel+0x1e6>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2b11      	cmp	r3, #17
 8002058:	d11b      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2b10      	cmp	r3, #16
 800206c:	d111      	bne.n	8002092 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800206e:	4b10      	ldr	r3, [pc, #64]	@ (80020b0 <HAL_ADC_ConfigChannel+0x23c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a10      	ldr	r2, [pc, #64]	@ (80020b4 <HAL_ADC_ConfigChannel+0x240>)
 8002074:	fba2 2303 	umull	r2, r3, r2, r3
 8002078:	0c9a      	lsrs	r2, r3, #18
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	005b      	lsls	r3, r3, #1
 8002082:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002084:	e002      	b.n	800208c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	3b01      	subs	r3, #1
 800208a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f9      	bne.n	8002086 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	40012300 	.word	0x40012300
 80020ac:	40012000 	.word	0x40012000
 80020b0:	20000004 	.word	0x20000004
 80020b4:	431bde83 	.word	0x431bde83

080020b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020c0:	4b79      	ldr	r3, [pc, #484]	@ (80022a8 <ADC_Init+0x1f0>)
 80020c2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	431a      	orrs	r2, r3
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6859      	ldr	r1, [r3, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	021a      	lsls	r2, r3, #8
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002110:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6859      	ldr	r1, [r3, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	430a      	orrs	r2, r1
 8002122:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002132:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	6899      	ldr	r1, [r3, #8]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214a:	4a58      	ldr	r2, [pc, #352]	@ (80022ac <ADC_Init+0x1f4>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d022      	beq.n	8002196 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800215e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6899      	ldr	r1, [r3, #8]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002180:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6899      	ldr	r1, [r3, #8]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	430a      	orrs	r2, r1
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	e00f      	b.n	80021b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80021a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80021b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0202 	bic.w	r2, r2, #2
 80021c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6899      	ldr	r1, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	7e1b      	ldrb	r3, [r3, #24]
 80021d0:	005a      	lsls	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	430a      	orrs	r2, r1
 80021d8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d01b      	beq.n	800221c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021f2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002202:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6859      	ldr	r1, [r3, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800220e:	3b01      	subs	r3, #1
 8002210:	035a      	lsls	r2, r3, #13
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	e007      	b.n	800222c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800222a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800223a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	3b01      	subs	r3, #1
 8002248:	051a      	lsls	r2, r3, #20
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	430a      	orrs	r2, r1
 8002250:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002260:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6899      	ldr	r1, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800226e:	025a      	lsls	r2, r3, #9
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689a      	ldr	r2, [r3, #8]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002286:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6899      	ldr	r1, [r3, #8]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695b      	ldr	r3, [r3, #20]
 8002292:	029a      	lsls	r2, r3, #10
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	609a      	str	r2, [r3, #8]
}
 800229c:	bf00      	nop
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	40012300 	.word	0x40012300
 80022ac:	0f000001 	.word	0x0f000001

080022b0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d13c      	bne.n	8002344 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d12b      	bne.n	800233c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d127      	bne.n	800233c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d006      	beq.n	8002308 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002304:	2b00      	cmp	r3, #0
 8002306:	d119      	bne.n	800233c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0220 	bic.w	r2, r2, #32
 8002316:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002328:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d105      	bne.n	800233c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002334:	f043 0201 	orr.w	r2, r3, #1
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f7ff f8a3 	bl	8001488 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002342:	e00e      	b.n	8002362 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f7ff fd85 	bl	8001e60 <HAL_ADC_ErrorCallback>
}
 8002356:	e004      	b.n	8002362 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800235c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	4798      	blx	r3
}
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b084      	sub	sp, #16
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002376:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f7ff fd67 	bl	8001e4c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002392:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2240      	movs	r2, #64	@ 0x40
 8002398:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239e:	f043 0204 	orr.w	r2, r3, #4
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f7ff fd5a 	bl	8001e60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80023ac:	bf00      	nop
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c4:	4b0c      	ldr	r3, [pc, #48]	@ (80023f8 <__NVIC_SetPriorityGrouping+0x44>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023d0:	4013      	ands	r3, r2
 80023d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e6:	4a04      	ldr	r2, [pc, #16]	@ (80023f8 <__NVIC_SetPriorityGrouping+0x44>)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	60d3      	str	r3, [r2, #12]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002400:	4b04      	ldr	r3, [pc, #16]	@ (8002414 <__NVIC_GetPriorityGrouping+0x18>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	f003 0307 	and.w	r3, r3, #7
}
 800240a:	4618      	mov	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	2b00      	cmp	r3, #0
 8002428:	db0b      	blt.n	8002442 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	4907      	ldr	r1, [pc, #28]	@ (8002450 <__NVIC_EnableIRQ+0x38>)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	2001      	movs	r0, #1
 800243a:	fa00 f202 	lsl.w	r2, r0, r2
 800243e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	e000e100 	.word	0xe000e100

08002454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	6039      	str	r1, [r7, #0]
 800245e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002464:	2b00      	cmp	r3, #0
 8002466:	db0a      	blt.n	800247e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	b2da      	uxtb	r2, r3
 800246c:	490c      	ldr	r1, [pc, #48]	@ (80024a0 <__NVIC_SetPriority+0x4c>)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	0112      	lsls	r2, r2, #4
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	440b      	add	r3, r1
 8002478:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800247c:	e00a      	b.n	8002494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4908      	ldr	r1, [pc, #32]	@ (80024a4 <__NVIC_SetPriority+0x50>)
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	3b04      	subs	r3, #4
 800248c:	0112      	lsls	r2, r2, #4
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	440b      	add	r3, r1
 8002492:	761a      	strb	r2, [r3, #24]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000e100 	.word	0xe000e100
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	@ 0x24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f1c3 0307 	rsb	r3, r3, #7
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	bf28      	it	cs
 80024c6:	2304      	movcs	r3, #4
 80024c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3304      	adds	r3, #4
 80024ce:	2b06      	cmp	r3, #6
 80024d0:	d902      	bls.n	80024d8 <NVIC_EncodePriority+0x30>
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3b03      	subs	r3, #3
 80024d6:	e000      	b.n	80024da <NVIC_EncodePriority+0x32>
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	f04f 32ff 	mov.w	r2, #4294967295
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43da      	mvns	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	401a      	ands	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f0:	f04f 31ff 	mov.w	r1, #4294967295
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	fa01 f303 	lsl.w	r3, r1, r3
 80024fa:	43d9      	mvns	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002500:	4313      	orrs	r3, r2
         );
}
 8002502:	4618      	mov	r0, r3
 8002504:	3724      	adds	r7, #36	@ 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b082      	sub	sp, #8
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff ff4c 	bl	80023b4 <__NVIC_SetPriorityGrouping>
}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
 8002530:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002536:	f7ff ff61 	bl	80023fc <__NVIC_GetPriorityGrouping>
 800253a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	68b9      	ldr	r1, [r7, #8]
 8002540:	6978      	ldr	r0, [r7, #20]
 8002542:	f7ff ffb1 	bl	80024a8 <NVIC_EncodePriority>
 8002546:	4602      	mov	r2, r0
 8002548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254c:	4611      	mov	r1, r2
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ff80 	bl	8002454 <__NVIC_SetPriority>
}
 8002554:	bf00      	nop
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	4603      	mov	r3, r0
 8002564:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256a:	4618      	mov	r0, r3
 800256c:	f7ff ff54 	bl	8002418 <__NVIC_EnableIRQ>
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002580:	2300      	movs	r3, #0
 8002582:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002584:	f7ff faa4 	bl	8001ad0 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e099      	b.n	80026c8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0201 	bic.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025b4:	e00f      	b.n	80025d6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025b6:	f7ff fa8b 	bl	8001ad0 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b05      	cmp	r3, #5
 80025c2:	d908      	bls.n	80025d6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2220      	movs	r2, #32
 80025c8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2203      	movs	r2, #3
 80025ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e078      	b.n	80026c8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d1e8      	bne.n	80025b6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025ec:	697a      	ldr	r2, [r7, #20]
 80025ee:	4b38      	ldr	r3, [pc, #224]	@ (80026d0 <HAL_DMA_Init+0x158>)
 80025f0:	4013      	ands	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002602:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800260e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800261a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002622:	697a      	ldr	r2, [r7, #20]
 8002624:	4313      	orrs	r3, r2
 8002626:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262c:	2b04      	cmp	r3, #4
 800262e:	d107      	bne.n	8002640 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002638:	4313      	orrs	r3, r2
 800263a:	697a      	ldr	r2, [r7, #20]
 800263c:	4313      	orrs	r3, r2
 800263e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f023 0307 	bic.w	r3, r3, #7
 8002656:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	4313      	orrs	r3, r2
 8002660:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002666:	2b04      	cmp	r3, #4
 8002668:	d117      	bne.n	800269a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4313      	orrs	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00e      	beq.n	800269a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 fadf 	bl	8002c40 <DMA_CheckFifoParam>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d008      	beq.n	800269a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2240      	movs	r2, #64	@ 0x40
 800268c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002696:	2301      	movs	r3, #1
 8002698:	e016      	b.n	80026c8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	697a      	ldr	r2, [r7, #20]
 80026a0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fa96 	bl	8002bd4 <DMA_CalcBaseAndBitshift>
 80026a8:	4603      	mov	r3, r0
 80026aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b0:	223f      	movs	r2, #63	@ 0x3f
 80026b2:	409a      	lsls	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	f010803f 	.word	0xf010803f

080026d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	60f8      	str	r0, [r7, #12]
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ea:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_DMA_Start_IT+0x26>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e040      	b.n	800277c <HAL_DMA_Start_IT+0xa8>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d12f      	bne.n	800276e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2202      	movs	r2, #2
 8002712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 fa28 	bl	8002b78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800272c:	223f      	movs	r2, #63	@ 0x3f
 800272e:	409a      	lsls	r2, r3
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f042 0216 	orr.w	r2, r2, #22
 8002742:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002748:	2b00      	cmp	r3, #0
 800274a:	d007      	beq.n	800275c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f042 0208 	orr.w	r2, r2, #8
 800275a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f042 0201 	orr.w	r2, r2, #1
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	e005      	b.n	800277a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002776:	2302      	movs	r3, #2
 8002778:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800277a:	7dfb      	ldrb	r3, [r7, #23]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002790:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002792:	f7ff f99d 	bl	8001ad0 <HAL_GetTick>
 8002796:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d008      	beq.n	80027b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2280      	movs	r2, #128	@ 0x80
 80027a8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e052      	b.n	800285c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0216 	bic.w	r2, r2, #22
 80027c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695a      	ldr	r2, [r3, #20]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d103      	bne.n	80027e6 <HAL_DMA_Abort+0x62>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0208 	bic.w	r2, r2, #8
 80027f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f022 0201 	bic.w	r2, r2, #1
 8002804:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002806:	e013      	b.n	8002830 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002808:	f7ff f962 	bl	8001ad0 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b05      	cmp	r3, #5
 8002814:	d90c      	bls.n	8002830 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2220      	movs	r2, #32
 800281a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2203      	movs	r2, #3
 8002820:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e015      	b.n	800285c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d1e4      	bne.n	8002808 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002842:	223f      	movs	r2, #63	@ 0x3f
 8002844:	409a      	lsls	r2, r3
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002870:	4b8e      	ldr	r3, [pc, #568]	@ (8002aac <HAL_DMA_IRQHandler+0x248>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a8e      	ldr	r2, [pc, #568]	@ (8002ab0 <HAL_DMA_IRQHandler+0x24c>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	0a9b      	lsrs	r3, r3, #10
 800287c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002882:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288e:	2208      	movs	r2, #8
 8002890:	409a      	lsls	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	4013      	ands	r3, r2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d01a      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d013      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0204 	bic.w	r2, r2, #4
 80028b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028bc:	2208      	movs	r2, #8
 80028be:	409a      	lsls	r2, r3
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c8:	f043 0201 	orr.w	r2, r3, #1
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d4:	2201      	movs	r2, #1
 80028d6:	409a      	lsls	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d012      	beq.n	8002906 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00b      	beq.n	8002906 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028f2:	2201      	movs	r2, #1
 80028f4:	409a      	lsls	r2, r3
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028fe:	f043 0202 	orr.w	r2, r3, #2
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800290a:	2204      	movs	r2, #4
 800290c:	409a      	lsls	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4013      	ands	r3, r2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d012      	beq.n	800293c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00b      	beq.n	800293c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002928:	2204      	movs	r2, #4
 800292a:	409a      	lsls	r2, r3
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002934:	f043 0204 	orr.w	r2, r3, #4
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002940:	2210      	movs	r2, #16
 8002942:	409a      	lsls	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4013      	ands	r3, r2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d043      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d03c      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295e:	2210      	movs	r2, #16
 8002960:	409a      	lsls	r2, r3
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d018      	beq.n	80029a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d108      	bne.n	8002994 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d024      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	4798      	blx	r3
 8002992:	e01f      	b.n	80029d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01b      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	4798      	blx	r3
 80029a4:	e016      	b.n	80029d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d107      	bne.n	80029c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f022 0208 	bic.w	r2, r2, #8
 80029c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029d8:	2220      	movs	r2, #32
 80029da:	409a      	lsls	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4013      	ands	r3, r2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 808f 	beq.w	8002b04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 8087 	beq.w	8002b04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fa:	2220      	movs	r2, #32
 80029fc:	409a      	lsls	r2, r3
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b05      	cmp	r3, #5
 8002a0c:	d136      	bne.n	8002a7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0216 	bic.w	r2, r2, #22
 8002a1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695a      	ldr	r2, [r3, #20]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d103      	bne.n	8002a3e <HAL_DMA_IRQHandler+0x1da>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d007      	beq.n	8002a4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0208 	bic.w	r2, r2, #8
 8002a4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a52:	223f      	movs	r2, #63	@ 0x3f
 8002a54:	409a      	lsls	r2, r3
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d07e      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	4798      	blx	r3
        }
        return;
 8002a7a:	e079      	b.n	8002b70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d01d      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10d      	bne.n	8002ab4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d031      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	4798      	blx	r3
 8002aa8:	e02c      	b.n	8002b04 <HAL_DMA_IRQHandler+0x2a0>
 8002aaa:	bf00      	nop
 8002aac:	20000004 	.word	0x20000004
 8002ab0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d023      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	4798      	blx	r3
 8002ac4:	e01e      	b.n	8002b04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10f      	bne.n	8002af4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0210 	bic.w	r2, r2, #16
 8002ae2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d003      	beq.n	8002b04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d032      	beq.n	8002b72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d022      	beq.n	8002b5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2205      	movs	r2, #5
 8002b1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0201 	bic.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	3301      	adds	r3, #1
 8002b34:	60bb      	str	r3, [r7, #8]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d307      	bcc.n	8002b4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f2      	bne.n	8002b30 <HAL_DMA_IRQHandler+0x2cc>
 8002b4a:	e000      	b.n	8002b4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	4798      	blx	r3
 8002b6e:	e000      	b.n	8002b72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002b70:	bf00      	nop
    }
  }
}
 8002b72:	3718      	adds	r7, #24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	2b40      	cmp	r3, #64	@ 0x40
 8002ba4:	d108      	bne.n	8002bb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bb6:	e007      	b.n	8002bc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	60da      	str	r2, [r3, #12]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	3b10      	subs	r3, #16
 8002be4:	4a14      	ldr	r2, [pc, #80]	@ (8002c38 <DMA_CalcBaseAndBitshift+0x64>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bee:	4a13      	ldr	r2, [pc, #76]	@ (8002c3c <DMA_CalcBaseAndBitshift+0x68>)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2b03      	cmp	r3, #3
 8002c00:	d909      	bls.n	8002c16 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c0a:	f023 0303 	bic.w	r3, r3, #3
 8002c0e:	1d1a      	adds	r2, r3, #4
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c14:	e007      	b.n	8002c26 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002c1e:	f023 0303 	bic.w	r3, r3, #3
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	aaaaaaab 	.word	0xaaaaaaab
 8002c3c:	08006e4c 	.word	0x08006e4c

08002c40 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c50:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d11f      	bne.n	8002c9a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d856      	bhi.n	8002d0e <DMA_CheckFifoParam+0xce>
 8002c60:	a201      	add	r2, pc, #4	@ (adr r2, 8002c68 <DMA_CheckFifoParam+0x28>)
 8002c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c66:	bf00      	nop
 8002c68:	08002c79 	.word	0x08002c79
 8002c6c:	08002c8b 	.word	0x08002c8b
 8002c70:	08002c79 	.word	0x08002c79
 8002c74:	08002d0f 	.word	0x08002d0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c7c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d046      	beq.n	8002d12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c88:	e043      	b.n	8002d12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c92:	d140      	bne.n	8002d16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c98:	e03d      	b.n	8002d16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ca2:	d121      	bne.n	8002ce8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b03      	cmp	r3, #3
 8002ca8:	d837      	bhi.n	8002d1a <DMA_CheckFifoParam+0xda>
 8002caa:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb0 <DMA_CheckFifoParam+0x70>)
 8002cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb0:	08002cc1 	.word	0x08002cc1
 8002cb4:	08002cc7 	.word	0x08002cc7
 8002cb8:	08002cc1 	.word	0x08002cc1
 8002cbc:	08002cd9 	.word	0x08002cd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8002cc4:	e030      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d025      	beq.n	8002d1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd6:	e022      	b.n	8002d1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cdc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002ce0:	d11f      	bne.n	8002d22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ce6:	e01c      	b.n	8002d22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d903      	bls.n	8002cf6 <DMA_CheckFifoParam+0xb6>
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d003      	beq.n	8002cfc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002cf4:	e018      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8002cfa:	e015      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00e      	beq.n	8002d26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d0c:	e00b      	b.n	8002d26 <DMA_CheckFifoParam+0xe6>
      break;
 8002d0e:	bf00      	nop
 8002d10:	e00a      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d12:	bf00      	nop
 8002d14:	e008      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d16:	bf00      	nop
 8002d18:	e006      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e004      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e002      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d22:	bf00      	nop
 8002d24:	e000      	b.n	8002d28 <DMA_CheckFifoParam+0xe8>
      break;
 8002d26:	bf00      	nop
    }
  } 
  
  return status; 
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop

08002d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b089      	sub	sp, #36	@ 0x24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d42:	2300      	movs	r3, #0
 8002d44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
 8002d52:	e159      	b.n	8003008 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d54:	2201      	movs	r2, #1
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4013      	ands	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d68:	693a      	ldr	r2, [r7, #16]
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	f040 8148 	bne.w	8003002 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d005      	beq.n	8002d8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d130      	bne.n	8002dec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	005b      	lsls	r3, r3, #1
 8002d94:	2203      	movs	r2, #3
 8002d96:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	68da      	ldr	r2, [r3, #12]
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	43db      	mvns	r3, r3
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f003 0201 	and.w	r2, r3, #1
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d017      	beq.n	8002e28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	2203      	movs	r2, #3
 8002e04:	fa02 f303 	lsl.w	r3, r2, r3
 8002e08:	43db      	mvns	r3, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d123      	bne.n	8002e7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	08da      	lsrs	r2, r3, #3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3208      	adds	r2, #8
 8002e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f003 0307 	and.w	r3, r3, #7
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	220f      	movs	r2, #15
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	f003 0307 	and.w	r3, r3, #7
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	08da      	lsrs	r2, r3, #3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3208      	adds	r2, #8
 8002e76:	69b9      	ldr	r1, [r7, #24]
 8002e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	2203      	movs	r2, #3
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0203 	and.w	r2, r3, #3
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 80a2 	beq.w	8003002 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	4b57      	ldr	r3, [pc, #348]	@ (8003020 <HAL_GPIO_Init+0x2e8>)
 8002ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ec6:	4a56      	ldr	r2, [pc, #344]	@ (8003020 <HAL_GPIO_Init+0x2e8>)
 8002ec8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ecc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ece:	4b54      	ldr	r3, [pc, #336]	@ (8003020 <HAL_GPIO_Init+0x2e8>)
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eda:	4a52      	ldr	r2, [pc, #328]	@ (8003024 <HAL_GPIO_Init+0x2ec>)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	089b      	lsrs	r3, r3, #2
 8002ee0:	3302      	adds	r3, #2
 8002ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	220f      	movs	r2, #15
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43db      	mvns	r3, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4013      	ands	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a49      	ldr	r2, [pc, #292]	@ (8003028 <HAL_GPIO_Init+0x2f0>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d019      	beq.n	8002f3a <HAL_GPIO_Init+0x202>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a48      	ldr	r2, [pc, #288]	@ (800302c <HAL_GPIO_Init+0x2f4>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d013      	beq.n	8002f36 <HAL_GPIO_Init+0x1fe>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a47      	ldr	r2, [pc, #284]	@ (8003030 <HAL_GPIO_Init+0x2f8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00d      	beq.n	8002f32 <HAL_GPIO_Init+0x1fa>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a46      	ldr	r2, [pc, #280]	@ (8003034 <HAL_GPIO_Init+0x2fc>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d007      	beq.n	8002f2e <HAL_GPIO_Init+0x1f6>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a45      	ldr	r2, [pc, #276]	@ (8003038 <HAL_GPIO_Init+0x300>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <HAL_GPIO_Init+0x1f2>
 8002f26:	2304      	movs	r3, #4
 8002f28:	e008      	b.n	8002f3c <HAL_GPIO_Init+0x204>
 8002f2a:	2307      	movs	r3, #7
 8002f2c:	e006      	b.n	8002f3c <HAL_GPIO_Init+0x204>
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e004      	b.n	8002f3c <HAL_GPIO_Init+0x204>
 8002f32:	2302      	movs	r3, #2
 8002f34:	e002      	b.n	8002f3c <HAL_GPIO_Init+0x204>
 8002f36:	2301      	movs	r3, #1
 8002f38:	e000      	b.n	8002f3c <HAL_GPIO_Init+0x204>
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	69fa      	ldr	r2, [r7, #28]
 8002f3e:	f002 0203 	and.w	r2, r2, #3
 8002f42:	0092      	lsls	r2, r2, #2
 8002f44:	4093      	lsls	r3, r2
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f4c:	4935      	ldr	r1, [pc, #212]	@ (8003024 <HAL_GPIO_Init+0x2ec>)
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	089b      	lsrs	r3, r3, #2
 8002f52:	3302      	adds	r3, #2
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f5a:	4b38      	ldr	r3, [pc, #224]	@ (800303c <HAL_GPIO_Init+0x304>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f7e:	4a2f      	ldr	r2, [pc, #188]	@ (800303c <HAL_GPIO_Init+0x304>)
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f84:	4b2d      	ldr	r3, [pc, #180]	@ (800303c <HAL_GPIO_Init+0x304>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d003      	beq.n	8002fa8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fa8:	4a24      	ldr	r2, [pc, #144]	@ (800303c <HAL_GPIO_Init+0x304>)
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fae:	4b23      	ldr	r3, [pc, #140]	@ (800303c <HAL_GPIO_Init+0x304>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fd2:	4a1a      	ldr	r2, [pc, #104]	@ (800303c <HAL_GPIO_Init+0x304>)
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fd8:	4b18      	ldr	r3, [pc, #96]	@ (800303c <HAL_GPIO_Init+0x304>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d003      	beq.n	8002ffc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ffc:	4a0f      	ldr	r2, [pc, #60]	@ (800303c <HAL_GPIO_Init+0x304>)
 8002ffe:	69bb      	ldr	r3, [r7, #24]
 8003000:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3301      	adds	r3, #1
 8003006:	61fb      	str	r3, [r7, #28]
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	2b0f      	cmp	r3, #15
 800300c:	f67f aea2 	bls.w	8002d54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	3724      	adds	r7, #36	@ 0x24
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800
 8003024:	40013800 	.word	0x40013800
 8003028:	40020000 	.word	0x40020000
 800302c:	40020400 	.word	0x40020400
 8003030:	40020800 	.word	0x40020800
 8003034:	40020c00 	.word	0x40020c00
 8003038:	40021000 	.word	0x40021000
 800303c:	40013c00 	.word	0x40013c00

08003040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	807b      	strh	r3, [r7, #2]
 800304c:	4613      	mov	r3, r2
 800304e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003050:	787b      	ldrb	r3, [r7, #1]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003056:	887a      	ldrh	r2, [r7, #2]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800305c:	e003      	b.n	8003066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800305e:	887b      	ldrh	r3, [r7, #2]
 8003060:	041a      	lsls	r2, r3, #16
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	619a      	str	r2, [r3, #24]
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e12b      	b.n	80032de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7fe faaa 	bl	80015f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2224      	movs	r2, #36	@ 0x24
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0201 	bic.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030d8:	f000 fd80 	bl	8003bdc <HAL_RCC_GetPCLK1Freq>
 80030dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4a81      	ldr	r2, [pc, #516]	@ (80032e8 <HAL_I2C_Init+0x274>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d807      	bhi.n	80030f8 <HAL_I2C_Init+0x84>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4a80      	ldr	r2, [pc, #512]	@ (80032ec <HAL_I2C_Init+0x278>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	bf94      	ite	ls
 80030f0:	2301      	movls	r3, #1
 80030f2:	2300      	movhi	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	e006      	b.n	8003106 <HAL_I2C_Init+0x92>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4a7d      	ldr	r2, [pc, #500]	@ (80032f0 <HAL_I2C_Init+0x27c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	bf94      	ite	ls
 8003100:	2301      	movls	r3, #1
 8003102:	2300      	movhi	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e0e7      	b.n	80032de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4a78      	ldr	r2, [pc, #480]	@ (80032f4 <HAL_I2C_Init+0x280>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	0c9b      	lsrs	r3, r3, #18
 8003118:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	4a6a      	ldr	r2, [pc, #424]	@ (80032e8 <HAL_I2C_Init+0x274>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d802      	bhi.n	8003148 <HAL_I2C_Init+0xd4>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	3301      	adds	r3, #1
 8003146:	e009      	b.n	800315c <HAL_I2C_Init+0xe8>
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800314e:	fb02 f303 	mul.w	r3, r2, r3
 8003152:	4a69      	ldr	r2, [pc, #420]	@ (80032f8 <HAL_I2C_Init+0x284>)
 8003154:	fba2 2303 	umull	r2, r3, r2, r3
 8003158:	099b      	lsrs	r3, r3, #6
 800315a:	3301      	adds	r3, #1
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	430b      	orrs	r3, r1
 8003162:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800316e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	495c      	ldr	r1, [pc, #368]	@ (80032e8 <HAL_I2C_Init+0x274>)
 8003178:	428b      	cmp	r3, r1
 800317a:	d819      	bhi.n	80031b0 <HAL_I2C_Init+0x13c>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1e59      	subs	r1, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	fbb1 f3f3 	udiv	r3, r1, r3
 800318a:	1c59      	adds	r1, r3, #1
 800318c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003190:	400b      	ands	r3, r1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <HAL_I2C_Init+0x138>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1e59      	subs	r1, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80031a4:	3301      	adds	r3, #1
 80031a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031aa:	e051      	b.n	8003250 <HAL_I2C_Init+0x1dc>
 80031ac:	2304      	movs	r3, #4
 80031ae:	e04f      	b.n	8003250 <HAL_I2C_Init+0x1dc>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d111      	bne.n	80031dc <HAL_I2C_Init+0x168>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1e58      	subs	r0, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6859      	ldr	r1, [r3, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	440b      	add	r3, r1
 80031c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ca:	3301      	adds	r3, #1
 80031cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	bf0c      	ite	eq
 80031d4:	2301      	moveq	r3, #1
 80031d6:	2300      	movne	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	e012      	b.n	8003202 <HAL_I2C_Init+0x18e>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1e58      	subs	r0, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	0099      	lsls	r1, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f2:	3301      	adds	r3, #1
 80031f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf0c      	ite	eq
 80031fc:	2301      	moveq	r3, #1
 80031fe:	2300      	movne	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_I2C_Init+0x196>
 8003206:	2301      	movs	r3, #1
 8003208:	e022      	b.n	8003250 <HAL_I2C_Init+0x1dc>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10e      	bne.n	8003230 <HAL_I2C_Init+0x1bc>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1e58      	subs	r0, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6859      	ldr	r1, [r3, #4]
 800321a:	460b      	mov	r3, r1
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	440b      	add	r3, r1
 8003220:	fbb0 f3f3 	udiv	r3, r0, r3
 8003224:	3301      	adds	r3, #1
 8003226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800322e:	e00f      	b.n	8003250 <HAL_I2C_Init+0x1dc>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	1e58      	subs	r0, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6859      	ldr	r1, [r3, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	0099      	lsls	r1, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	fbb0 f3f3 	udiv	r3, r0, r3
 8003246:	3301      	adds	r3, #1
 8003248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800324c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	6809      	ldr	r1, [r1, #0]
 8003254:	4313      	orrs	r3, r2
 8003256:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69da      	ldr	r2, [r3, #28]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800327e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6911      	ldr	r1, [r2, #16]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68d2      	ldr	r2, [r2, #12]
 800328a:	4311      	orrs	r1, r2
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6812      	ldr	r2, [r2, #0]
 8003290:	430b      	orrs	r3, r1
 8003292:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695a      	ldr	r2, [r3, #20]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	000186a0 	.word	0x000186a0
 80032ec:	001e847f 	.word	0x001e847f
 80032f0:	003d08ff 	.word	0x003d08ff
 80032f4:	431bde83 	.word	0x431bde83
 80032f8:	10624dd3 	.word	0x10624dd3

080032fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e267      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d075      	beq.n	8003406 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800331a:	4b88      	ldr	r3, [pc, #544]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	2b04      	cmp	r3, #4
 8003324:	d00c      	beq.n	8003340 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003326:	4b85      	ldr	r3, [pc, #532]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800332e:	2b08      	cmp	r3, #8
 8003330:	d112      	bne.n	8003358 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003332:	4b82      	ldr	r3, [pc, #520]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800333a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800333e:	d10b      	bne.n	8003358 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003340:	4b7e      	ldr	r3, [pc, #504]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d05b      	beq.n	8003404 <HAL_RCC_OscConfig+0x108>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d157      	bne.n	8003404 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e242      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003360:	d106      	bne.n	8003370 <HAL_RCC_OscConfig+0x74>
 8003362:	4b76      	ldr	r3, [pc, #472]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a75      	ldr	r2, [pc, #468]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003368:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	e01d      	b.n	80033ac <HAL_RCC_OscConfig+0xb0>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003378:	d10c      	bne.n	8003394 <HAL_RCC_OscConfig+0x98>
 800337a:	4b70      	ldr	r3, [pc, #448]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a6f      	ldr	r2, [pc, #444]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003380:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	4b6d      	ldr	r3, [pc, #436]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a6c      	ldr	r2, [pc, #432]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 800338c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	e00b      	b.n	80033ac <HAL_RCC_OscConfig+0xb0>
 8003394:	4b69      	ldr	r3, [pc, #420]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a68      	ldr	r2, [pc, #416]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 800339a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	4b66      	ldr	r3, [pc, #408]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a65      	ldr	r2, [pc, #404]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 80033a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d013      	beq.n	80033dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b4:	f7fe fb8c 	bl	8001ad0 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033bc:	f7fe fb88 	bl	8001ad0 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	@ 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e207      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ce:	4b5b      	ldr	r3, [pc, #364]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0xc0>
 80033da:	e014      	b.n	8003406 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033dc:	f7fe fb78 	bl	8001ad0 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033e4:	f7fe fb74 	bl	8001ad0 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	@ 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e1f3      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f6:	4b51      	ldr	r3, [pc, #324]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0xe8>
 8003402:	e000      	b.n	8003406 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d063      	beq.n	80034da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003412:	4b4a      	ldr	r3, [pc, #296]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 030c 	and.w	r3, r3, #12
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00b      	beq.n	8003436 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800341e:	4b47      	ldr	r3, [pc, #284]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003426:	2b08      	cmp	r3, #8
 8003428:	d11c      	bne.n	8003464 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342a:	4b44      	ldr	r3, [pc, #272]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d116      	bne.n	8003464 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003436:	4b41      	ldr	r3, [pc, #260]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d005      	beq.n	800344e <HAL_RCC_OscConfig+0x152>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d001      	beq.n	800344e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e1c7      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344e:	4b3b      	ldr	r3, [pc, #236]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4937      	ldr	r1, [pc, #220]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 800345e:	4313      	orrs	r3, r2
 8003460:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003462:	e03a      	b.n	80034da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d020      	beq.n	80034ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800346c:	4b34      	ldr	r3, [pc, #208]	@ (8003540 <HAL_RCC_OscConfig+0x244>)
 800346e:	2201      	movs	r2, #1
 8003470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003472:	f7fe fb2d 	bl	8001ad0 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800347a:	f7fe fb29 	bl	8001ad0 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e1a8      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348c:	4b2b      	ldr	r3, [pc, #172]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003498:	4b28      	ldr	r3, [pc, #160]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4925      	ldr	r1, [pc, #148]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	600b      	str	r3, [r1, #0]
 80034ac:	e015      	b.n	80034da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ae:	4b24      	ldr	r3, [pc, #144]	@ (8003540 <HAL_RCC_OscConfig+0x244>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fe fb0c 	bl	8001ad0 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034bc:	f7fe fb08 	bl	8001ad0 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e187      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ce:	4b1b      	ldr	r3, [pc, #108]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d036      	beq.n	8003554 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d016      	beq.n	800351c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ee:	4b15      	ldr	r3, [pc, #84]	@ (8003544 <HAL_RCC_OscConfig+0x248>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fe faec 	bl	8001ad0 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034fc:	f7fe fae8 	bl	8001ad0 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e167      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350e:	4b0b      	ldr	r3, [pc, #44]	@ (800353c <HAL_RCC_OscConfig+0x240>)
 8003510:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0x200>
 800351a:	e01b      	b.n	8003554 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351c:	4b09      	ldr	r3, [pc, #36]	@ (8003544 <HAL_RCC_OscConfig+0x248>)
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003522:	f7fe fad5 	bl	8001ad0 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003528:	e00e      	b.n	8003548 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800352a:	f7fe fad1 	bl	8001ad0 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d907      	bls.n	8003548 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e150      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
 800353c:	40023800 	.word	0x40023800
 8003540:	42470000 	.word	0x42470000
 8003544:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003548:	4b88      	ldr	r3, [pc, #544]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 800354a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1ea      	bne.n	800352a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 8097 	beq.w	8003690 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003562:	2300      	movs	r3, #0
 8003564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003566:	4b81      	ldr	r3, [pc, #516]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10f      	bne.n	8003592 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	4b7d      	ldr	r3, [pc, #500]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357a:	4a7c      	ldr	r2, [pc, #496]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 800357c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003580:	6413      	str	r3, [r2, #64]	@ 0x40
 8003582:	4b7a      	ldr	r3, [pc, #488]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358e:	2301      	movs	r3, #1
 8003590:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003592:	4b77      	ldr	r3, [pc, #476]	@ (8003770 <HAL_RCC_OscConfig+0x474>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d118      	bne.n	80035d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800359e:	4b74      	ldr	r3, [pc, #464]	@ (8003770 <HAL_RCC_OscConfig+0x474>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a73      	ldr	r2, [pc, #460]	@ (8003770 <HAL_RCC_OscConfig+0x474>)
 80035a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035aa:	f7fe fa91 	bl	8001ad0 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b2:	f7fe fa8d 	bl	8001ad0 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e10c      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003770 <HAL_RCC_OscConfig+0x474>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d106      	bne.n	80035e6 <HAL_RCC_OscConfig+0x2ea>
 80035d8:	4b64      	ldr	r3, [pc, #400]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 80035da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035dc:	4a63      	ldr	r2, [pc, #396]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80035e4:	e01c      	b.n	8003620 <HAL_RCC_OscConfig+0x324>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b05      	cmp	r3, #5
 80035ec:	d10c      	bne.n	8003608 <HAL_RCC_OscConfig+0x30c>
 80035ee:	4b5f      	ldr	r3, [pc, #380]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035f2:	4a5e      	ldr	r2, [pc, #376]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 80035f4:	f043 0304 	orr.w	r3, r3, #4
 80035f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80035fa:	4b5c      	ldr	r3, [pc, #368]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035fe:	4a5b      	ldr	r2, [pc, #364]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	6713      	str	r3, [r2, #112]	@ 0x70
 8003606:	e00b      	b.n	8003620 <HAL_RCC_OscConfig+0x324>
 8003608:	4b58      	ldr	r3, [pc, #352]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 800360a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800360c:	4a57      	ldr	r2, [pc, #348]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 800360e:	f023 0301 	bic.w	r3, r3, #1
 8003612:	6713      	str	r3, [r2, #112]	@ 0x70
 8003614:	4b55      	ldr	r3, [pc, #340]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003618:	4a54      	ldr	r2, [pc, #336]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 800361a:	f023 0304 	bic.w	r3, r3, #4
 800361e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d015      	beq.n	8003654 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7fe fa52 	bl	8001ad0 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362e:	e00a      	b.n	8003646 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003630:	f7fe fa4e 	bl	8001ad0 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800363e:	4293      	cmp	r3, r2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e0cb      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003646:	4b49      	ldr	r3, [pc, #292]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0ee      	beq.n	8003630 <HAL_RCC_OscConfig+0x334>
 8003652:	e014      	b.n	800367e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003654:	f7fe fa3c 	bl	8001ad0 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365a:	e00a      	b.n	8003672 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7fe fa38 	bl	8001ad0 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	@ 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e0b5      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003672:	4b3e      	ldr	r3, [pc, #248]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1ee      	bne.n	800365c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800367e:	7dfb      	ldrb	r3, [r7, #23]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d105      	bne.n	8003690 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003684:	4b39      	ldr	r3, [pc, #228]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 8003686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003688:	4a38      	ldr	r2, [pc, #224]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 800368a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800368e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80a1 	beq.w	80037dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800369a:	4b34      	ldr	r3, [pc, #208]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d05c      	beq.n	8003760 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d141      	bne.n	8003732 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ae:	4b31      	ldr	r3, [pc, #196]	@ (8003774 <HAL_RCC_OscConfig+0x478>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b4:	f7fe fa0c 	bl	8001ad0 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036bc:	f7fe fa08 	bl	8001ad0 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e087      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ce:	4b27      	ldr	r3, [pc, #156]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69da      	ldr	r2, [r3, #28]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e8:	019b      	lsls	r3, r3, #6
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f0:	085b      	lsrs	r3, r3, #1
 80036f2:	3b01      	subs	r3, #1
 80036f4:	041b      	lsls	r3, r3, #16
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fc:	061b      	lsls	r3, r3, #24
 80036fe:	491b      	ldr	r1, [pc, #108]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 8003700:	4313      	orrs	r3, r2
 8003702:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003704:	4b1b      	ldr	r3, [pc, #108]	@ (8003774 <HAL_RCC_OscConfig+0x478>)
 8003706:	2201      	movs	r2, #1
 8003708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370a:	f7fe f9e1 	bl	8001ad0 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003712:	f7fe f9dd 	bl	8001ad0 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e05c      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003724:	4b11      	ldr	r3, [pc, #68]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d0f0      	beq.n	8003712 <HAL_RCC_OscConfig+0x416>
 8003730:	e054      	b.n	80037dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003732:	4b10      	ldr	r3, [pc, #64]	@ (8003774 <HAL_RCC_OscConfig+0x478>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003738:	f7fe f9ca 	bl	8001ad0 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003740:	f7fe f9c6 	bl	8001ad0 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e045      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003752:	4b06      	ldr	r3, [pc, #24]	@ (800376c <HAL_RCC_OscConfig+0x470>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0x444>
 800375e:	e03d      	b.n	80037dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d107      	bne.n	8003778 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e038      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
 800376c:	40023800 	.word	0x40023800
 8003770:	40007000 	.word	0x40007000
 8003774:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003778:	4b1b      	ldr	r3, [pc, #108]	@ (80037e8 <HAL_RCC_OscConfig+0x4ec>)
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d028      	beq.n	80037d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003790:	429a      	cmp	r2, r3
 8003792:	d121      	bne.n	80037d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800379e:	429a      	cmp	r2, r3
 80037a0:	d11a      	bne.n	80037d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80037a8:	4013      	ands	r3, r2
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80037ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d111      	bne.n	80037d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037be:	085b      	lsrs	r3, r3, #1
 80037c0:	3b01      	subs	r3, #1
 80037c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d107      	bne.n	80037d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d001      	beq.n	80037dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800

080037ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e0cc      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003800:	4b68      	ldr	r3, [pc, #416]	@ (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d90c      	bls.n	8003828 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380e:	4b65      	ldr	r3, [pc, #404]	@ (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003816:	4b63      	ldr	r3, [pc, #396]	@ (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	683a      	ldr	r2, [r7, #0]
 8003820:	429a      	cmp	r2, r3
 8003822:	d001      	beq.n	8003828 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0b8      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d020      	beq.n	8003876 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003840:	4b59      	ldr	r3, [pc, #356]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	4a58      	ldr	r2, [pc, #352]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800384a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0308 	and.w	r3, r3, #8
 8003854:	2b00      	cmp	r3, #0
 8003856:	d005      	beq.n	8003864 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003858:	4b53      	ldr	r3, [pc, #332]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4a52      	ldr	r2, [pc, #328]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800385e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003862:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003864:	4b50      	ldr	r3, [pc, #320]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	494d      	ldr	r1, [pc, #308]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	4313      	orrs	r3, r2
 8003874:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0301 	and.w	r3, r3, #1
 800387e:	2b00      	cmp	r3, #0
 8003880:	d044      	beq.n	800390c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d107      	bne.n	800389a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388a:	4b47      	ldr	r3, [pc, #284]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d119      	bne.n	80038ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e07f      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d003      	beq.n	80038aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	d107      	bne.n	80038ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038aa:	4b3f      	ldr	r3, [pc, #252]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e06f      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ba:	4b3b      	ldr	r3, [pc, #236]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e067      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ca:	4b37      	ldr	r3, [pc, #220]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f023 0203 	bic.w	r2, r3, #3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4934      	ldr	r1, [pc, #208]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038dc:	f7fe f8f8 	bl	8001ad0 <HAL_GetTick>
 80038e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	e00a      	b.n	80038fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038e4:	f7fe f8f4 	bl	8001ad0 <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e04f      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038fa:	4b2b      	ldr	r3, [pc, #172]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f003 020c 	and.w	r2, r3, #12
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	429a      	cmp	r2, r3
 800390a:	d1eb      	bne.n	80038e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800390c:	4b25      	ldr	r3, [pc, #148]	@ (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0307 	and.w	r3, r3, #7
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d20c      	bcs.n	8003934 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391a:	4b22      	ldr	r3, [pc, #136]	@ (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	b2d2      	uxtb	r2, r2
 8003920:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003922:	4b20      	ldr	r3, [pc, #128]	@ (80039a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	683a      	ldr	r2, [r7, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d001      	beq.n	8003934 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e032      	b.n	800399a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d008      	beq.n	8003952 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003940:	4b19      	ldr	r3, [pc, #100]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4916      	ldr	r1, [pc, #88]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	4313      	orrs	r3, r2
 8003950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0308 	and.w	r3, r3, #8
 800395a:	2b00      	cmp	r3, #0
 800395c:	d009      	beq.n	8003972 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800395e:	4b12      	ldr	r3, [pc, #72]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	490e      	ldr	r1, [pc, #56]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	4313      	orrs	r3, r2
 8003970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003972:	f000 f821 	bl	80039b8 <HAL_RCC_GetSysClockFreq>
 8003976:	4602      	mov	r2, r0
 8003978:	4b0b      	ldr	r3, [pc, #44]	@ (80039a8 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	490a      	ldr	r1, [pc, #40]	@ (80039ac <HAL_RCC_ClockConfig+0x1c0>)
 8003984:	5ccb      	ldrb	r3, [r1, r3]
 8003986:	fa22 f303 	lsr.w	r3, r2, r3
 800398a:	4a09      	ldr	r2, [pc, #36]	@ (80039b0 <HAL_RCC_ClockConfig+0x1c4>)
 800398c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800398e:	4b09      	ldr	r3, [pc, #36]	@ (80039b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7fd ff32 	bl	80017fc <HAL_InitTick>

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40023c00 	.word	0x40023c00
 80039a8:	40023800 	.word	0x40023800
 80039ac:	08006e34 	.word	0x08006e34
 80039b0:	20000004 	.word	0x20000004
 80039b4:	20000008 	.word	0x20000008

080039b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039bc:	b094      	sub	sp, #80	@ 0x50
 80039be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	647b      	str	r3, [r7, #68]	@ 0x44
 80039c4:	2300      	movs	r3, #0
 80039c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039c8:	2300      	movs	r3, #0
 80039ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039d0:	4b79      	ldr	r3, [pc, #484]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 030c 	and.w	r3, r3, #12
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d00d      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0x40>
 80039dc:	2b08      	cmp	r3, #8
 80039de:	f200 80e1 	bhi.w	8003ba4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <HAL_RCC_GetSysClockFreq+0x34>
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d003      	beq.n	80039f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80039ea:	e0db      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039ec:	4b73      	ldr	r3, [pc, #460]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0x204>)
 80039ee:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80039f0:	e0db      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039f2:	4b73      	ldr	r3, [pc, #460]	@ (8003bc0 <HAL_RCC_GetSysClockFreq+0x208>)
 80039f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80039f6:	e0d8      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039f8:	4b6f      	ldr	r3, [pc, #444]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a00:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a02:	4b6d      	ldr	r3, [pc, #436]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d063      	beq.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a0e:	4b6a      	ldr	r3, [pc, #424]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	099b      	lsrs	r3, r3, #6
 8003a14:	2200      	movs	r2, #0
 8003a16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a18:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a20:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a22:	2300      	movs	r3, #0
 8003a24:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003a2a:	4622      	mov	r2, r4
 8003a2c:	462b      	mov	r3, r5
 8003a2e:	f04f 0000 	mov.w	r0, #0
 8003a32:	f04f 0100 	mov.w	r1, #0
 8003a36:	0159      	lsls	r1, r3, #5
 8003a38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a3c:	0150      	lsls	r0, r2, #5
 8003a3e:	4602      	mov	r2, r0
 8003a40:	460b      	mov	r3, r1
 8003a42:	4621      	mov	r1, r4
 8003a44:	1a51      	subs	r1, r2, r1
 8003a46:	6139      	str	r1, [r7, #16]
 8003a48:	4629      	mov	r1, r5
 8003a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8003a4e:	617b      	str	r3, [r7, #20]
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a5c:	4659      	mov	r1, fp
 8003a5e:	018b      	lsls	r3, r1, #6
 8003a60:	4651      	mov	r1, sl
 8003a62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a66:	4651      	mov	r1, sl
 8003a68:	018a      	lsls	r2, r1, #6
 8003a6a:	4651      	mov	r1, sl
 8003a6c:	ebb2 0801 	subs.w	r8, r2, r1
 8003a70:	4659      	mov	r1, fp
 8003a72:	eb63 0901 	sbc.w	r9, r3, r1
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a8a:	4690      	mov	r8, r2
 8003a8c:	4699      	mov	r9, r3
 8003a8e:	4623      	mov	r3, r4
 8003a90:	eb18 0303 	adds.w	r3, r8, r3
 8003a94:	60bb      	str	r3, [r7, #8]
 8003a96:	462b      	mov	r3, r5
 8003a98:	eb49 0303 	adc.w	r3, r9, r3
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	f04f 0300 	mov.w	r3, #0
 8003aa6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003aaa:	4629      	mov	r1, r5
 8003aac:	024b      	lsls	r3, r1, #9
 8003aae:	4621      	mov	r1, r4
 8003ab0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ab4:	4621      	mov	r1, r4
 8003ab6:	024a      	lsls	r2, r1, #9
 8003ab8:	4610      	mov	r0, r2
 8003aba:	4619      	mov	r1, r3
 8003abc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003abe:	2200      	movs	r2, #0
 8003ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ac2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ac4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003ac8:	f7fc fb8a 	bl	80001e0 <__aeabi_uldivmod>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ad4:	e058      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad6:	4b38      	ldr	r3, [pc, #224]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	099b      	lsrs	r3, r3, #6
 8003adc:	2200      	movs	r2, #0
 8003ade:	4618      	mov	r0, r3
 8003ae0:	4611      	mov	r1, r2
 8003ae2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ae6:	623b      	str	r3, [r7, #32]
 8003ae8:	2300      	movs	r3, #0
 8003aea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003af0:	4642      	mov	r2, r8
 8003af2:	464b      	mov	r3, r9
 8003af4:	f04f 0000 	mov.w	r0, #0
 8003af8:	f04f 0100 	mov.w	r1, #0
 8003afc:	0159      	lsls	r1, r3, #5
 8003afe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b02:	0150      	lsls	r0, r2, #5
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4641      	mov	r1, r8
 8003b0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b0e:	4649      	mov	r1, r9
 8003b10:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	f04f 0300 	mov.w	r3, #0
 8003b1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003b20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003b24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003b28:	ebb2 040a 	subs.w	r4, r2, sl
 8003b2c:	eb63 050b 	sbc.w	r5, r3, fp
 8003b30:	f04f 0200 	mov.w	r2, #0
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	00eb      	lsls	r3, r5, #3
 8003b3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b3e:	00e2      	lsls	r2, r4, #3
 8003b40:	4614      	mov	r4, r2
 8003b42:	461d      	mov	r5, r3
 8003b44:	4643      	mov	r3, r8
 8003b46:	18e3      	adds	r3, r4, r3
 8003b48:	603b      	str	r3, [r7, #0]
 8003b4a:	464b      	mov	r3, r9
 8003b4c:	eb45 0303 	adc.w	r3, r5, r3
 8003b50:	607b      	str	r3, [r7, #4]
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	f04f 0300 	mov.w	r3, #0
 8003b5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b5e:	4629      	mov	r1, r5
 8003b60:	028b      	lsls	r3, r1, #10
 8003b62:	4621      	mov	r1, r4
 8003b64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b68:	4621      	mov	r1, r4
 8003b6a:	028a      	lsls	r2, r1, #10
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	4619      	mov	r1, r3
 8003b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b72:	2200      	movs	r2, #0
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	61fa      	str	r2, [r7, #28]
 8003b78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b7c:	f7fc fb30 	bl	80001e0 <__aeabi_uldivmod>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4613      	mov	r3, r2
 8003b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b88:	4b0b      	ldr	r3, [pc, #44]	@ (8003bb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	0c1b      	lsrs	r3, r3, #16
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	3301      	adds	r3, #1
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003b98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003b9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ba2:	e002      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ba4:	4b05      	ldr	r3, [pc, #20]	@ (8003bbc <HAL_RCC_GetSysClockFreq+0x204>)
 8003ba6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003baa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3750      	adds	r7, #80	@ 0x50
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	00f42400 	.word	0x00f42400
 8003bc0:	007a1200 	.word	0x007a1200

08003bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc8:	4b03      	ldr	r3, [pc, #12]	@ (8003bd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bca:	681b      	ldr	r3, [r3, #0]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20000004 	.word	0x20000004

08003bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003be0:	f7ff fff0 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003be4:	4602      	mov	r2, r0
 8003be6:	4b05      	ldr	r3, [pc, #20]	@ (8003bfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	0a9b      	lsrs	r3, r3, #10
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	4903      	ldr	r1, [pc, #12]	@ (8003c00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bf2:	5ccb      	ldrb	r3, [r1, r3]
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	08006e44 	.word	0x08006e44

08003c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c08:	f7ff ffdc 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	4b05      	ldr	r3, [pc, #20]	@ (8003c24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	0b5b      	lsrs	r3, r3, #13
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	4903      	ldr	r1, [pc, #12]	@ (8003c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c1a:	5ccb      	ldrb	r3, [r1, r3]
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40023800 	.word	0x40023800
 8003c28:	08006e44 	.word	0x08006e44

08003c2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	220f      	movs	r2, #15
 8003c3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c3c:	4b12      	ldr	r3, [pc, #72]	@ (8003c88 <HAL_RCC_GetClockConfig+0x5c>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 0203 	and.w	r2, r3, #3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c48:	4b0f      	ldr	r3, [pc, #60]	@ (8003c88 <HAL_RCC_GetClockConfig+0x5c>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c54:	4b0c      	ldr	r3, [pc, #48]	@ (8003c88 <HAL_RCC_GetClockConfig+0x5c>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c60:	4b09      	ldr	r3, [pc, #36]	@ (8003c88 <HAL_RCC_GetClockConfig+0x5c>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	08db      	lsrs	r3, r3, #3
 8003c66:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c6e:	4b07      	ldr	r3, [pc, #28]	@ (8003c8c <HAL_RCC_GetClockConfig+0x60>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0207 	and.w	r2, r3, #7
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	601a      	str	r2, [r3, #0]
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	40023c00 	.word	0x40023c00

08003c90 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b086      	sub	sp, #24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d105      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d035      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003cb8:	4b67      	ldr	r3, [pc, #412]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cbe:	f7fd ff07 	bl	8001ad0 <HAL_GetTick>
 8003cc2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cc6:	f7fd ff03 	bl	8001ad0 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e0ba      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cd8:	4b60      	ldr	r3, [pc, #384]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1f0      	bne.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	019a      	lsls	r2, r3, #6
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	071b      	lsls	r3, r3, #28
 8003cf0:	495a      	ldr	r1, [pc, #360]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cf8:	4b57      	ldr	r3, [pc, #348]	@ (8003e58 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cfe:	f7fd fee7 	bl	8001ad0 <HAL_GetTick>
 8003d02:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d04:	e008      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d06:	f7fd fee3 	bl	8001ad0 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e09a      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d18:	4b50      	ldr	r3, [pc, #320]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f000 8083 	beq.w	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
 8003d36:	4b49      	ldr	r3, [pc, #292]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	4a48      	ldr	r2, [pc, #288]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d40:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d42:	4b46      	ldr	r3, [pc, #280]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d4a:	60fb      	str	r3, [r7, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d4e:	4b44      	ldr	r3, [pc, #272]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a43      	ldr	r2, [pc, #268]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d5a:	f7fd feb9 	bl	8001ad0 <HAL_GetTick>
 8003d5e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d60:	e008      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d62:	f7fd feb5 	bl	8001ad0 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e06c      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d74:	4b3a      	ldr	r3, [pc, #232]	@ (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0f0      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d80:	4b36      	ldr	r3, [pc, #216]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d88:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d02f      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d028      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003da6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003da8:	4b2e      	ldr	r3, [pc, #184]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dae:	4b2d      	ldr	r3, [pc, #180]	@ (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003db4:	4a29      	ldr	r2, [pc, #164]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003dba:	4b28      	ldr	r3, [pc, #160]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d114      	bne.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003dc6:	f7fd fe83 	bl	8001ad0 <HAL_GetTick>
 8003dca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dcc:	e00a      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dce:	f7fd fe7f 	bl	8001ad0 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e034      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0ee      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003df8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dfc:	d10d      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003dfe:	4b17      	ldr	r3, [pc, #92]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003e0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e12:	4912      	ldr	r1, [pc, #72]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	608b      	str	r3, [r1, #8]
 8003e18:	e005      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003e1a:	4b10      	ldr	r3, [pc, #64]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	4a0f      	ldr	r2, [pc, #60]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e20:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003e24:	6093      	str	r3, [r2, #8]
 8003e26:	4b0d      	ldr	r3, [pc, #52]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e28:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e32:	490a      	ldr	r1, [pc, #40]	@ (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	7c1a      	ldrb	r2, [r3, #16]
 8003e48:	4b07      	ldr	r3, [pc, #28]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e4a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	42470068 	.word	0x42470068
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	40007000 	.word	0x40007000
 8003e64:	42470e40 	.word	0x42470e40
 8003e68:	424711e0 	.word	0x424711e0

08003e6c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e073      	b.n	8003f6a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	7f5b      	ldrb	r3, [r3, #29]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d105      	bne.n	8003e98 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fd fbf6 	bl	8001684 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f003 0310 	and.w	r3, r3, #16
 8003ea8:	2b10      	cmp	r3, #16
 8003eaa:	d055      	beq.n	8003f58 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	22ca      	movs	r2, #202	@ 0xca
 8003eb2:	625a      	str	r2, [r3, #36]	@ 0x24
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2253      	movs	r2, #83	@ 0x53
 8003eba:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f99d 	bl	80041fc <RTC_EnterInitMode>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d12c      	bne.n	8003f26 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6812      	ldr	r2, [r2, #0]
 8003ed6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003eda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ede:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6899      	ldr	r1, [r3, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685a      	ldr	r2, [r3, #4]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	431a      	orrs	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	68d2      	ldr	r2, [r2, #12]
 8003f06:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6919      	ldr	r1, [r3, #16]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	041a      	lsls	r2, r3, #16
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 f9a4 	bl	800426a <RTC_ExitInitMode>
 8003f22:	4603      	mov	r3, r0
 8003f24:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003f26:	7bfb      	ldrb	r3, [r7, #15]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d110      	bne.n	8003f4e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f3a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699a      	ldr	r2, [r3, #24]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	22ff      	movs	r2, #255	@ 0xff
 8003f54:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f56:	e001      	b.n	8003f5c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d102      	bne.n	8003f68 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2201      	movs	r2, #1
 8003f66:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f72:	b590      	push	{r4, r7, lr}
 8003f74:	b087      	sub	sp, #28
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	60f8      	str	r0, [r7, #12]
 8003f7a:	60b9      	str	r1, [r7, #8]
 8003f7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	7f1b      	ldrb	r3, [r3, #28]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_RTC_SetTime+0x1c>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e087      	b.n	800409e <HAL_RTC_SetTime+0x12c>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2202      	movs	r2, #2
 8003f98:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d126      	bne.n	8003fee <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d102      	bne.n	8003fb4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 f97b 	bl	80042b4 <RTC_ByteToBcd2>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	785b      	ldrb	r3, [r3, #1]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 f974 	bl	80042b4 <RTC_ByteToBcd2>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003fd0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	789b      	ldrb	r3, [r3, #2]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f000 f96c 	bl	80042b4 <RTC_ByteToBcd2>
 8003fdc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003fde:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	78db      	ldrb	r3, [r3, #3]
 8003fe6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	e018      	b.n	8004020 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d102      	bne.n	8004002 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2200      	movs	r2, #0
 8004000:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	785b      	ldrb	r3, [r3, #1]
 800400c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800400e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004014:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	78db      	ldrb	r3, [r3, #3]
 800401a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	22ca      	movs	r2, #202	@ 0xca
 8004026:	625a      	str	r2, [r3, #36]	@ 0x24
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2253      	movs	r2, #83	@ 0x53
 800402e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004030:	68f8      	ldr	r0, [r7, #12]
 8004032:	f000 f8e3 	bl	80041fc <RTC_EnterInitMode>
 8004036:	4603      	mov	r3, r0
 8004038:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800403a:	7cfb      	ldrb	r3, [r7, #19]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d120      	bne.n	8004082 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 800404a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800404e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800405e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6899      	ldr	r1, [r3, #8]
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	431a      	orrs	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 f8f6 	bl	800426a <RTC_ExitInitMode>
 800407e:	4603      	mov	r3, r0
 8004080:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004082:	7cfb      	ldrb	r3, [r7, #19]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d102      	bne.n	800408e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2201      	movs	r2, #1
 800408c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	22ff      	movs	r2, #255	@ 0xff
 8004094:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	771a      	strb	r2, [r3, #28]

  return status;
 800409c:	7cfb      	ldrb	r3, [r7, #19]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd90      	pop	{r4, r7, pc}

080040a6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80040a6:	b590      	push	{r4, r7, lr}
 80040a8:	b087      	sub	sp, #28
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	7f1b      	ldrb	r3, [r3, #28]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_RTC_SetDate+0x1c>
 80040be:	2302      	movs	r3, #2
 80040c0:	e071      	b.n	80041a6 <HAL_RTC_SetDate+0x100>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2201      	movs	r2, #1
 80040c6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2202      	movs	r2, #2
 80040cc:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10e      	bne.n	80040f2 <HAL_RTC_SetDate+0x4c>
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	785b      	ldrb	r3, [r3, #1]
 80040d8:	f003 0310 	and.w	r3, r3, #16
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d008      	beq.n	80040f2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	785b      	ldrb	r3, [r3, #1]
 80040e4:	f023 0310 	bic.w	r3, r3, #16
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	330a      	adds	r3, #10
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d11c      	bne.n	8004132 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	78db      	ldrb	r3, [r3, #3]
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 f8d9 	bl	80042b4 <RTC_ByteToBcd2>
 8004102:	4603      	mov	r3, r0
 8004104:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	785b      	ldrb	r3, [r3, #1]
 800410a:	4618      	mov	r0, r3
 800410c:	f000 f8d2 	bl	80042b4 <RTC_ByteToBcd2>
 8004110:	4603      	mov	r3, r0
 8004112:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004114:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	789b      	ldrb	r3, [r3, #2]
 800411a:	4618      	mov	r0, r3
 800411c:	f000 f8ca 	bl	80042b4 <RTC_ByteToBcd2>
 8004120:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004122:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	e00e      	b.n	8004150 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	78db      	ldrb	r3, [r3, #3]
 8004136:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	785b      	ldrb	r3, [r3, #1]
 800413c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800413e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004140:	68ba      	ldr	r2, [r7, #8]
 8004142:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004144:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	22ca      	movs	r2, #202	@ 0xca
 8004156:	625a      	str	r2, [r3, #36]	@ 0x24
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2253      	movs	r2, #83	@ 0x53
 800415e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f84b 	bl	80041fc <RTC_EnterInitMode>
 8004166:	4603      	mov	r3, r0
 8004168:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800416a:	7cfb      	ldrb	r3, [r7, #19]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10c      	bne.n	800418a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800417a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800417e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f000 f872 	bl	800426a <RTC_ExitInitMode>
 8004186:	4603      	mov	r3, r0
 8004188:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800418a:	7cfb      	ldrb	r3, [r7, #19]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d102      	bne.n	8004196 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2201      	movs	r2, #1
 8004194:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	22ff      	movs	r2, #255	@ 0xff
 800419c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	771a      	strb	r2, [r3, #28]

  return status;
 80041a4:	7cfb      	ldrb	r3, [r7, #19]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd90      	pop	{r4, r7, pc}
	...

080041b0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a0d      	ldr	r2, [pc, #52]	@ (80041f8 <HAL_RTC_WaitForSynchro+0x48>)
 80041c2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80041c4:	f7fd fc84 	bl	8001ad0 <HAL_GetTick>
 80041c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80041ca:	e009      	b.n	80041e0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80041cc:	f7fd fc80 	bl	8001ad0 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041da:	d901      	bls.n	80041e0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e007      	b.n	80041f0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0ee      	beq.n	80041cc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	00013f5f 	.word	0x00013f5f

080041fc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004204:	2300      	movs	r3, #0
 8004206:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004208:	2300      	movs	r3, #0
 800420a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004216:	2b00      	cmp	r3, #0
 8004218:	d122      	bne.n	8004260 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004228:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800422a:	f7fd fc51 	bl	8001ad0 <HAL_GetTick>
 800422e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004230:	e00c      	b.n	800424c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004232:	f7fd fc4d 	bl	8001ad0 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004240:	d904      	bls.n	800424c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2204      	movs	r2, #4
 8004246:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d102      	bne.n	8004260 <RTC_EnterInitMode+0x64>
 800425a:	7bfb      	ldrb	r3, [r7, #15]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d1e8      	bne.n	8004232 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004260:	7bfb      	ldrb	r3, [r7, #15]
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004284:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 0320 	and.w	r3, r3, #32
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10a      	bne.n	80042aa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff ff8b 	bl	80041b0 <HAL_RTC_WaitForSynchro>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d004      	beq.n	80042aa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2204      	movs	r2, #4
 80042a4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80042aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3710      	adds	r7, #16
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b085      	sub	sp, #20
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	4603      	mov	r3, r0
 80042bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80042be:	2300      	movs	r3, #0
 80042c0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80042c2:	e005      	b.n	80042d0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	3301      	adds	r3, #1
 80042c8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80042ca:	79fb      	ldrb	r3, [r7, #7]
 80042cc:	3b0a      	subs	r3, #10
 80042ce:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80042d0:	79fb      	ldrb	r3, [r7, #7]
 80042d2:	2b09      	cmp	r3, #9
 80042d4:	d8f6      	bhi.n	80042c4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	011b      	lsls	r3, r3, #4
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	b2db      	uxtb	r3, r3
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e07b      	b.n	80043fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004306:	2b00      	cmp	r3, #0
 8004308:	d108      	bne.n	800431c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004312:	d009      	beq.n	8004328 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	61da      	str	r2, [r3, #28]
 800431a:	e005      	b.n	8004328 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7fd f9ca 	bl	80016dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2202      	movs	r2, #2
 800434c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800435e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ac:	ea42 0103 	orr.w	r1, r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	430a      	orrs	r2, r1
 80043be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	0c1b      	lsrs	r3, r3, #16
 80043c6:	f003 0104 	and.w	r1, r3, #4
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ce:	f003 0210 	and.w	r2, r3, #16
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	69da      	ldr	r2, [r3, #28]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b088      	sub	sp, #32
 8004406:	af00      	add	r7, sp, #0
 8004408:	60f8      	str	r0, [r7, #12]
 800440a:	60b9      	str	r1, [r7, #8]
 800440c:	603b      	str	r3, [r7, #0]
 800440e:	4613      	mov	r3, r2
 8004410:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004412:	2300      	movs	r3, #0
 8004414:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800441c:	2b01      	cmp	r3, #1
 800441e:	d101      	bne.n	8004424 <HAL_SPI_Transmit+0x22>
 8004420:	2302      	movs	r3, #2
 8004422:	e12d      	b.n	8004680 <HAL_SPI_Transmit+0x27e>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800442c:	f7fd fb50 	bl	8001ad0 <HAL_GetTick>
 8004430:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004432:	88fb      	ldrh	r3, [r7, #6]
 8004434:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b01      	cmp	r3, #1
 8004440:	d002      	beq.n	8004448 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004442:	2302      	movs	r3, #2
 8004444:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004446:	e116      	b.n	8004676 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_SPI_Transmit+0x52>
 800444e:	88fb      	ldrh	r3, [r7, #6]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d102      	bne.n	800445a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004458:	e10d      	b.n	8004676 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2203      	movs	r2, #3
 800445e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	88fa      	ldrh	r2, [r7, #6]
 8004472:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	88fa      	ldrh	r2, [r7, #6]
 8004478:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2200      	movs	r2, #0
 8004484:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044a0:	d10f      	bne.n	80044c2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044cc:	2b40      	cmp	r3, #64	@ 0x40
 80044ce:	d007      	beq.n	80044e0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044e8:	d14f      	bne.n	800458a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_SPI_Transmit+0xf6>
 80044f2:	8afb      	ldrh	r3, [r7, #22]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d142      	bne.n	800457e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fc:	881a      	ldrh	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004508:	1c9a      	adds	r2, r3, #2
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800451c:	e02f      	b.n	800457e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 0302 	and.w	r3, r3, #2
 8004528:	2b02      	cmp	r3, #2
 800452a:	d112      	bne.n	8004552 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004530:	881a      	ldrh	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800453c:	1c9a      	adds	r2, r3, #2
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004546:	b29b      	uxth	r3, r3
 8004548:	3b01      	subs	r3, #1
 800454a:	b29a      	uxth	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004550:	e015      	b.n	800457e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004552:	f7fd fabd 	bl	8001ad0 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	69bb      	ldr	r3, [r7, #24]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	429a      	cmp	r2, r3
 8004560:	d803      	bhi.n	800456a <HAL_SPI_Transmit+0x168>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004568:	d102      	bne.n	8004570 <HAL_SPI_Transmit+0x16e>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d106      	bne.n	800457e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800457c:	e07b      	b.n	8004676 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1ca      	bne.n	800451e <HAL_SPI_Transmit+0x11c>
 8004588:	e050      	b.n	800462c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <HAL_SPI_Transmit+0x196>
 8004592:	8afb      	ldrh	r3, [r7, #22]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d144      	bne.n	8004622 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	330c      	adds	r3, #12
 80045a2:	7812      	ldrb	r2, [r2, #0]
 80045a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045aa:	1c5a      	adds	r2, r3, #1
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80045be:	e030      	b.n	8004622 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d113      	bne.n	80045f6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	330c      	adds	r3, #12
 80045d8:	7812      	ldrb	r2, [r2, #0]
 80045da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80045f4:	e015      	b.n	8004622 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045f6:	f7fd fa6b 	bl	8001ad0 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	429a      	cmp	r2, r3
 8004604:	d803      	bhi.n	800460e <HAL_SPI_Transmit+0x20c>
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800460c:	d102      	bne.n	8004614 <HAL_SPI_Transmit+0x212>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d106      	bne.n	8004622 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004620:	e029      	b.n	8004676 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004626:	b29b      	uxth	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1c9      	bne.n	80045c0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	6839      	ldr	r1, [r7, #0]
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f000 fa61 	bl	8004af8 <SPI_EndRxTxTransaction>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d002      	beq.n	8004642 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2220      	movs	r2, #32
 8004640:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10a      	bne.n	8004660 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800464a:	2300      	movs	r3, #0
 800464c:	613b      	str	r3, [r7, #16]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	613b      	str	r3, [r7, #16]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	613b      	str	r3, [r7, #16]
 800465e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	77fb      	strb	r3, [r7, #31]
 800466c:	e003      	b.n	8004676 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800467e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3720      	adds	r7, #32
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b08c      	sub	sp, #48	@ 0x30
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004696:	2301      	movs	r3, #1
 8004698:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d101      	bne.n	80046ae <HAL_SPI_TransmitReceive+0x26>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e198      	b.n	80049e0 <HAL_SPI_TransmitReceive+0x358>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046b6:	f7fd fa0b 	bl	8001ad0 <HAL_GetTick>
 80046ba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80046cc:	887b      	ldrh	r3, [r7, #2]
 80046ce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d00f      	beq.n	80046f8 <HAL_SPI_TransmitReceive+0x70>
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046de:	d107      	bne.n	80046f0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d103      	bne.n	80046f0 <HAL_SPI_TransmitReceive+0x68>
 80046e8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046ec:	2b04      	cmp	r3, #4
 80046ee:	d003      	beq.n	80046f8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80046f0:	2302      	movs	r3, #2
 80046f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80046f6:	e16d      	b.n	80049d4 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d005      	beq.n	800470a <HAL_SPI_TransmitReceive+0x82>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d002      	beq.n	800470a <HAL_SPI_TransmitReceive+0x82>
 8004704:	887b      	ldrh	r3, [r7, #2]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d103      	bne.n	8004712 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004710:	e160      	b.n	80049d4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b04      	cmp	r3, #4
 800471c:	d003      	beq.n	8004726 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2205      	movs	r2, #5
 8004722:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2200      	movs	r2, #0
 800472a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	887a      	ldrh	r2, [r7, #2]
 8004736:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	887a      	ldrh	r2, [r7, #2]
 800473c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	68ba      	ldr	r2, [r7, #8]
 8004742:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	887a      	ldrh	r2, [r7, #2]
 8004748:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	887a      	ldrh	r2, [r7, #2]
 800474e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004766:	2b40      	cmp	r3, #64	@ 0x40
 8004768:	d007      	beq.n	800477a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004778:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004782:	d17c      	bne.n	800487e <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <HAL_SPI_TransmitReceive+0x10a>
 800478c:	8b7b      	ldrh	r3, [r7, #26]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d16a      	bne.n	8004868 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004796:	881a      	ldrh	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047a2:	1c9a      	adds	r2, r3, #2
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047b6:	e057      	b.n	8004868 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d11b      	bne.n	80047fe <HAL_SPI_TransmitReceive+0x176>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d016      	beq.n	80047fe <HAL_SPI_TransmitReceive+0x176>
 80047d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d113      	bne.n	80047fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047da:	881a      	ldrh	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047e6:	1c9a      	adds	r2, r3, #2
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	3b01      	subs	r3, #1
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	689b      	ldr	r3, [r3, #8]
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	2b01      	cmp	r3, #1
 800480a:	d119      	bne.n	8004840 <HAL_SPI_TransmitReceive+0x1b8>
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004810:	b29b      	uxth	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d014      	beq.n	8004840 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004820:	b292      	uxth	r2, r2
 8004822:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004828:	1c9a      	adds	r2, r3, #2
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800483c:	2301      	movs	r3, #1
 800483e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004840:	f7fd f946 	bl	8001ad0 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800484c:	429a      	cmp	r2, r3
 800484e:	d80b      	bhi.n	8004868 <HAL_SPI_TransmitReceive+0x1e0>
 8004850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004856:	d007      	beq.n	8004868 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004866:	e0b5      	b.n	80049d4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1a2      	bne.n	80047b8 <HAL_SPI_TransmitReceive+0x130>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004876:	b29b      	uxth	r3, r3
 8004878:	2b00      	cmp	r3, #0
 800487a:	d19d      	bne.n	80047b8 <HAL_SPI_TransmitReceive+0x130>
 800487c:	e080      	b.n	8004980 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <HAL_SPI_TransmitReceive+0x204>
 8004886:	8b7b      	ldrh	r3, [r7, #26]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d16f      	bne.n	800496c <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	330c      	adds	r3, #12
 8004896:	7812      	ldrb	r2, [r2, #0]
 8004898:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489e:	1c5a      	adds	r2, r3, #1
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	3b01      	subs	r3, #1
 80048ac:	b29a      	uxth	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048b2:	e05b      	b.n	800496c <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d11c      	bne.n	80048fc <HAL_SPI_TransmitReceive+0x274>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d017      	beq.n	80048fc <HAL_SPI_TransmitReceive+0x274>
 80048cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d114      	bne.n	80048fc <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	330c      	adds	r3, #12
 80048dc:	7812      	ldrb	r2, [r2, #0]
 80048de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	3b01      	subs	r3, #1
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048f8:	2300      	movs	r3, #0
 80048fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b01      	cmp	r3, #1
 8004908:	d119      	bne.n	800493e <HAL_SPI_TransmitReceive+0x2b6>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800490e:	b29b      	uxth	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d014      	beq.n	800493e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004930:	b29b      	uxth	r3, r3
 8004932:	3b01      	subs	r3, #1
 8004934:	b29a      	uxth	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800493a:	2301      	movs	r3, #1
 800493c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800493e:	f7fd f8c7 	bl	8001ad0 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800494a:	429a      	cmp	r2, r3
 800494c:	d803      	bhi.n	8004956 <HAL_SPI_TransmitReceive+0x2ce>
 800494e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004954:	d102      	bne.n	800495c <HAL_SPI_TransmitReceive+0x2d4>
 8004956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004958:	2b00      	cmp	r3, #0
 800495a:	d107      	bne.n	800496c <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800496a:	e033      	b.n	80049d4 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004970:	b29b      	uxth	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d19e      	bne.n	80048b4 <HAL_SPI_TransmitReceive+0x22c>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800497a:	b29b      	uxth	r3, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	d199      	bne.n	80048b4 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004982:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 f8b7 	bl	8004af8 <SPI_EndRxTxTransaction>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d006      	beq.n	800499e <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2220      	movs	r2, #32
 800499a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800499c:	e01a      	b.n	80049d4 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10a      	bne.n	80049bc <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049a6:	2300      	movs	r3, #0
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	617b      	str	r3, [r7, #20]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	617b      	str	r3, [r7, #20]
 80049ba:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049ca:	e003      	b.n	80049d4 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80049dc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3730      	adds	r7, #48	@ 0x30
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	603b      	str	r3, [r7, #0]
 80049f4:	4613      	mov	r3, r2
 80049f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049f8:	f7fd f86a 	bl	8001ad0 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a00:	1a9b      	subs	r3, r3, r2
 8004a02:	683a      	ldr	r2, [r7, #0]
 8004a04:	4413      	add	r3, r2
 8004a06:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004a08:	f7fd f862 	bl	8001ad0 <HAL_GetTick>
 8004a0c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004a0e:	4b39      	ldr	r3, [pc, #228]	@ (8004af4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	015b      	lsls	r3, r3, #5
 8004a14:	0d1b      	lsrs	r3, r3, #20
 8004a16:	69fa      	ldr	r2, [r7, #28]
 8004a18:	fb02 f303 	mul.w	r3, r2, r3
 8004a1c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a1e:	e054      	b.n	8004aca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a26:	d050      	beq.n	8004aca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a28:	f7fd f852 	bl	8001ad0 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	69fa      	ldr	r2, [r7, #28]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d902      	bls.n	8004a3e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d13d      	bne.n	8004aba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	685a      	ldr	r2, [r3, #4]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a4c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a56:	d111      	bne.n	8004a7c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a60:	d004      	beq.n	8004a6c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a6a:	d107      	bne.n	8004a7c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a7a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a84:	d10f      	bne.n	8004aa6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004aa4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e017      	b.n	8004aea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	bf0c      	ite	eq
 8004ada:	2301      	moveq	r3, #1
 8004adc:	2300      	movne	r3, #0
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	79fb      	ldrb	r3, [r7, #7]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d19b      	bne.n	8004a20 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3720      	adds	r7, #32
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	20000004 	.word	0x20000004

08004af8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af02      	add	r7, sp, #8
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	2102      	movs	r1, #2
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f7ff ff6a 	bl	80049e8 <SPI_WaitFlagStateUntilTimeout>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d007      	beq.n	8004b2a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b1e:	f043 0220 	orr.w	r2, r3, #32
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e032      	b.n	8004b90 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8004b98 <SPI_EndRxTxTransaction+0xa0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a1b      	ldr	r2, [pc, #108]	@ (8004b9c <SPI_EndRxTxTransaction+0xa4>)
 8004b30:	fba2 2303 	umull	r2, r3, r2, r3
 8004b34:	0d5b      	lsrs	r3, r3, #21
 8004b36:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004b3a:	fb02 f303 	mul.w	r3, r2, r3
 8004b3e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b48:	d112      	bne.n	8004b70 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	9300      	str	r3, [sp, #0]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2200      	movs	r2, #0
 8004b52:	2180      	movs	r1, #128	@ 0x80
 8004b54:	68f8      	ldr	r0, [r7, #12]
 8004b56:	f7ff ff47 	bl	80049e8 <SPI_WaitFlagStateUntilTimeout>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d016      	beq.n	8004b8e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b64:	f043 0220 	orr.w	r2, r3, #32
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e00f      	b.n	8004b90 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b86:	2b80      	cmp	r3, #128	@ 0x80
 8004b88:	d0f2      	beq.n	8004b70 <SPI_EndRxTxTransaction+0x78>
 8004b8a:	e000      	b.n	8004b8e <SPI_EndRxTxTransaction+0x96>
        break;
 8004b8c:	bf00      	nop
  }

  return HAL_OK;
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	20000004 	.word	0x20000004
 8004b9c:	165e9f81 	.word	0x165e9f81

08004ba0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e041      	b.n	8004c36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d106      	bne.n	8004bcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 f839 	bl	8004c3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2202      	movs	r2, #2
 8004bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	4619      	mov	r1, r3
 8004bde:	4610      	mov	r0, r2
 8004be0:	f000 f9b2 	bl	8004f48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b083      	sub	sp, #12
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c46:	bf00      	nop
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
	...

08004c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d001      	beq.n	8004c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e044      	b.n	8004cf6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f042 0201 	orr.w	r2, r2, #1
 8004c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a1e      	ldr	r2, [pc, #120]	@ (8004d04 <HAL_TIM_Base_Start_IT+0xb0>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d018      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0x6c>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c96:	d013      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0x6c>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8004d08 <HAL_TIM_Base_Start_IT+0xb4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00e      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0x6c>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a19      	ldr	r2, [pc, #100]	@ (8004d0c <HAL_TIM_Base_Start_IT+0xb8>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d009      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0x6c>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a17      	ldr	r2, [pc, #92]	@ (8004d10 <HAL_TIM_Base_Start_IT+0xbc>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d004      	beq.n	8004cc0 <HAL_TIM_Base_Start_IT+0x6c>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a16      	ldr	r2, [pc, #88]	@ (8004d14 <HAL_TIM_Base_Start_IT+0xc0>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d111      	bne.n	8004ce4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	f003 0307 	and.w	r3, r3, #7
 8004cca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b06      	cmp	r3, #6
 8004cd0:	d010      	beq.n	8004cf4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	681a      	ldr	r2, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f042 0201 	orr.w	r2, r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ce2:	e007      	b.n	8004cf4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f042 0201 	orr.w	r2, r2, #1
 8004cf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	40010000 	.word	0x40010000
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	40000800 	.word	0x40000800
 8004d10:	40000c00 	.word	0x40000c00
 8004d14:	40014000 	.word	0x40014000

08004d18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f003 0302 	and.w	r3, r3, #2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d020      	beq.n	8004d7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d01b      	beq.n	8004d7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0202 	mvn.w	r2, #2
 8004d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 f8d2 	bl	8004f0c <HAL_TIM_IC_CaptureCallback>
 8004d68:	e005      	b.n	8004d76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f8c4 	bl	8004ef8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f8d5 	bl	8004f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f003 0304 	and.w	r3, r3, #4
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d020      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01b      	beq.n	8004dc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f06f 0204 	mvn.w	r2, #4
 8004d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2202      	movs	r2, #2
 8004d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f8ac 	bl	8004f0c <HAL_TIM_IC_CaptureCallback>
 8004db4:	e005      	b.n	8004dc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 f89e 	bl	8004ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f8af 	bl	8004f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d020      	beq.n	8004e14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f003 0308 	and.w	r3, r3, #8
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01b      	beq.n	8004e14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0208 	mvn.w	r2, #8
 8004de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2204      	movs	r2, #4
 8004dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f886 	bl	8004f0c <HAL_TIM_IC_CaptureCallback>
 8004e00:	e005      	b.n	8004e0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f878 	bl	8004ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f889 	bl	8004f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d020      	beq.n	8004e60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f003 0310 	and.w	r3, r3, #16
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d01b      	beq.n	8004e60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f06f 0210 	mvn.w	r2, #16
 8004e30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2208      	movs	r2, #8
 8004e36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f000 f860 	bl	8004f0c <HAL_TIM_IC_CaptureCallback>
 8004e4c:	e005      	b.n	8004e5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f852 	bl	8004ef8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f863 	bl	8004f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00c      	beq.n	8004e84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d007      	beq.n	8004e84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f06f 0201 	mvn.w	r2, #1
 8004e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f7fc faf2 	bl	8001468 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00c      	beq.n	8004ea8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d007      	beq.n	8004ea8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f8e6 	bl	8005074 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00c      	beq.n	8004ecc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f834 	bl	8004f34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00c      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f003 0320 	and.w	r3, r3, #32
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d007      	beq.n	8004ef0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0220 	mvn.w	r2, #32
 8004ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f8b8 	bl	8005060 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ef0:	bf00      	nop
 8004ef2:	3710      	adds	r7, #16
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f3c:	bf00      	nop
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a3a      	ldr	r2, [pc, #232]	@ (8005044 <TIM_Base_SetConfig+0xfc>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d00f      	beq.n	8004f80 <TIM_Base_SetConfig+0x38>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f66:	d00b      	beq.n	8004f80 <TIM_Base_SetConfig+0x38>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a37      	ldr	r2, [pc, #220]	@ (8005048 <TIM_Base_SetConfig+0x100>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d007      	beq.n	8004f80 <TIM_Base_SetConfig+0x38>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a36      	ldr	r2, [pc, #216]	@ (800504c <TIM_Base_SetConfig+0x104>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d003      	beq.n	8004f80 <TIM_Base_SetConfig+0x38>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a35      	ldr	r2, [pc, #212]	@ (8005050 <TIM_Base_SetConfig+0x108>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d108      	bne.n	8004f92 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a2b      	ldr	r2, [pc, #172]	@ (8005044 <TIM_Base_SetConfig+0xfc>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d01b      	beq.n	8004fd2 <TIM_Base_SetConfig+0x8a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fa0:	d017      	beq.n	8004fd2 <TIM_Base_SetConfig+0x8a>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a28      	ldr	r2, [pc, #160]	@ (8005048 <TIM_Base_SetConfig+0x100>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d013      	beq.n	8004fd2 <TIM_Base_SetConfig+0x8a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a27      	ldr	r2, [pc, #156]	@ (800504c <TIM_Base_SetConfig+0x104>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00f      	beq.n	8004fd2 <TIM_Base_SetConfig+0x8a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a26      	ldr	r2, [pc, #152]	@ (8005050 <TIM_Base_SetConfig+0x108>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d00b      	beq.n	8004fd2 <TIM_Base_SetConfig+0x8a>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a25      	ldr	r2, [pc, #148]	@ (8005054 <TIM_Base_SetConfig+0x10c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d007      	beq.n	8004fd2 <TIM_Base_SetConfig+0x8a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a24      	ldr	r2, [pc, #144]	@ (8005058 <TIM_Base_SetConfig+0x110>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d003      	beq.n	8004fd2 <TIM_Base_SetConfig+0x8a>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a23      	ldr	r2, [pc, #140]	@ (800505c <TIM_Base_SetConfig+0x114>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d108      	bne.n	8004fe4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	68fa      	ldr	r2, [r7, #12]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a0e      	ldr	r2, [pc, #56]	@ (8005044 <TIM_Base_SetConfig+0xfc>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d103      	bne.n	8005018 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b01      	cmp	r3, #1
 8005028:	d105      	bne.n	8005036 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	f023 0201 	bic.w	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	611a      	str	r2, [r3, #16]
  }
}
 8005036:	bf00      	nop
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	40010000 	.word	0x40010000
 8005048:	40000400 	.word	0x40000400
 800504c:	40000800 	.word	0x40000800
 8005050:	40000c00 	.word	0x40000c00
 8005054:	40014000 	.word	0x40014000
 8005058:	40014400 	.word	0x40014400
 800505c:	40014800 	.word	0x40014800

08005060 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e042      	b.n	8005120 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d106      	bne.n	80050b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7fc fb5c 	bl	800176c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2224      	movs	r2, #36	@ 0x24
 80050b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f82b 	bl	8005128 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695a      	ldr	r2, [r3, #20]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005100:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2220      	movs	r2, #32
 800510c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3708      	adds	r7, #8
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005128:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800512c:	b0c0      	sub	sp, #256	@ 0x100
 800512e:	af00      	add	r7, sp, #0
 8005130:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005144:	68d9      	ldr	r1, [r3, #12]
 8005146:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	ea40 0301 	orr.w	r3, r0, r1
 8005150:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	431a      	orrs	r2, r3
 8005160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	431a      	orrs	r2, r3
 8005168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800516c:	69db      	ldr	r3, [r3, #28]
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005180:	f021 010c 	bic.w	r1, r1, #12
 8005184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800518e:	430b      	orrs	r3, r1
 8005190:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800519e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a2:	6999      	ldr	r1, [r3, #24]
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	ea40 0301 	orr.w	r3, r0, r1
 80051ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	4b8f      	ldr	r3, [pc, #572]	@ (80053f4 <UART_SetConfig+0x2cc>)
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d005      	beq.n	80051c8 <UART_SetConfig+0xa0>
 80051bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	4b8d      	ldr	r3, [pc, #564]	@ (80053f8 <UART_SetConfig+0x2d0>)
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d104      	bne.n	80051d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051c8:	f7fe fd1c 	bl	8003c04 <HAL_RCC_GetPCLK2Freq>
 80051cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80051d0:	e003      	b.n	80051da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051d2:	f7fe fd03 	bl	8003bdc <HAL_RCC_GetPCLK1Freq>
 80051d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051e4:	f040 810c 	bne.w	8005400 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051ec:	2200      	movs	r2, #0
 80051ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80051f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80051f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80051fa:	4622      	mov	r2, r4
 80051fc:	462b      	mov	r3, r5
 80051fe:	1891      	adds	r1, r2, r2
 8005200:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005202:	415b      	adcs	r3, r3
 8005204:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005206:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800520a:	4621      	mov	r1, r4
 800520c:	eb12 0801 	adds.w	r8, r2, r1
 8005210:	4629      	mov	r1, r5
 8005212:	eb43 0901 	adc.w	r9, r3, r1
 8005216:	f04f 0200 	mov.w	r2, #0
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005222:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005226:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800522a:	4690      	mov	r8, r2
 800522c:	4699      	mov	r9, r3
 800522e:	4623      	mov	r3, r4
 8005230:	eb18 0303 	adds.w	r3, r8, r3
 8005234:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005238:	462b      	mov	r3, r5
 800523a:	eb49 0303 	adc.w	r3, r9, r3
 800523e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800524e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005252:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005256:	460b      	mov	r3, r1
 8005258:	18db      	adds	r3, r3, r3
 800525a:	653b      	str	r3, [r7, #80]	@ 0x50
 800525c:	4613      	mov	r3, r2
 800525e:	eb42 0303 	adc.w	r3, r2, r3
 8005262:	657b      	str	r3, [r7, #84]	@ 0x54
 8005264:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005268:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800526c:	f7fa ffb8 	bl	80001e0 <__aeabi_uldivmod>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4b61      	ldr	r3, [pc, #388]	@ (80053fc <UART_SetConfig+0x2d4>)
 8005276:	fba3 2302 	umull	r2, r3, r3, r2
 800527a:	095b      	lsrs	r3, r3, #5
 800527c:	011c      	lsls	r4, r3, #4
 800527e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005282:	2200      	movs	r2, #0
 8005284:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005288:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800528c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005290:	4642      	mov	r2, r8
 8005292:	464b      	mov	r3, r9
 8005294:	1891      	adds	r1, r2, r2
 8005296:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005298:	415b      	adcs	r3, r3
 800529a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800529c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80052a0:	4641      	mov	r1, r8
 80052a2:	eb12 0a01 	adds.w	sl, r2, r1
 80052a6:	4649      	mov	r1, r9
 80052a8:	eb43 0b01 	adc.w	fp, r3, r1
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052c0:	4692      	mov	sl, r2
 80052c2:	469b      	mov	fp, r3
 80052c4:	4643      	mov	r3, r8
 80052c6:	eb1a 0303 	adds.w	r3, sl, r3
 80052ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052ce:	464b      	mov	r3, r9
 80052d0:	eb4b 0303 	adc.w	r3, fp, r3
 80052d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80052d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80052e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80052ec:	460b      	mov	r3, r1
 80052ee:	18db      	adds	r3, r3, r3
 80052f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80052f2:	4613      	mov	r3, r2
 80052f4:	eb42 0303 	adc.w	r3, r2, r3
 80052f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80052fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80052fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005302:	f7fa ff6d 	bl	80001e0 <__aeabi_uldivmod>
 8005306:	4602      	mov	r2, r0
 8005308:	460b      	mov	r3, r1
 800530a:	4611      	mov	r1, r2
 800530c:	4b3b      	ldr	r3, [pc, #236]	@ (80053fc <UART_SetConfig+0x2d4>)
 800530e:	fba3 2301 	umull	r2, r3, r3, r1
 8005312:	095b      	lsrs	r3, r3, #5
 8005314:	2264      	movs	r2, #100	@ 0x64
 8005316:	fb02 f303 	mul.w	r3, r2, r3
 800531a:	1acb      	subs	r3, r1, r3
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005322:	4b36      	ldr	r3, [pc, #216]	@ (80053fc <UART_SetConfig+0x2d4>)
 8005324:	fba3 2302 	umull	r2, r3, r3, r2
 8005328:	095b      	lsrs	r3, r3, #5
 800532a:	005b      	lsls	r3, r3, #1
 800532c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005330:	441c      	add	r4, r3
 8005332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005336:	2200      	movs	r2, #0
 8005338:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800533c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005340:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005344:	4642      	mov	r2, r8
 8005346:	464b      	mov	r3, r9
 8005348:	1891      	adds	r1, r2, r2
 800534a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800534c:	415b      	adcs	r3, r3
 800534e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005350:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005354:	4641      	mov	r1, r8
 8005356:	1851      	adds	r1, r2, r1
 8005358:	6339      	str	r1, [r7, #48]	@ 0x30
 800535a:	4649      	mov	r1, r9
 800535c:	414b      	adcs	r3, r1
 800535e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005360:	f04f 0200 	mov.w	r2, #0
 8005364:	f04f 0300 	mov.w	r3, #0
 8005368:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800536c:	4659      	mov	r1, fp
 800536e:	00cb      	lsls	r3, r1, #3
 8005370:	4651      	mov	r1, sl
 8005372:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005376:	4651      	mov	r1, sl
 8005378:	00ca      	lsls	r2, r1, #3
 800537a:	4610      	mov	r0, r2
 800537c:	4619      	mov	r1, r3
 800537e:	4603      	mov	r3, r0
 8005380:	4642      	mov	r2, r8
 8005382:	189b      	adds	r3, r3, r2
 8005384:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005388:	464b      	mov	r3, r9
 800538a:	460a      	mov	r2, r1
 800538c:	eb42 0303 	adc.w	r3, r2, r3
 8005390:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80053a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053a8:	460b      	mov	r3, r1
 80053aa:	18db      	adds	r3, r3, r3
 80053ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053ae:	4613      	mov	r3, r2
 80053b0:	eb42 0303 	adc.w	r3, r2, r3
 80053b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80053be:	f7fa ff0f 	bl	80001e0 <__aeabi_uldivmod>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4b0d      	ldr	r3, [pc, #52]	@ (80053fc <UART_SetConfig+0x2d4>)
 80053c8:	fba3 1302 	umull	r1, r3, r3, r2
 80053cc:	095b      	lsrs	r3, r3, #5
 80053ce:	2164      	movs	r1, #100	@ 0x64
 80053d0:	fb01 f303 	mul.w	r3, r1, r3
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	00db      	lsls	r3, r3, #3
 80053d8:	3332      	adds	r3, #50	@ 0x32
 80053da:	4a08      	ldr	r2, [pc, #32]	@ (80053fc <UART_SetConfig+0x2d4>)
 80053dc:	fba2 2303 	umull	r2, r3, r2, r3
 80053e0:	095b      	lsrs	r3, r3, #5
 80053e2:	f003 0207 	and.w	r2, r3, #7
 80053e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4422      	add	r2, r4
 80053ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053f0:	e106      	b.n	8005600 <UART_SetConfig+0x4d8>
 80053f2:	bf00      	nop
 80053f4:	40011000 	.word	0x40011000
 80053f8:	40011400 	.word	0x40011400
 80053fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005404:	2200      	movs	r2, #0
 8005406:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800540a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800540e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005412:	4642      	mov	r2, r8
 8005414:	464b      	mov	r3, r9
 8005416:	1891      	adds	r1, r2, r2
 8005418:	6239      	str	r1, [r7, #32]
 800541a:	415b      	adcs	r3, r3
 800541c:	627b      	str	r3, [r7, #36]	@ 0x24
 800541e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005422:	4641      	mov	r1, r8
 8005424:	1854      	adds	r4, r2, r1
 8005426:	4649      	mov	r1, r9
 8005428:	eb43 0501 	adc.w	r5, r3, r1
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	f04f 0300 	mov.w	r3, #0
 8005434:	00eb      	lsls	r3, r5, #3
 8005436:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800543a:	00e2      	lsls	r2, r4, #3
 800543c:	4614      	mov	r4, r2
 800543e:	461d      	mov	r5, r3
 8005440:	4643      	mov	r3, r8
 8005442:	18e3      	adds	r3, r4, r3
 8005444:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005448:	464b      	mov	r3, r9
 800544a:	eb45 0303 	adc.w	r3, r5, r3
 800544e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800545e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005462:	f04f 0200 	mov.w	r2, #0
 8005466:	f04f 0300 	mov.w	r3, #0
 800546a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800546e:	4629      	mov	r1, r5
 8005470:	008b      	lsls	r3, r1, #2
 8005472:	4621      	mov	r1, r4
 8005474:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005478:	4621      	mov	r1, r4
 800547a:	008a      	lsls	r2, r1, #2
 800547c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005480:	f7fa feae 	bl	80001e0 <__aeabi_uldivmod>
 8005484:	4602      	mov	r2, r0
 8005486:	460b      	mov	r3, r1
 8005488:	4b60      	ldr	r3, [pc, #384]	@ (800560c <UART_SetConfig+0x4e4>)
 800548a:	fba3 2302 	umull	r2, r3, r3, r2
 800548e:	095b      	lsrs	r3, r3, #5
 8005490:	011c      	lsls	r4, r3, #4
 8005492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005496:	2200      	movs	r2, #0
 8005498:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800549c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80054a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80054a4:	4642      	mov	r2, r8
 80054a6:	464b      	mov	r3, r9
 80054a8:	1891      	adds	r1, r2, r2
 80054aa:	61b9      	str	r1, [r7, #24]
 80054ac:	415b      	adcs	r3, r3
 80054ae:	61fb      	str	r3, [r7, #28]
 80054b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054b4:	4641      	mov	r1, r8
 80054b6:	1851      	adds	r1, r2, r1
 80054b8:	6139      	str	r1, [r7, #16]
 80054ba:	4649      	mov	r1, r9
 80054bc:	414b      	adcs	r3, r1
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	f04f 0300 	mov.w	r3, #0
 80054c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054cc:	4659      	mov	r1, fp
 80054ce:	00cb      	lsls	r3, r1, #3
 80054d0:	4651      	mov	r1, sl
 80054d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054d6:	4651      	mov	r1, sl
 80054d8:	00ca      	lsls	r2, r1, #3
 80054da:	4610      	mov	r0, r2
 80054dc:	4619      	mov	r1, r3
 80054de:	4603      	mov	r3, r0
 80054e0:	4642      	mov	r2, r8
 80054e2:	189b      	adds	r3, r3, r2
 80054e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054e8:	464b      	mov	r3, r9
 80054ea:	460a      	mov	r2, r1
 80054ec:	eb42 0303 	adc.w	r3, r2, r3
 80054f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80054f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80054fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	f04f 0300 	mov.w	r3, #0
 8005508:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800550c:	4649      	mov	r1, r9
 800550e:	008b      	lsls	r3, r1, #2
 8005510:	4641      	mov	r1, r8
 8005512:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005516:	4641      	mov	r1, r8
 8005518:	008a      	lsls	r2, r1, #2
 800551a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800551e:	f7fa fe5f 	bl	80001e0 <__aeabi_uldivmod>
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	4611      	mov	r1, r2
 8005528:	4b38      	ldr	r3, [pc, #224]	@ (800560c <UART_SetConfig+0x4e4>)
 800552a:	fba3 2301 	umull	r2, r3, r3, r1
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	2264      	movs	r2, #100	@ 0x64
 8005532:	fb02 f303 	mul.w	r3, r2, r3
 8005536:	1acb      	subs	r3, r1, r3
 8005538:	011b      	lsls	r3, r3, #4
 800553a:	3332      	adds	r3, #50	@ 0x32
 800553c:	4a33      	ldr	r2, [pc, #204]	@ (800560c <UART_SetConfig+0x4e4>)
 800553e:	fba2 2303 	umull	r2, r3, r2, r3
 8005542:	095b      	lsrs	r3, r3, #5
 8005544:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005548:	441c      	add	r4, r3
 800554a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800554e:	2200      	movs	r2, #0
 8005550:	673b      	str	r3, [r7, #112]	@ 0x70
 8005552:	677a      	str	r2, [r7, #116]	@ 0x74
 8005554:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005558:	4642      	mov	r2, r8
 800555a:	464b      	mov	r3, r9
 800555c:	1891      	adds	r1, r2, r2
 800555e:	60b9      	str	r1, [r7, #8]
 8005560:	415b      	adcs	r3, r3
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005568:	4641      	mov	r1, r8
 800556a:	1851      	adds	r1, r2, r1
 800556c:	6039      	str	r1, [r7, #0]
 800556e:	4649      	mov	r1, r9
 8005570:	414b      	adcs	r3, r1
 8005572:	607b      	str	r3, [r7, #4]
 8005574:	f04f 0200 	mov.w	r2, #0
 8005578:	f04f 0300 	mov.w	r3, #0
 800557c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005580:	4659      	mov	r1, fp
 8005582:	00cb      	lsls	r3, r1, #3
 8005584:	4651      	mov	r1, sl
 8005586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800558a:	4651      	mov	r1, sl
 800558c:	00ca      	lsls	r2, r1, #3
 800558e:	4610      	mov	r0, r2
 8005590:	4619      	mov	r1, r3
 8005592:	4603      	mov	r3, r0
 8005594:	4642      	mov	r2, r8
 8005596:	189b      	adds	r3, r3, r2
 8005598:	66bb      	str	r3, [r7, #104]	@ 0x68
 800559a:	464b      	mov	r3, r9
 800559c:	460a      	mov	r2, r1
 800559e:	eb42 0303 	adc.w	r3, r2, r3
 80055a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80055ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	f04f 0300 	mov.w	r3, #0
 80055b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80055bc:	4649      	mov	r1, r9
 80055be:	008b      	lsls	r3, r1, #2
 80055c0:	4641      	mov	r1, r8
 80055c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055c6:	4641      	mov	r1, r8
 80055c8:	008a      	lsls	r2, r1, #2
 80055ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80055ce:	f7fa fe07 	bl	80001e0 <__aeabi_uldivmod>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	4b0d      	ldr	r3, [pc, #52]	@ (800560c <UART_SetConfig+0x4e4>)
 80055d8:	fba3 1302 	umull	r1, r3, r3, r2
 80055dc:	095b      	lsrs	r3, r3, #5
 80055de:	2164      	movs	r1, #100	@ 0x64
 80055e0:	fb01 f303 	mul.w	r3, r1, r3
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	3332      	adds	r3, #50	@ 0x32
 80055ea:	4a08      	ldr	r2, [pc, #32]	@ (800560c <UART_SetConfig+0x4e4>)
 80055ec:	fba2 2303 	umull	r2, r3, r2, r3
 80055f0:	095b      	lsrs	r3, r3, #5
 80055f2:	f003 020f 	and.w	r2, r3, #15
 80055f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4422      	add	r2, r4
 80055fe:	609a      	str	r2, [r3, #8]
}
 8005600:	bf00      	nop
 8005602:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005606:	46bd      	mov	sp, r7
 8005608:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800560c:	51eb851f 	.word	0x51eb851f

08005610 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005614:	4904      	ldr	r1, [pc, #16]	@ (8005628 <MX_FATFS_Init+0x18>)
 8005616:	4805      	ldr	r0, [pc, #20]	@ (800562c <MX_FATFS_Init+0x1c>)
 8005618:	f000 f8ae 	bl	8005778 <FATFS_LinkDriver>
 800561c:	4603      	mov	r3, r0
 800561e:	461a      	mov	r2, r3
 8005620:	4b03      	ldr	r3, [pc, #12]	@ (8005630 <MX_FATFS_Init+0x20>)
 8005622:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005624:	bf00      	nop
 8005626:	bd80      	pop	{r7, pc}
 8005628:	200004b8 	.word	0x200004b8
 800562c:	20000010 	.word	0x20000010
 8005630:	200004b4 	.word	0x200004b4

08005634 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
 800563a:	4603      	mov	r3, r0
 800563c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800563e:	79fb      	ldrb	r3, [r7, #7]
 8005640:	4618      	mov	r0, r3
 8005642:	f7fb f90f 	bl	8000864 <SD_disk_initialize>
 8005646:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	4603      	mov	r3, r0
 8005658:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800565a:	79fb      	ldrb	r3, [r7, #7]
 800565c:	4618      	mov	r0, r3
 800565e:	f7fb f9ed 	bl	8000a3c <SD_disk_status>
 8005662:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	607a      	str	r2, [r7, #4]
 8005676:	603b      	str	r3, [r7, #0]
 8005678:	4603      	mov	r3, r0
 800567a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800567c:	7bf8      	ldrb	r0, [r7, #15]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	68b9      	ldr	r1, [r7, #8]
 8005684:	f7fb f9f0 	bl	8000a68 <SD_disk_read>
 8005688:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b084      	sub	sp, #16
 8005696:	af00      	add	r7, sp, #0
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	603b      	str	r3, [r7, #0]
 800569e:	4603      	mov	r3, r0
 80056a0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80056a2:	7bf8      	ldrb	r0, [r7, #15]
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	68b9      	ldr	r1, [r7, #8]
 80056aa:	f7fb fa47 	bl	8000b3c <SD_disk_write>
 80056ae:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	4603      	mov	r3, r0
 80056c0:	603a      	str	r2, [r7, #0]
 80056c2:	71fb      	strb	r3, [r7, #7]
 80056c4:	460b      	mov	r3, r1
 80056c6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 80056c8:	79b9      	ldrb	r1, [r7, #6]
 80056ca:	79fb      	ldrb	r3, [r7, #7]
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fb fab8 	bl	8000c44 <SD_disk_ioctl>
 80056d4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	4613      	mov	r3, r2
 80056ec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80056ee:	2301      	movs	r3, #1
 80056f0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80056f2:	2300      	movs	r3, #0
 80056f4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80056f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005774 <FATFS_LinkDriverEx+0x94>)
 80056f8:	7a5b      	ldrb	r3, [r3, #9]
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d131      	bne.n	8005764 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005700:	4b1c      	ldr	r3, [pc, #112]	@ (8005774 <FATFS_LinkDriverEx+0x94>)
 8005702:	7a5b      	ldrb	r3, [r3, #9]
 8005704:	b2db      	uxtb	r3, r3
 8005706:	461a      	mov	r2, r3
 8005708:	4b1a      	ldr	r3, [pc, #104]	@ (8005774 <FATFS_LinkDriverEx+0x94>)
 800570a:	2100      	movs	r1, #0
 800570c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800570e:	4b19      	ldr	r3, [pc, #100]	@ (8005774 <FATFS_LinkDriverEx+0x94>)
 8005710:	7a5b      	ldrb	r3, [r3, #9]
 8005712:	b2db      	uxtb	r3, r3
 8005714:	4a17      	ldr	r2, [pc, #92]	@ (8005774 <FATFS_LinkDriverEx+0x94>)
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800571e:	4b15      	ldr	r3, [pc, #84]	@ (8005774 <FATFS_LinkDriverEx+0x94>)
 8005720:	7a5b      	ldrb	r3, [r3, #9]
 8005722:	b2db      	uxtb	r3, r3
 8005724:	461a      	mov	r2, r3
 8005726:	4b13      	ldr	r3, [pc, #76]	@ (8005774 <FATFS_LinkDriverEx+0x94>)
 8005728:	4413      	add	r3, r2
 800572a:	79fa      	ldrb	r2, [r7, #7]
 800572c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800572e:	4b11      	ldr	r3, [pc, #68]	@ (8005774 <FATFS_LinkDriverEx+0x94>)
 8005730:	7a5b      	ldrb	r3, [r3, #9]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	1c5a      	adds	r2, r3, #1
 8005736:	b2d1      	uxtb	r1, r2
 8005738:	4a0e      	ldr	r2, [pc, #56]	@ (8005774 <FATFS_LinkDriverEx+0x94>)
 800573a:	7251      	strb	r1, [r2, #9]
 800573c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800573e:	7dbb      	ldrb	r3, [r7, #22]
 8005740:	3330      	adds	r3, #48	@ 0x30
 8005742:	b2da      	uxtb	r2, r3
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	3301      	adds	r3, #1
 800574c:	223a      	movs	r2, #58	@ 0x3a
 800574e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	3302      	adds	r3, #2
 8005754:	222f      	movs	r2, #47	@ 0x2f
 8005756:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	3303      	adds	r3, #3
 800575c:	2200      	movs	r2, #0
 800575e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005760:	2300      	movs	r3, #0
 8005762:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005764:	7dfb      	ldrb	r3, [r7, #23]
}
 8005766:	4618      	mov	r0, r3
 8005768:	371c      	adds	r7, #28
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	200004bc 	.word	0x200004bc

08005778 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005782:	2200      	movs	r2, #0
 8005784:	6839      	ldr	r1, [r7, #0]
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7ff ffaa 	bl	80056e0 <FATFS_LinkDriverEx>
 800578c:	4603      	mov	r3, r0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f103 0208 	add.w	r2, r3, #8
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f04f 32ff 	mov.w	r2, #4294967295
 80057ae:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f103 0208 	add.w	r2, r3, #8
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f103 0208 	add.w	r2, r3, #8
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057ca:	bf00      	nop
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	689a      	ldr	r2, [r3, #8]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	601a      	str	r2, [r3, #0]
}
 800582c:	bf00      	nop
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800584e:	d103      	bne.n	8005858 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	60fb      	str	r3, [r7, #12]
 8005856:	e00c      	b.n	8005872 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3308      	adds	r3, #8
 800585c:	60fb      	str	r3, [r7, #12]
 800585e:	e002      	b.n	8005866 <vListInsert+0x2e>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	429a      	cmp	r2, r3
 8005870:	d2f6      	bcs.n	8005860 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	683a      	ldr	r2, [r7, #0]
 800588c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	601a      	str	r2, [r3, #0]
}
 800589e:	bf00      	nop
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr

080058aa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058aa:	b480      	push	{r7}
 80058ac:	b085      	sub	sp, #20
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6892      	ldr	r2, [r2, #8]
 80058c0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	6852      	ldr	r2, [r2, #4]
 80058ca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d103      	bne.n	80058de <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689a      	ldr	r2, [r3, #8]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	1e5a      	subs	r2, r3, #1
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
	...

08005900 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d10b      	bne.n	800592c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005926:	bf00      	nop
 8005928:	bf00      	nop
 800592a:	e7fd      	b.n	8005928 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800592c:	f000 ff6c 	bl	8006808 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005938:	68f9      	ldr	r1, [r7, #12]
 800593a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800593c:	fb01 f303 	mul.w	r3, r1, r3
 8005940:	441a      	add	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800595c:	3b01      	subs	r3, #1
 800595e:	68f9      	ldr	r1, [r7, #12]
 8005960:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005962:	fb01 f303 	mul.w	r3, r1, r3
 8005966:	441a      	add	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	22ff      	movs	r2, #255	@ 0xff
 8005970:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	22ff      	movs	r2, #255	@ 0xff
 8005978:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d114      	bne.n	80059ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d01a      	beq.n	80059c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	3310      	adds	r3, #16
 800598e:	4618      	mov	r0, r3
 8005990:	f000 fc6c 	bl	800626c <xTaskRemoveFromEventList>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d012      	beq.n	80059c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800599a:	4b0d      	ldr	r3, [pc, #52]	@ (80059d0 <xQueueGenericReset+0xd0>)
 800599c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	e009      	b.n	80059c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	3310      	adds	r3, #16
 80059b0:	4618      	mov	r0, r3
 80059b2:	f7ff fef0 	bl	8005796 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	3324      	adds	r3, #36	@ 0x24
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7ff feeb 	bl	8005796 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059c0:	f000 ff54 	bl	800686c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059c4:	2301      	movs	r3, #1
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	e000ed04 	.word	0xe000ed04

080059d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08a      	sub	sp, #40	@ 0x28
 80059d8:	af02      	add	r7, sp, #8
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	4613      	mov	r3, r2
 80059e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d10b      	bne.n	8005a00 <xQueueGenericCreate+0x2c>
	__asm volatile
 80059e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ec:	f383 8811 	msr	BASEPRI, r3
 80059f0:	f3bf 8f6f 	isb	sy
 80059f4:	f3bf 8f4f 	dsb	sy
 80059f8:	613b      	str	r3, [r7, #16]
}
 80059fa:	bf00      	nop
 80059fc:	bf00      	nop
 80059fe:	e7fd      	b.n	80059fc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	fb02 f303 	mul.w	r3, r2, r3
 8005a08:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	3348      	adds	r3, #72	@ 0x48
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 ffda 	bl	80069c8 <pvPortMalloc>
 8005a14:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d011      	beq.n	8005a40 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	3348      	adds	r3, #72	@ 0x48
 8005a24:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a2e:	79fa      	ldrb	r2, [r7, #7]
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	4613      	mov	r3, r2
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	68b9      	ldr	r1, [r7, #8]
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 f805 	bl	8005a4a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a40:	69bb      	ldr	r3, [r7, #24]
	}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3720      	adds	r7, #32
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b084      	sub	sp, #16
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	60f8      	str	r0, [r7, #12]
 8005a52:	60b9      	str	r1, [r7, #8]
 8005a54:	607a      	str	r2, [r7, #4]
 8005a56:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d103      	bne.n	8005a66 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	601a      	str	r2, [r3, #0]
 8005a64:	e002      	b.n	8005a6c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a78:	2101      	movs	r1, #1
 8005a7a:	69b8      	ldr	r0, [r7, #24]
 8005a7c:	f7ff ff40 	bl	8005900 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a80:	bf00      	nop
 8005a82:	3710      	adds	r7, #16
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08e      	sub	sp, #56	@ 0x38
 8005a8c:	af04      	add	r7, sp, #16
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
 8005a94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10b      	bne.n	8005ab4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	623b      	str	r3, [r7, #32]
}
 8005aae:	bf00      	nop
 8005ab0:	bf00      	nop
 8005ab2:	e7fd      	b.n	8005ab0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10b      	bne.n	8005ad2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005abe:	f383 8811 	msr	BASEPRI, r3
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	61fb      	str	r3, [r7, #28]
}
 8005acc:	bf00      	nop
 8005ace:	bf00      	nop
 8005ad0:	e7fd      	b.n	8005ace <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ad2:	2354      	movs	r3, #84	@ 0x54
 8005ad4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	2b54      	cmp	r3, #84	@ 0x54
 8005ada:	d00b      	beq.n	8005af4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae0:	f383 8811 	msr	BASEPRI, r3
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	f3bf 8f4f 	dsb	sy
 8005aec:	61bb      	str	r3, [r7, #24]
}
 8005aee:	bf00      	nop
 8005af0:	bf00      	nop
 8005af2:	e7fd      	b.n	8005af0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005af4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d01e      	beq.n	8005b3a <xTaskCreateStatic+0xb2>
 8005afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d01b      	beq.n	8005b3a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b04:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b0a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b14:	2300      	movs	r3, #0
 8005b16:	9303      	str	r3, [sp, #12]
 8005b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1a:	9302      	str	r3, [sp, #8]
 8005b1c:	f107 0314 	add.w	r3, r7, #20
 8005b20:	9301      	str	r3, [sp, #4]
 8005b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	68b9      	ldr	r1, [r7, #8]
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 f850 	bl	8005bd2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b34:	f000 f8d6 	bl	8005ce4 <prvAddNewTaskToReadyList>
 8005b38:	e001      	b.n	8005b3e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b3e:	697b      	ldr	r3, [r7, #20]
	}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3728      	adds	r7, #40	@ 0x28
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b08c      	sub	sp, #48	@ 0x30
 8005b4c:	af04      	add	r7, sp, #16
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	603b      	str	r3, [r7, #0]
 8005b54:	4613      	mov	r3, r2
 8005b56:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b58:	88fb      	ldrh	r3, [r7, #6]
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 ff33 	bl	80069c8 <pvPortMalloc>
 8005b62:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00e      	beq.n	8005b88 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b6a:	2054      	movs	r0, #84	@ 0x54
 8005b6c:	f000 ff2c 	bl	80069c8 <pvPortMalloc>
 8005b70:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d003      	beq.n	8005b80 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b7e:	e005      	b.n	8005b8c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b80:	6978      	ldr	r0, [r7, #20]
 8005b82:	f000 ffef 	bl	8006b64 <vPortFree>
 8005b86:	e001      	b.n	8005b8c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d017      	beq.n	8005bc2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	2200      	movs	r2, #0
 8005b96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b9a:	88fa      	ldrh	r2, [r7, #6]
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	9303      	str	r3, [sp, #12]
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	9302      	str	r3, [sp, #8]
 8005ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba6:	9301      	str	r3, [sp, #4]
 8005ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	68b9      	ldr	r1, [r7, #8]
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f000 f80e 	bl	8005bd2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bb6:	69f8      	ldr	r0, [r7, #28]
 8005bb8:	f000 f894 	bl	8005ce4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	61bb      	str	r3, [r7, #24]
 8005bc0:	e002      	b.n	8005bc8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005bc8:	69bb      	ldr	r3, [r7, #24]
	}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3720      	adds	r7, #32
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b088      	sub	sp, #32
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	60f8      	str	r0, [r7, #12]
 8005bda:	60b9      	str	r1, [r7, #8]
 8005bdc:	607a      	str	r2, [r7, #4]
 8005bde:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005bea:	3b01      	subs	r3, #1
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4413      	add	r3, r2
 8005bf0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	f023 0307 	bic.w	r3, r3, #7
 8005bf8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	f003 0307 	and.w	r3, r3, #7
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00b      	beq.n	8005c1c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	617b      	str	r3, [r7, #20]
}
 8005c16:	bf00      	nop
 8005c18:	bf00      	nop
 8005c1a:	e7fd      	b.n	8005c18 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d01f      	beq.n	8005c62 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c22:	2300      	movs	r3, #0
 8005c24:	61fb      	str	r3, [r7, #28]
 8005c26:	e012      	b.n	8005c4e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	7819      	ldrb	r1, [r3, #0]
 8005c30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	4413      	add	r3, r2
 8005c36:	3334      	adds	r3, #52	@ 0x34
 8005c38:	460a      	mov	r2, r1
 8005c3a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c3c:	68ba      	ldr	r2, [r7, #8]
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	4413      	add	r3, r2
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d006      	beq.n	8005c56 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	61fb      	str	r3, [r7, #28]
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	2b0f      	cmp	r3, #15
 8005c52:	d9e9      	bls.n	8005c28 <prvInitialiseNewTask+0x56>
 8005c54:	e000      	b.n	8005c58 <prvInitialiseNewTask+0x86>
			{
				break;
 8005c56:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c60:	e003      	b.n	8005c6a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c6c:	2b06      	cmp	r3, #6
 8005c6e:	d901      	bls.n	8005c74 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c70:	2306      	movs	r3, #6
 8005c72:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c78:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c7e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c82:	2200      	movs	r2, #0
 8005c84:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c88:	3304      	adds	r3, #4
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7ff fda3 	bl	80057d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c92:	3318      	adds	r3, #24
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7ff fd9e 	bl	80057d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c9e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca2:	f1c3 0207 	rsb	r2, r3, #7
 8005ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cae:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	68f9      	ldr	r1, [r7, #12]
 8005cc2:	69b8      	ldr	r0, [r7, #24]
 8005cc4:	f000 fc72 	bl	80065ac <pxPortInitialiseStack>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ccc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cd8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cda:	bf00      	nop
 8005cdc:	3720      	adds	r7, #32
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
	...

08005ce4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005cec:	f000 fd8c 	bl	8006808 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005cf0:	4b2a      	ldr	r3, [pc, #168]	@ (8005d9c <prvAddNewTaskToReadyList+0xb8>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	4a29      	ldr	r2, [pc, #164]	@ (8005d9c <prvAddNewTaskToReadyList+0xb8>)
 8005cf8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005cfa:	4b29      	ldr	r3, [pc, #164]	@ (8005da0 <prvAddNewTaskToReadyList+0xbc>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d109      	bne.n	8005d16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d02:	4a27      	ldr	r2, [pc, #156]	@ (8005da0 <prvAddNewTaskToReadyList+0xbc>)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d08:	4b24      	ldr	r3, [pc, #144]	@ (8005d9c <prvAddNewTaskToReadyList+0xb8>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d110      	bne.n	8005d32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d10:	f000 fb28 	bl	8006364 <prvInitialiseTaskLists>
 8005d14:	e00d      	b.n	8005d32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d16:	4b23      	ldr	r3, [pc, #140]	@ (8005da4 <prvAddNewTaskToReadyList+0xc0>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d109      	bne.n	8005d32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d1e:	4b20      	ldr	r3, [pc, #128]	@ (8005da0 <prvAddNewTaskToReadyList+0xbc>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d802      	bhi.n	8005d32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d2c:	4a1c      	ldr	r2, [pc, #112]	@ (8005da0 <prvAddNewTaskToReadyList+0xbc>)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d32:	4b1d      	ldr	r3, [pc, #116]	@ (8005da8 <prvAddNewTaskToReadyList+0xc4>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3301      	adds	r3, #1
 8005d38:	4a1b      	ldr	r2, [pc, #108]	@ (8005da8 <prvAddNewTaskToReadyList+0xc4>)
 8005d3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d40:	2201      	movs	r2, #1
 8005d42:	409a      	lsls	r2, r3
 8005d44:	4b19      	ldr	r3, [pc, #100]	@ (8005dac <prvAddNewTaskToReadyList+0xc8>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	4a18      	ldr	r2, [pc, #96]	@ (8005dac <prvAddNewTaskToReadyList+0xc8>)
 8005d4c:	6013      	str	r3, [r2, #0]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d52:	4613      	mov	r3, r2
 8005d54:	009b      	lsls	r3, r3, #2
 8005d56:	4413      	add	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4a15      	ldr	r2, [pc, #84]	@ (8005db0 <prvAddNewTaskToReadyList+0xcc>)
 8005d5c:	441a      	add	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	3304      	adds	r3, #4
 8005d62:	4619      	mov	r1, r3
 8005d64:	4610      	mov	r0, r2
 8005d66:	f7ff fd43 	bl	80057f0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d6a:	f000 fd7f 	bl	800686c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005da4 <prvAddNewTaskToReadyList+0xc0>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00e      	beq.n	8005d94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d76:	4b0a      	ldr	r3, [pc, #40]	@ (8005da0 <prvAddNewTaskToReadyList+0xbc>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d207      	bcs.n	8005d94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d84:	4b0b      	ldr	r3, [pc, #44]	@ (8005db4 <prvAddNewTaskToReadyList+0xd0>)
 8005d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d94:	bf00      	nop
 8005d96:	3708      	adds	r7, #8
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	200005c8 	.word	0x200005c8
 8005da0:	200004c8 	.word	0x200004c8
 8005da4:	200005d4 	.word	0x200005d4
 8005da8:	200005e4 	.word	0x200005e4
 8005dac:	200005d0 	.word	0x200005d0
 8005db0:	200004cc 	.word	0x200004cc
 8005db4:	e000ed04 	.word	0xe000ed04

08005db8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d018      	beq.n	8005dfc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005dca:	4b14      	ldr	r3, [pc, #80]	@ (8005e1c <vTaskDelay+0x64>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00b      	beq.n	8005dea <vTaskDelay+0x32>
	__asm volatile
 8005dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd6:	f383 8811 	msr	BASEPRI, r3
 8005dda:	f3bf 8f6f 	isb	sy
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	60bb      	str	r3, [r7, #8]
}
 8005de4:	bf00      	nop
 8005de6:	bf00      	nop
 8005de8:	e7fd      	b.n	8005de6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005dea:	f000 f87d 	bl	8005ee8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005dee:	2100      	movs	r1, #0
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fb75 	bl	80064e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005df6:	f000 f885 	bl	8005f04 <xTaskResumeAll>
 8005dfa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d107      	bne.n	8005e12 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005e02:	4b07      	ldr	r3, [pc, #28]	@ (8005e20 <vTaskDelay+0x68>)
 8005e04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e08:	601a      	str	r2, [r3, #0]
 8005e0a:	f3bf 8f4f 	dsb	sy
 8005e0e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e12:	bf00      	nop
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	200005f0 	.word	0x200005f0
 8005e20:	e000ed04 	.word	0xe000ed04

08005e24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08a      	sub	sp, #40	@ 0x28
 8005e28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e32:	463a      	mov	r2, r7
 8005e34:	1d39      	adds	r1, r7, #4
 8005e36:	f107 0308 	add.w	r3, r7, #8
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fb f82c 	bl	8000e98 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e40:	6839      	ldr	r1, [r7, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	9202      	str	r2, [sp, #8]
 8005e48:	9301      	str	r3, [sp, #4]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	460a      	mov	r2, r1
 8005e52:	491f      	ldr	r1, [pc, #124]	@ (8005ed0 <vTaskStartScheduler+0xac>)
 8005e54:	481f      	ldr	r0, [pc, #124]	@ (8005ed4 <vTaskStartScheduler+0xb0>)
 8005e56:	f7ff fe17 	bl	8005a88 <xTaskCreateStatic>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	4a1e      	ldr	r2, [pc, #120]	@ (8005ed8 <vTaskStartScheduler+0xb4>)
 8005e5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e60:	4b1d      	ldr	r3, [pc, #116]	@ (8005ed8 <vTaskStartScheduler+0xb4>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	e001      	b.n	8005e72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d116      	bne.n	8005ea6 <vTaskStartScheduler+0x82>
	__asm volatile
 8005e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7c:	f383 8811 	msr	BASEPRI, r3
 8005e80:	f3bf 8f6f 	isb	sy
 8005e84:	f3bf 8f4f 	dsb	sy
 8005e88:	613b      	str	r3, [r7, #16]
}
 8005e8a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e8c:	4b13      	ldr	r3, [pc, #76]	@ (8005edc <vTaskStartScheduler+0xb8>)
 8005e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e94:	4b12      	ldr	r3, [pc, #72]	@ (8005ee0 <vTaskStartScheduler+0xbc>)
 8005e96:	2201      	movs	r2, #1
 8005e98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e9a:	4b12      	ldr	r3, [pc, #72]	@ (8005ee4 <vTaskStartScheduler+0xc0>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ea0:	f000 fc0e 	bl	80066c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ea4:	e00f      	b.n	8005ec6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eac:	d10b      	bne.n	8005ec6 <vTaskStartScheduler+0xa2>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	60fb      	str	r3, [r7, #12]
}
 8005ec0:	bf00      	nop
 8005ec2:	bf00      	nop
 8005ec4:	e7fd      	b.n	8005ec2 <vTaskStartScheduler+0x9e>
}
 8005ec6:	bf00      	nop
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	08006e2c 	.word	0x08006e2c
 8005ed4:	08006335 	.word	0x08006335
 8005ed8:	200005ec 	.word	0x200005ec
 8005edc:	200005e8 	.word	0x200005e8
 8005ee0:	200005d4 	.word	0x200005d4
 8005ee4:	200005cc 	.word	0x200005cc

08005ee8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ee8:	b480      	push	{r7}
 8005eea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005eec:	4b04      	ldr	r3, [pc, #16]	@ (8005f00 <vTaskSuspendAll+0x18>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	4a03      	ldr	r2, [pc, #12]	@ (8005f00 <vTaskSuspendAll+0x18>)
 8005ef4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005ef6:	bf00      	nop
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	200005f0 	.word	0x200005f0

08005f04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f12:	4b42      	ldr	r3, [pc, #264]	@ (800601c <xTaskResumeAll+0x118>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10b      	bne.n	8005f32 <xTaskResumeAll+0x2e>
	__asm volatile
 8005f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f1e:	f383 8811 	msr	BASEPRI, r3
 8005f22:	f3bf 8f6f 	isb	sy
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	603b      	str	r3, [r7, #0]
}
 8005f2c:	bf00      	nop
 8005f2e:	bf00      	nop
 8005f30:	e7fd      	b.n	8005f2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f32:	f000 fc69 	bl	8006808 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f36:	4b39      	ldr	r3, [pc, #228]	@ (800601c <xTaskResumeAll+0x118>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	4a37      	ldr	r2, [pc, #220]	@ (800601c <xTaskResumeAll+0x118>)
 8005f3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f40:	4b36      	ldr	r3, [pc, #216]	@ (800601c <xTaskResumeAll+0x118>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d161      	bne.n	800600c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f48:	4b35      	ldr	r3, [pc, #212]	@ (8006020 <xTaskResumeAll+0x11c>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d05d      	beq.n	800600c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f50:	e02e      	b.n	8005fb0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f52:	4b34      	ldr	r3, [pc, #208]	@ (8006024 <xTaskResumeAll+0x120>)
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3318      	adds	r3, #24
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff fca3 	bl	80058aa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3304      	adds	r3, #4
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7ff fc9e 	bl	80058aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f72:	2201      	movs	r2, #1
 8005f74:	409a      	lsls	r2, r3
 8005f76:	4b2c      	ldr	r3, [pc, #176]	@ (8006028 <xTaskResumeAll+0x124>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	4a2a      	ldr	r2, [pc, #168]	@ (8006028 <xTaskResumeAll+0x124>)
 8005f7e:	6013      	str	r3, [r2, #0]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f84:	4613      	mov	r3, r2
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	009b      	lsls	r3, r3, #2
 8005f8c:	4a27      	ldr	r2, [pc, #156]	@ (800602c <xTaskResumeAll+0x128>)
 8005f8e:	441a      	add	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3304      	adds	r3, #4
 8005f94:	4619      	mov	r1, r3
 8005f96:	4610      	mov	r0, r2
 8005f98:	f7ff fc2a 	bl	80057f0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa0:	4b23      	ldr	r3, [pc, #140]	@ (8006030 <xTaskResumeAll+0x12c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d302      	bcc.n	8005fb0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005faa:	4b22      	ldr	r3, [pc, #136]	@ (8006034 <xTaskResumeAll+0x130>)
 8005fac:	2201      	movs	r2, #1
 8005fae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fb0:	4b1c      	ldr	r3, [pc, #112]	@ (8006024 <xTaskResumeAll+0x120>)
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1cc      	bne.n	8005f52 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005fbe:	f000 fa6f 	bl	80064a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8006038 <xTaskResumeAll+0x134>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d010      	beq.n	8005ff0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005fce:	f000 f837 	bl	8006040 <xTaskIncrementTick>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005fd8:	4b16      	ldr	r3, [pc, #88]	@ (8006034 <xTaskResumeAll+0x130>)
 8005fda:	2201      	movs	r2, #1
 8005fdc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3b01      	subs	r3, #1
 8005fe2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1f1      	bne.n	8005fce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005fea:	4b13      	ldr	r3, [pc, #76]	@ (8006038 <xTaskResumeAll+0x134>)
 8005fec:	2200      	movs	r2, #0
 8005fee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ff0:	4b10      	ldr	r3, [pc, #64]	@ (8006034 <xTaskResumeAll+0x130>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d009      	beq.n	800600c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ffc:	4b0f      	ldr	r3, [pc, #60]	@ (800603c <xTaskResumeAll+0x138>)
 8005ffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006002:	601a      	str	r2, [r3, #0]
 8006004:	f3bf 8f4f 	dsb	sy
 8006008:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800600c:	f000 fc2e 	bl	800686c <vPortExitCritical>

	return xAlreadyYielded;
 8006010:	68bb      	ldr	r3, [r7, #8]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	200005f0 	.word	0x200005f0
 8006020:	200005c8 	.word	0x200005c8
 8006024:	20000588 	.word	0x20000588
 8006028:	200005d0 	.word	0x200005d0
 800602c:	200004cc 	.word	0x200004cc
 8006030:	200004c8 	.word	0x200004c8
 8006034:	200005dc 	.word	0x200005dc
 8006038:	200005d8 	.word	0x200005d8
 800603c:	e000ed04 	.word	0xe000ed04

08006040 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006046:	2300      	movs	r3, #0
 8006048:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800604a:	4b4f      	ldr	r3, [pc, #316]	@ (8006188 <xTaskIncrementTick+0x148>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	f040 808f 	bne.w	8006172 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006054:	4b4d      	ldr	r3, [pc, #308]	@ (800618c <xTaskIncrementTick+0x14c>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3301      	adds	r3, #1
 800605a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800605c:	4a4b      	ldr	r2, [pc, #300]	@ (800618c <xTaskIncrementTick+0x14c>)
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d121      	bne.n	80060ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006068:	4b49      	ldr	r3, [pc, #292]	@ (8006190 <xTaskIncrementTick+0x150>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00b      	beq.n	800608a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	603b      	str	r3, [r7, #0]
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop
 8006088:	e7fd      	b.n	8006086 <xTaskIncrementTick+0x46>
 800608a:	4b41      	ldr	r3, [pc, #260]	@ (8006190 <xTaskIncrementTick+0x150>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	4b40      	ldr	r3, [pc, #256]	@ (8006194 <xTaskIncrementTick+0x154>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a3e      	ldr	r2, [pc, #248]	@ (8006190 <xTaskIncrementTick+0x150>)
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	4a3e      	ldr	r2, [pc, #248]	@ (8006194 <xTaskIncrementTick+0x154>)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	6013      	str	r3, [r2, #0]
 800609e:	4b3e      	ldr	r3, [pc, #248]	@ (8006198 <xTaskIncrementTick+0x158>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3301      	adds	r3, #1
 80060a4:	4a3c      	ldr	r2, [pc, #240]	@ (8006198 <xTaskIncrementTick+0x158>)
 80060a6:	6013      	str	r3, [r2, #0]
 80060a8:	f000 f9fa 	bl	80064a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060ac:	4b3b      	ldr	r3, [pc, #236]	@ (800619c <xTaskIncrementTick+0x15c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d348      	bcc.n	8006148 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060b6:	4b36      	ldr	r3, [pc, #216]	@ (8006190 <xTaskIncrementTick+0x150>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d104      	bne.n	80060ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060c0:	4b36      	ldr	r3, [pc, #216]	@ (800619c <xTaskIncrementTick+0x15c>)
 80060c2:	f04f 32ff 	mov.w	r2, #4294967295
 80060c6:	601a      	str	r2, [r3, #0]
					break;
 80060c8:	e03e      	b.n	8006148 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060ca:	4b31      	ldr	r3, [pc, #196]	@ (8006190 <xTaskIncrementTick+0x150>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68db      	ldr	r3, [r3, #12]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d203      	bcs.n	80060ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060e2:	4a2e      	ldr	r2, [pc, #184]	@ (800619c <xTaskIncrementTick+0x15c>)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80060e8:	e02e      	b.n	8006148 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	3304      	adds	r3, #4
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7ff fbdb 	bl	80058aa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d004      	beq.n	8006106 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	3318      	adds	r3, #24
 8006100:	4618      	mov	r0, r3
 8006102:	f7ff fbd2 	bl	80058aa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610a:	2201      	movs	r2, #1
 800610c:	409a      	lsls	r2, r3
 800610e:	4b24      	ldr	r3, [pc, #144]	@ (80061a0 <xTaskIncrementTick+0x160>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4313      	orrs	r3, r2
 8006114:	4a22      	ldr	r2, [pc, #136]	@ (80061a0 <xTaskIncrementTick+0x160>)
 8006116:	6013      	str	r3, [r2, #0]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800611c:	4613      	mov	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4413      	add	r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4a1f      	ldr	r2, [pc, #124]	@ (80061a4 <xTaskIncrementTick+0x164>)
 8006126:	441a      	add	r2, r3
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	3304      	adds	r3, #4
 800612c:	4619      	mov	r1, r3
 800612e:	4610      	mov	r0, r2
 8006130:	f7ff fb5e 	bl	80057f0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006138:	4b1b      	ldr	r3, [pc, #108]	@ (80061a8 <xTaskIncrementTick+0x168>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800613e:	429a      	cmp	r2, r3
 8006140:	d3b9      	bcc.n	80060b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006142:	2301      	movs	r3, #1
 8006144:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006146:	e7b6      	b.n	80060b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006148:	4b17      	ldr	r3, [pc, #92]	@ (80061a8 <xTaskIncrementTick+0x168>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800614e:	4915      	ldr	r1, [pc, #84]	@ (80061a4 <xTaskIncrementTick+0x164>)
 8006150:	4613      	mov	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	440b      	add	r3, r1
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d901      	bls.n	8006164 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006160:	2301      	movs	r3, #1
 8006162:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006164:	4b11      	ldr	r3, [pc, #68]	@ (80061ac <xTaskIncrementTick+0x16c>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d007      	beq.n	800617c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800616c:	2301      	movs	r3, #1
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	e004      	b.n	800617c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006172:	4b0f      	ldr	r3, [pc, #60]	@ (80061b0 <xTaskIncrementTick+0x170>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3301      	adds	r3, #1
 8006178:	4a0d      	ldr	r2, [pc, #52]	@ (80061b0 <xTaskIncrementTick+0x170>)
 800617a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800617c:	697b      	ldr	r3, [r7, #20]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	200005f0 	.word	0x200005f0
 800618c:	200005cc 	.word	0x200005cc
 8006190:	20000580 	.word	0x20000580
 8006194:	20000584 	.word	0x20000584
 8006198:	200005e0 	.word	0x200005e0
 800619c:	200005e8 	.word	0x200005e8
 80061a0:	200005d0 	.word	0x200005d0
 80061a4:	200004cc 	.word	0x200004cc
 80061a8:	200004c8 	.word	0x200004c8
 80061ac:	200005dc 	.word	0x200005dc
 80061b0:	200005d8 	.word	0x200005d8

080061b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061ba:	4b27      	ldr	r3, [pc, #156]	@ (8006258 <vTaskSwitchContext+0xa4>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061c2:	4b26      	ldr	r3, [pc, #152]	@ (800625c <vTaskSwitchContext+0xa8>)
 80061c4:	2201      	movs	r2, #1
 80061c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061c8:	e040      	b.n	800624c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80061ca:	4b24      	ldr	r3, [pc, #144]	@ (800625c <vTaskSwitchContext+0xa8>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061d0:	4b23      	ldr	r3, [pc, #140]	@ (8006260 <vTaskSwitchContext+0xac>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	fab3 f383 	clz	r3, r3
 80061dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80061de:	7afb      	ldrb	r3, [r7, #11]
 80061e0:	f1c3 031f 	rsb	r3, r3, #31
 80061e4:	617b      	str	r3, [r7, #20]
 80061e6:	491f      	ldr	r1, [pc, #124]	@ (8006264 <vTaskSwitchContext+0xb0>)
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	4613      	mov	r3, r2
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	440b      	add	r3, r1
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d10b      	bne.n	8006212 <vTaskSwitchContext+0x5e>
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	607b      	str	r3, [r7, #4]
}
 800620c:	bf00      	nop
 800620e:	bf00      	nop
 8006210:	e7fd      	b.n	800620e <vTaskSwitchContext+0x5a>
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	4613      	mov	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	4413      	add	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4a11      	ldr	r2, [pc, #68]	@ (8006264 <vTaskSwitchContext+0xb0>)
 800621e:	4413      	add	r3, r2
 8006220:	613b      	str	r3, [r7, #16]
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	605a      	str	r2, [r3, #4]
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	3308      	adds	r3, #8
 8006234:	429a      	cmp	r2, r3
 8006236:	d104      	bne.n	8006242 <vTaskSwitchContext+0x8e>
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	605a      	str	r2, [r3, #4]
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	4a07      	ldr	r2, [pc, #28]	@ (8006268 <vTaskSwitchContext+0xb4>)
 800624a:	6013      	str	r3, [r2, #0]
}
 800624c:	bf00      	nop
 800624e:	371c      	adds	r7, #28
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	200005f0 	.word	0x200005f0
 800625c:	200005dc 	.word	0x200005dc
 8006260:	200005d0 	.word	0x200005d0
 8006264:	200004cc 	.word	0x200004cc
 8006268:	200004c8 	.word	0x200004c8

0800626c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d10b      	bne.n	800629a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	60fb      	str	r3, [r7, #12]
}
 8006294:	bf00      	nop
 8006296:	bf00      	nop
 8006298:	e7fd      	b.n	8006296 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	3318      	adds	r3, #24
 800629e:	4618      	mov	r0, r3
 80062a0:	f7ff fb03 	bl	80058aa <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062a4:	4b1d      	ldr	r3, [pc, #116]	@ (800631c <xTaskRemoveFromEventList+0xb0>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d11c      	bne.n	80062e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	3304      	adds	r3, #4
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7ff fafa 	bl	80058aa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ba:	2201      	movs	r2, #1
 80062bc:	409a      	lsls	r2, r3
 80062be:	4b18      	ldr	r3, [pc, #96]	@ (8006320 <xTaskRemoveFromEventList+0xb4>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	4a16      	ldr	r2, [pc, #88]	@ (8006320 <xTaskRemoveFromEventList+0xb4>)
 80062c6:	6013      	str	r3, [r2, #0]
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062cc:	4613      	mov	r3, r2
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	4a13      	ldr	r2, [pc, #76]	@ (8006324 <xTaskRemoveFromEventList+0xb8>)
 80062d6:	441a      	add	r2, r3
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	3304      	adds	r3, #4
 80062dc:	4619      	mov	r1, r3
 80062de:	4610      	mov	r0, r2
 80062e0:	f7ff fa86 	bl	80057f0 <vListInsertEnd>
 80062e4:	e005      	b.n	80062f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	3318      	adds	r3, #24
 80062ea:	4619      	mov	r1, r3
 80062ec:	480e      	ldr	r0, [pc, #56]	@ (8006328 <xTaskRemoveFromEventList+0xbc>)
 80062ee:	f7ff fa7f 	bl	80057f0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062f6:	4b0d      	ldr	r3, [pc, #52]	@ (800632c <xTaskRemoveFromEventList+0xc0>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d905      	bls.n	800630c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006300:	2301      	movs	r3, #1
 8006302:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006304:	4b0a      	ldr	r3, [pc, #40]	@ (8006330 <xTaskRemoveFromEventList+0xc4>)
 8006306:	2201      	movs	r2, #1
 8006308:	601a      	str	r2, [r3, #0]
 800630a:	e001      	b.n	8006310 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800630c:	2300      	movs	r3, #0
 800630e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006310:	697b      	ldr	r3, [r7, #20]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3718      	adds	r7, #24
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	200005f0 	.word	0x200005f0
 8006320:	200005d0 	.word	0x200005d0
 8006324:	200004cc 	.word	0x200004cc
 8006328:	20000588 	.word	0x20000588
 800632c:	200004c8 	.word	0x200004c8
 8006330:	200005dc 	.word	0x200005dc

08006334 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800633c:	f000 f852 	bl	80063e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006340:	4b06      	ldr	r3, [pc, #24]	@ (800635c <prvIdleTask+0x28>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d9f9      	bls.n	800633c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006348:	4b05      	ldr	r3, [pc, #20]	@ (8006360 <prvIdleTask+0x2c>)
 800634a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800634e:	601a      	str	r2, [r3, #0]
 8006350:	f3bf 8f4f 	dsb	sy
 8006354:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006358:	e7f0      	b.n	800633c <prvIdleTask+0x8>
 800635a:	bf00      	nop
 800635c:	200004cc 	.word	0x200004cc
 8006360:	e000ed04 	.word	0xe000ed04

08006364 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800636a:	2300      	movs	r3, #0
 800636c:	607b      	str	r3, [r7, #4]
 800636e:	e00c      	b.n	800638a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006370:	687a      	ldr	r2, [r7, #4]
 8006372:	4613      	mov	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	4413      	add	r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4a12      	ldr	r2, [pc, #72]	@ (80063c4 <prvInitialiseTaskLists+0x60>)
 800637c:	4413      	add	r3, r2
 800637e:	4618      	mov	r0, r3
 8006380:	f7ff fa09 	bl	8005796 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	3301      	adds	r3, #1
 8006388:	607b      	str	r3, [r7, #4]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2b06      	cmp	r3, #6
 800638e:	d9ef      	bls.n	8006370 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006390:	480d      	ldr	r0, [pc, #52]	@ (80063c8 <prvInitialiseTaskLists+0x64>)
 8006392:	f7ff fa00 	bl	8005796 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006396:	480d      	ldr	r0, [pc, #52]	@ (80063cc <prvInitialiseTaskLists+0x68>)
 8006398:	f7ff f9fd 	bl	8005796 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800639c:	480c      	ldr	r0, [pc, #48]	@ (80063d0 <prvInitialiseTaskLists+0x6c>)
 800639e:	f7ff f9fa 	bl	8005796 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80063a2:	480c      	ldr	r0, [pc, #48]	@ (80063d4 <prvInitialiseTaskLists+0x70>)
 80063a4:	f7ff f9f7 	bl	8005796 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80063a8:	480b      	ldr	r0, [pc, #44]	@ (80063d8 <prvInitialiseTaskLists+0x74>)
 80063aa:	f7ff f9f4 	bl	8005796 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80063ae:	4b0b      	ldr	r3, [pc, #44]	@ (80063dc <prvInitialiseTaskLists+0x78>)
 80063b0:	4a05      	ldr	r2, [pc, #20]	@ (80063c8 <prvInitialiseTaskLists+0x64>)
 80063b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80063b4:	4b0a      	ldr	r3, [pc, #40]	@ (80063e0 <prvInitialiseTaskLists+0x7c>)
 80063b6:	4a05      	ldr	r2, [pc, #20]	@ (80063cc <prvInitialiseTaskLists+0x68>)
 80063b8:	601a      	str	r2, [r3, #0]
}
 80063ba:	bf00      	nop
 80063bc:	3708      	adds	r7, #8
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	200004cc 	.word	0x200004cc
 80063c8:	20000558 	.word	0x20000558
 80063cc:	2000056c 	.word	0x2000056c
 80063d0:	20000588 	.word	0x20000588
 80063d4:	2000059c 	.word	0x2000059c
 80063d8:	200005b4 	.word	0x200005b4
 80063dc:	20000580 	.word	0x20000580
 80063e0:	20000584 	.word	0x20000584

080063e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063ea:	e019      	b.n	8006420 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80063ec:	f000 fa0c 	bl	8006808 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063f0:	4b10      	ldr	r3, [pc, #64]	@ (8006434 <prvCheckTasksWaitingTermination+0x50>)
 80063f2:	68db      	ldr	r3, [r3, #12]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	3304      	adds	r3, #4
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7ff fa54 	bl	80058aa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006402:	4b0d      	ldr	r3, [pc, #52]	@ (8006438 <prvCheckTasksWaitingTermination+0x54>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3b01      	subs	r3, #1
 8006408:	4a0b      	ldr	r2, [pc, #44]	@ (8006438 <prvCheckTasksWaitingTermination+0x54>)
 800640a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800640c:	4b0b      	ldr	r3, [pc, #44]	@ (800643c <prvCheckTasksWaitingTermination+0x58>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3b01      	subs	r3, #1
 8006412:	4a0a      	ldr	r2, [pc, #40]	@ (800643c <prvCheckTasksWaitingTermination+0x58>)
 8006414:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006416:	f000 fa29 	bl	800686c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f810 	bl	8006440 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006420:	4b06      	ldr	r3, [pc, #24]	@ (800643c <prvCheckTasksWaitingTermination+0x58>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d1e1      	bne.n	80063ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006428:	bf00      	nop
 800642a:	bf00      	nop
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	2000059c 	.word	0x2000059c
 8006438:	200005c8 	.word	0x200005c8
 800643c:	200005b0 	.word	0x200005b0

08006440 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800644e:	2b00      	cmp	r3, #0
 8006450:	d108      	bne.n	8006464 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006456:	4618      	mov	r0, r3
 8006458:	f000 fb84 	bl	8006b64 <vPortFree>
				vPortFree( pxTCB );
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fb81 	bl	8006b64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006462:	e019      	b.n	8006498 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800646a:	2b01      	cmp	r3, #1
 800646c:	d103      	bne.n	8006476 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 fb78 	bl	8006b64 <vPortFree>
	}
 8006474:	e010      	b.n	8006498 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800647c:	2b02      	cmp	r3, #2
 800647e:	d00b      	beq.n	8006498 <prvDeleteTCB+0x58>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	60fb      	str	r3, [r7, #12]
}
 8006492:	bf00      	nop
 8006494:	bf00      	nop
 8006496:	e7fd      	b.n	8006494 <prvDeleteTCB+0x54>
	}
 8006498:	bf00      	nop
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064a6:	4b0c      	ldr	r3, [pc, #48]	@ (80064d8 <prvResetNextTaskUnblockTime+0x38>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d104      	bne.n	80064ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80064b0:	4b0a      	ldr	r3, [pc, #40]	@ (80064dc <prvResetNextTaskUnblockTime+0x3c>)
 80064b2:	f04f 32ff 	mov.w	r2, #4294967295
 80064b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80064b8:	e008      	b.n	80064cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064ba:	4b07      	ldr	r3, [pc, #28]	@ (80064d8 <prvResetNextTaskUnblockTime+0x38>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	4a04      	ldr	r2, [pc, #16]	@ (80064dc <prvResetNextTaskUnblockTime+0x3c>)
 80064ca:	6013      	str	r3, [r2, #0]
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr
 80064d8:	20000580 	.word	0x20000580
 80064dc:	200005e8 	.word	0x200005e8

080064e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80064ea:	4b29      	ldr	r3, [pc, #164]	@ (8006590 <prvAddCurrentTaskToDelayedList+0xb0>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064f0:	4b28      	ldr	r3, [pc, #160]	@ (8006594 <prvAddCurrentTaskToDelayedList+0xb4>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3304      	adds	r3, #4
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7ff f9d7 	bl	80058aa <uxListRemove>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10b      	bne.n	800651a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006502:	4b24      	ldr	r3, [pc, #144]	@ (8006594 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006508:	2201      	movs	r2, #1
 800650a:	fa02 f303 	lsl.w	r3, r2, r3
 800650e:	43da      	mvns	r2, r3
 8006510:	4b21      	ldr	r3, [pc, #132]	@ (8006598 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4013      	ands	r3, r2
 8006516:	4a20      	ldr	r2, [pc, #128]	@ (8006598 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006518:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006520:	d10a      	bne.n	8006538 <prvAddCurrentTaskToDelayedList+0x58>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d007      	beq.n	8006538 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006528:	4b1a      	ldr	r3, [pc, #104]	@ (8006594 <prvAddCurrentTaskToDelayedList+0xb4>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3304      	adds	r3, #4
 800652e:	4619      	mov	r1, r3
 8006530:	481a      	ldr	r0, [pc, #104]	@ (800659c <prvAddCurrentTaskToDelayedList+0xbc>)
 8006532:	f7ff f95d 	bl	80057f0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006536:	e026      	b.n	8006586 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4413      	add	r3, r2
 800653e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006540:	4b14      	ldr	r3, [pc, #80]	@ (8006594 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006548:	68ba      	ldr	r2, [r7, #8]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	429a      	cmp	r2, r3
 800654e:	d209      	bcs.n	8006564 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006550:	4b13      	ldr	r3, [pc, #76]	@ (80065a0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	4b0f      	ldr	r3, [pc, #60]	@ (8006594 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3304      	adds	r3, #4
 800655a:	4619      	mov	r1, r3
 800655c:	4610      	mov	r0, r2
 800655e:	f7ff f96b 	bl	8005838 <vListInsert>
}
 8006562:	e010      	b.n	8006586 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006564:	4b0f      	ldr	r3, [pc, #60]	@ (80065a4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	4b0a      	ldr	r3, [pc, #40]	@ (8006594 <prvAddCurrentTaskToDelayedList+0xb4>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	3304      	adds	r3, #4
 800656e:	4619      	mov	r1, r3
 8006570:	4610      	mov	r0, r2
 8006572:	f7ff f961 	bl	8005838 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006576:	4b0c      	ldr	r3, [pc, #48]	@ (80065a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	429a      	cmp	r2, r3
 800657e:	d202      	bcs.n	8006586 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006580:	4a09      	ldr	r2, [pc, #36]	@ (80065a8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	6013      	str	r3, [r2, #0]
}
 8006586:	bf00      	nop
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	200005cc 	.word	0x200005cc
 8006594:	200004c8 	.word	0x200004c8
 8006598:	200005d0 	.word	0x200005d0
 800659c:	200005b4 	.word	0x200005b4
 80065a0:	20000584 	.word	0x20000584
 80065a4:	20000580 	.word	0x20000580
 80065a8:	200005e8 	.word	0x200005e8

080065ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	3b04      	subs	r3, #4
 80065bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80065c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	3b04      	subs	r3, #4
 80065ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	f023 0201 	bic.w	r2, r3, #1
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	3b04      	subs	r3, #4
 80065da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065dc:	4a0c      	ldr	r2, [pc, #48]	@ (8006610 <pxPortInitialiseStack+0x64>)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	3b14      	subs	r3, #20
 80065e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3b04      	subs	r3, #4
 80065f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f06f 0202 	mvn.w	r2, #2
 80065fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3b20      	subs	r3, #32
 8006600:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006602:	68fb      	ldr	r3, [r7, #12]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3714      	adds	r7, #20
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr
 8006610:	08006615 	.word	0x08006615

08006614 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800661a:	2300      	movs	r3, #0
 800661c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800661e:	4b13      	ldr	r3, [pc, #76]	@ (800666c <prvTaskExitError+0x58>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006626:	d00b      	beq.n	8006640 <prvTaskExitError+0x2c>
	__asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	60fb      	str	r3, [r7, #12]
}
 800663a:	bf00      	nop
 800663c:	bf00      	nop
 800663e:	e7fd      	b.n	800663c <prvTaskExitError+0x28>
	__asm volatile
 8006640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
 8006650:	60bb      	str	r3, [r7, #8]
}
 8006652:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006654:	bf00      	nop
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d0fc      	beq.n	8006656 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800665c:	bf00      	nop
 800665e:	bf00      	nop
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	20000024 	.word	0x20000024

08006670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006670:	4b07      	ldr	r3, [pc, #28]	@ (8006690 <pxCurrentTCBConst2>)
 8006672:	6819      	ldr	r1, [r3, #0]
 8006674:	6808      	ldr	r0, [r1, #0]
 8006676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667a:	f380 8809 	msr	PSP, r0
 800667e:	f3bf 8f6f 	isb	sy
 8006682:	f04f 0000 	mov.w	r0, #0
 8006686:	f380 8811 	msr	BASEPRI, r0
 800668a:	4770      	bx	lr
 800668c:	f3af 8000 	nop.w

08006690 <pxCurrentTCBConst2>:
 8006690:	200004c8 	.word	0x200004c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop

08006698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006698:	4808      	ldr	r0, [pc, #32]	@ (80066bc <prvPortStartFirstTask+0x24>)
 800669a:	6800      	ldr	r0, [r0, #0]
 800669c:	6800      	ldr	r0, [r0, #0]
 800669e:	f380 8808 	msr	MSP, r0
 80066a2:	f04f 0000 	mov.w	r0, #0
 80066a6:	f380 8814 	msr	CONTROL, r0
 80066aa:	b662      	cpsie	i
 80066ac:	b661      	cpsie	f
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	df00      	svc	0
 80066b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066ba:	bf00      	nop
 80066bc:	e000ed08 	.word	0xe000ed08

080066c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066c6:	4b47      	ldr	r3, [pc, #284]	@ (80067e4 <xPortStartScheduler+0x124>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a47      	ldr	r2, [pc, #284]	@ (80067e8 <xPortStartScheduler+0x128>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d10b      	bne.n	80066e8 <xPortStartScheduler+0x28>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d4:	f383 8811 	msr	BASEPRI, r3
 80066d8:	f3bf 8f6f 	isb	sy
 80066dc:	f3bf 8f4f 	dsb	sy
 80066e0:	613b      	str	r3, [r7, #16]
}
 80066e2:	bf00      	nop
 80066e4:	bf00      	nop
 80066e6:	e7fd      	b.n	80066e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066e8:	4b3e      	ldr	r3, [pc, #248]	@ (80067e4 <xPortStartScheduler+0x124>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a3f      	ldr	r2, [pc, #252]	@ (80067ec <xPortStartScheduler+0x12c>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d10b      	bne.n	800670a <xPortStartScheduler+0x4a>
	__asm volatile
 80066f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f6:	f383 8811 	msr	BASEPRI, r3
 80066fa:	f3bf 8f6f 	isb	sy
 80066fe:	f3bf 8f4f 	dsb	sy
 8006702:	60fb      	str	r3, [r7, #12]
}
 8006704:	bf00      	nop
 8006706:	bf00      	nop
 8006708:	e7fd      	b.n	8006706 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800670a:	4b39      	ldr	r3, [pc, #228]	@ (80067f0 <xPortStartScheduler+0x130>)
 800670c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	b2db      	uxtb	r3, r3
 8006714:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	22ff      	movs	r2, #255	@ 0xff
 800671a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	b2db      	uxtb	r3, r3
 8006722:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006724:	78fb      	ldrb	r3, [r7, #3]
 8006726:	b2db      	uxtb	r3, r3
 8006728:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800672c:	b2da      	uxtb	r2, r3
 800672e:	4b31      	ldr	r3, [pc, #196]	@ (80067f4 <xPortStartScheduler+0x134>)
 8006730:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006732:	4b31      	ldr	r3, [pc, #196]	@ (80067f8 <xPortStartScheduler+0x138>)
 8006734:	2207      	movs	r2, #7
 8006736:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006738:	e009      	b.n	800674e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800673a:	4b2f      	ldr	r3, [pc, #188]	@ (80067f8 <xPortStartScheduler+0x138>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3b01      	subs	r3, #1
 8006740:	4a2d      	ldr	r2, [pc, #180]	@ (80067f8 <xPortStartScheduler+0x138>)
 8006742:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	b2db      	uxtb	r3, r3
 8006748:	005b      	lsls	r3, r3, #1
 800674a:	b2db      	uxtb	r3, r3
 800674c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800674e:	78fb      	ldrb	r3, [r7, #3]
 8006750:	b2db      	uxtb	r3, r3
 8006752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006756:	2b80      	cmp	r3, #128	@ 0x80
 8006758:	d0ef      	beq.n	800673a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800675a:	4b27      	ldr	r3, [pc, #156]	@ (80067f8 <xPortStartScheduler+0x138>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f1c3 0307 	rsb	r3, r3, #7
 8006762:	2b04      	cmp	r3, #4
 8006764:	d00b      	beq.n	800677e <xPortStartScheduler+0xbe>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	60bb      	str	r3, [r7, #8]
}
 8006778:	bf00      	nop
 800677a:	bf00      	nop
 800677c:	e7fd      	b.n	800677a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800677e:	4b1e      	ldr	r3, [pc, #120]	@ (80067f8 <xPortStartScheduler+0x138>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	021b      	lsls	r3, r3, #8
 8006784:	4a1c      	ldr	r2, [pc, #112]	@ (80067f8 <xPortStartScheduler+0x138>)
 8006786:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006788:	4b1b      	ldr	r3, [pc, #108]	@ (80067f8 <xPortStartScheduler+0x138>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006790:	4a19      	ldr	r2, [pc, #100]	@ (80067f8 <xPortStartScheduler+0x138>)
 8006792:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	b2da      	uxtb	r2, r3
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800679c:	4b17      	ldr	r3, [pc, #92]	@ (80067fc <xPortStartScheduler+0x13c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a16      	ldr	r2, [pc, #88]	@ (80067fc <xPortStartScheduler+0x13c>)
 80067a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80067a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067a8:	4b14      	ldr	r3, [pc, #80]	@ (80067fc <xPortStartScheduler+0x13c>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a13      	ldr	r2, [pc, #76]	@ (80067fc <xPortStartScheduler+0x13c>)
 80067ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80067b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067b4:	f000 f8da 	bl	800696c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067b8:	4b11      	ldr	r3, [pc, #68]	@ (8006800 <xPortStartScheduler+0x140>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80067be:	f000 f8f9 	bl	80069b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067c2:	4b10      	ldr	r3, [pc, #64]	@ (8006804 <xPortStartScheduler+0x144>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a0f      	ldr	r2, [pc, #60]	@ (8006804 <xPortStartScheduler+0x144>)
 80067c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80067cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067ce:	f7ff ff63 	bl	8006698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067d2:	f7ff fcef 	bl	80061b4 <vTaskSwitchContext>
	prvTaskExitError();
 80067d6:	f7ff ff1d 	bl	8006614 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3718      	adds	r7, #24
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}
 80067e4:	e000ed00 	.word	0xe000ed00
 80067e8:	410fc271 	.word	0x410fc271
 80067ec:	410fc270 	.word	0x410fc270
 80067f0:	e000e400 	.word	0xe000e400
 80067f4:	200005f4 	.word	0x200005f4
 80067f8:	200005f8 	.word	0x200005f8
 80067fc:	e000ed20 	.word	0xe000ed20
 8006800:	20000024 	.word	0x20000024
 8006804:	e000ef34 	.word	0xe000ef34

08006808 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	607b      	str	r3, [r7, #4]
}
 8006820:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006822:	4b10      	ldr	r3, [pc, #64]	@ (8006864 <vPortEnterCritical+0x5c>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3301      	adds	r3, #1
 8006828:	4a0e      	ldr	r2, [pc, #56]	@ (8006864 <vPortEnterCritical+0x5c>)
 800682a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800682c:	4b0d      	ldr	r3, [pc, #52]	@ (8006864 <vPortEnterCritical+0x5c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d110      	bne.n	8006856 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006834:	4b0c      	ldr	r3, [pc, #48]	@ (8006868 <vPortEnterCritical+0x60>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00b      	beq.n	8006856 <vPortEnterCritical+0x4e>
	__asm volatile
 800683e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	603b      	str	r3, [r7, #0]
}
 8006850:	bf00      	nop
 8006852:	bf00      	nop
 8006854:	e7fd      	b.n	8006852 <vPortEnterCritical+0x4a>
	}
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	20000024 	.word	0x20000024
 8006868:	e000ed04 	.word	0xe000ed04

0800686c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006872:	4b12      	ldr	r3, [pc, #72]	@ (80068bc <vPortExitCritical+0x50>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10b      	bne.n	8006892 <vPortExitCritical+0x26>
	__asm volatile
 800687a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687e:	f383 8811 	msr	BASEPRI, r3
 8006882:	f3bf 8f6f 	isb	sy
 8006886:	f3bf 8f4f 	dsb	sy
 800688a:	607b      	str	r3, [r7, #4]
}
 800688c:	bf00      	nop
 800688e:	bf00      	nop
 8006890:	e7fd      	b.n	800688e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006892:	4b0a      	ldr	r3, [pc, #40]	@ (80068bc <vPortExitCritical+0x50>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	3b01      	subs	r3, #1
 8006898:	4a08      	ldr	r2, [pc, #32]	@ (80068bc <vPortExitCritical+0x50>)
 800689a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800689c:	4b07      	ldr	r3, [pc, #28]	@ (80068bc <vPortExitCritical+0x50>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d105      	bne.n	80068b0 <vPortExitCritical+0x44>
 80068a4:	2300      	movs	r3, #0
 80068a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80068ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	20000024 	.word	0x20000024

080068c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068c0:	f3ef 8009 	mrs	r0, PSP
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	4b15      	ldr	r3, [pc, #84]	@ (8006920 <pxCurrentTCBConst>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	f01e 0f10 	tst.w	lr, #16
 80068d0:	bf08      	it	eq
 80068d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068da:	6010      	str	r0, [r2, #0]
 80068dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80068e4:	f380 8811 	msr	BASEPRI, r0
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f7ff fc60 	bl	80061b4 <vTaskSwitchContext>
 80068f4:	f04f 0000 	mov.w	r0, #0
 80068f8:	f380 8811 	msr	BASEPRI, r0
 80068fc:	bc09      	pop	{r0, r3}
 80068fe:	6819      	ldr	r1, [r3, #0]
 8006900:	6808      	ldr	r0, [r1, #0]
 8006902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006906:	f01e 0f10 	tst.w	lr, #16
 800690a:	bf08      	it	eq
 800690c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006910:	f380 8809 	msr	PSP, r0
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	f3af 8000 	nop.w

08006920 <pxCurrentTCBConst>:
 8006920:	200004c8 	.word	0x200004c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006924:	bf00      	nop
 8006926:	bf00      	nop

08006928 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	607b      	str	r3, [r7, #4]
}
 8006940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006942:	f7ff fb7d 	bl	8006040 <xTaskIncrementTick>
 8006946:	4603      	mov	r3, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	d003      	beq.n	8006954 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800694c:	4b06      	ldr	r3, [pc, #24]	@ (8006968 <SysTick_Handler+0x40>)
 800694e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006952:	601a      	str	r2, [r3, #0]
 8006954:	2300      	movs	r3, #0
 8006956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	f383 8811 	msr	BASEPRI, r3
}
 800695e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006960:	bf00      	nop
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}
 8006968:	e000ed04 	.word	0xe000ed04

0800696c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800696c:	b480      	push	{r7}
 800696e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006970:	4b0b      	ldr	r3, [pc, #44]	@ (80069a0 <vPortSetupTimerInterrupt+0x34>)
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006976:	4b0b      	ldr	r3, [pc, #44]	@ (80069a4 <vPortSetupTimerInterrupt+0x38>)
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800697c:	4b0a      	ldr	r3, [pc, #40]	@ (80069a8 <vPortSetupTimerInterrupt+0x3c>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a0a      	ldr	r2, [pc, #40]	@ (80069ac <vPortSetupTimerInterrupt+0x40>)
 8006982:	fba2 2303 	umull	r2, r3, r2, r3
 8006986:	099b      	lsrs	r3, r3, #6
 8006988:	4a09      	ldr	r2, [pc, #36]	@ (80069b0 <vPortSetupTimerInterrupt+0x44>)
 800698a:	3b01      	subs	r3, #1
 800698c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800698e:	4b04      	ldr	r3, [pc, #16]	@ (80069a0 <vPortSetupTimerInterrupt+0x34>)
 8006990:	2207      	movs	r2, #7
 8006992:	601a      	str	r2, [r3, #0]
}
 8006994:	bf00      	nop
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	e000e010 	.word	0xe000e010
 80069a4:	e000e018 	.word	0xe000e018
 80069a8:	20000004 	.word	0x20000004
 80069ac:	10624dd3 	.word	0x10624dd3
 80069b0:	e000e014 	.word	0xe000e014

080069b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80069b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80069c4 <vPortEnableVFP+0x10>
 80069b8:	6801      	ldr	r1, [r0, #0]
 80069ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80069be:	6001      	str	r1, [r0, #0]
 80069c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069c2:	bf00      	nop
 80069c4:	e000ed88 	.word	0xe000ed88

080069c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08a      	sub	sp, #40	@ 0x28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069d0:	2300      	movs	r3, #0
 80069d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069d4:	f7ff fa88 	bl	8005ee8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069d8:	4b5c      	ldr	r3, [pc, #368]	@ (8006b4c <pvPortMalloc+0x184>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d101      	bne.n	80069e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069e0:	f000 f924 	bl	8006c2c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069e4:	4b5a      	ldr	r3, [pc, #360]	@ (8006b50 <pvPortMalloc+0x188>)
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4013      	ands	r3, r2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f040 8095 	bne.w	8006b1c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d01e      	beq.n	8006a36 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80069f8:	2208      	movs	r2, #8
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4413      	add	r3, r2
 80069fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d015      	beq.n	8006a36 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f023 0307 	bic.w	r3, r3, #7
 8006a10:	3308      	adds	r3, #8
 8006a12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f003 0307 	and.w	r3, r3, #7
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00b      	beq.n	8006a36 <pvPortMalloc+0x6e>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	617b      	str	r3, [r7, #20]
}
 8006a30:	bf00      	nop
 8006a32:	bf00      	nop
 8006a34:	e7fd      	b.n	8006a32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d06f      	beq.n	8006b1c <pvPortMalloc+0x154>
 8006a3c:	4b45      	ldr	r3, [pc, #276]	@ (8006b54 <pvPortMalloc+0x18c>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d86a      	bhi.n	8006b1c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a46:	4b44      	ldr	r3, [pc, #272]	@ (8006b58 <pvPortMalloc+0x190>)
 8006a48:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a4a:	4b43      	ldr	r3, [pc, #268]	@ (8006b58 <pvPortMalloc+0x190>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a50:	e004      	b.n	8006a5c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a54:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d903      	bls.n	8006a6e <pvPortMalloc+0xa6>
 8006a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1f1      	bne.n	8006a52 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a6e:	4b37      	ldr	r3, [pc, #220]	@ (8006b4c <pvPortMalloc+0x184>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d051      	beq.n	8006b1c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a78:	6a3b      	ldr	r3, [r7, #32]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2208      	movs	r2, #8
 8006a7e:	4413      	add	r3, r2
 8006a80:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	6a3b      	ldr	r3, [r7, #32]
 8006a88:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8c:	685a      	ldr	r2, [r3, #4]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	1ad2      	subs	r2, r2, r3
 8006a92:	2308      	movs	r3, #8
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d920      	bls.n	8006adc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	f003 0307 	and.w	r3, r3, #7
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00b      	beq.n	8006ac4 <pvPortMalloc+0xfc>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	613b      	str	r3, [r7, #16]
}
 8006abe:	bf00      	nop
 8006ac0:	bf00      	nop
 8006ac2:	e7fd      	b.n	8006ac0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac6:	685a      	ldr	r2, [r3, #4]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	1ad2      	subs	r2, r2, r3
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ad6:	69b8      	ldr	r0, [r7, #24]
 8006ad8:	f000 f90a 	bl	8006cf0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006adc:	4b1d      	ldr	r3, [pc, #116]	@ (8006b54 <pvPortMalloc+0x18c>)
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	4a1b      	ldr	r2, [pc, #108]	@ (8006b54 <pvPortMalloc+0x18c>)
 8006ae8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006aea:	4b1a      	ldr	r3, [pc, #104]	@ (8006b54 <pvPortMalloc+0x18c>)
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	4b1b      	ldr	r3, [pc, #108]	@ (8006b5c <pvPortMalloc+0x194>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d203      	bcs.n	8006afe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006af6:	4b17      	ldr	r3, [pc, #92]	@ (8006b54 <pvPortMalloc+0x18c>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a18      	ldr	r2, [pc, #96]	@ (8006b5c <pvPortMalloc+0x194>)
 8006afc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	4b13      	ldr	r3, [pc, #76]	@ (8006b50 <pvPortMalloc+0x188>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	431a      	orrs	r2, r3
 8006b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0e:	2200      	movs	r2, #0
 8006b10:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b12:	4b13      	ldr	r3, [pc, #76]	@ (8006b60 <pvPortMalloc+0x198>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	3301      	adds	r3, #1
 8006b18:	4a11      	ldr	r2, [pc, #68]	@ (8006b60 <pvPortMalloc+0x198>)
 8006b1a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b1c:	f7ff f9f2 	bl	8005f04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	f003 0307 	and.w	r3, r3, #7
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00b      	beq.n	8006b42 <pvPortMalloc+0x17a>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	60fb      	str	r3, [r7, #12]
}
 8006b3c:	bf00      	nop
 8006b3e:	bf00      	nop
 8006b40:	e7fd      	b.n	8006b3e <pvPortMalloc+0x176>
	return pvReturn;
 8006b42:	69fb      	ldr	r3, [r7, #28]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3728      	adds	r7, #40	@ 0x28
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	20004204 	.word	0x20004204
 8006b50:	20004218 	.word	0x20004218
 8006b54:	20004208 	.word	0x20004208
 8006b58:	200041fc 	.word	0x200041fc
 8006b5c:	2000420c 	.word	0x2000420c
 8006b60:	20004210 	.word	0x20004210

08006b64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b086      	sub	sp, #24
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d04f      	beq.n	8006c16 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b76:	2308      	movs	r3, #8
 8006b78:	425b      	negs	r3, r3
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	4b25      	ldr	r3, [pc, #148]	@ (8006c20 <vPortFree+0xbc>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	4013      	ands	r3, r2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10b      	bne.n	8006baa <vPortFree+0x46>
	__asm volatile
 8006b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	60fb      	str	r3, [r7, #12]
}
 8006ba4:	bf00      	nop
 8006ba6:	bf00      	nop
 8006ba8:	e7fd      	b.n	8006ba6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00b      	beq.n	8006bca <vPortFree+0x66>
	__asm volatile
 8006bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	60bb      	str	r3, [r7, #8]
}
 8006bc4:	bf00      	nop
 8006bc6:	bf00      	nop
 8006bc8:	e7fd      	b.n	8006bc6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	685a      	ldr	r2, [r3, #4]
 8006bce:	4b14      	ldr	r3, [pc, #80]	@ (8006c20 <vPortFree+0xbc>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d01e      	beq.n	8006c16 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d11a      	bne.n	8006c16 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	685a      	ldr	r2, [r3, #4]
 8006be4:	4b0e      	ldr	r3, [pc, #56]	@ (8006c20 <vPortFree+0xbc>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	43db      	mvns	r3, r3
 8006bea:	401a      	ands	r2, r3
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006bf0:	f7ff f97a 	bl	8005ee8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	4b0a      	ldr	r3, [pc, #40]	@ (8006c24 <vPortFree+0xc0>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	4a09      	ldr	r2, [pc, #36]	@ (8006c24 <vPortFree+0xc0>)
 8006c00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c02:	6938      	ldr	r0, [r7, #16]
 8006c04:	f000 f874 	bl	8006cf0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c08:	4b07      	ldr	r3, [pc, #28]	@ (8006c28 <vPortFree+0xc4>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	4a06      	ldr	r2, [pc, #24]	@ (8006c28 <vPortFree+0xc4>)
 8006c10:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c12:	f7ff f977 	bl	8005f04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c16:	bf00      	nop
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	20004218 	.word	0x20004218
 8006c24:	20004208 	.word	0x20004208
 8006c28:	20004214 	.word	0x20004214

08006c2c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c32:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8006c36:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c38:	4b27      	ldr	r3, [pc, #156]	@ (8006cd8 <prvHeapInit+0xac>)
 8006c3a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f003 0307 	and.w	r3, r3, #7
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00c      	beq.n	8006c60 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3307      	adds	r3, #7
 8006c4a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f023 0307 	bic.w	r3, r3, #7
 8006c52:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c54:	68ba      	ldr	r2, [r7, #8]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	4a1f      	ldr	r2, [pc, #124]	@ (8006cd8 <prvHeapInit+0xac>)
 8006c5c:	4413      	add	r3, r2
 8006c5e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c64:	4a1d      	ldr	r2, [pc, #116]	@ (8006cdc <prvHeapInit+0xb0>)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8006cdc <prvHeapInit+0xb0>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	68ba      	ldr	r2, [r7, #8]
 8006c74:	4413      	add	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c78:	2208      	movs	r2, #8
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	1a9b      	subs	r3, r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f023 0307 	bic.w	r3, r3, #7
 8006c86:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	4a15      	ldr	r2, [pc, #84]	@ (8006ce0 <prvHeapInit+0xb4>)
 8006c8c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c8e:	4b14      	ldr	r3, [pc, #80]	@ (8006ce0 <prvHeapInit+0xb4>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2200      	movs	r2, #0
 8006c94:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c96:	4b12      	ldr	r3, [pc, #72]	@ (8006ce0 <prvHeapInit+0xb4>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	1ad2      	subs	r2, r2, r3
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006cac:	4b0c      	ldr	r3, [pc, #48]	@ (8006ce0 <prvHeapInit+0xb4>)
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8006ce4 <prvHeapInit+0xb8>)
 8006cba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	4a09      	ldr	r2, [pc, #36]	@ (8006ce8 <prvHeapInit+0xbc>)
 8006cc2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006cc4:	4b09      	ldr	r3, [pc, #36]	@ (8006cec <prvHeapInit+0xc0>)
 8006cc6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006cca:	601a      	str	r2, [r3, #0]
}
 8006ccc:	bf00      	nop
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	200005fc 	.word	0x200005fc
 8006cdc:	200041fc 	.word	0x200041fc
 8006ce0:	20004204 	.word	0x20004204
 8006ce4:	2000420c 	.word	0x2000420c
 8006ce8:	20004208 	.word	0x20004208
 8006cec:	20004218 	.word	0x20004218

08006cf0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cf8:	4b28      	ldr	r3, [pc, #160]	@ (8006d9c <prvInsertBlockIntoFreeList+0xac>)
 8006cfa:	60fb      	str	r3, [r7, #12]
 8006cfc:	e002      	b.n	8006d04 <prvInsertBlockIntoFreeList+0x14>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d8f7      	bhi.n	8006cfe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	4413      	add	r3, r2
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d108      	bne.n	8006d32 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	441a      	add	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	441a      	add	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d118      	bne.n	8006d78 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	4b15      	ldr	r3, [pc, #84]	@ (8006da0 <prvInsertBlockIntoFreeList+0xb0>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d00d      	beq.n	8006d6e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	441a      	add	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	e008      	b.n	8006d80 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8006da0 <prvInsertBlockIntoFreeList+0xb0>)
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	e003      	b.n	8006d80 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d002      	beq.n	8006d8e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d8e:	bf00      	nop
 8006d90:	3714      	adds	r7, #20
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	200041fc 	.word	0x200041fc
 8006da0:	20004204 	.word	0x20004204

08006da4 <memset>:
 8006da4:	4402      	add	r2, r0
 8006da6:	4603      	mov	r3, r0
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d100      	bne.n	8006dae <memset+0xa>
 8006dac:	4770      	bx	lr
 8006dae:	f803 1b01 	strb.w	r1, [r3], #1
 8006db2:	e7f9      	b.n	8006da8 <memset+0x4>

08006db4 <__libc_init_array>:
 8006db4:	b570      	push	{r4, r5, r6, lr}
 8006db6:	4d0d      	ldr	r5, [pc, #52]	@ (8006dec <__libc_init_array+0x38>)
 8006db8:	4c0d      	ldr	r4, [pc, #52]	@ (8006df0 <__libc_init_array+0x3c>)
 8006dba:	1b64      	subs	r4, r4, r5
 8006dbc:	10a4      	asrs	r4, r4, #2
 8006dbe:	2600      	movs	r6, #0
 8006dc0:	42a6      	cmp	r6, r4
 8006dc2:	d109      	bne.n	8006dd8 <__libc_init_array+0x24>
 8006dc4:	4d0b      	ldr	r5, [pc, #44]	@ (8006df4 <__libc_init_array+0x40>)
 8006dc6:	4c0c      	ldr	r4, [pc, #48]	@ (8006df8 <__libc_init_array+0x44>)
 8006dc8:	f000 f818 	bl	8006dfc <_init>
 8006dcc:	1b64      	subs	r4, r4, r5
 8006dce:	10a4      	asrs	r4, r4, #2
 8006dd0:	2600      	movs	r6, #0
 8006dd2:	42a6      	cmp	r6, r4
 8006dd4:	d105      	bne.n	8006de2 <__libc_init_array+0x2e>
 8006dd6:	bd70      	pop	{r4, r5, r6, pc}
 8006dd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ddc:	4798      	blx	r3
 8006dde:	3601      	adds	r6, #1
 8006de0:	e7ee      	b.n	8006dc0 <__libc_init_array+0xc>
 8006de2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006de6:	4798      	blx	r3
 8006de8:	3601      	adds	r6, #1
 8006dea:	e7f2      	b.n	8006dd2 <__libc_init_array+0x1e>
 8006dec:	08006e5c 	.word	0x08006e5c
 8006df0:	08006e5c 	.word	0x08006e5c
 8006df4:	08006e5c 	.word	0x08006e5c
 8006df8:	08006e60 	.word	0x08006e60

08006dfc <_init>:
 8006dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfe:	bf00      	nop
 8006e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e02:	bc08      	pop	{r3}
 8006e04:	469e      	mov	lr, r3
 8006e06:	4770      	bx	lr

08006e08 <_fini>:
 8006e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0a:	bf00      	nop
 8006e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0e:	bc08      	pop	{r3}
 8006e10:	469e      	mov	lr, r3
 8006e12:	4770      	bx	lr
