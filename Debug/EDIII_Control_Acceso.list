
EDIII_Control_Acceso.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8a8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c68  0800da48  0800da48  0000ea48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080106b0  080106b0  00012084  2**0
                  CONTENTS
  4 .ARM          00000008  080106b0  080106b0  000116b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080106b8  080106b8  00012084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080106b8  080106b8  000116b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080106bc  080106bc  000116bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080106c0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068a4  20000084  08010744  00012084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20006928  08010744  00012928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021dfd  00000000  00000000  000120b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005643  00000000  00000000  00033eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f08  00000000  00000000  000394f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000181b  00000000  00000000  0003b400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e7d1  00000000  00000000  0003cc1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bf93  00000000  00000000  0005b3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5885  00000000  00000000  0008737f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012cc04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c24  00000000  00000000  0012cc48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0013586c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800da30 	.word	0x0800da30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	0800da30 	.word	0x0800da30

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80005a8:	6878      	ldr	r0, [r7, #4]
 80005aa:	f7ff fe23 	bl	80001f4 <strlen>
 80005ae:	4603      	mov	r3, r0
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	f04f 33ff 	mov.w	r3, #4294967295
 80005b6:	6879      	ldr	r1, [r7, #4]
 80005b8:	4803      	ldr	r0, [pc, #12]	@ (80005c8 <Send_Uart+0x28>)
 80005ba:	f005 fbf7 	bl	8005dac <HAL_UART_Transmit>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20002958 	.word	0x20002958

080005cc <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 80005d4:	2201      	movs	r2, #1
 80005d6:	6879      	ldr	r1, [r7, #4]
 80005d8:	480a      	ldr	r0, [pc, #40]	@ (8000604 <Mount_SD+0x38>)
 80005da:	f008 fb0f 	bl	8008bfc <f_mount>
 80005de:	4603      	mov	r3, r0
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <Mount_SD+0x3c>)
 80005e4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 80005e6:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <Mount_SD+0x3c>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d003      	beq.n	80005f6 <Mount_SD+0x2a>
 80005ee:	4807      	ldr	r0, [pc, #28]	@ (800060c <Mount_SD+0x40>)
 80005f0:	f7ff ffd6 	bl	80005a0 <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\n");
}
 80005f4:	e002      	b.n	80005fc <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\n");
 80005f6:	4806      	ldr	r0, [pc, #24]	@ (8000610 <Mount_SD+0x44>)
 80005f8:	f7ff ffd2 	bl	80005a0 <Send_Uart>
}
 80005fc:	bf00      	nop
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200000a0 	.word	0x200000a0
 8000608:	20002224 	.word	0x20002224
 800060c:	0800da48 	.word	0x0800da48
 8000610:	0800da6c 	.word	0x0800da6c

08000614 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 800061c:	2201      	movs	r2, #1
 800061e:	6879      	ldr	r1, [r7, #4]
 8000620:	2000      	movs	r0, #0
 8000622:	f008 faeb 	bl	8008bfc <f_mount>
 8000626:	4603      	mov	r3, r0
 8000628:	461a      	mov	r2, r3
 800062a:	4b08      	ldr	r3, [pc, #32]	@ (800064c <Unmount_SD+0x38>)
 800062c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 800062e:	4b07      	ldr	r3, [pc, #28]	@ (800064c <Unmount_SD+0x38>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d103      	bne.n	800063e <Unmount_SD+0x2a>
 8000636:	4806      	ldr	r0, [pc, #24]	@ (8000650 <Unmount_SD+0x3c>)
 8000638:	f7ff ffb2 	bl	80005a0 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 800063c:	e002      	b.n	8000644 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 800063e:	4805      	ldr	r0, [pc, #20]	@ (8000654 <Unmount_SD+0x40>)
 8000640:	f7ff ffae 	bl	80005a0 <Send_Uart>
}
 8000644:	bf00      	nop
 8000646:	3708      	adds	r7, #8
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20002224 	.word	0x20002224
 8000650:	0800da90 	.word	0x0800da90
 8000654:	0800dab8 	.word	0x0800dab8

08000658 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8000660:	4940      	ldr	r1, [pc, #256]	@ (8000764 <Create_File+0x10c>)
 8000662:	6878      	ldr	r0, [r7, #4]
 8000664:	f009 f91b 	bl	800989e <f_stat>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	4b3e      	ldr	r3, [pc, #248]	@ (8000768 <Create_File+0x110>)
 800066e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000670:	4b3d      	ldr	r3, [pc, #244]	@ (8000768 <Create_File+0x110>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d111      	bne.n	800069c <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8000678:	2064      	movs	r0, #100	@ 0x64
 800067a:	f00b fdd7 	bl	800c22c <pvPortMalloc>
 800067e:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000680:	687a      	ldr	r2, [r7, #4]
 8000682:	493a      	ldr	r1, [pc, #232]	@ (800076c <Create_File+0x114>)
 8000684:	68f8      	ldr	r0, [r7, #12]
 8000686:	f00c f8b5 	bl	800c7f4 <siprintf>
		Send_Uart(buf);
 800068a:	68f8      	ldr	r0, [r7, #12]
 800068c:	f7ff ff88 	bl	80005a0 <Send_Uart>
		vPortFree(buf);
 8000690:	68f8      	ldr	r0, [r7, #12]
 8000692:	f00b fe99 	bl	800c3c8 <vPortFree>
	    return fresult;
 8000696:	4b34      	ldr	r3, [pc, #208]	@ (8000768 <Create_File+0x110>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	e05f      	b.n	800075c <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 800069c:	220b      	movs	r2, #11
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	4833      	ldr	r0, [pc, #204]	@ (8000770 <Create_File+0x118>)
 80006a2:	f008 fb0f 	bl	8008cc4 <f_open>
 80006a6:	4603      	mov	r3, r0
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b2f      	ldr	r3, [pc, #188]	@ (8000768 <Create_File+0x110>)
 80006ac:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80006ae:	4b2e      	ldr	r3, [pc, #184]	@ (8000768 <Create_File+0x110>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d014      	beq.n	80006e0 <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80006b6:	2064      	movs	r0, #100	@ 0x64
 80006b8:	f00b fdb8 	bl	800c22c <pvPortMalloc>
 80006bc:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 80006be:	4b2a      	ldr	r3, [pc, #168]	@ (8000768 <Create_File+0x110>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	492b      	ldr	r1, [pc, #172]	@ (8000774 <Create_File+0x11c>)
 80006c8:	6938      	ldr	r0, [r7, #16]
 80006ca:	f00c f893 	bl	800c7f4 <siprintf>
			Send_Uart(buf);
 80006ce:	6938      	ldr	r0, [r7, #16]
 80006d0:	f7ff ff66 	bl	80005a0 <Send_Uart>
			vPortFree(buf);
 80006d4:	6938      	ldr	r0, [r7, #16]
 80006d6:	f00b fe77 	bl	800c3c8 <vPortFree>
		    return fresult;
 80006da:	4b23      	ldr	r3, [pc, #140]	@ (8000768 <Create_File+0x110>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	e03d      	b.n	800075c <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80006e0:	2064      	movs	r0, #100	@ 0x64
 80006e2:	f00b fda3 	bl	800c22c <pvPortMalloc>
 80006e6:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80006e8:	687a      	ldr	r2, [r7, #4]
 80006ea:	4923      	ldr	r1, [pc, #140]	@ (8000778 <Create_File+0x120>)
 80006ec:	69f8      	ldr	r0, [r7, #28]
 80006ee:	f00c f881 	bl	800c7f4 <siprintf>
			Send_Uart(buf);
 80006f2:	69f8      	ldr	r0, [r7, #28]
 80006f4:	f7ff ff54 	bl	80005a0 <Send_Uart>
			vPortFree(buf);
 80006f8:	69f8      	ldr	r0, [r7, #28]
 80006fa:	f00b fe65 	bl	800c3c8 <vPortFree>
		}

		fresult = f_close(&fil);
 80006fe:	481c      	ldr	r0, [pc, #112]	@ (8000770 <Create_File+0x118>)
 8000700:	f009 f89e 	bl	8009840 <f_close>
 8000704:	4603      	mov	r3, r0
 8000706:	461a      	mov	r2, r3
 8000708:	4b17      	ldr	r3, [pc, #92]	@ (8000768 <Create_File+0x110>)
 800070a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800070c:	4b16      	ldr	r3, [pc, #88]	@ (8000768 <Create_File+0x110>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d012      	beq.n	800073a <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8000714:	2064      	movs	r0, #100	@ 0x64
 8000716:	f00b fd89 	bl	800c22c <pvPortMalloc>
 800071a:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <Create_File+0x110>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4915      	ldr	r1, [pc, #84]	@ (800077c <Create_File+0x124>)
 8000726:	6978      	ldr	r0, [r7, #20]
 8000728:	f00c f864 	bl	800c7f4 <siprintf>
			Send_Uart(buf);
 800072c:	6978      	ldr	r0, [r7, #20]
 800072e:	f7ff ff37 	bl	80005a0 <Send_Uart>
			vPortFree(buf);
 8000732:	6978      	ldr	r0, [r7, #20]
 8000734:	f00b fe48 	bl	800c3c8 <vPortFree>
 8000738:	e00e      	b.n	8000758 <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 800073a:	2064      	movs	r0, #100	@ 0x64
 800073c:	f00b fd76 	bl	800c22c <pvPortMalloc>
 8000740:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	490e      	ldr	r1, [pc, #56]	@ (8000780 <Create_File+0x128>)
 8000746:	69b8      	ldr	r0, [r7, #24]
 8000748:	f00c f854 	bl	800c7f4 <siprintf>
			Send_Uart(buf);
 800074c:	69b8      	ldr	r0, [r7, #24]
 800074e:	f7ff ff27 	bl	80005a0 <Send_Uart>
			vPortFree(buf);
 8000752:	69b8      	ldr	r0, [r7, #24]
 8000754:	f00b fe38 	bl	800c3c8 <vPortFree>
		}
	}
    return fresult;
 8000758:	4b03      	ldr	r3, [pc, #12]	@ (8000768 <Create_File+0x110>)
 800075a:	781b      	ldrb	r3, [r3, #0]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	2000210c 	.word	0x2000210c
 8000768:	20002224 	.word	0x20002224
 800076c:	0800dc88 	.word	0x0800dc88
 8000770:	200010dc 	.word	0x200010dc
 8000774:	0800dcc0 	.word	0x0800dcc0
 8000778:	0800dce8 	.word	0x0800dce8
 800077c:	0800dd28 	.word	0x0800dd28
 8000780:	0800dc68 	.word	0x0800dc68

08000784 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b088      	sub	sp, #32
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800078e:	4953      	ldr	r1, [pc, #332]	@ (80008dc <Update_File+0x158>)
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f009 f884 	bl	800989e <f_stat>
 8000796:	4603      	mov	r3, r0
 8000798:	461a      	mov	r2, r3
 800079a:	4b51      	ldr	r3, [pc, #324]	@ (80008e0 <Update_File+0x15c>)
 800079c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800079e:	4b50      	ldr	r3, [pc, #320]	@ (80008e0 <Update_File+0x15c>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d011      	beq.n	80007ca <Update_File+0x46>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 80007a6:	2064      	movs	r0, #100	@ 0x64
 80007a8:	f00b fd40 	bl	800c22c <pvPortMalloc>
 80007ac:	60b8      	str	r0, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	494c      	ldr	r1, [pc, #304]	@ (80008e4 <Update_File+0x160>)
 80007b2:	68b8      	ldr	r0, [r7, #8]
 80007b4:	f00c f81e 	bl	800c7f4 <siprintf>
		Send_Uart (buf);
 80007b8:	68b8      	ldr	r0, [r7, #8]
 80007ba:	f7ff fef1 	bl	80005a0 <Send_Uart>
		vPortFree(buf);
 80007be:	68b8      	ldr	r0, [r7, #8]
 80007c0:	f00b fe02 	bl	800c3c8 <vPortFree>
	    return fresult;
 80007c4:	4b46      	ldr	r3, [pc, #280]	@ (80008e0 <Update_File+0x15c>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	e083      	b.n	80008d2 <Update_File+0x14e>
	}

	else
	{
		 /* Open file with write access */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80007ca:	2232      	movs	r2, #50	@ 0x32
 80007cc:	6879      	ldr	r1, [r7, #4]
 80007ce:	4846      	ldr	r0, [pc, #280]	@ (80008e8 <Update_File+0x164>)
 80007d0:	f008 fa78 	bl	8008cc4 <f_open>
 80007d4:	4603      	mov	r3, r0
 80007d6:	461a      	mov	r2, r3
 80007d8:	4b41      	ldr	r3, [pc, #260]	@ (80008e0 <Update_File+0x15c>)
 80007da:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80007dc:	4b40      	ldr	r3, [pc, #256]	@ (80008e0 <Update_File+0x15c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d014      	beq.n	800080e <Update_File+0x8a>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80007e4:	2064      	movs	r0, #100	@ 0x64
 80007e6:	f00b fd21 	bl	800c22c <pvPortMalloc>
 80007ea:	60f8      	str	r0, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80007ec:	4b3c      	ldr	r3, [pc, #240]	@ (80008e0 <Update_File+0x15c>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	461a      	mov	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	493d      	ldr	r1, [pc, #244]	@ (80008ec <Update_File+0x168>)
 80007f6:	68f8      	ldr	r0, [r7, #12]
 80007f8:	f00b fffc 	bl	800c7f4 <siprintf>
	    	Send_Uart(buf);
 80007fc:	68f8      	ldr	r0, [r7, #12]
 80007fe:	f7ff fecf 	bl	80005a0 <Send_Uart>
	        vPortFree(buf);
 8000802:	68f8      	ldr	r0, [r7, #12]
 8000804:	f00b fde0 	bl	800c3c8 <vPortFree>
	        return fresult;
 8000808:	4b35      	ldr	r3, [pc, #212]	@ (80008e0 <Update_File+0x15c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	e061      	b.n	80008d2 <Update_File+0x14e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 800080e:	6838      	ldr	r0, [r7, #0]
 8000810:	f7ff fcf0 	bl	80001f4 <strlen>
 8000814:	4602      	mov	r2, r0
 8000816:	4b36      	ldr	r3, [pc, #216]	@ (80008f0 <Update_File+0x16c>)
 8000818:	6839      	ldr	r1, [r7, #0]
 800081a:	4833      	ldr	r0, [pc, #204]	@ (80008e8 <Update_File+0x164>)
 800081c:	f008 fdc4 	bl	80093a8 <f_write>
 8000820:	4603      	mov	r3, r0
 8000822:	461a      	mov	r2, r3
 8000824:	4b2e      	ldr	r3, [pc, #184]	@ (80008e0 <Update_File+0x15c>)
 8000826:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000828:	4b2d      	ldr	r3, [pc, #180]	@ (80008e0 <Update_File+0x15c>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d012      	beq.n	8000856 <Update_File+0xd2>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8000830:	2064      	movs	r0, #100	@ 0x64
 8000832:	f00b fcfb 	bl	800c22c <pvPortMalloc>
 8000836:	61b8      	str	r0, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8000838:	4b29      	ldr	r3, [pc, #164]	@ (80008e0 <Update_File+0x15c>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	492c      	ldr	r1, [pc, #176]	@ (80008f4 <Update_File+0x170>)
 8000842:	69b8      	ldr	r0, [r7, #24]
 8000844:	f00b ffd6 	bl	800c7f4 <siprintf>
	    	Send_Uart(buf);
 8000848:	69b8      	ldr	r0, [r7, #24]
 800084a:	f7ff fea9 	bl	80005a0 <Send_Uart>
	    	vPortFree(buf);
 800084e:	69b8      	ldr	r0, [r7, #24]
 8000850:	f00b fdba 	bl	800c3c8 <vPortFree>
 8000854:	e00e      	b.n	8000874 <Update_File+0xf0>
	    }

	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8000856:	2064      	movs	r0, #100	@ 0x64
 8000858:	f00b fce8 	bl	800c22c <pvPortMalloc>
 800085c:	61f8      	str	r0, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800085e:	687a      	ldr	r2, [r7, #4]
 8000860:	4925      	ldr	r1, [pc, #148]	@ (80008f8 <Update_File+0x174>)
 8000862:	69f8      	ldr	r0, [r7, #28]
 8000864:	f00b ffc6 	bl	800c7f4 <siprintf>
	    	Send_Uart(buf);
 8000868:	69f8      	ldr	r0, [r7, #28]
 800086a:	f7ff fe99 	bl	80005a0 <Send_Uart>
	    	vPortFree(buf);
 800086e:	69f8      	ldr	r0, [r7, #28]
 8000870:	f00b fdaa 	bl	800c3c8 <vPortFree>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8000874:	481c      	ldr	r0, [pc, #112]	@ (80008e8 <Update_File+0x164>)
 8000876:	f008 ffe3 	bl	8009840 <f_close>
 800087a:	4603      	mov	r3, r0
 800087c:	461a      	mov	r2, r3
 800087e:	4b18      	ldr	r3, [pc, #96]	@ (80008e0 <Update_File+0x15c>)
 8000880:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000882:	4b17      	ldr	r3, [pc, #92]	@ (80008e0 <Update_File+0x15c>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d012      	beq.n	80008b0 <Update_File+0x12c>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 800088a:	2064      	movs	r0, #100	@ 0x64
 800088c:	f00b fcce 	bl	800c22c <pvPortMalloc>
 8000890:	6138      	str	r0, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8000892:	4b13      	ldr	r3, [pc, #76]	@ (80008e0 <Update_File+0x15c>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	461a      	mov	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	4918      	ldr	r1, [pc, #96]	@ (80008fc <Update_File+0x178>)
 800089c:	6938      	ldr	r0, [r7, #16]
 800089e:	f00b ffa9 	bl	800c7f4 <siprintf>
	    	Send_Uart(buf);
 80008a2:	6938      	ldr	r0, [r7, #16]
 80008a4:	f7ff fe7c 	bl	80005a0 <Send_Uart>
	    	vPortFree(buf);
 80008a8:	6938      	ldr	r0, [r7, #16]
 80008aa:	f00b fd8d 	bl	800c3c8 <vPortFree>
 80008ae:	e00e      	b.n	80008ce <Update_File+0x14a>
	    }
	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80008b0:	2064      	movs	r0, #100	@ 0x64
 80008b2:	f00b fcbb 	bl	800c22c <pvPortMalloc>
 80008b6:	6178      	str	r0, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	4911      	ldr	r1, [pc, #68]	@ (8000900 <Update_File+0x17c>)
 80008bc:	6978      	ldr	r0, [r7, #20]
 80008be:	f00b ff99 	bl	800c7f4 <siprintf>
	    	Send_Uart(buf);
 80008c2:	6978      	ldr	r0, [r7, #20]
 80008c4:	f7ff fe6c 	bl	80005a0 <Send_Uart>
	    	vPortFree(buf);
 80008c8:	6978      	ldr	r0, [r7, #20]
 80008ca:	f00b fd7d 	bl	800c3c8 <vPortFree>
	     }
	}
    return fresult;
 80008ce:	4b04      	ldr	r3, [pc, #16]	@ (80008e0 <Update_File+0x15c>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3720      	adds	r7, #32
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000210c 	.word	0x2000210c
 80008e0:	20002224 	.word	0x20002224
 80008e4:	0800db10 	.word	0x0800db10
 80008e8:	200010dc 	.word	0x200010dc
 80008ec:	0800db30 	.word	0x0800db30
 80008f0:	20002228 	.word	0x20002228
 80008f4:	0800dd4c 	.word	0x0800dd4c
 80008f8:	0800dd74 	.word	0x0800dd74
 80008fc:	0800dc40 	.word	0x0800dc40
 8000900:	0800dc68 	.word	0x0800dc68

08000904 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
 800090a:	2104      	movs	r1, #4
 800090c:	4803      	ldr	r0, [pc, #12]	@ (800091c <SELECT+0x18>)
 800090e:	f002 fda5 	bl	800345c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000912:	2001      	movs	r0, #1
 8000914:	f002 fb00 	bl	8002f18 <HAL_Delay>
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40020c00 	.word	0x40020c00

08000920 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	2104      	movs	r1, #4
 8000928:	4803      	ldr	r0, [pc, #12]	@ (8000938 <DESELECT+0x18>)
 800092a:	f002 fd97 	bl	800345c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800092e:	2001      	movs	r0, #1
 8000930:	f002 faf2 	bl	8002f18 <HAL_Delay>
}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40020c00 	.word	0x40020c00

0800093c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000946:	bf00      	nop
 8000948:	4b08      	ldr	r3, [pc, #32]	@ (800096c <SPI_TxByte+0x30>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	f003 0302 	and.w	r3, r3, #2
 8000952:	2b02      	cmp	r3, #2
 8000954:	d1f8      	bne.n	8000948 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000956:	1df9      	adds	r1, r7, #7
 8000958:	2364      	movs	r3, #100	@ 0x64
 800095a:	2201      	movs	r2, #1
 800095c:	4803      	ldr	r0, [pc, #12]	@ (800096c <SPI_TxByte+0x30>)
 800095e:	f004 fb92 	bl	8005086 <HAL_SPI_Transmit>
}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20002900 	.word	0x20002900

08000970 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800097c:	bf00      	nop
 800097e:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <SPI_TxBuffer+0x30>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	689b      	ldr	r3, [r3, #8]
 8000984:	f003 0302 	and.w	r3, r3, #2
 8000988:	2b02      	cmp	r3, #2
 800098a:	d1f8      	bne.n	800097e <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800098c:	887a      	ldrh	r2, [r7, #2]
 800098e:	2364      	movs	r3, #100	@ 0x64
 8000990:	6879      	ldr	r1, [r7, #4]
 8000992:	4803      	ldr	r0, [pc, #12]	@ (80009a0 <SPI_TxBuffer+0x30>)
 8000994:	f004 fb77 	bl	8005086 <HAL_SPI_Transmit>
}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20002900 	.word	0x20002900

080009a4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80009aa:	23ff      	movs	r3, #255	@ 0xff
 80009ac:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80009ae:	bf00      	nop
 80009b0:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <SPI_RxByte+0x34>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	2b02      	cmp	r3, #2
 80009bc:	d1f8      	bne.n	80009b0 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80009be:	1dba      	adds	r2, r7, #6
 80009c0:	1df9      	adds	r1, r7, #7
 80009c2:	2364      	movs	r3, #100	@ 0x64
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	2301      	movs	r3, #1
 80009c8:	4803      	ldr	r0, [pc, #12]	@ (80009d8 <SPI_RxByte+0x34>)
 80009ca:	f004 fc9f 	bl	800530c <HAL_SPI_TransmitReceive>

	return data;
 80009ce:	79bb      	ldrb	r3, [r7, #6]
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20002900 	.word	0x20002900

080009dc <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80009e4:	f7ff ffde 	bl	80009a4 <SPI_RxByte>
 80009e8:	4603      	mov	r3, r0
 80009ea:	461a      	mov	r2, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	701a      	strb	r2, [r3, #0]
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80009fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <SD_ReadyWait+0x30>)
 8000a00:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000a04:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 8000a06:	f7ff ffcd 	bl	80009a4 <SPI_RxByte>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	2bff      	cmp	r3, #255	@ 0xff
 8000a12:	d004      	beq.n	8000a1e <SD_ReadyWait+0x26>
 8000a14:	4b04      	ldr	r3, [pc, #16]	@ (8000a28 <SD_ReadyWait+0x30>)
 8000a16:	881b      	ldrh	r3, [r3, #0]
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1f3      	bne.n	8000a06 <SD_ReadyWait+0xe>

	return res;
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	200029f6 	.word	0x200029f6

08000a2c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000a32:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000a36:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000a38:	f7ff ff72 	bl	8000920 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	e005      	b.n	8000a4e <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000a42:	20ff      	movs	r0, #255	@ 0xff
 8000a44:	f7ff ff7a 	bl	800093c <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	2b09      	cmp	r3, #9
 8000a52:	ddf6      	ble.n	8000a42 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000a54:	f7ff ff56 	bl	8000904 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000a58:	2340      	movs	r3, #64	@ 0x40
 8000a5a:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000a64:	2300      	movs	r3, #0
 8000a66:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000a6c:	2395      	movs	r3, #149	@ 0x95
 8000a6e:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000a70:	463b      	mov	r3, r7
 8000a72:	2106      	movs	r1, #6
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff7b 	bl	8000970 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a7a:	e002      	b.n	8000a82 <SD_PowerOn+0x56>
	{
		cnt--;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	3b01      	subs	r3, #1
 8000a80:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8000a82:	f7ff ff8f 	bl	80009a4 <SPI_RxByte>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	d002      	beq.n	8000a92 <SD_PowerOn+0x66>
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d1f4      	bne.n	8000a7c <SD_PowerOn+0x50>
	}

	DESELECT();
 8000a92:	f7ff ff45 	bl	8000920 <DESELECT>
	SPI_TxByte(0XFF);
 8000a96:	20ff      	movs	r0, #255	@ 0xff
 8000a98:	f7ff ff50 	bl	800093c <SPI_TxByte>

	PowerFlag = 1;
 8000a9c:	4b03      	ldr	r3, [pc, #12]	@ (8000aac <SD_PowerOn+0x80>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	701a      	strb	r2, [r3, #0]
}
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	2000222d 	.word	0x2000222d

08000ab0 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8000ab4:	4b03      	ldr	r3, [pc, #12]	@ (8000ac4 <SD_PowerOff+0x14>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	2000222d 	.word	0x2000222d

08000ac8 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
	return PowerFlag;
 8000acc:	4b03      	ldr	r3, [pc, #12]	@ (8000adc <SD_CheckPower+0x14>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	2000222d 	.word	0x2000222d

08000ae0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 8000aea:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <SD_RxDataBlock+0x5c>)
 8000aec:	22c8      	movs	r2, #200	@ 0xc8
 8000aee:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000af0:	f7ff ff58 	bl	80009a4 <SPI_RxByte>
 8000af4:	4603      	mov	r3, r0
 8000af6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	2bff      	cmp	r3, #255	@ 0xff
 8000afc:	d104      	bne.n	8000b08 <SD_RxDataBlock+0x28>
 8000afe:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <SD_RxDataBlock+0x5c>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d1f3      	bne.n	8000af0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000b0c:	d001      	beq.n	8000b12 <SD_RxDataBlock+0x32>
 8000b0e:	2300      	movs	r3, #0
 8000b10:	e00f      	b.n	8000b32 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	1c5a      	adds	r2, r3, #1
 8000b16:	607a      	str	r2, [r7, #4]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff5f 	bl	80009dc <SPI_RxBytePtr>
	} while(len--);
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	1e5a      	subs	r2, r3, #1
 8000b22:	603a      	str	r2, [r7, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d1f4      	bne.n	8000b12 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 8000b28:	f7ff ff3c 	bl	80009a4 <SPI_RxByte>
	SPI_RxByte();
 8000b2c:	f7ff ff3a 	bl	80009a4 <SPI_RxByte>

	return TRUE;
 8000b30:	2301      	movs	r3, #1
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200029f5 	.word	0x200029f5

08000b40 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000b50:	f7ff ff52 	bl	80009f8 <SD_ReadyWait>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2bff      	cmp	r3, #255	@ 0xff
 8000b58:	d001      	beq.n	8000b5e <SD_TxDataBlock+0x1e>
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e02f      	b.n	8000bbe <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000b5e:	78fb      	ldrb	r3, [r7, #3]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff feeb 	bl	800093c <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000b66:	78fb      	ldrb	r3, [r7, #3]
 8000b68:	2bfd      	cmp	r3, #253	@ 0xfd
 8000b6a:	d020      	beq.n	8000bae <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000b6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f7ff fefd 	bl	8000970 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000b76:	f7ff ff15 	bl	80009a4 <SPI_RxByte>
		SPI_RxByte();
 8000b7a:	f7ff ff13 	bl	80009a4 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000b7e:	e00b      	b.n	8000b98 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000b80:	f7ff ff10 	bl	80009a4 <SPI_RxByte>
 8000b84:	4603      	mov	r3, r0
 8000b86:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
 8000b8a:	f003 031f 	and.w	r3, r3, #31
 8000b8e:	2b05      	cmp	r3, #5
 8000b90:	d006      	beq.n	8000ba0 <SD_TxDataBlock+0x60>
			i++;
 8000b92:	7bbb      	ldrb	r3, [r7, #14]
 8000b94:	3301      	adds	r3, #1
 8000b96:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8000b98:	7bbb      	ldrb	r3, [r7, #14]
 8000b9a:	2b40      	cmp	r3, #64	@ 0x40
 8000b9c:	d9f0      	bls.n	8000b80 <SD_TxDataBlock+0x40>
 8000b9e:	e000      	b.n	8000ba2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000ba0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000ba2:	bf00      	nop
 8000ba4:	f7ff fefe 	bl	80009a4 <SPI_RxByte>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d0fa      	beq.n	8000ba4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	f003 031f 	and.w	r3, r3, #31
 8000bb4:	2b05      	cmp	r3, #5
 8000bb6:	d101      	bne.n	8000bbc <SD_TxDataBlock+0x7c>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e000      	b.n	8000bbe <SD_TxDataBlock+0x7e>

	return FALSE;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b084      	sub	sp, #16
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	6039      	str	r1, [r7, #0]
 8000bd0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000bd2:	f7ff ff11 	bl	80009f8 <SD_ReadyWait>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2bff      	cmp	r3, #255	@ 0xff
 8000bda:	d001      	beq.n	8000be0 <SD_SendCmd+0x1a>
 8000bdc:	23ff      	movs	r3, #255	@ 0xff
 8000bde:	e042      	b.n	8000c66 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff feaa 	bl	800093c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	0e1b      	lsrs	r3, r3, #24
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff fea4 	bl	800093c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	0c1b      	lsrs	r3, r3, #16
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fe9e 	bl	800093c <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	0a1b      	lsrs	r3, r3, #8
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fe98 	bl	800093c <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fe93 	bl	800093c <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b40      	cmp	r3, #64	@ 0x40
 8000c1a:	d102      	bne.n	8000c22 <SD_SendCmd+0x5c>
 8000c1c:	2395      	movs	r3, #149	@ 0x95
 8000c1e:	73fb      	strb	r3, [r7, #15]
 8000c20:	e007      	b.n	8000c32 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	2b48      	cmp	r3, #72	@ 0x48
 8000c26:	d102      	bne.n	8000c2e <SD_SendCmd+0x68>
 8000c28:	2387      	movs	r3, #135	@ 0x87
 8000c2a:	73fb      	strb	r3, [r7, #15]
 8000c2c:	e001      	b.n	8000c32 <SD_SendCmd+0x6c>
	else crc = 1;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fe81 	bl	800093c <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	2b4c      	cmp	r3, #76	@ 0x4c
 8000c3e:	d101      	bne.n	8000c44 <SD_SendCmd+0x7e>
 8000c40:	f7ff feb0 	bl	80009a4 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000c44:	230a      	movs	r3, #10
 8000c46:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000c48:	f7ff feac 	bl	80009a4 <SPI_RxByte>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000c50:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	da05      	bge.n	8000c64 <SD_SendCmd+0x9e>
 8000c58:	7bbb      	ldrb	r3, [r7, #14]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	73bb      	strb	r3, [r7, #14]
 8000c5e:	7bbb      	ldrb	r3, [r7, #14]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d1f1      	bne.n	8000c48 <SD_SendCmd+0x82>

	return res;
 8000c64:	7b7b      	ldrb	r3, [r7, #13]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000c70:	b590      	push	{r4, r7, lr}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <SD_disk_initialize+0x14>
 8000c80:	2301      	movs	r3, #1
 8000c82:	e0d6      	b.n	8000e32 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000c84:	4b6d      	ldr	r3, [pc, #436]	@ (8000e3c <SD_disk_initialize+0x1cc>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	f003 0302 	and.w	r3, r3, #2
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d003      	beq.n	8000c9a <SD_disk_initialize+0x2a>
 8000c92:	4b6a      	ldr	r3, [pc, #424]	@ (8000e3c <SD_disk_initialize+0x1cc>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	e0cb      	b.n	8000e32 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 8000c9a:	f7ff fec7 	bl	8000a2c <SD_PowerOn>

	/* slave select */
	SELECT();
 8000c9e:	f7ff fe31 	bl	8000904 <SELECT>

	/* check disk type */
	type = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2040      	movs	r0, #64	@ 0x40
 8000caa:	f7ff ff8c 	bl	8000bc6 <SD_SendCmd>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	f040 80a6 	bne.w	8000e02 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8000cb6:	4b62      	ldr	r3, [pc, #392]	@ (8000e40 <SD_disk_initialize+0x1d0>)
 8000cb8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000cbc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000cbe:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000cc2:	2048      	movs	r0, #72	@ 0x48
 8000cc4:	f7ff ff7f 	bl	8000bc6 <SD_SendCmd>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d158      	bne.n	8000d80 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	e00c      	b.n	8000cee <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8000cd4:	7bfc      	ldrb	r4, [r7, #15]
 8000cd6:	f7ff fe65 	bl	80009a4 <SPI_RxByte>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	461a      	mov	r2, r3
 8000cde:	f104 0310 	add.w	r3, r4, #16
 8000ce2:	443b      	add	r3, r7
 8000ce4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	3301      	adds	r3, #1
 8000cec:	73fb      	strb	r3, [r7, #15]
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	d9ef      	bls.n	8000cd4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000cf4:	7abb      	ldrb	r3, [r7, #10]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	f040 8083 	bne.w	8000e02 <SD_disk_initialize+0x192>
 8000cfc:	7afb      	ldrb	r3, [r7, #11]
 8000cfe:	2baa      	cmp	r3, #170	@ 0xaa
 8000d00:	d17f      	bne.n	8000e02 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000d02:	2100      	movs	r1, #0
 8000d04:	2077      	movs	r0, #119	@ 0x77
 8000d06:	f7ff ff5e 	bl	8000bc6 <SD_SendCmd>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d807      	bhi.n	8000d20 <SD_disk_initialize+0xb0>
 8000d10:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000d14:	2069      	movs	r0, #105	@ 0x69
 8000d16:	f7ff ff56 	bl	8000bc6 <SD_SendCmd>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d005      	beq.n	8000d2c <SD_disk_initialize+0xbc>
				} while (Timer1);
 8000d20:	4b47      	ldr	r3, [pc, #284]	@ (8000e40 <SD_disk_initialize+0x1d0>)
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	b29b      	uxth	r3, r3
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1eb      	bne.n	8000d02 <SD_disk_initialize+0x92>
 8000d2a:	e000      	b.n	8000d2e <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000d2c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000d2e:	4b44      	ldr	r3, [pc, #272]	@ (8000e40 <SD_disk_initialize+0x1d0>)
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d064      	beq.n	8000e02 <SD_disk_initialize+0x192>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	207a      	movs	r0, #122	@ 0x7a
 8000d3c:	f7ff ff43 	bl	8000bc6 <SD_SendCmd>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d15d      	bne.n	8000e02 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	73fb      	strb	r3, [r7, #15]
 8000d4a:	e00c      	b.n	8000d66 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 8000d4c:	7bfc      	ldrb	r4, [r7, #15]
 8000d4e:	f7ff fe29 	bl	80009a4 <SPI_RxByte>
 8000d52:	4603      	mov	r3, r0
 8000d54:	461a      	mov	r2, r3
 8000d56:	f104 0310 	add.w	r3, r4, #16
 8000d5a:	443b      	add	r3, r7
 8000d5c:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	3301      	adds	r3, #1
 8000d64:	73fb      	strb	r3, [r7, #15]
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	2b03      	cmp	r3, #3
 8000d6a:	d9ef      	bls.n	8000d4c <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000d6c:	7a3b      	ldrb	r3, [r7, #8]
 8000d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SD_disk_initialize+0x10a>
 8000d76:	230c      	movs	r3, #12
 8000d78:	e000      	b.n	8000d7c <SD_disk_initialize+0x10c>
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	73bb      	strb	r3, [r7, #14]
 8000d7e:	e040      	b.n	8000e02 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000d80:	2100      	movs	r1, #0
 8000d82:	2077      	movs	r0, #119	@ 0x77
 8000d84:	f7ff ff1f 	bl	8000bc6 <SD_SendCmd>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d808      	bhi.n	8000da0 <SD_disk_initialize+0x130>
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2069      	movs	r0, #105	@ 0x69
 8000d92:	f7ff ff18 	bl	8000bc6 <SD_SendCmd>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d801      	bhi.n	8000da0 <SD_disk_initialize+0x130>
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	e000      	b.n	8000da2 <SD_disk_initialize+0x132>
 8000da0:	2301      	movs	r3, #1
 8000da2:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000da4:	7bbb      	ldrb	r3, [r7, #14]
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d10e      	bne.n	8000dc8 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000daa:	2100      	movs	r1, #0
 8000dac:	2077      	movs	r0, #119	@ 0x77
 8000dae:	f7ff ff0a 	bl	8000bc6 <SD_SendCmd>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d80e      	bhi.n	8000dd6 <SD_disk_initialize+0x166>
 8000db8:	2100      	movs	r1, #0
 8000dba:	2069      	movs	r0, #105	@ 0x69
 8000dbc:	f7ff ff03 	bl	8000bc6 <SD_SendCmd>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d107      	bne.n	8000dd6 <SD_disk_initialize+0x166>
 8000dc6:	e00d      	b.n	8000de4 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2041      	movs	r0, #65	@ 0x41
 8000dcc:	f7ff fefb 	bl	8000bc6 <SD_SendCmd>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d005      	beq.n	8000de2 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e40 <SD_disk_initialize+0x1d0>)
 8000dd8:	881b      	ldrh	r3, [r3, #0]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1e1      	bne.n	8000da4 <SD_disk_initialize+0x134>
 8000de0:	e000      	b.n	8000de4 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000de2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000de4:	4b16      	ldr	r3, [pc, #88]	@ (8000e40 <SD_disk_initialize+0x1d0>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d007      	beq.n	8000dfe <SD_disk_initialize+0x18e>
 8000dee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000df2:	2050      	movs	r0, #80	@ 0x50
 8000df4:	f7ff fee7 	bl	8000bc6 <SD_SendCmd>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SD_disk_initialize+0x192>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000e02:	4a10      	ldr	r2, [pc, #64]	@ (8000e44 <SD_disk_initialize+0x1d4>)
 8000e04:	7bbb      	ldrb	r3, [r7, #14]
 8000e06:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000e08:	f7ff fd8a 	bl	8000920 <DESELECT>
	SPI_RxByte();
 8000e0c:	f7ff fdca 	bl	80009a4 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000e10:	7bbb      	ldrb	r3, [r7, #14]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d008      	beq.n	8000e28 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 8000e16:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <SD_disk_initialize+0x1cc>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	f023 0301 	bic.w	r3, r3, #1
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <SD_disk_initialize+0x1cc>)
 8000e24:	701a      	strb	r2, [r3, #0]
 8000e26:	e001      	b.n	8000e2c <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000e28:	f7ff fe42 	bl	8000ab0 <SD_PowerOff>
	}

	return Stat;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	@ (8000e3c <SD_disk_initialize+0x1cc>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b2db      	uxtb	r3, r3
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd90      	pop	{r4, r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	200029f5 	.word	0x200029f5
 8000e44:	2000222c 	.word	0x2000222c

08000e48 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SD_disk_status+0x14>
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e002      	b.n	8000e62 <SD_disk_status+0x1a>
	return Stat;
 8000e5c:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <SD_disk_status+0x28>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	b2db      	uxtb	r3, r3
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000000 	.word	0x20000000

08000e74 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60b9      	str	r1, [r7, #8]
 8000e7c:	607a      	str	r2, [r7, #4]
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	4603      	mov	r3, r0
 8000e82:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d102      	bne.n	8000e90 <SD_disk_read+0x1c>
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d101      	bne.n	8000e94 <SD_disk_read+0x20>
 8000e90:	2304      	movs	r3, #4
 8000e92:	e051      	b.n	8000f38 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000e94:	4b2a      	ldr	r3, [pc, #168]	@ (8000f40 <SD_disk_read+0xcc>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SD_disk_read+0x32>
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	e048      	b.n	8000f38 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000ea6:	4b27      	ldr	r3, [pc, #156]	@ (8000f44 <SD_disk_read+0xd0>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	f003 0304 	and.w	r3, r3, #4
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d102      	bne.n	8000eb8 <SD_disk_read+0x44>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	025b      	lsls	r3, r3, #9
 8000eb6:	607b      	str	r3, [r7, #4]

	SELECT();
 8000eb8:	f7ff fd24 	bl	8000904 <SELECT>

	if (count == 1)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d111      	bne.n	8000ee6 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	2051      	movs	r0, #81	@ 0x51
 8000ec6:	f7ff fe7e 	bl	8000bc6 <SD_SendCmd>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d129      	bne.n	8000f24 <SD_disk_read+0xb0>
 8000ed0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ed4:	68b8      	ldr	r0, [r7, #8]
 8000ed6:	f7ff fe03 	bl	8000ae0 <SD_RxDataBlock>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d021      	beq.n	8000f24 <SD_disk_read+0xb0>
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	e01e      	b.n	8000f24 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	2052      	movs	r0, #82	@ 0x52
 8000eea:	f7ff fe6c 	bl	8000bc6 <SD_SendCmd>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d117      	bne.n	8000f24 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000ef4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ef8:	68b8      	ldr	r0, [r7, #8]
 8000efa:	f7ff fdf1 	bl	8000ae0 <SD_RxDataBlock>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d00a      	beq.n	8000f1a <SD_disk_read+0xa6>
				buff += 512;
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000f0a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	603b      	str	r3, [r7, #0]
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1ed      	bne.n	8000ef4 <SD_disk_read+0x80>
 8000f18:	e000      	b.n	8000f1c <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000f1a:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	204c      	movs	r0, #76	@ 0x4c
 8000f20:	f7ff fe51 	bl	8000bc6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000f24:	f7ff fcfc 	bl	8000920 <DESELECT>
	SPI_RxByte();
 8000f28:	f7ff fd3c 	bl	80009a4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	bf14      	ite	ne
 8000f32:	2301      	movne	r3, #1
 8000f34:	2300      	moveq	r3, #0
 8000f36:	b2db      	uxtb	r3, r3
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000000 	.word	0x20000000
 8000f44:	2000222c 	.word	0x2000222c

08000f48 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	4603      	mov	r3, r0
 8000f56:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d102      	bne.n	8000f64 <SD_disk_write+0x1c>
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d101      	bne.n	8000f68 <SD_disk_write+0x20>
 8000f64:	2304      	movs	r3, #4
 8000f66:	e06b      	b.n	8001040 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000f68:	4b37      	ldr	r3, [pc, #220]	@ (8001048 <SD_disk_write+0x100>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <SD_disk_write+0x32>
 8000f76:	2303      	movs	r3, #3
 8000f78:	e062      	b.n	8001040 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000f7a:	4b33      	ldr	r3, [pc, #204]	@ (8001048 <SD_disk_write+0x100>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <SD_disk_write+0x44>
 8000f88:	2302      	movs	r3, #2
 8000f8a:	e059      	b.n	8001040 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000f8c:	4b2f      	ldr	r3, [pc, #188]	@ (800104c <SD_disk_write+0x104>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	f003 0304 	and.w	r3, r3, #4
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d102      	bne.n	8000f9e <SD_disk_write+0x56>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	025b      	lsls	r3, r3, #9
 8000f9c:	607b      	str	r3, [r7, #4]

	SELECT();
 8000f9e:	f7ff fcb1 	bl	8000904 <SELECT>

	if (count == 1)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d110      	bne.n	8000fca <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	2058      	movs	r0, #88	@ 0x58
 8000fac:	f7ff fe0b 	bl	8000bc6 <SD_SendCmd>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d13a      	bne.n	800102c <SD_disk_write+0xe4>
 8000fb6:	21fe      	movs	r1, #254	@ 0xfe
 8000fb8:	68b8      	ldr	r0, [r7, #8]
 8000fba:	f7ff fdc1 	bl	8000b40 <SD_TxDataBlock>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d033      	beq.n	800102c <SD_disk_write+0xe4>
			count = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	e030      	b.n	800102c <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000fca:	4b20      	ldr	r3, [pc, #128]	@ (800104c <SD_disk_write+0x104>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d007      	beq.n	8000fe6 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2077      	movs	r0, #119	@ 0x77
 8000fda:	f7ff fdf4 	bl	8000bc6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000fde:	6839      	ldr	r1, [r7, #0]
 8000fe0:	2057      	movs	r0, #87	@ 0x57
 8000fe2:	f7ff fdf0 	bl	8000bc6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000fe6:	6879      	ldr	r1, [r7, #4]
 8000fe8:	2059      	movs	r0, #89	@ 0x59
 8000fea:	f7ff fdec 	bl	8000bc6 <SD_SendCmd>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d11b      	bne.n	800102c <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000ff4:	21fc      	movs	r1, #252	@ 0xfc
 8000ff6:	68b8      	ldr	r0, [r7, #8]
 8000ff8:	f7ff fda2 	bl	8000b40 <SD_TxDataBlock>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00a      	beq.n	8001018 <SD_disk_write+0xd0>
				buff += 512;
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001008:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	3b01      	subs	r3, #1
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1ee      	bne.n	8000ff4 <SD_disk_write+0xac>
 8001016:	e000      	b.n	800101a <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001018:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 800101a:	21fd      	movs	r1, #253	@ 0xfd
 800101c:	2000      	movs	r0, #0
 800101e:	f7ff fd8f 	bl	8000b40 <SD_TxDataBlock>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <SD_disk_write+0xe4>
			{
				count = 1;
 8001028:	2301      	movs	r3, #1
 800102a:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 800102c:	f7ff fc78 	bl	8000920 <DESELECT>
	SPI_RxByte();
 8001030:	f7ff fcb8 	bl	80009a4 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	2b00      	cmp	r3, #0
 8001038:	bf14      	ite	ne
 800103a:	2301      	movne	r3, #1
 800103c:	2300      	moveq	r3, #0
 800103e:	b2db      	uxtb	r3, r3
}
 8001040:	4618      	mov	r0, r3
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000000 	.word	0x20000000
 800104c:	2000222c 	.word	0x2000222c

08001050 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b08b      	sub	sp, #44	@ 0x2c
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	603a      	str	r2, [r7, #0]
 800105a:	71fb      	strb	r3, [r7, #7]
 800105c:	460b      	mov	r3, r1
 800105e:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SD_disk_ioctl+0x1e>
 800106a:	2304      	movs	r3, #4
 800106c:	e113      	b.n	8001296 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8001074:	79bb      	ldrb	r3, [r7, #6]
 8001076:	2b05      	cmp	r3, #5
 8001078:	d124      	bne.n	80010c4 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 800107a:	6a3b      	ldr	r3, [r7, #32]
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b02      	cmp	r3, #2
 8001080:	d012      	beq.n	80010a8 <SD_disk_ioctl+0x58>
 8001082:	2b02      	cmp	r3, #2
 8001084:	dc1a      	bgt.n	80010bc <SD_disk_ioctl+0x6c>
 8001086:	2b00      	cmp	r3, #0
 8001088:	d002      	beq.n	8001090 <SD_disk_ioctl+0x40>
 800108a:	2b01      	cmp	r3, #1
 800108c:	d006      	beq.n	800109c <SD_disk_ioctl+0x4c>
 800108e:	e015      	b.n	80010bc <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001090:	f7ff fd0e 	bl	8000ab0 <SD_PowerOff>
			res = RES_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800109a:	e0fa      	b.n	8001292 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 800109c:	f7ff fcc6 	bl	8000a2c <SD_PowerOn>
			res = RES_OK;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80010a6:	e0f4      	b.n	8001292 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 80010a8:	6a3b      	ldr	r3, [r7, #32]
 80010aa:	1c5c      	adds	r4, r3, #1
 80010ac:	f7ff fd0c 	bl	8000ac8 <SD_CheckPower>
 80010b0:	4603      	mov	r3, r0
 80010b2:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 80010b4:	2300      	movs	r3, #0
 80010b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80010ba:	e0ea      	b.n	8001292 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 80010bc:	2304      	movs	r3, #4
 80010be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80010c2:	e0e6      	b.n	8001292 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 80010c4:	4b76      	ldr	r3, [pc, #472]	@ (80012a0 <SD_disk_ioctl+0x250>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <SD_disk_ioctl+0x86>
 80010d2:	2303      	movs	r3, #3
 80010d4:	e0df      	b.n	8001296 <SD_disk_ioctl+0x246>

		SELECT();
 80010d6:	f7ff fc15 	bl	8000904 <SELECT>

		switch (ctrl)
 80010da:	79bb      	ldrb	r3, [r7, #6]
 80010dc:	2b0d      	cmp	r3, #13
 80010de:	f200 80c9 	bhi.w	8001274 <SD_disk_ioctl+0x224>
 80010e2:	a201      	add	r2, pc, #4	@ (adr r2, 80010e8 <SD_disk_ioctl+0x98>)
 80010e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e8:	080011df 	.word	0x080011df
 80010ec:	08001121 	.word	0x08001121
 80010f0:	080011cf 	.word	0x080011cf
 80010f4:	08001275 	.word	0x08001275
 80010f8:	08001275 	.word	0x08001275
 80010fc:	08001275 	.word	0x08001275
 8001100:	08001275 	.word	0x08001275
 8001104:	08001275 	.word	0x08001275
 8001108:	08001275 	.word	0x08001275
 800110c:	08001275 	.word	0x08001275
 8001110:	08001275 	.word	0x08001275
 8001114:	080011f1 	.word	0x080011f1
 8001118:	08001215 	.word	0x08001215
 800111c:	08001239 	.word	0x08001239
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001120:	2100      	movs	r1, #0
 8001122:	2049      	movs	r0, #73	@ 0x49
 8001124:	f7ff fd4f 	bl	8000bc6 <SD_SendCmd>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	f040 80a6 	bne.w	800127c <SD_disk_ioctl+0x22c>
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2110      	movs	r1, #16
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fcd2 	bl	8000ae0 <SD_RxDataBlock>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 809c 	beq.w	800127c <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001144:	7b3b      	ldrb	r3, [r7, #12]
 8001146:	099b      	lsrs	r3, r3, #6
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b01      	cmp	r3, #1
 800114c:	d10d      	bne.n	800116a <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800114e:	7d7b      	ldrb	r3, [r7, #21]
 8001150:	461a      	mov	r2, r3
 8001152:	7d3b      	ldrb	r3, [r7, #20]
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	b29b      	uxth	r3, r3
 8001158:	4413      	add	r3, r2
 800115a:	b29b      	uxth	r3, r3
 800115c:	3301      	adds	r3, #1
 800115e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001160:	8bfb      	ldrh	r3, [r7, #30]
 8001162:	029a      	lsls	r2, r3, #10
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	e02d      	b.n	80011c6 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800116a:	7c7b      	ldrb	r3, [r7, #17]
 800116c:	f003 030f 	and.w	r3, r3, #15
 8001170:	b2da      	uxtb	r2, r3
 8001172:	7dbb      	ldrb	r3, [r7, #22]
 8001174:	09db      	lsrs	r3, r3, #7
 8001176:	b2db      	uxtb	r3, r3
 8001178:	4413      	add	r3, r2
 800117a:	b2da      	uxtb	r2, r3
 800117c:	7d7b      	ldrb	r3, [r7, #21]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	b2db      	uxtb	r3, r3
 8001182:	f003 0306 	and.w	r3, r3, #6
 8001186:	b2db      	uxtb	r3, r3
 8001188:	4413      	add	r3, r2
 800118a:	b2db      	uxtb	r3, r3
 800118c:	3302      	adds	r3, #2
 800118e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001192:	7d3b      	ldrb	r3, [r7, #20]
 8001194:	099b      	lsrs	r3, r3, #6
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461a      	mov	r2, r3
 800119a:	7cfb      	ldrb	r3, [r7, #19]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	b29b      	uxth	r3, r3
 80011a0:	4413      	add	r3, r2
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	7cbb      	ldrb	r3, [r7, #18]
 80011a6:	029b      	lsls	r3, r3, #10
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80011ae:	b29b      	uxth	r3, r3
 80011b0:	4413      	add	r3, r2
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	3301      	adds	r3, #1
 80011b6:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80011b8:	8bfa      	ldrh	r2, [r7, #30]
 80011ba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80011be:	3b09      	subs	r3, #9
 80011c0:	409a      	lsls	r2, r3
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 80011cc:	e056      	b.n	800127c <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011d4:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80011dc:	e055      	b.n	800128a <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 80011de:	f7ff fc0b 	bl	80009f8 <SD_ReadyWait>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2bff      	cmp	r3, #255	@ 0xff
 80011e6:	d14b      	bne.n	8001280 <SD_disk_ioctl+0x230>
 80011e8:	2300      	movs	r3, #0
 80011ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80011ee:	e047      	b.n	8001280 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80011f0:	2100      	movs	r1, #0
 80011f2:	2049      	movs	r0, #73	@ 0x49
 80011f4:	f7ff fce7 	bl	8000bc6 <SD_SendCmd>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d142      	bne.n	8001284 <SD_disk_ioctl+0x234>
 80011fe:	2110      	movs	r1, #16
 8001200:	6a38      	ldr	r0, [r7, #32]
 8001202:	f7ff fc6d 	bl	8000ae0 <SD_RxDataBlock>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d03b      	beq.n	8001284 <SD_disk_ioctl+0x234>
 800120c:	2300      	movs	r3, #0
 800120e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001212:	e037      	b.n	8001284 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001214:	2100      	movs	r1, #0
 8001216:	204a      	movs	r0, #74	@ 0x4a
 8001218:	f7ff fcd5 	bl	8000bc6 <SD_SendCmd>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d132      	bne.n	8001288 <SD_disk_ioctl+0x238>
 8001222:	2110      	movs	r1, #16
 8001224:	6a38      	ldr	r0, [r7, #32]
 8001226:	f7ff fc5b 	bl	8000ae0 <SD_RxDataBlock>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d02b      	beq.n	8001288 <SD_disk_ioctl+0x238>
 8001230:	2300      	movs	r3, #0
 8001232:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001236:	e027      	b.n	8001288 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001238:	2100      	movs	r1, #0
 800123a:	207a      	movs	r0, #122	@ 0x7a
 800123c:	f7ff fcc3 	bl	8000bc6 <SD_SendCmd>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d116      	bne.n	8001274 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8001246:	2300      	movs	r3, #0
 8001248:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800124c:	e00b      	b.n	8001266 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 800124e:	6a3c      	ldr	r4, [r7, #32]
 8001250:	1c63      	adds	r3, r4, #1
 8001252:	623b      	str	r3, [r7, #32]
 8001254:	f7ff fba6 	bl	80009a4 <SPI_RxByte>
 8001258:	4603      	mov	r3, r0
 800125a:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 800125c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001260:	3301      	adds	r3, #1
 8001262:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001266:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800126a:	2b03      	cmp	r3, #3
 800126c:	d9ef      	bls.n	800124e <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8001274:	2304      	movs	r3, #4
 8001276:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800127a:	e006      	b.n	800128a <SD_disk_ioctl+0x23a>
			break;
 800127c:	bf00      	nop
 800127e:	e004      	b.n	800128a <SD_disk_ioctl+0x23a>
			break;
 8001280:	bf00      	nop
 8001282:	e002      	b.n	800128a <SD_disk_ioctl+0x23a>
			break;
 8001284:	bf00      	nop
 8001286:	e000      	b.n	800128a <SD_disk_ioctl+0x23a>
			break;
 8001288:	bf00      	nop
		}

		DESELECT();
 800128a:	f7ff fb49 	bl	8000920 <DESELECT>
		SPI_RxByte();
 800128e:	f7ff fb89 	bl	80009a4 <SPI_RxByte>
	}

	return res;
 8001292:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001296:	4618      	mov	r0, r3
 8001298:	372c      	adds	r7, #44	@ 0x2c
 800129a:	46bd      	mov	sp, r7
 800129c:	bd90      	pop	{r4, r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000000 	.word	0x20000000

080012a4 <HandleInput>:
#include "keypad.h"
/*Funciones relacionadas al keypad*/
eventoDisplay HandleInput(FSM *FSM1){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	eventoDisplay eventoEnviado;
	uint8_t KeyPressed;
	if((xTaskGetTickCount() - FSM1->StartTime) < pdMS_TO_TICKS(KEYPAD_TIMEOUT)){		//Mientras no se supere el timeout puedo ingresar digito
 80012ac:	f00a f83a 	bl	800b324 <xTaskGetTickCount>
 80012b0:	4602      	mov	r2, r0
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	f241 3287 	movw	r2, #4999	@ 0x1387
 80012bc:	4293      	cmp	r3, r2
 80012be:	d849      	bhi.n	8001354 <HandleInput+0xb0>
		KeyPressed = GetKey();
 80012c0:	f000 f852 	bl	8001368 <GetKey>
 80012c4:	4603      	mov	r3, r0
 80012c6:	73bb      	strb	r3, [r7, #14]
		if(KeyPressed != 0){
 80012c8:	7bbb      	ldrb	r3, [r7, #14]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d03f      	beq.n	800134e <HandleInput+0xaa>
			if(KeyPressed == BORRAR_DIGITO){
 80012ce:	7bbb      	ldrb	r3, [r7, #14]
 80012d0:	2b23      	cmp	r3, #35	@ 0x23
 80012d2:	d119      	bne.n	8001308 <HandleInput+0x64>
				FSM1->CurrentIndex--;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	799b      	ldrb	r3, [r3, #6]
 80012d8:	3b01      	subs	r3, #1
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	719a      	strb	r2, [r3, #6]
				FSM1->Buffer[FSM1->CurrentIndex] = 0;					//El digito obtenido en el estado anterior lo borro
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	799b      	ldrb	r3, [r3, #6]
 80012e4:	461a      	mov	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2100      	movs	r1, #0
 80012ea:	5499      	strb	r1, [r3, r2]
				FSM1->StartTime = xTaskGetTickCount();					//Tomo nueva referencia para calcular timeout
 80012ec:	f00a f81a 	bl	800b324 <xTaskGetTickCount>
 80012f0:	4602      	mov	r2, r0
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	609a      	str	r2, [r3, #8]
				FSM1->CurrentState--;									//Vuelvo al estado anterior
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	79db      	ldrb	r3, [r3, #7]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	71da      	strb	r2, [r3, #7]
				eventoEnviado = PANTALLA_BORRAR_ENTRADA;
 8001302:	2303      	movs	r3, #3
 8001304:	73fb      	strb	r3, [r7, #15]
 8001306:	e02a      	b.n	800135e <HandleInput+0xba>
			}
			else{
				if(KeyPressed == ENTER){
 8001308:	7bbb      	ldrb	r3, [r7, #14]
 800130a:	2b2a      	cmp	r3, #42	@ 0x2a
 800130c:	d105      	bne.n	800131a <HandleInput+0x76>
					/*Esta seccion maneja el caso de secuencia incompleta*/
					FSM1->CurrentState = INCOMPLETO;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2208      	movs	r2, #8
 8001312:	71da      	strb	r2, [r3, #7]
					eventoEnviado = PANTALLA_SECUENCIA_INCOMPLETA;
 8001314:	2307      	movs	r3, #7
 8001316:	73fb      	strb	r3, [r7, #15]
 8001318:	e021      	b.n	800135e <HandleInput+0xba>
				}
				else{
					/*Esta seccion se encarga de tomar cualquier otro digito*/
					FSM1->Buffer[FSM1->CurrentIndex] = KeyPressed;			//Guardo el digito en el buffer
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	799b      	ldrb	r3, [r3, #6]
 800131e:	4619      	mov	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	7bba      	ldrb	r2, [r7, #14]
 8001324:	545a      	strb	r2, [r3, r1]
					FSM1->CurrentIndex++;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	799b      	ldrb	r3, [r3, #6]
 800132a:	3301      	adds	r3, #1
 800132c:	b2da      	uxtb	r2, r3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	719a      	strb	r2, [r3, #6]
					FSM1->StartTime = xTaskGetTickCount();
 8001332:	f009 fff7 	bl	800b324 <xTaskGetTickCount>
 8001336:	4602      	mov	r2, r0
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	609a      	str	r2, [r3, #8]
					FSM1->CurrentState++;									//Paso al siguiente estado
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	79db      	ldrb	r3, [r3, #7]
 8001340:	3301      	adds	r3, #1
 8001342:	b2da      	uxtb	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	71da      	strb	r2, [r3, #7]
					eventoEnviado = PANTALLA_AÑADIR_ENTRADA;
 8001348:	2302      	movs	r3, #2
 800134a:	73fb      	strb	r3, [r7, #15]
 800134c:	e007      	b.n	800135e <HandleInput+0xba>
				}

			}
		}
		else{
			eventoEnviado = PANTALLA_IDLE;
 800134e:	2300      	movs	r3, #0
 8001350:	73fb      	strb	r3, [r7, #15]
 8001352:	e004      	b.n	800135e <HandleInput+0xba>
		}
	}
	else{
		FSM1->CurrentState = TIMEOUT;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2207      	movs	r2, #7
 8001358:	71da      	strb	r2, [r3, #7]
		eventoEnviado = PANTALLA_TIMEOUT;
 800135a:	2306      	movs	r3, #6
 800135c:	73fb      	strb	r3, [r7, #15]
	}
	return eventoEnviado;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <GetKey>:

uint8_t GetKey(void){
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b08b      	sub	sp, #44	@ 0x2c
 800136c:	af00      	add	r7, sp, #0
	/*Esta funcion realiza un barrido al keypad matricial 4x4*/
	/*Si se presiona una tecla, devuelve el ascii asociado. Si no, devuelve 0*/
	uint16_t PinRows[ROWS] = {GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_8, GPIO_PIN_9};
 800136e:	4a43      	ldr	r2, [pc, #268]	@ (800147c <GetKey+0x114>)
 8001370:	f107 031c 	add.w	r3, r7, #28
 8001374:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001378:	e883 0003 	stmia.w	r3, {r0, r1}
	uint16_t PinCols[COLS] = {GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_2, GPIO_PIN_3};
 800137c:	4a40      	ldr	r2, [pc, #256]	@ (8001480 <GetKey+0x118>)
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001386:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t KeyPressed;
	char Keypad[ROWS][COLS] = {
 800138a:	4b3e      	ldr	r3, [pc, #248]	@ (8001484 <GetKey+0x11c>)
 800138c:	1d3c      	adds	r4, r7, #4
 800138e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001390:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	      {'4', '5', '6', 'B'},
	      {'7', '8', '9', 'C'},
	      {'*', '0', '#', 'D'}
	 };
	 /*Escaneo el teclado en busca de 1 tecla presionada. Si hay tecla presionada*/
	 for(uint8_t i = 0; i < ROWS; i++){
 8001394:	2300      	movs	r3, #0
 8001396:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800139a:	e066      	b.n	800146a <GetKey+0x102>
		 HAL_GPIO_WritePin(GPIOC, PinRows[i], GPIO_PIN_SET);					//Prendo y apago secuencialmente las filas
 800139c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	3328      	adds	r3, #40	@ 0x28
 80013a4:	443b      	add	r3, r7
 80013a6:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 80013aa:	2201      	movs	r2, #1
 80013ac:	4619      	mov	r1, r3
 80013ae:	4836      	ldr	r0, [pc, #216]	@ (8001488 <GetKey+0x120>)
 80013b0:	f002 f854 	bl	800345c <HAL_GPIO_WritePin>
		 for(uint8_t j = 0; j < COLS; j++){
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80013ba:	e041      	b.n	8001440 <GetKey+0xd8>
			 if(HAL_GPIO_ReadPin(GPIOC, PinCols[j]) == GPIO_PIN_SET){			//Barro las columnas y verifico si se presiona una tecla
 80013bc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	3328      	adds	r3, #40	@ 0x28
 80013c4:	443b      	add	r3, r7
 80013c6:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80013ca:	4619      	mov	r1, r3
 80013cc:	482e      	ldr	r0, [pc, #184]	@ (8001488 <GetKey+0x120>)
 80013ce:	f002 f82d 	bl	800342c <HAL_GPIO_ReadPin>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d12e      	bne.n	8001436 <GetKey+0xce>
				 vTaskDelay(20 / portTICK_RATE_MS);								//Espero 20 ms y reconfirmo el estado. Si no se reconfirma sigue el barrido.
 80013d8:	2014      	movs	r0, #20
 80013da:	f009 fe5f 	bl	800b09c <vTaskDelay>
				 if(HAL_GPIO_ReadPin(GPIOC, PinCols[j]) == GPIO_PIN_SET){
 80013de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	3328      	adds	r3, #40	@ 0x28
 80013e6:	443b      	add	r3, r7
 80013e8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80013ec:	4619      	mov	r1, r3
 80013ee:	4826      	ldr	r0, [pc, #152]	@ (8001488 <GetKey+0x120>)
 80013f0:	f002 f81c 	bl	800342c <HAL_GPIO_ReadPin>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d11d      	bne.n	8001436 <GetKey+0xce>
					 KeyPressed = (uint8_t) Keypad[i][j];
 80013fa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80013fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	3228      	adds	r2, #40	@ 0x28
 8001406:	443a      	add	r2, r7
 8001408:	4413      	add	r3, r2
 800140a:	3b24      	subs	r3, #36	@ 0x24
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
					 HAL_GPIO_WritePin(GPIOC, PinRows[i], GPIO_PIN_RESET);		//Pongo fila a 0 antes de salir de la funcion.
 8001412:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	3328      	adds	r3, #40	@ 0x28
 800141a:	443b      	add	r3, r7
 800141c:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8001420:	2200      	movs	r2, #0
 8001422:	4619      	mov	r1, r3
 8001424:	4818      	ldr	r0, [pc, #96]	@ (8001488 <GetKey+0x120>)
 8001426:	f002 f819 	bl	800345c <HAL_GPIO_WritePin>
					 vTaskDelay(150/ portTICK_RATE_MS);
 800142a:	2096      	movs	r0, #150	@ 0x96
 800142c:	f009 fe36 	bl	800b09c <vTaskDelay>
					 return KeyPressed;
 8001430:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001434:	e01e      	b.n	8001474 <GetKey+0x10c>
		 for(uint8_t j = 0; j < COLS; j++){
 8001436:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800143a:	3301      	adds	r3, #1
 800143c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001440:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001444:	2b03      	cmp	r3, #3
 8001446:	d9b9      	bls.n	80013bc <GetKey+0x54>
				 }
			 }
		 }
		 HAL_GPIO_WritePin(GPIOC, PinRows[i], GPIO_PIN_RESET);
 8001448:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	3328      	adds	r3, #40	@ 0x28
 8001450:	443b      	add	r3, r7
 8001452:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8001456:	2200      	movs	r2, #0
 8001458:	4619      	mov	r1, r3
 800145a:	480b      	ldr	r0, [pc, #44]	@ (8001488 <GetKey+0x120>)
 800145c:	f001 fffe 	bl	800345c <HAL_GPIO_WritePin>
	 for(uint8_t i = 0; i < ROWS; i++){
 8001460:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001464:	3301      	adds	r3, #1
 8001466:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800146a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800146e:	2b03      	cmp	r3, #3
 8001470:	d994      	bls.n	800139c <GetKey+0x34>
	 }
	 return 0;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	372c      	adds	r7, #44	@ 0x2c
 8001478:	46bd      	mov	sp, r7
 800147a:	bd90      	pop	{r4, r7, pc}
 800147c:	0800de60 	.word	0x0800de60
 8001480:	0800de68 	.word	0x0800de68
 8001484:	0800de70 	.word	0x0800de70
 8001488:	40020800 	.word	0x40020800

0800148c <ClearBuffer>:
		str++;
	}
	return;
}

void ClearBuffer(uint8_t *Buffer, uint8_t size){
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	70fb      	strb	r3, [r7, #3]
	/*Limpia el buffer que guarda la secuencia ingresada*/
	for(uint8_t i = 0; i < size; i++){
 8001498:	2300      	movs	r3, #0
 800149a:	73fb      	strb	r3, [r7, #15]
 800149c:	e007      	b.n	80014ae <ClearBuffer+0x22>
		Buffer[i] = 0;
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	687a      	ldr	r2, [r7, #4]
 80014a2:	4413      	add	r3, r2
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < size; i++){
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	3301      	adds	r3, #1
 80014ac:	73fb      	strb	r3, [r7, #15]
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d3f3      	bcc.n	800149e <ClearBuffer+0x12>
	}
	return;
 80014b6:	bf00      	nop
}
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <openLock>:
#include "lock.h"

void openLock(void){
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	/*Wrapper de la función writepin*/
	HAL_GPIO_WritePin(Lock_GPIO_Port, Lock_Pin, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2120      	movs	r1, #32
 80014cc:	4802      	ldr	r0, [pc, #8]	@ (80014d8 <openLock+0x14>)
 80014ce:	f001 ffc5 	bl	800345c <HAL_GPIO_WritePin>
	return;
 80014d2:	bf00      	nop
}
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40020800 	.word	0x40020800

080014dc <closeLock>:

void closeLock(void){
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	/*Wrapper de la función writepin*/
	HAL_GPIO_WritePin(Lock_GPIO_Port, Lock_Pin, GPIO_PIN_SET);
 80014e0:	2201      	movs	r2, #1
 80014e2:	2120      	movs	r1, #32
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <closeLock+0x14>)
 80014e6:	f001 ffb9 	bl	800345c <HAL_GPIO_WritePin>
	return;
 80014ea:	bf00      	nop
}
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40020800 	.word	0x40020800

080014f4 <displayInit>:
#include "screen.h"
extern QueueHandle_t uiQueue;

void displayInit(void){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
	/*Wrapper de la función que inicializa el display*/
	ssd1306_Init();
 80014f8:	f000 fae0 	bl	8001abc <ssd1306_Init>
	return;
 80014fc:	bf00      	nop
}
 80014fe:	bd80      	pop	{r7, pc}

08001500 <displayInsertKeyMsg>:

void displayInsertKeyMsg(void){
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af02      	add	r7, sp, #8
	uint8_t x = 5;
 8001506:	2305      	movs	r3, #5
 8001508:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800150e:	2000      	movs	r0, #0
 8001510:	f000 fb3e 	bl	8001b90 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001514:	79ba      	ldrb	r2, [r7, #6]
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f000 fc82 	bl	8001e24 <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_16x26, White);
 8001520:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <displayInsertKeyMsg+0x68>)
 8001522:	2201      	movs	r2, #1
 8001524:	9200      	str	r2, [sp, #0]
 8001526:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001528:	4810      	ldr	r0, [pc, #64]	@ (800156c <displayInsertKeyMsg+0x6c>)
 800152a:	f000 fc55 	bl	8001dd8 <ssd1306_WriteString>
	x += 15;
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	330f      	adds	r3, #15
 8001532:	71fb      	strb	r3, [r7, #7]
	y += 26;
 8001534:	79bb      	ldrb	r3, [r7, #6]
 8001536:	331a      	adds	r3, #26
 8001538:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 800153a:	79ba      	ldrb	r2, [r7, #6]
 800153c:	79fb      	ldrb	r3, [r7, #7]
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f000 fc6f 	bl	8001e24 <ssd1306_SetCursor>
	ssd1306_WriteString("clave", Font_16x26, White);
 8001546:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <displayInsertKeyMsg+0x68>)
 8001548:	2201      	movs	r2, #1
 800154a:	9200      	str	r2, [sp, #0]
 800154c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800154e:	4808      	ldr	r0, [pc, #32]	@ (8001570 <displayInsertKeyMsg+0x70>)
 8001550:	f000 fc42 	bl	8001dd8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8001554:	f000 fb34 	bl	8001bc0 <ssd1306_UpdateScreen>
	ssd1306_Fill(Black);								//Para preparar la sig secuencia
 8001558:	2000      	movs	r0, #0
 800155a:	f000 fb19 	bl	8001b90 <ssd1306_Fill>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	0801016c 	.word	0x0801016c
 800156c:	0800de80 	.word	0x0800de80
 8001570:	0800de88 	.word	0x0800de88

08001574 <displayTimeoutMsg>:

void displayTimeoutMsg(void){
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af02      	add	r7, sp, #8
	uint8_t x = 5;
 800157a:	2305      	movs	r3, #5
 800157c:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 18;
 800157e:	2312      	movs	r3, #18
 8001580:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 8001582:	2000      	movs	r0, #0
 8001584:	f000 fb04 	bl	8001b90 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001588:	79ba      	ldrb	r2, [r7, #6]
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	4611      	mov	r1, r2
 800158e:	4618      	mov	r0, r3
 8001590:	f000 fc48 	bl	8001e24 <ssd1306_SetCursor>
	ssd1306_WriteString("Timeout!!!", Font_11x18, White);
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <displayTimeoutMsg+0x3c>)
 8001596:	2201      	movs	r2, #1
 8001598:	9200      	str	r2, [sp, #0]
 800159a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800159c:	4805      	ldr	r0, [pc, #20]	@ (80015b4 <displayTimeoutMsg+0x40>)
 800159e:	f000 fc1b 	bl	8001dd8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80015a2:	f000 fb0d 	bl	8001bc0 <ssd1306_UpdateScreen>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	08010160 	.word	0x08010160
 80015b4:	0800de90 	.word	0x0800de90

080015b8 <displayIncompleteMsg>:

void displayIncompleteMsg(void){
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af02      	add	r7, sp, #8
	uint8_t x = 20;
 80015be:	2314      	movs	r3, #20
 80015c0:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 80015c6:	2000      	movs	r0, #0
 80015c8:	f000 fae2 	bl	8001b90 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80015cc:	79ba      	ldrb	r2, [r7, #6]
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	4611      	mov	r1, r2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 fc26 	bl	8001e24 <ssd1306_SetCursor>
	ssd1306_WriteString("Ingrese", Font_11x18, White);
 80015d8:	4b18      	ldr	r3, [pc, #96]	@ (800163c <displayIncompleteMsg+0x84>)
 80015da:	2201      	movs	r2, #1
 80015dc:	9200      	str	r2, [sp, #0]
 80015de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015e0:	4817      	ldr	r0, [pc, #92]	@ (8001640 <displayIncompleteMsg+0x88>)
 80015e2:	f000 fbf9 	bl	8001dd8 <ssd1306_WriteString>
	x = 10;
 80015e6:	230a      	movs	r3, #10
 80015e8:	71fb      	strb	r3, [r7, #7]
	y += 18;
 80015ea:	79bb      	ldrb	r3, [r7, #6]
 80015ec:	3312      	adds	r3, #18
 80015ee:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 80015f0:	79ba      	ldrb	r2, [r7, #6]
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	4611      	mov	r1, r2
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 fc14 	bl	8001e24 <ssd1306_SetCursor>
	ssd1306_WriteString("secuencia", Font_11x18, White);
 80015fc:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <displayIncompleteMsg+0x84>)
 80015fe:	2201      	movs	r2, #1
 8001600:	9200      	str	r2, [sp, #0]
 8001602:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001604:	480f      	ldr	r0, [pc, #60]	@ (8001644 <displayIncompleteMsg+0x8c>)
 8001606:	f000 fbe7 	bl	8001dd8 <ssd1306_WriteString>
	x = 20;
 800160a:	2314      	movs	r3, #20
 800160c:	71fb      	strb	r3, [r7, #7]
	y += 18;
 800160e:	79bb      	ldrb	r3, [r7, #6]
 8001610:	3312      	adds	r3, #18
 8001612:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8001614:	79ba      	ldrb	r2, [r7, #6]
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f000 fc02 	bl	8001e24 <ssd1306_SetCursor>
	ssd1306_WriteString("valida", Font_11x18, White);
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <displayIncompleteMsg+0x84>)
 8001622:	2201      	movs	r2, #1
 8001624:	9200      	str	r2, [sp, #0]
 8001626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001628:	4807      	ldr	r0, [pc, #28]	@ (8001648 <displayIncompleteMsg+0x90>)
 800162a:	f000 fbd5 	bl	8001dd8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800162e:	f000 fac7 	bl	8001bc0 <ssd1306_UpdateScreen>

}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	08010160 	.word	0x08010160
 8001640:	0800de80 	.word	0x0800de80
 8001644:	0800de9c 	.word	0x0800de9c
 8001648:	0800dea8 	.word	0x0800dea8

0800164c <displayAccessState>:

void displayAccessState(void){
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af02      	add	r7, sp, #8
	uint8_t x = 5;
 8001652:	2305      	movs	r3, #5
 8001654:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 800165a:	2000      	movs	r0, #0
 800165c:	f000 fa98 	bl	8001b90 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 8001660:	79ba      	ldrb	r2, [r7, #6]
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	4611      	mov	r1, r2
 8001666:	4618      	mov	r0, r3
 8001668:	f000 fbdc 	bl	8001e24 <ssd1306_SetCursor>
	ssd1306_WriteString("Acceso", Font_11x18, White);
 800166c:	4b0e      	ldr	r3, [pc, #56]	@ (80016a8 <displayAccessState+0x5c>)
 800166e:	2201      	movs	r2, #1
 8001670:	9200      	str	r2, [sp, #0]
 8001672:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001674:	480d      	ldr	r0, [pc, #52]	@ (80016ac <displayAccessState+0x60>)
 8001676:	f000 fbaf 	bl	8001dd8 <ssd1306_WriteString>
	y += 18;
 800167a:	79bb      	ldrb	r3, [r7, #6]
 800167c:	3312      	adds	r3, #18
 800167e:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8001680:	79ba      	ldrb	r2, [r7, #6]
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	4611      	mov	r1, r2
 8001686:	4618      	mov	r0, r3
 8001688:	f000 fbcc 	bl	8001e24 <ssd1306_SetCursor>
	ssd1306_WriteString("concedido", Font_11x18, White);
 800168c:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <displayAccessState+0x5c>)
 800168e:	2201      	movs	r2, #1
 8001690:	9200      	str	r2, [sp, #0]
 8001692:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001694:	4806      	ldr	r0, [pc, #24]	@ (80016b0 <displayAccessState+0x64>)
 8001696:	f000 fb9f 	bl	8001dd8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800169a:	f000 fa91 	bl	8001bc0 <ssd1306_UpdateScreen>
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	08010160 	.word	0x08010160
 80016ac:	0800deb0 	.word	0x0800deb0
 80016b0:	0800deb8 	.word	0x0800deb8

080016b4 <displayNonExistentUserMsg>:

void displayNonExistentUserMsg(void){
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af02      	add	r7, sp, #8
	uint8_t x = 20;
 80016ba:	2314      	movs	r3, #20
 80016bc:	71fb      	strb	r3, [r7, #7]
	uint8_t y = 0;
 80016be:	2300      	movs	r3, #0
 80016c0:	71bb      	strb	r3, [r7, #6]
	ssd1306_Fill(Black);
 80016c2:	2000      	movs	r0, #0
 80016c4:	f000 fa64 	bl	8001b90 <ssd1306_Fill>
	ssd1306_SetCursor(x, y);
 80016c8:	79ba      	ldrb	r2, [r7, #6]
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 fba8 	bl	8001e24 <ssd1306_SetCursor>
	ssd1306_WriteString("Usuario", Font_11x18, White);
 80016d4:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <displayNonExistentUserMsg+0x84>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	9200      	str	r2, [sp, #0]
 80016da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016dc:	4817      	ldr	r0, [pc, #92]	@ (800173c <displayNonExistentUserMsg+0x88>)
 80016de:	f000 fb7b 	bl	8001dd8 <ssd1306_WriteString>
	x = 20;
 80016e2:	2314      	movs	r3, #20
 80016e4:	71fb      	strb	r3, [r7, #7]
	y += 18;
 80016e6:	79bb      	ldrb	r3, [r7, #6]
 80016e8:	3312      	adds	r3, #18
 80016ea:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 80016ec:	79ba      	ldrb	r2, [r7, #6]
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 fb96 	bl	8001e24 <ssd1306_SetCursor>
	ssd1306_WriteString("no", Font_11x18, White);
 80016f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <displayNonExistentUserMsg+0x84>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	9200      	str	r2, [sp, #0]
 80016fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001700:	480f      	ldr	r0, [pc, #60]	@ (8001740 <displayNonExistentUserMsg+0x8c>)
 8001702:	f000 fb69 	bl	8001dd8 <ssd1306_WriteString>
	x = 20;
 8001706:	2314      	movs	r3, #20
 8001708:	71fb      	strb	r3, [r7, #7]
	y += 18;
 800170a:	79bb      	ldrb	r3, [r7, #6]
 800170c:	3312      	adds	r3, #18
 800170e:	71bb      	strb	r3, [r7, #6]
	ssd1306_SetCursor(x, y);
 8001710:	79ba      	ldrb	r2, [r7, #6]
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	4611      	mov	r1, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f000 fb84 	bl	8001e24 <ssd1306_SetCursor>
	ssd1306_WriteString("existente", Font_11x18, White);
 800171c:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <displayNonExistentUserMsg+0x84>)
 800171e:	2201      	movs	r2, #1
 8001720:	9200      	str	r2, [sp, #0]
 8001722:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001724:	4807      	ldr	r0, [pc, #28]	@ (8001744 <displayNonExistentUserMsg+0x90>)
 8001726:	f000 fb57 	bl	8001dd8 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 800172a:	f000 fa49 	bl	8001bc0 <ssd1306_UpdateScreen>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	08010160 	.word	0x08010160
 800173c:	0800dec4 	.word	0x0800dec4
 8001740:	0800decc 	.word	0x0800decc
 8001744:	0800ded0 	.word	0x0800ded0

08001748 <verifyAccessRegister>:
extern FILINFO fno;
extern FRESULT fresult;  // result
extern UINT br, bw;  // File read/write count
extern RTC_HandleTypeDef hrtc;			//Handler del RTC

fileState verifyAccessRegister(char *name){
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
	/*Esta funcion es un wrapper nada mas*/
	/**** chequea si existe o no el archivo ****/
	fileState State;
	char *buf = pvPortMalloc(100*sizeof(char));
 8001750:	2064      	movs	r0, #100	@ 0x64
 8001752:	f00a fd6b 	bl	800c22c <pvPortMalloc>
 8001756:	60b8      	str	r0, [r7, #8]
	Mount_SD("/");
 8001758:	481f      	ldr	r0, [pc, #124]	@ (80017d8 <verifyAccessRegister+0x90>)
 800175a:	f7fe ff37 	bl	80005cc <Mount_SD>
	fresult = f_stat (name, &fno);					//Compruebo si existe el archivo
 800175e:	491f      	ldr	r1, [pc, #124]	@ (80017dc <verifyAccessRegister+0x94>)
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f008 f89c 	bl	800989e <f_stat>
 8001766:	4603      	mov	r3, r0
 8001768:	461a      	mov	r2, r3
 800176a:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <verifyAccessRegister+0x98>)
 800176c:	701a      	strb	r2, [r3, #0]
	switch(fresult){
 800176e:	4b1c      	ldr	r3, [pc, #112]	@ (80017e0 <verifyAccessRegister+0x98>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d005      	beq.n	8001782 <verifyAccessRegister+0x3a>
 8001776:	2b00      	cmp	r3, #0
 8001778:	db1c      	blt.n	80017b4 <verifyAccessRegister+0x6c>
 800177a:	3b04      	subs	r3, #4
 800177c:	2b01      	cmp	r3, #1
 800177e:	d819      	bhi.n	80017b4 <verifyAccessRegister+0x6c>
 8001780:	e00a      	b.n	8001798 <verifyAccessRegister+0x50>
	case FR_OK:
		State = FILE_EXISTS;
 8001782:	2300      	movs	r3, #0
 8001784:	73fb      	strb	r3, [r7, #15]
		sprintf(buf, "*%s* existe en SD. OK.\n", name);
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4916      	ldr	r1, [pc, #88]	@ (80017e4 <verifyAccessRegister+0x9c>)
 800178a:	68b8      	ldr	r0, [r7, #8]
 800178c:	f00b f832 	bl	800c7f4 <siprintf>
		Send_Uart(buf);
 8001790:	68b8      	ldr	r0, [r7, #8]
 8001792:	f7fe ff05 	bl	80005a0 <Send_Uart>
		break;
 8001796:	e014      	b.n	80017c2 <verifyAccessRegister+0x7a>
	case FR_NO_FILE:
	case FR_NO_PATH:
		State = FILE_DOESNT_EXIST;
 8001798:	2301      	movs	r3, #1
 800179a:	73fb      	strb	r3, [r7, #15]
		sprintf(buf, "*%s* no existe en SD!!!\nCreating new access register\n", name);
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	4912      	ldr	r1, [pc, #72]	@ (80017e8 <verifyAccessRegister+0xa0>)
 80017a0:	68b8      	ldr	r0, [r7, #8]
 80017a2:	f00b f827 	bl	800c7f4 <siprintf>
		Send_Uart(buf);
 80017a6:	68b8      	ldr	r0, [r7, #8]
 80017a8:	f7fe fefa 	bl	80005a0 <Send_Uart>
		Create_File(name);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7fe ff53 	bl	8000658 <Create_File>
		break;
 80017b2:	e006      	b.n	80017c2 <verifyAccessRegister+0x7a>
	default:
		sprintf(buf, "Ocurrio un error desconocido!!!");
 80017b4:	490d      	ldr	r1, [pc, #52]	@ (80017ec <verifyAccessRegister+0xa4>)
 80017b6:	68b8      	ldr	r0, [r7, #8]
 80017b8:	f00b f81c 	bl	800c7f4 <siprintf>
		Send_Uart(buf);
 80017bc:	68b8      	ldr	r0, [r7, #8]
 80017be:	f7fe feef 	bl	80005a0 <Send_Uart>
	}
	Unmount_SD("/");
 80017c2:	4805      	ldr	r0, [pc, #20]	@ (80017d8 <verifyAccessRegister+0x90>)
 80017c4:	f7fe ff26 	bl	8000614 <Unmount_SD>
	vPortFree(buf);
 80017c8:	68b8      	ldr	r0, [r7, #8]
 80017ca:	f00a fdfd 	bl	800c3c8 <vPortFree>
	return State;
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	0800dedc 	.word	0x0800dedc
 80017dc:	2000210c 	.word	0x2000210c
 80017e0:	20002224 	.word	0x20002224
 80017e4:	0800dee0 	.word	0x0800dee0
 80017e8:	0800def8 	.word	0x0800def8
 80017ec:	0800df30 	.word	0x0800df30

080017f0 <verifyDatabase>:

fileState verifyDatabase(char *name){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	fileState State;
	char *buf = pvPortMalloc(100*sizeof(char));
 80017f8:	2064      	movs	r0, #100	@ 0x64
 80017fa:	f00a fd17 	bl	800c22c <pvPortMalloc>
 80017fe:	60b8      	str	r0, [r7, #8]
	Mount_SD("/");
 8001800:	4820      	ldr	r0, [pc, #128]	@ (8001884 <verifyDatabase+0x94>)
 8001802:	f7fe fee3 	bl	80005cc <Mount_SD>
	fresult = f_stat (name, &fno);					//Compruebo si existe el archivo
 8001806:	4920      	ldr	r1, [pc, #128]	@ (8001888 <verifyDatabase+0x98>)
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f008 f848 	bl	800989e <f_stat>
 800180e:	4603      	mov	r3, r0
 8001810:	461a      	mov	r2, r3
 8001812:	4b1e      	ldr	r3, [pc, #120]	@ (800188c <verifyDatabase+0x9c>)
 8001814:	701a      	strb	r2, [r3, #0]
	switch(fresult){
 8001816:	4b1d      	ldr	r3, [pc, #116]	@ (800188c <verifyDatabase+0x9c>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d005      	beq.n	800182a <verifyDatabase+0x3a>
 800181e:	2b00      	cmp	r3, #0
 8001820:	db19      	blt.n	8001856 <verifyDatabase+0x66>
 8001822:	3b04      	subs	r3, #4
 8001824:	2b01      	cmp	r3, #1
 8001826:	d816      	bhi.n	8001856 <verifyDatabase+0x66>
 8001828:	e00a      	b.n	8001840 <verifyDatabase+0x50>
	case FR_OK:
		State = FILE_EXISTS;
 800182a:	2300      	movs	r3, #0
 800182c:	73fb      	strb	r3, [r7, #15]
		sprintf(buf, "*%s* existe en SD. OK.\n", name);
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	4917      	ldr	r1, [pc, #92]	@ (8001890 <verifyDatabase+0xa0>)
 8001832:	68b8      	ldr	r0, [r7, #8]
 8001834:	f00a ffde 	bl	800c7f4 <siprintf>
		Send_Uart(buf);
 8001838:	68b8      	ldr	r0, [r7, #8]
 800183a:	f7fe feb1 	bl	80005a0 <Send_Uart>
		break;
 800183e:	e011      	b.n	8001864 <verifyDatabase+0x74>
	case FR_NO_FILE:
	case FR_NO_PATH:
		State = FILE_DOESNT_EXIST;
 8001840:	2301      	movs	r3, #1
 8001842:	73fb      	strb	r3, [r7, #15]
		sprintf(buf, "*%s* no existe en SD!!! Cargar base de datos y reiniciar\n", name);
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	4913      	ldr	r1, [pc, #76]	@ (8001894 <verifyDatabase+0xa4>)
 8001848:	68b8      	ldr	r0, [r7, #8]
 800184a:	f00a ffd3 	bl	800c7f4 <siprintf>
		Send_Uart(buf);
 800184e:	68b8      	ldr	r0, [r7, #8]
 8001850:	f7fe fea6 	bl	80005a0 <Send_Uart>
		break;
 8001854:	e006      	b.n	8001864 <verifyDatabase+0x74>
	default:
		sprintf(buf, "Ocurrio un error desconocido!!!");
 8001856:	4910      	ldr	r1, [pc, #64]	@ (8001898 <verifyDatabase+0xa8>)
 8001858:	68b8      	ldr	r0, [r7, #8]
 800185a:	f00a ffcb 	bl	800c7f4 <siprintf>
		Send_Uart(buf);
 800185e:	68b8      	ldr	r0, [r7, #8]
 8001860:	f7fe fe9e 	bl	80005a0 <Send_Uart>
	}
	Unmount_SD("/");
 8001864:	4807      	ldr	r0, [pc, #28]	@ (8001884 <verifyDatabase+0x94>)
 8001866:	f7fe fed5 	bl	8000614 <Unmount_SD>
	vPortFree(buf);
 800186a:	68b8      	ldr	r0, [r7, #8]
 800186c:	f00a fdac 	bl	800c3c8 <vPortFree>
	if(State == FILE_DOESNT_EXIST){
 8001870:	7bfb      	ldrb	r3, [r7, #15]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d101      	bne.n	800187a <verifyDatabase+0x8a>
		while(1);
 8001876:	bf00      	nop
 8001878:	e7fd      	b.n	8001876 <verifyDatabase+0x86>
	}
	return State;
 800187a:	7bfb      	ldrb	r3, [r7, #15]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	0800dedc 	.word	0x0800dedc
 8001888:	2000210c 	.word	0x2000210c
 800188c:	20002224 	.word	0x20002224
 8001890:	0800dee0 	.word	0x0800dee0
 8001894:	0800df50 	.word	0x0800df50
 8001898:	0800df30 	.word	0x0800df30

0800189c <searchUserOnDatabase>:

char *searchUserOnDatabase(char *userSequence, char *databaseName){
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
	/***Esta funcion busca en una base de datos .txt al usuario asociado a la secuencia ingresada.***/
	/***Si lo encuentra, devuelve puntero al usuario (str). Si no, devuelve USER_ERROR.***/
	/***Se devuelve FILE_ERROR si no se puede abrir el archivo correctamente.***/
	/*Reservo espacio en memoria*/
	char *buf = pvPortMalloc(100*sizeof(char));
 80018a6:	2064      	movs	r0, #100	@ 0x64
 80018a8:	f00a fcc0 	bl	800c22c <pvPortMalloc>
 80018ac:	6178      	str	r0, [r7, #20]
	char *userName;
	char *currentUserKey;
	Mount_SD("/");
 80018ae:	4827      	ldr	r0, [pc, #156]	@ (800194c <searchUserOnDatabase+0xb0>)
 80018b0:	f7fe fe8c 	bl	80005cc <Mount_SD>
	fresult = f_open(&fil, databaseName, FA_READ);
 80018b4:	2201      	movs	r2, #1
 80018b6:	6839      	ldr	r1, [r7, #0]
 80018b8:	4825      	ldr	r0, [pc, #148]	@ (8001950 <searchUserOnDatabase+0xb4>)
 80018ba:	f007 fa03 	bl	8008cc4 <f_open>
 80018be:	4603      	mov	r3, r0
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b24      	ldr	r3, [pc, #144]	@ (8001954 <searchUserOnDatabase+0xb8>)
 80018c4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK){
 80018c6:	4b23      	ldr	r3, [pc, #140]	@ (8001954 <searchUserOnDatabase+0xb8>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00c      	beq.n	80018e8 <searchUserOnDatabase+0x4c>
		/*Esto se implementa con fines de debugging*/
		sprintf (buf, "Error al abrir archivo *%s*\n\n", databaseName);
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	4921      	ldr	r1, [pc, #132]	@ (8001958 <searchUserOnDatabase+0xbc>)
 80018d2:	6978      	ldr	r0, [r7, #20]
 80018d4:	f00a ff8e 	bl	800c7f4 <siprintf>
		Send_Uart(buf);
 80018d8:	6978      	ldr	r0, [r7, #20]
 80018da:	f7fe fe61 	bl	80005a0 <Send_Uart>
		vPortFree(buf);
 80018de:	6978      	ldr	r0, [r7, #20]
 80018e0:	f00a fd72 	bl	800c3c8 <vPortFree>
		return FILE_ERROR;
 80018e4:	2300      	movs	r3, #0
 80018e6:	e02d      	b.n	8001944 <searchUserOnDatabase+0xa8>
	}
	/*Comienza la busqueda del usuario*/
	f_gets(buf, 100, &fil);												//Descarto header del archivo
 80018e8:	4a19      	ldr	r2, [pc, #100]	@ (8001950 <searchUserOnDatabase+0xb4>)
 80018ea:	2164      	movs	r1, #100	@ 0x64
 80018ec:	6978      	ldr	r0, [r7, #20]
 80018ee:	f008 f82b 	bl	8009948 <f_gets>
	while(f_gets(buf, 100, &fil)){										//Avanza linea a linea del archivo hasta el final
 80018f2:	e018      	b.n	8001926 <searchUserOnDatabase+0x8a>
		userName = strtok(buf, " ");									//Usando este delimitador consigo primero el usuario
 80018f4:	4919      	ldr	r1, [pc, #100]	@ (800195c <searchUserOnDatabase+0xc0>)
 80018f6:	6978      	ldr	r0, [r7, #20]
 80018f8:	f00b f810 	bl	800c91c <strtok>
 80018fc:	6138      	str	r0, [r7, #16]
		currentUserKey = strtok(NULL, ",");								//Luego consigo la clave, que viene despues del espacio
 80018fe:	4918      	ldr	r1, [pc, #96]	@ (8001960 <searchUserOnDatabase+0xc4>)
 8001900:	2000      	movs	r0, #0
 8001902:	f00b f80b 	bl	800c91c <strtok>
 8001906:	60f8      	str	r0, [r7, #12]
		if(currentUserKey != NULL && strcmp(currentUserKey, userSequence) == 0){
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00b      	beq.n	8001926 <searchUserOnDatabase+0x8a>
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f7fe fc65 	bl	80001e0 <strcmp>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d104      	bne.n	8001926 <searchUserOnDatabase+0x8a>
			Unmount_SD("/");
 800191c:	480b      	ldr	r0, [pc, #44]	@ (800194c <searchUserOnDatabase+0xb0>)
 800191e:	f7fe fe79 	bl	8000614 <Unmount_SD>
			return userName;											/*Recordar liberar memoria de userName en la tarea*/
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	e00e      	b.n	8001944 <searchUserOnDatabase+0xa8>
	while(f_gets(buf, 100, &fil)){										//Avanza linea a linea del archivo hasta el final
 8001926:	4a0a      	ldr	r2, [pc, #40]	@ (8001950 <searchUserOnDatabase+0xb4>)
 8001928:	2164      	movs	r1, #100	@ 0x64
 800192a:	6978      	ldr	r0, [r7, #20]
 800192c:	f008 f80c 	bl	8009948 <f_gets>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1de      	bne.n	80018f4 <searchUserOnDatabase+0x58>
		}
	}
	/*Libero memoria y desmonto tarjeta SD*/
	vPortFree(buf);
 8001936:	6978      	ldr	r0, [r7, #20]
 8001938:	f00a fd46 	bl	800c3c8 <vPortFree>
	Unmount_SD("/");
 800193c:	4803      	ldr	r0, [pc, #12]	@ (800194c <searchUserOnDatabase+0xb0>)
 800193e:	f7fe fe69 	bl	8000614 <Unmount_SD>
	return USER_ERROR;	/*No existe el usuario*/
 8001942:	2300      	movs	r3, #0
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	0800dedc 	.word	0x0800dedc
 8001950:	200010dc 	.word	0x200010dc
 8001954:	20002224 	.word	0x20002224
 8001958:	0800df8c 	.word	0x0800df8c
 800195c:	0800dfac 	.word	0x0800dfac
 8001960:	0800dfb0 	.word	0x0800dfb0

08001964 <getTimeFromRTC>:

char *getTimeFromRTC(void){
 8001964:	b580      	push	{r7, lr}
 8001966:	b08a      	sub	sp, #40	@ 0x28
 8001968:	af02      	add	r7, sp, #8
	/***Esta funcion devuelve en formato string la fecha y hora actual usando el RTC***/
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;
	char *time = pvPortMalloc(15 * sizeof(char));
 800196a:	200f      	movs	r0, #15
 800196c:	f00a fc5e 	bl	800c22c <pvPortMalloc>
 8001970:	61f8      	str	r0, [r7, #28]
	char *date = pvPortMalloc(30 * sizeof(char));
 8001972:	201e      	movs	r0, #30
 8001974:	f00a fc5a 	bl	800c22c <pvPortMalloc>
 8001978:	61b8      	str	r0, [r7, #24]
	/*Obtengo el tiempo actual*/
	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	2200      	movs	r2, #0
 800197e:	4619      	mov	r1, r3
 8001980:	4817      	ldr	r0, [pc, #92]	@ (80019e0 <getTimeFromRTC+0x7c>)
 8001982:	f003 f908 	bl	8004b96 <HAL_RTC_GetTime>
	/*Obtengo la fecha actual*/
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8001986:	463b      	mov	r3, r7
 8001988:	2200      	movs	r2, #0
 800198a:	4619      	mov	r1, r3
 800198c:	4814      	ldr	r0, [pc, #80]	@ (80019e0 <getTimeFromRTC+0x7c>)
 800198e:	f003 f9e4 	bl	8004d5a <HAL_RTC_GetDate>
	/*Guardo fecha y hora en los buffers correspondientes*/
	snprintf(time, 15, "%02d:%02d:%02d", currentTime.Hours, currentTime.Minutes, currentTime.Seconds);
 8001992:	793b      	ldrb	r3, [r7, #4]
 8001994:	4619      	mov	r1, r3
 8001996:	797b      	ldrb	r3, [r7, #5]
 8001998:	79ba      	ldrb	r2, [r7, #6]
 800199a:	9201      	str	r2, [sp, #4]
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	460b      	mov	r3, r1
 80019a0:	4a10      	ldr	r2, [pc, #64]	@ (80019e4 <getTimeFromRTC+0x80>)
 80019a2:	210f      	movs	r1, #15
 80019a4:	69f8      	ldr	r0, [r7, #28]
 80019a6:	f00a fef1 	bl	800c78c <sniprintf>
	snprintf(date, 15, "%02d-%02d-%2d ", currentDate.Date, currentDate.Month, 2000 + currentDate.Year);
 80019aa:	78bb      	ldrb	r3, [r7, #2]
 80019ac:	4619      	mov	r1, r3
 80019ae:	787b      	ldrb	r3, [r7, #1]
 80019b0:	461a      	mov	r2, r3
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	9200      	str	r2, [sp, #0]
 80019bc:	460b      	mov	r3, r1
 80019be:	4a0a      	ldr	r2, [pc, #40]	@ (80019e8 <getTimeFromRTC+0x84>)
 80019c0:	210f      	movs	r1, #15
 80019c2:	69b8      	ldr	r0, [r7, #24]
 80019c4:	f00a fee2 	bl	800c78c <sniprintf>
	strcat(date, time);
 80019c8:	69f9      	ldr	r1, [r7, #28]
 80019ca:	69b8      	ldr	r0, [r7, #24]
 80019cc:	f00a ff97 	bl	800c8fe <strcat>
	vPortFree(time);
 80019d0:	69f8      	ldr	r0, [r7, #28]
 80019d2:	f00a fcf9 	bl	800c3c8 <vPortFree>
	return date;							/*Liberar memoria luego de usar la fecha y hora*/
 80019d6:	69bb      	ldr	r3, [r7, #24]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3720      	adds	r7, #32
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	200028e0 	.word	0x200028e0
 80019e4:	0800dfb4 	.word	0x0800dfb4
 80019e8:	0800dfc4 	.word	0x0800dfc4

080019ec <recordOnRegister>:

void recordOnRegister(char *regName, char *userName, char *accessSequence){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b0a0      	sub	sp, #128	@ 0x80
 80019f0:	af02      	add	r7, sp, #8
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
	char regEntry[100];
	char *dateAndTime;
	/*Obtengo fecha y hora*/
	dateAndTime = getTimeFromRTC();
 80019f8:	f7ff ffb4 	bl	8001964 <getTimeFromRTC>
 80019fc:	6778      	str	r0, [r7, #116]	@ 0x74
	/*Armo la entrada del registro*/
	snprintf(regEntry, 100, "%s %s %s\n", dateAndTime, userName, accessSequence);
 80019fe:	f107 0010 	add.w	r0, r7, #16
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	9301      	str	r3, [sp, #4]
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a40 <recordOnRegister+0x54>)
 8001a0e:	2164      	movs	r1, #100	@ 0x64
 8001a10:	f00a febc 	bl	800c78c <sniprintf>
	/*Escribo en la tarjeta SD*/
	Mount_SD("/");
 8001a14:	480b      	ldr	r0, [pc, #44]	@ (8001a44 <recordOnRegister+0x58>)
 8001a16:	f7fe fdd9 	bl	80005cc <Mount_SD>
	Update_File(regName, regEntry);
 8001a1a:	f107 0310 	add.w	r3, r7, #16
 8001a1e:	4619      	mov	r1, r3
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f7fe feaf 	bl	8000784 <Update_File>
	Unmount_SD("/");
 8001a26:	4807      	ldr	r0, [pc, #28]	@ (8001a44 <recordOnRegister+0x58>)
 8001a28:	f7fe fdf4 	bl	8000614 <Unmount_SD>
	/*Libero memoria utilizada*/
	vPortFree(dateAndTime);
 8001a2c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8001a2e:	f00a fccb 	bl	800c3c8 <vPortFree>
	vPortFree(userName);								//Libero memoria del puntero buf creado
 8001a32:	68b8      	ldr	r0, [r7, #8]
 8001a34:	f00a fcc8 	bl	800c3c8 <vPortFree>
														//en la funcion que busca usuario
	return;
 8001a38:	bf00      	nop
}
 8001a3a:	3778      	adds	r7, #120	@ 0x78
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	0800dfd4 	.word	0x0800dfd4
 8001a44:	0800dedc 	.word	0x0800dedc

08001a48 <ssd1306_Reset>:
#include "main.h"
#include "cmsis_os.h"

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af04      	add	r7, sp, #16
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	9302      	str	r3, [sp, #8]
 8001a68:	2301      	movs	r3, #1
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	1dfb      	adds	r3, r7, #7
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	2301      	movs	r3, #1
 8001a72:	2200      	movs	r2, #0
 8001a74:	2178      	movs	r1, #120	@ 0x78
 8001a76:	4803      	ldr	r0, [pc, #12]	@ (8001a84 <ssd1306_WriteCommand+0x2c>)
 8001a78:	f001 fe4e 	bl	8003718 <HAL_I2C_Mem_Write>
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	2000288c 	.word	0x2000288c

08001a88 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af04      	add	r7, sp, #16
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9a:	9202      	str	r2, [sp, #8]
 8001a9c:	9301      	str	r3, [sp, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	9300      	str	r3, [sp, #0]
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	2240      	movs	r2, #64	@ 0x40
 8001aa6:	2178      	movs	r1, #120	@ 0x78
 8001aa8:	4803      	ldr	r0, [pc, #12]	@ (8001ab8 <ssd1306_WriteData+0x30>)
 8001aaa:	f001 fe35 	bl	8003718 <HAL_I2C_Mem_Write>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	2000288c 	.word	0x2000288c

08001abc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001ac0:	f7ff ffc2 	bl	8001a48 <ssd1306_Reset>

    // Wait for the screen to boot
    vTaskDelay(100 / portTICK_RATE_MS);
 8001ac4:	2064      	movs	r0, #100	@ 0x64
 8001ac6:	f009 fae9 	bl	800b09c <vTaskDelay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001aca:	2000      	movs	r0, #0
 8001acc:	f000 f9d6 	bl	8001e7c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001ad0:	2020      	movs	r0, #32
 8001ad2:	f7ff ffc1 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7ff ffbe 	bl	8001a58 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001adc:	20b0      	movs	r0, #176	@ 0xb0
 8001ade:	f7ff ffbb 	bl	8001a58 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001ae2:	20c8      	movs	r0, #200	@ 0xc8
 8001ae4:	f7ff ffb8 	bl	8001a58 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f7ff ffb5 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001aee:	2010      	movs	r0, #16
 8001af0:	f7ff ffb2 	bl	8001a58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001af4:	2040      	movs	r0, #64	@ 0x40
 8001af6:	f7ff ffaf 	bl	8001a58 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001afa:	20ff      	movs	r0, #255	@ 0xff
 8001afc:	f000 f9aa 	bl	8001e54 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001b00:	20a1      	movs	r0, #161	@ 0xa1
 8001b02:	f7ff ffa9 	bl	8001a58 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001b06:	20a6      	movs	r0, #166	@ 0xa6
 8001b08:	f7ff ffa6 	bl	8001a58 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001b0c:	20a8      	movs	r0, #168	@ 0xa8
 8001b0e:	f7ff ffa3 	bl	8001a58 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001b12:	203f      	movs	r0, #63	@ 0x3f
 8001b14:	f7ff ffa0 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b18:	20a4      	movs	r0, #164	@ 0xa4
 8001b1a:	f7ff ff9d 	bl	8001a58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001b1e:	20d3      	movs	r0, #211	@ 0xd3
 8001b20:	f7ff ff9a 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001b24:	2000      	movs	r0, #0
 8001b26:	f7ff ff97 	bl	8001a58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001b2a:	20d5      	movs	r0, #213	@ 0xd5
 8001b2c:	f7ff ff94 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001b30:	20f0      	movs	r0, #240	@ 0xf0
 8001b32:	f7ff ff91 	bl	8001a58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001b36:	20d9      	movs	r0, #217	@ 0xd9
 8001b38:	f7ff ff8e 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001b3c:	2022      	movs	r0, #34	@ 0x22
 8001b3e:	f7ff ff8b 	bl	8001a58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001b42:	20da      	movs	r0, #218	@ 0xda
 8001b44:	f7ff ff88 	bl	8001a58 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001b48:	2012      	movs	r0, #18
 8001b4a:	f7ff ff85 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001b4e:	20db      	movs	r0, #219	@ 0xdb
 8001b50:	f7ff ff82 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001b54:	2020      	movs	r0, #32
 8001b56:	f7ff ff7f 	bl	8001a58 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001b5a:	208d      	movs	r0, #141	@ 0x8d
 8001b5c:	f7ff ff7c 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001b60:	2014      	movs	r0, #20
 8001b62:	f7ff ff79 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001b66:	2001      	movs	r0, #1
 8001b68:	f000 f988 	bl	8001e7c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	f000 f80f 	bl	8001b90 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001b72:	f000 f825 	bl	8001bc0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001b76:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <ssd1306_Init+0xd0>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001b7c:	4b03      	ldr	r3, [pc, #12]	@ (8001b8c <ssd1306_Init+0xd0>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001b82:	4b02      	ldr	r3, [pc, #8]	@ (8001b8c <ssd1306_Init+0xd0>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	711a      	strb	r2, [r3, #4]
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20002630 	.word	0x20002630

08001b90 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <ssd1306_Fill+0x14>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	e000      	b.n	8001ba6 <ssd1306_Fill+0x16>
 8001ba4:	23ff      	movs	r3, #255	@ 0xff
 8001ba6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001baa:	4619      	mov	r1, r3
 8001bac:	4803      	ldr	r0, [pc, #12]	@ (8001bbc <ssd1306_Fill+0x2c>)
 8001bae:	f00a fe9e 	bl	800c8ee <memset>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20002230 	.word	0x20002230

08001bc0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	71fb      	strb	r3, [r7, #7]
 8001bca:	e016      	b.n	8001bfa <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	3b50      	subs	r3, #80	@ 0x50
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff ff40 	bl	8001a58 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f7ff ff3d 	bl	8001a58 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001bde:	2010      	movs	r0, #16
 8001be0:	f7ff ff3a 	bl	8001a58 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	01db      	lsls	r3, r3, #7
 8001be8:	4a08      	ldr	r2, [pc, #32]	@ (8001c0c <ssd1306_UpdateScreen+0x4c>)
 8001bea:	4413      	add	r3, r2
 8001bec:	2180      	movs	r1, #128	@ 0x80
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff ff4a 	bl	8001a88 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	71fb      	strb	r3, [r7, #7]
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	2b07      	cmp	r3, #7
 8001bfe:	d9e5      	bls.n	8001bcc <ssd1306_UpdateScreen+0xc>
    }
}
 8001c00:	bf00      	nop
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20002230 	.word	0x20002230

08001c10 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	71bb      	strb	r3, [r7, #6]
 8001c1e:	4613      	mov	r3, r2
 8001c20:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	db3d      	blt.n	8001ca6 <ssd1306_DrawPixel+0x96>
 8001c2a:	79bb      	ldrb	r3, [r7, #6]
 8001c2c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c2e:	d83a      	bhi.n	8001ca6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001c30:	797b      	ldrb	r3, [r7, #5]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d11a      	bne.n	8001c6c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001c36:	79fa      	ldrb	r2, [r7, #7]
 8001c38:	79bb      	ldrb	r3, [r7, #6]
 8001c3a:	08db      	lsrs	r3, r3, #3
 8001c3c:	b2d8      	uxtb	r0, r3
 8001c3e:	4603      	mov	r3, r0
 8001c40:	01db      	lsls	r3, r3, #7
 8001c42:	4413      	add	r3, r2
 8001c44:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb4 <ssd1306_DrawPixel+0xa4>)
 8001c46:	5cd3      	ldrb	r3, [r2, r3]
 8001c48:	b25a      	sxtb	r2, r3
 8001c4a:	79bb      	ldrb	r3, [r7, #6]
 8001c4c:	f003 0307 	and.w	r3, r3, #7
 8001c50:	2101      	movs	r1, #1
 8001c52:	fa01 f303 	lsl.w	r3, r1, r3
 8001c56:	b25b      	sxtb	r3, r3
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b259      	sxtb	r1, r3
 8001c5c:	79fa      	ldrb	r2, [r7, #7]
 8001c5e:	4603      	mov	r3, r0
 8001c60:	01db      	lsls	r3, r3, #7
 8001c62:	4413      	add	r3, r2
 8001c64:	b2c9      	uxtb	r1, r1
 8001c66:	4a13      	ldr	r2, [pc, #76]	@ (8001cb4 <ssd1306_DrawPixel+0xa4>)
 8001c68:	54d1      	strb	r1, [r2, r3]
 8001c6a:	e01d      	b.n	8001ca8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001c6c:	79fa      	ldrb	r2, [r7, #7]
 8001c6e:	79bb      	ldrb	r3, [r7, #6]
 8001c70:	08db      	lsrs	r3, r3, #3
 8001c72:	b2d8      	uxtb	r0, r3
 8001c74:	4603      	mov	r3, r0
 8001c76:	01db      	lsls	r3, r3, #7
 8001c78:	4413      	add	r3, r2
 8001c7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001cb4 <ssd1306_DrawPixel+0xa4>)
 8001c7c:	5cd3      	ldrb	r3, [r2, r3]
 8001c7e:	b25a      	sxtb	r2, r3
 8001c80:	79bb      	ldrb	r3, [r7, #6]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	2101      	movs	r1, #1
 8001c88:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8c:	b25b      	sxtb	r3, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	b25b      	sxtb	r3, r3
 8001c92:	4013      	ands	r3, r2
 8001c94:	b259      	sxtb	r1, r3
 8001c96:	79fa      	ldrb	r2, [r7, #7]
 8001c98:	4603      	mov	r3, r0
 8001c9a:	01db      	lsls	r3, r3, #7
 8001c9c:	4413      	add	r3, r2
 8001c9e:	b2c9      	uxtb	r1, r1
 8001ca0:	4a04      	ldr	r2, [pc, #16]	@ (8001cb4 <ssd1306_DrawPixel+0xa4>)
 8001ca2:	54d1      	strb	r1, [r2, r3]
 8001ca4:	e000      	b.n	8001ca8 <ssd1306_DrawPixel+0x98>
        return;
 8001ca6:	bf00      	nop
    }
}
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	20002230 	.word	0x20002230

08001cb8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001cb8:	b590      	push	{r4, r7, lr}
 8001cba:	b089      	sub	sp, #36	@ 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4604      	mov	r4, r0
 8001cc0:	4638      	mov	r0, r7
 8001cc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001cc6:	4623      	mov	r3, r4
 8001cc8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	2b1f      	cmp	r3, #31
 8001cce:	d902      	bls.n	8001cd6 <ssd1306_WriteChar+0x1e>
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	2b7e      	cmp	r3, #126	@ 0x7e
 8001cd4:	d901      	bls.n	8001cda <ssd1306_WriteChar+0x22>
        return 0;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e077      	b.n	8001dca <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001cda:	4b3e      	ldr	r3, [pc, #248]	@ (8001dd4 <ssd1306_WriteChar+0x11c>)
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	783b      	ldrb	r3, [r7, #0]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	2b80      	cmp	r3, #128	@ 0x80
 8001ce6:	dc06      	bgt.n	8001cf6 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001ce8:	4b3a      	ldr	r3, [pc, #232]	@ (8001dd4 <ssd1306_WriteChar+0x11c>)
 8001cea:	885b      	ldrh	r3, [r3, #2]
 8001cec:	461a      	mov	r2, r3
 8001cee:	787b      	ldrb	r3, [r7, #1]
 8001cf0:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001cf2:	2b40      	cmp	r3, #64	@ 0x40
 8001cf4:	dd01      	ble.n	8001cfa <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	e067      	b.n	8001dca <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
 8001cfe:	e04e      	b.n	8001d9e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	7bfb      	ldrb	r3, [r7, #15]
 8001d04:	3b20      	subs	r3, #32
 8001d06:	7879      	ldrb	r1, [r7, #1]
 8001d08:	fb01 f303 	mul.w	r3, r1, r3
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	440b      	add	r3, r1
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
 8001d1e:	e036      	b.n	8001d8e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d013      	beq.n	8001d58 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001d30:	4b28      	ldr	r3, [pc, #160]	@ (8001dd4 <ssd1306_WriteChar+0x11c>)
 8001d32:	881b      	ldrh	r3, [r3, #0]
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	b2d8      	uxtb	r0, r3
 8001d3e:	4b25      	ldr	r3, [pc, #148]	@ (8001dd4 <ssd1306_WriteChar+0x11c>)
 8001d40:	885b      	ldrh	r3, [r3, #2]
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	4413      	add	r3, r2
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001d50:	4619      	mov	r1, r3
 8001d52:	f7ff ff5d 	bl	8001c10 <ssd1306_DrawPixel>
 8001d56:	e017      	b.n	8001d88 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001d58:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd4 <ssd1306_WriteChar+0x11c>)
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	4413      	add	r3, r2
 8001d64:	b2d8      	uxtb	r0, r3
 8001d66:	4b1b      	ldr	r3, [pc, #108]	@ (8001dd4 <ssd1306_WriteChar+0x11c>)
 8001d68:	885b      	ldrh	r3, [r3, #2]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	4413      	add	r3, r2
 8001d72:	b2d9      	uxtb	r1, r3
 8001d74:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	bf0c      	ite	eq
 8001d7c:	2301      	moveq	r3, #1
 8001d7e:	2300      	movne	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	461a      	mov	r2, r3
 8001d84:	f7ff ff44 	bl	8001c10 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	61bb      	str	r3, [r7, #24]
 8001d8e:	783b      	ldrb	r3, [r7, #0]
 8001d90:	461a      	mov	r2, r3
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d3c3      	bcc.n	8001d20 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	787b      	ldrb	r3, [r7, #1]
 8001da0:	461a      	mov	r2, r3
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d3ab      	bcc.n	8001d00 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001da8:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd4 <ssd1306_WriteChar+0x11c>)
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	d005      	beq.n	8001dbe <ssd1306_WriteChar+0x106>
 8001db2:	68b9      	ldr	r1, [r7, #8]
 8001db4:	7bfa      	ldrb	r2, [r7, #15]
 8001db6:	3a20      	subs	r2, #32
 8001db8:	440a      	add	r2, r1
 8001dba:	7812      	ldrb	r2, [r2, #0]
 8001dbc:	e000      	b.n	8001dc0 <ssd1306_WriteChar+0x108>
 8001dbe:	783a      	ldrb	r2, [r7, #0]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	4b03      	ldr	r3, [pc, #12]	@ (8001dd4 <ssd1306_WriteChar+0x11c>)
 8001dc6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	@ 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd90      	pop	{r4, r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20002630 	.word	0x20002630

08001dd8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	4638      	mov	r0, r7
 8001de2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001de6:	e013      	b.n	8001e10 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	7818      	ldrb	r0, [r3, #0]
 8001dec:	7e3b      	ldrb	r3, [r7, #24]
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	463b      	mov	r3, r7
 8001df2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001df4:	f7ff ff60 	bl	8001cb8 <ssd1306_WriteChar>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d002      	beq.n	8001e0a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	e008      	b.n	8001e1c <ssd1306_WriteString+0x44>
        }
        str++;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1e7      	bne.n	8001de8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	460a      	mov	r2, r1
 8001e2e:	71fb      	strb	r3, [r7, #7]
 8001e30:	4613      	mov	r3, r2
 8001e32:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <ssd1306_SetCursor+0x2c>)
 8001e3a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001e3c:	79bb      	ldrb	r3, [r7, #6]
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b03      	ldr	r3, [pc, #12]	@ (8001e50 <ssd1306_SetCursor+0x2c>)
 8001e42:	805a      	strh	r2, [r3, #2]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	20002630 	.word	0x20002630

08001e54 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001e5e:	2381      	movs	r3, #129	@ 0x81
 8001e60:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff fdf7 	bl	8001a58 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fdf3 	bl	8001a58 <ssd1306_WriteCommand>
}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001e8c:	23af      	movs	r3, #175	@ 0xaf
 8001e8e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001e90:	4b08      	ldr	r3, [pc, #32]	@ (8001eb4 <ssd1306_SetDisplayOn+0x38>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	715a      	strb	r2, [r3, #5]
 8001e96:	e004      	b.n	8001ea2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001e98:	23ae      	movs	r3, #174	@ 0xae
 8001e9a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <ssd1306_SetDisplayOn+0x38>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fdd7 	bl	8001a58 <ssd1306_WriteCommand>
}
 8001eaa:	bf00      	nop
 8001eac:	3710      	adds	r7, #16
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20002630 	.word	0x20002630

08001eb8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4a07      	ldr	r2, [pc, #28]	@ (8001ee4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001ec8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	4a06      	ldr	r2, [pc, #24]	@ (8001ee8 <vApplicationGetIdleTaskMemory+0x30>)
 8001ece:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2280      	movs	r2, #128	@ 0x80
 8001ed4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	20002638 	.word	0x20002638
 8001ee8:	2000268c 	.word	0x2000268c

08001eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ef2:	f000 ffcf 	bl	8002e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ef6:	f000 f875 	bl	8001fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001efa:	f000 f9c9 	bl	8002290 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001efe:	f000 f99d 	bl	800223c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001f02:	f000 f8dd 	bl	80020c0 <MX_I2C1_Init>
  MX_SPI3_Init();
 8001f06:	f000 f963 	bl	80021d0 <MX_SPI3_Init>
  MX_FATFS_Init();
 8001f0a:	f004 fb0b 	bl	8006524 <MX_FATFS_Init>
  MX_RTC_Init();
 8001f0e:	f000 f905 	bl	800211c <MX_RTC_Init>
  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  uiQueue = xQueueCreate(1, sizeof(eventoDisplay));
 8001f12:	2200      	movs	r2, #0
 8001f14:	2101      	movs	r1, #1
 8001f16:	2001      	movs	r0, #1
 8001f18:	f008 f951 	bl	800a1be <xQueueGenericCreate>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	4a24      	ldr	r2, [pc, #144]	@ (8001fb0 <main+0xc4>)
 8001f20:	6013      	str	r3, [r2, #0]
  sequenceQueue = xQueueCreate(6, sizeof(char));
 8001f22:	2200      	movs	r2, #0
 8001f24:	2101      	movs	r1, #1
 8001f26:	2006      	movs	r0, #6
 8001f28:	f008 f949 	bl	800a1be <xQueueGenericCreate>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4a21      	ldr	r2, [pc, #132]	@ (8001fb4 <main+0xc8>)
 8001f30:	6013      	str	r3, [r2, #0]
  lockQueue = xQueueCreate(1, sizeof(lockState));
 8001f32:	2200      	movs	r2, #0
 8001f34:	2101      	movs	r1, #1
 8001f36:	2001      	movs	r0, #1
 8001f38:	f008 f941 	bl	800a1be <xQueueGenericCreate>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	4a1e      	ldr	r2, [pc, #120]	@ (8001fb8 <main+0xcc>)
 8001f40:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  xTaskCreate(ScreenManager, "Tarea 05", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 4, NULL);
 8001f42:	2300      	movs	r3, #0
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	2304      	movs	r3, #4
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	2280      	movs	r2, #128	@ 0x80
 8001f4e:	491b      	ldr	r1, [pc, #108]	@ (8001fbc <main+0xd0>)
 8001f50:	481b      	ldr	r0, [pc, #108]	@ (8001fc0 <main+0xd4>)
 8001f52:	f008 ff6b 	bl	800ae2c <xTaskCreate>
  xTaskCreate(LockControl, "Tarea 04", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 3, NULL);
 8001f56:	2300      	movs	r3, #0
 8001f58:	9301      	str	r3, [sp, #4]
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	2300      	movs	r3, #0
 8001f60:	2280      	movs	r2, #128	@ 0x80
 8001f62:	4918      	ldr	r1, [pc, #96]	@ (8001fc4 <main+0xd8>)
 8001f64:	4818      	ldr	r0, [pc, #96]	@ (8001fc8 <main+0xdc>)
 8001f66:	f008 ff61 	bl	800ae2c <xTaskCreate>
  //xTaskCreate(VoiceProcessing, "Tarea 03", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
  xTaskCreate(sdHandler, "Tarea 02", 8 * configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	2302      	movs	r3, #2
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	2300      	movs	r3, #0
 8001f74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f78:	4914      	ldr	r1, [pc, #80]	@ (8001fcc <main+0xe0>)
 8001f7a:	4815      	ldr	r0, [pc, #84]	@ (8001fd0 <main+0xe4>)
 8001f7c:	f008 ff56 	bl	800ae2c <xTaskCreate>
  xTaskCreate(KeypadScanning, "Tarea 01", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 8001f80:	2300      	movs	r3, #0
 8001f82:	9301      	str	r3, [sp, #4]
 8001f84:	2301      	movs	r3, #1
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	2300      	movs	r3, #0
 8001f8a:	2280      	movs	r2, #128	@ 0x80
 8001f8c:	4911      	ldr	r1, [pc, #68]	@ (8001fd4 <main+0xe8>)
 8001f8e:	4812      	ldr	r0, [pc, #72]	@ (8001fd8 <main+0xec>)
 8001f90:	f008 ff4c 	bl	800ae2c <xTaskCreate>
  xTaskCreate(IdleTask, "Tarea Idle", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, NULL);
 8001f94:	2300      	movs	r3, #0
 8001f96:	9301      	str	r3, [sp, #4]
 8001f98:	2300      	movs	r3, #0
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	2280      	movs	r2, #128	@ 0x80
 8001fa0:	490e      	ldr	r1, [pc, #56]	@ (8001fdc <main+0xf0>)
 8001fa2:	480f      	ldr	r0, [pc, #60]	@ (8001fe0 <main+0xf4>)
 8001fa4:	f008 ff42 	bl	800ae2c <xTaskCreate>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  vTaskStartScheduler();
 8001fa8:	f009 f8ae 	bl	800b108 <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <main+0xc0>
 8001fb0:	200029a0 	.word	0x200029a0
 8001fb4:	200029a4 	.word	0x200029a4
 8001fb8:	200029a8 	.word	0x200029a8
 8001fbc:	0800dfe0 	.word	0x0800dfe0
 8001fc0:	08002bed 	.word	0x08002bed
 8001fc4:	0800dfec 	.word	0x0800dfec
 8001fc8:	08002de5 	.word	0x08002de5
 8001fcc:	0800dff8 	.word	0x0800dff8
 8001fd0:	08002d01 	.word	0x08002d01
 8001fd4:	0800e004 	.word	0x0800e004
 8001fd8:	080029e1 	.word	0x080029e1
 8001fdc:	0800e010 	.word	0x0800e010
 8001fe0:	08002e35 	.word	0x08002e35

08001fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b094      	sub	sp, #80	@ 0x50
 8001fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fea:	f107 0320 	add.w	r3, r7, #32
 8001fee:	2230      	movs	r2, #48	@ 0x30
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f00a fc7b 	bl	800c8ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ff8:	f107 030c 	add.w	r3, r7, #12
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002008:	2300      	movs	r3, #0
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	4b2a      	ldr	r3, [pc, #168]	@ (80020b8 <SystemClock_Config+0xd4>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002010:	4a29      	ldr	r2, [pc, #164]	@ (80020b8 <SystemClock_Config+0xd4>)
 8002012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002016:	6413      	str	r3, [r2, #64]	@ 0x40
 8002018:	4b27      	ldr	r3, [pc, #156]	@ (80020b8 <SystemClock_Config+0xd4>)
 800201a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002024:	2300      	movs	r3, #0
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	4b24      	ldr	r3, [pc, #144]	@ (80020bc <SystemClock_Config+0xd8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002030:	4a22      	ldr	r2, [pc, #136]	@ (80020bc <SystemClock_Config+0xd8>)
 8002032:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	4b20      	ldr	r3, [pc, #128]	@ (80020bc <SystemClock_Config+0xd8>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002044:	230a      	movs	r3, #10
 8002046:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002048:	2301      	movs	r3, #1
 800204a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800204c:	2310      	movs	r3, #16
 800204e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002050:	2301      	movs	r3, #1
 8002052:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002054:	2302      	movs	r3, #2
 8002056:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002058:	2300      	movs	r3, #0
 800205a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800205c:	2310      	movs	r3, #16
 800205e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002060:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002064:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002066:	2304      	movs	r3, #4
 8002068:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800206a:	2307      	movs	r3, #7
 800206c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800206e:	f107 0320 	add.w	r3, r7, #32
 8002072:	4618      	mov	r0, r3
 8002074:	f001 feba 	bl	8003dec <HAL_RCC_OscConfig>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800207e:	f000 f9c8 	bl	8002412 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002082:	230f      	movs	r3, #15
 8002084:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002086:	2302      	movs	r3, #2
 8002088:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800208e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002092:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002094:	2300      	movs	r3, #0
 8002096:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	2102      	movs	r1, #2
 800209e:	4618      	mov	r0, r3
 80020a0:	f002 f91c 	bl	80042dc <HAL_RCC_ClockConfig>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <SystemClock_Config+0xca>
  {
    Error_Handler();
 80020aa:	f000 f9b2 	bl	8002412 <Error_Handler>
  }
}
 80020ae:	bf00      	nop
 80020b0:	3750      	adds	r7, #80	@ 0x50
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40007000 	.word	0x40007000

080020c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020c4:	4b12      	ldr	r3, [pc, #72]	@ (8002110 <MX_I2C1_Init+0x50>)
 80020c6:	4a13      	ldr	r2, [pc, #76]	@ (8002114 <MX_I2C1_Init+0x54>)
 80020c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80020ca:	4b11      	ldr	r3, [pc, #68]	@ (8002110 <MX_I2C1_Init+0x50>)
 80020cc:	4a12      	ldr	r2, [pc, #72]	@ (8002118 <MX_I2C1_Init+0x58>)
 80020ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002110 <MX_I2C1_Init+0x50>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002110 <MX_I2C1_Init+0x50>)
 80020d8:	2200      	movs	r2, #0
 80020da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002110 <MX_I2C1_Init+0x50>)
 80020de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002110 <MX_I2C1_Init+0x50>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020ea:	4b09      	ldr	r3, [pc, #36]	@ (8002110 <MX_I2C1_Init+0x50>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020f0:	4b07      	ldr	r3, [pc, #28]	@ (8002110 <MX_I2C1_Init+0x50>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020f6:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <MX_I2C1_Init+0x50>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020fc:	4804      	ldr	r0, [pc, #16]	@ (8002110 <MX_I2C1_Init+0x50>)
 80020fe:	f001 f9c7 	bl	8003490 <HAL_I2C_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002108:	f000 f983 	bl	8002412 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}
 8002110:	2000288c 	.word	0x2000288c
 8002114:	40005400 	.word	0x40005400
 8002118:	00061a80 	.word	0x00061a80

0800211c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002130:	2300      	movs	r3, #0
 8002132:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002134:	4b24      	ldr	r3, [pc, #144]	@ (80021c8 <MX_RTC_Init+0xac>)
 8002136:	4a25      	ldr	r2, [pc, #148]	@ (80021cc <MX_RTC_Init+0xb0>)
 8002138:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800213a:	4b23      	ldr	r3, [pc, #140]	@ (80021c8 <MX_RTC_Init+0xac>)
 800213c:	2200      	movs	r2, #0
 800213e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002140:	4b21      	ldr	r3, [pc, #132]	@ (80021c8 <MX_RTC_Init+0xac>)
 8002142:	227f      	movs	r2, #127	@ 0x7f
 8002144:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002146:	4b20      	ldr	r3, [pc, #128]	@ (80021c8 <MX_RTC_Init+0xac>)
 8002148:	22ff      	movs	r2, #255	@ 0xff
 800214a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800214c:	4b1e      	ldr	r3, [pc, #120]	@ (80021c8 <MX_RTC_Init+0xac>)
 800214e:	2200      	movs	r2, #0
 8002150:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002152:	4b1d      	ldr	r3, [pc, #116]	@ (80021c8 <MX_RTC_Init+0xac>)
 8002154:	2200      	movs	r2, #0
 8002156:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002158:	4b1b      	ldr	r3, [pc, #108]	@ (80021c8 <MX_RTC_Init+0xac>)
 800215a:	2200      	movs	r2, #0
 800215c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800215e:	481a      	ldr	r0, [pc, #104]	@ (80021c8 <MX_RTC_Init+0xac>)
 8002160:	f002 fbfc 	bl	800495c <HAL_RTC_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800216a:	f000 f952 	bl	8002412 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 15;
 800216e:	230f      	movs	r3, #15
 8002170:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8002172:	2300      	movs	r3, #0
 8002174:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8002176:	2300      	movs	r3, #0
 8002178:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8002182:	1d3b      	adds	r3, r7, #4
 8002184:	2200      	movs	r2, #0
 8002186:	4619      	mov	r1, r3
 8002188:	480f      	ldr	r0, [pc, #60]	@ (80021c8 <MX_RTC_Init+0xac>)
 800218a:	f002 fc6a 	bl	8004a62 <HAL_RTC_SetTime>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8002194:	f000 f93d 	bl	8002412 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8002198:	2306      	movs	r3, #6
 800219a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JULY;
 800219c:	2307      	movs	r3, #7
 800219e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 6;
 80021a0:	2306      	movs	r3, #6
 80021a2:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 80021a4:	2318      	movs	r3, #24
 80021a6:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80021a8:	463b      	mov	r3, r7
 80021aa:	2200      	movs	r2, #0
 80021ac:	4619      	mov	r1, r3
 80021ae:	4806      	ldr	r0, [pc, #24]	@ (80021c8 <MX_RTC_Init+0xac>)
 80021b0:	f002 fd4f 	bl	8004c52 <HAL_RTC_SetDate>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80021ba:	f000 f92a 	bl	8002412 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80021be:	bf00      	nop
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200028e0 	.word	0x200028e0
 80021cc:	40002800 	.word	0x40002800

080021d0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80021d4:	4b17      	ldr	r3, [pc, #92]	@ (8002234 <MX_SPI3_Init+0x64>)
 80021d6:	4a18      	ldr	r2, [pc, #96]	@ (8002238 <MX_SPI3_Init+0x68>)
 80021d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80021da:	4b16      	ldr	r3, [pc, #88]	@ (8002234 <MX_SPI3_Init+0x64>)
 80021dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80021e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80021e2:	4b14      	ldr	r3, [pc, #80]	@ (8002234 <MX_SPI3_Init+0x64>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80021e8:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <MX_SPI3_Init+0x64>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021ee:	4b11      	ldr	r3, [pc, #68]	@ (8002234 <MX_SPI3_Init+0x64>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <MX_SPI3_Init+0x64>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80021fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002234 <MX_SPI3_Init+0x64>)
 80021fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002200:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002202:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <MX_SPI3_Init+0x64>)
 8002204:	2210      	movs	r2, #16
 8002206:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002208:	4b0a      	ldr	r3, [pc, #40]	@ (8002234 <MX_SPI3_Init+0x64>)
 800220a:	2200      	movs	r2, #0
 800220c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800220e:	4b09      	ldr	r3, [pc, #36]	@ (8002234 <MX_SPI3_Init+0x64>)
 8002210:	2200      	movs	r2, #0
 8002212:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002214:	4b07      	ldr	r3, [pc, #28]	@ (8002234 <MX_SPI3_Init+0x64>)
 8002216:	2200      	movs	r2, #0
 8002218:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 800221a:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <MX_SPI3_Init+0x64>)
 800221c:	220a      	movs	r2, #10
 800221e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002220:	4804      	ldr	r0, [pc, #16]	@ (8002234 <MX_SPI3_Init+0x64>)
 8002222:	f002 fea7 	bl	8004f74 <HAL_SPI_Init>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800222c:	f000 f8f1 	bl	8002412 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20002900 	.word	0x20002900
 8002238:	40003c00 	.word	0x40003c00

0800223c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002240:	4b11      	ldr	r3, [pc, #68]	@ (8002288 <MX_USART2_UART_Init+0x4c>)
 8002242:	4a12      	ldr	r2, [pc, #72]	@ (800228c <MX_USART2_UART_Init+0x50>)
 8002244:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002246:	4b10      	ldr	r3, [pc, #64]	@ (8002288 <MX_USART2_UART_Init+0x4c>)
 8002248:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800224c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800224e:	4b0e      	ldr	r3, [pc, #56]	@ (8002288 <MX_USART2_UART_Init+0x4c>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002254:	4b0c      	ldr	r3, [pc, #48]	@ (8002288 <MX_USART2_UART_Init+0x4c>)
 8002256:	2200      	movs	r2, #0
 8002258:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800225a:	4b0b      	ldr	r3, [pc, #44]	@ (8002288 <MX_USART2_UART_Init+0x4c>)
 800225c:	2200      	movs	r2, #0
 800225e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002260:	4b09      	ldr	r3, [pc, #36]	@ (8002288 <MX_USART2_UART_Init+0x4c>)
 8002262:	220c      	movs	r2, #12
 8002264:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002266:	4b08      	ldr	r3, [pc, #32]	@ (8002288 <MX_USART2_UART_Init+0x4c>)
 8002268:	2200      	movs	r2, #0
 800226a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800226c:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <MX_USART2_UART_Init+0x4c>)
 800226e:	2200      	movs	r2, #0
 8002270:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002272:	4805      	ldr	r0, [pc, #20]	@ (8002288 <MX_USART2_UART_Init+0x4c>)
 8002274:	f003 fd4a 	bl	8005d0c <HAL_UART_Init>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800227e:	f000 f8c8 	bl	8002412 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20002958 	.word	0x20002958
 800228c:	40004400 	.word	0x40004400

08002290 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	@ 0x28
 8002294:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
 80022a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	4b4e      	ldr	r3, [pc, #312]	@ (80023e4 <MX_GPIO_Init+0x154>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	4a4d      	ldr	r2, [pc, #308]	@ (80023e4 <MX_GPIO_Init+0x154>)
 80022b0:	f043 0304 	orr.w	r3, r3, #4
 80022b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b6:	4b4b      	ldr	r3, [pc, #300]	@ (80023e4 <MX_GPIO_Init+0x154>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	f003 0304 	and.w	r3, r3, #4
 80022be:	613b      	str	r3, [r7, #16]
 80022c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60fb      	str	r3, [r7, #12]
 80022c6:	4b47      	ldr	r3, [pc, #284]	@ (80023e4 <MX_GPIO_Init+0x154>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	4a46      	ldr	r2, [pc, #280]	@ (80023e4 <MX_GPIO_Init+0x154>)
 80022cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d2:	4b44      	ldr	r3, [pc, #272]	@ (80023e4 <MX_GPIO_Init+0x154>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	4b40      	ldr	r3, [pc, #256]	@ (80023e4 <MX_GPIO_Init+0x154>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	4a3f      	ldr	r2, [pc, #252]	@ (80023e4 <MX_GPIO_Init+0x154>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ee:	4b3d      	ldr	r3, [pc, #244]	@ (80023e4 <MX_GPIO_Init+0x154>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	f003 0301 	and.w	r3, r3, #1
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
 80022fe:	4b39      	ldr	r3, [pc, #228]	@ (80023e4 <MX_GPIO_Init+0x154>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	4a38      	ldr	r2, [pc, #224]	@ (80023e4 <MX_GPIO_Init+0x154>)
 8002304:	f043 0308 	orr.w	r3, r3, #8
 8002308:	6313      	str	r3, [r2, #48]	@ 0x30
 800230a:	4b36      	ldr	r3, [pc, #216]	@ (80023e4 <MX_GPIO_Init+0x154>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	603b      	str	r3, [r7, #0]
 800231a:	4b32      	ldr	r3, [pc, #200]	@ (80023e4 <MX_GPIO_Init+0x154>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231e:	4a31      	ldr	r2, [pc, #196]	@ (80023e4 <MX_GPIO_Init+0x154>)
 8002320:	f043 0302 	orr.w	r3, r3, #2
 8002324:	6313      	str	r3, [r2, #48]	@ 0x30
 8002326:	4b2f      	ldr	r3, [pc, #188]	@ (80023e4 <MX_GPIO_Init+0x154>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002332:	2200      	movs	r2, #0
 8002334:	2120      	movs	r1, #32
 8002336:	482c      	ldr	r0, [pc, #176]	@ (80023e8 <MX_GPIO_Init+0x158>)
 8002338:	f001 f890 	bl	800345c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 800233c:	2200      	movs	r2, #0
 800233e:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8002342:	482a      	ldr	r0, [pc, #168]	@ (80023ec <MX_GPIO_Init+0x15c>)
 8002344:	f001 f88a 	bl	800345c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_SD_GPIO_Port, CS_SD_Pin, GPIO_PIN_RESET);
 8002348:	2200      	movs	r2, #0
 800234a:	2104      	movs	r1, #4
 800234c:	4828      	ldr	r0, [pc, #160]	@ (80023f0 <MX_GPIO_Init+0x160>)
 800234e:	f001 f885 	bl	800345c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002352:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002358:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800235c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002362:	f107 0314 	add.w	r3, r7, #20
 8002366:	4619      	mov	r1, r3
 8002368:	4820      	ldr	r0, [pc, #128]	@ (80023ec <MX_GPIO_Init+0x15c>)
 800236a:	f000 fedb 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800236e:	230f      	movs	r3, #15
 8002370:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002372:	2300      	movs	r3, #0
 8002374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002376:	2302      	movs	r3, #2
 8002378:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800237a:	f107 0314 	add.w	r3, r7, #20
 800237e:	4619      	mov	r1, r3
 8002380:	481a      	ldr	r0, [pc, #104]	@ (80023ec <MX_GPIO_Init+0x15c>)
 8002382:	f000 fecf 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002386:	2320      	movs	r3, #32
 8002388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238a:	2301      	movs	r3, #1
 800238c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002392:	2300      	movs	r3, #0
 8002394:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002396:	f107 0314 	add.w	r3, r7, #20
 800239a:	4619      	mov	r1, r3
 800239c:	4812      	ldr	r0, [pc, #72]	@ (80023e8 <MX_GPIO_Init+0x158>)
 800239e:	f000 fec1 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pins : Lock_Pin PC6 PC7 PC8
                           PC9 */
  GPIO_InitStruct.Pin = Lock_Pin|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 80023a2:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 80023a6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a8:	2301      	movs	r3, #1
 80023aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b0:	2300      	movs	r3, #0
 80023b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	4619      	mov	r1, r3
 80023ba:	480c      	ldr	r0, [pc, #48]	@ (80023ec <MX_GPIO_Init+0x15c>)
 80023bc:	f000 feb2 	bl	8003124 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_SD_Pin */
  GPIO_InitStruct.Pin = CS_SD_Pin;
 80023c0:	2304      	movs	r3, #4
 80023c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023c4:	2301      	movs	r3, #1
 80023c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023cc:	2300      	movs	r3, #0
 80023ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_SD_GPIO_Port, &GPIO_InitStruct);
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	4619      	mov	r1, r3
 80023d6:	4806      	ldr	r0, [pc, #24]	@ (80023f0 <MX_GPIO_Init+0x160>)
 80023d8:	f000 fea4 	bl	8003124 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023dc:	bf00      	nop
 80023de:	3728      	adds	r7, #40	@ 0x28
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40020000 	.word	0x40020000
 80023ec:	40020800 	.word	0x40020800
 80023f0:	40020c00 	.word	0x40020c00

080023f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002404:	d101      	bne.n	800240a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002406:	f000 fd67 	bl	8002ed8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002416:	b672      	cpsid	i
}
 8002418:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800241a:	bf00      	nop
 800241c:	e7fd      	b.n	800241a <Error_Handler+0x8>
	...

08002420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	607b      	str	r3, [r7, #4]
 800242a:	4b12      	ldr	r3, [pc, #72]	@ (8002474 <HAL_MspInit+0x54>)
 800242c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242e:	4a11      	ldr	r2, [pc, #68]	@ (8002474 <HAL_MspInit+0x54>)
 8002430:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002434:	6453      	str	r3, [r2, #68]	@ 0x44
 8002436:	4b0f      	ldr	r3, [pc, #60]	@ (8002474 <HAL_MspInit+0x54>)
 8002438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800243e:	607b      	str	r3, [r7, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <HAL_MspInit+0x54>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	4a0a      	ldr	r2, [pc, #40]	@ (8002474 <HAL_MspInit+0x54>)
 800244c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002450:	6413      	str	r3, [r2, #64]	@ 0x40
 8002452:	4b08      	ldr	r3, [pc, #32]	@ (8002474 <HAL_MspInit+0x54>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245a:	603b      	str	r3, [r7, #0]
 800245c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800245e:	2200      	movs	r2, #0
 8002460:	210f      	movs	r1, #15
 8002462:	f06f 0001 	mvn.w	r0, #1
 8002466:	f000 fe33 	bl	80030d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800

08002478 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08a      	sub	sp, #40	@ 0x28
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a19      	ldr	r2, [pc, #100]	@ (80024fc <HAL_I2C_MspInit+0x84>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d12b      	bne.n	80024f2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800249a:	2300      	movs	r3, #0
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	4b18      	ldr	r3, [pc, #96]	@ (8002500 <HAL_I2C_MspInit+0x88>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	4a17      	ldr	r2, [pc, #92]	@ (8002500 <HAL_I2C_MspInit+0x88>)
 80024a4:	f043 0302 	orr.w	r3, r3, #2
 80024a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024aa:	4b15      	ldr	r3, [pc, #84]	@ (8002500 <HAL_I2C_MspInit+0x88>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024b6:	23c0      	movs	r3, #192	@ 0xc0
 80024b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024ba:	2312      	movs	r3, #18
 80024bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024c2:	2303      	movs	r3, #3
 80024c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024c6:	2304      	movs	r3, #4
 80024c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ca:	f107 0314 	add.w	r3, r7, #20
 80024ce:	4619      	mov	r1, r3
 80024d0:	480c      	ldr	r0, [pc, #48]	@ (8002504 <HAL_I2C_MspInit+0x8c>)
 80024d2:	f000 fe27 	bl	8003124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	4b09      	ldr	r3, [pc, #36]	@ (8002500 <HAL_I2C_MspInit+0x88>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024de:	4a08      	ldr	r2, [pc, #32]	@ (8002500 <HAL_I2C_MspInit+0x88>)
 80024e0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80024e6:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <HAL_I2C_MspInit+0x88>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80024f2:	bf00      	nop
 80024f4:	3728      	adds	r7, #40	@ 0x28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40005400 	.word	0x40005400
 8002500:	40023800 	.word	0x40023800
 8002504:	40020400 	.word	0x40020400

08002508 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002510:	f107 030c 	add.w	r3, r7, #12
 8002514:	2200      	movs	r2, #0
 8002516:	601a      	str	r2, [r3, #0]
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	609a      	str	r2, [r3, #8]
 800251c:	60da      	str	r2, [r3, #12]
 800251e:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0c      	ldr	r2, [pc, #48]	@ (8002558 <HAL_RTC_MspInit+0x50>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d111      	bne.n	800254e <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800252a:	2302      	movs	r3, #2
 800252c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800252e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002532:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002534:	f107 030c 	add.w	r3, r7, #12
 8002538:	4618      	mov	r0, r3
 800253a:	f002 f921 	bl	8004780 <HAL_RCCEx_PeriphCLKConfig>
 800253e:	4603      	mov	r3, r0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8002544:	f7ff ff65 	bl	8002412 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002548:	4b04      	ldr	r3, [pc, #16]	@ (800255c <HAL_RTC_MspInit+0x54>)
 800254a:	2201      	movs	r2, #1
 800254c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800254e:	bf00      	nop
 8002550:	3720      	adds	r7, #32
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40002800 	.word	0x40002800
 800255c:	42470e3c 	.word	0x42470e3c

08002560 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b08a      	sub	sp, #40	@ 0x28
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]
 8002576:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a19      	ldr	r2, [pc, #100]	@ (80025e4 <HAL_SPI_MspInit+0x84>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d12c      	bne.n	80025dc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	4b18      	ldr	r3, [pc, #96]	@ (80025e8 <HAL_SPI_MspInit+0x88>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800258a:	4a17      	ldr	r2, [pc, #92]	@ (80025e8 <HAL_SPI_MspInit+0x88>)
 800258c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002590:	6413      	str	r3, [r2, #64]	@ 0x40
 8002592:	4b15      	ldr	r3, [pc, #84]	@ (80025e8 <HAL_SPI_MspInit+0x88>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002596:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	60fb      	str	r3, [r7, #12]
 80025a2:	4b11      	ldr	r3, [pc, #68]	@ (80025e8 <HAL_SPI_MspInit+0x88>)
 80025a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a6:	4a10      	ldr	r2, [pc, #64]	@ (80025e8 <HAL_SPI_MspInit+0x88>)
 80025a8:	f043 0304 	orr.w	r3, r3, #4
 80025ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ae:	4b0e      	ldr	r3, [pc, #56]	@ (80025e8 <HAL_SPI_MspInit+0x88>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80025ba:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80025be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c8:	2303      	movs	r3, #3
 80025ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80025cc:	2306      	movs	r3, #6
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d0:	f107 0314 	add.w	r3, r7, #20
 80025d4:	4619      	mov	r1, r3
 80025d6:	4805      	ldr	r0, [pc, #20]	@ (80025ec <HAL_SPI_MspInit+0x8c>)
 80025d8:	f000 fda4 	bl	8003124 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80025dc:	bf00      	nop
 80025de:	3728      	adds	r7, #40	@ 0x28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40003c00 	.word	0x40003c00
 80025e8:	40023800 	.word	0x40023800
 80025ec:	40020800 	.word	0x40020800

080025f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	@ 0x28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	f107 0314 	add.w	r3, r7, #20
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a19      	ldr	r2, [pc, #100]	@ (8002674 <HAL_UART_MspInit+0x84>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d12b      	bne.n	800266a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	613b      	str	r3, [r7, #16]
 8002616:	4b18      	ldr	r3, [pc, #96]	@ (8002678 <HAL_UART_MspInit+0x88>)
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	4a17      	ldr	r2, [pc, #92]	@ (8002678 <HAL_UART_MspInit+0x88>)
 800261c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002620:	6413      	str	r3, [r2, #64]	@ 0x40
 8002622:	4b15      	ldr	r3, [pc, #84]	@ (8002678 <HAL_UART_MspInit+0x88>)
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	4b11      	ldr	r3, [pc, #68]	@ (8002678 <HAL_UART_MspInit+0x88>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002636:	4a10      	ldr	r2, [pc, #64]	@ (8002678 <HAL_UART_MspInit+0x88>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6313      	str	r3, [r2, #48]	@ 0x30
 800263e:	4b0e      	ldr	r3, [pc, #56]	@ (8002678 <HAL_UART_MspInit+0x88>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800264a:	230c      	movs	r3, #12
 800264c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264e:	2302      	movs	r3, #2
 8002650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002656:	2300      	movs	r3, #0
 8002658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800265a:	2307      	movs	r3, #7
 800265c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265e:	f107 0314 	add.w	r3, r7, #20
 8002662:	4619      	mov	r1, r3
 8002664:	4805      	ldr	r0, [pc, #20]	@ (800267c <HAL_UART_MspInit+0x8c>)
 8002666:	f000 fd5d 	bl	8003124 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800266a:	bf00      	nop
 800266c:	3728      	adds	r7, #40	@ 0x28
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40004400 	.word	0x40004400
 8002678:	40023800 	.word	0x40023800
 800267c:	40020000 	.word	0x40020000

08002680 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08e      	sub	sp, #56	@ 0x38
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002688:	2300      	movs	r3, #0
 800268a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	4b34      	ldr	r3, [pc, #208]	@ (8002768 <HAL_InitTick+0xe8>)
 8002696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002698:	4a33      	ldr	r2, [pc, #204]	@ (8002768 <HAL_InitTick+0xe8>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6413      	str	r3, [r2, #64]	@ 0x40
 80026a0:	4b31      	ldr	r3, [pc, #196]	@ (8002768 <HAL_InitTick+0xe8>)
 80026a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026ac:	f107 0210 	add.w	r2, r7, #16
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f002 f830 	bl	800471c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80026c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d103      	bne.n	80026ce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80026c6:	f002 f801 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
 80026ca:	6378      	str	r0, [r7, #52]	@ 0x34
 80026cc:	e004      	b.n	80026d8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80026ce:	f001 fffd 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
 80026d2:	4603      	mov	r3, r0
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026da:	4a24      	ldr	r2, [pc, #144]	@ (800276c <HAL_InitTick+0xec>)
 80026dc:	fba2 2303 	umull	r2, r3, r2, r3
 80026e0:	0c9b      	lsrs	r3, r3, #18
 80026e2:	3b01      	subs	r3, #1
 80026e4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80026e6:	4b22      	ldr	r3, [pc, #136]	@ (8002770 <HAL_InitTick+0xf0>)
 80026e8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80026ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80026ee:	4b20      	ldr	r3, [pc, #128]	@ (8002770 <HAL_InitTick+0xf0>)
 80026f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80026f4:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80026f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002770 <HAL_InitTick+0xf0>)
 80026f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fa:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80026fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002770 <HAL_InitTick+0xf0>)
 80026fe:	2200      	movs	r2, #0
 8002700:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002702:	4b1b      	ldr	r3, [pc, #108]	@ (8002770 <HAL_InitTick+0xf0>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002708:	4b19      	ldr	r3, [pc, #100]	@ (8002770 <HAL_InitTick+0xf0>)
 800270a:	2200      	movs	r2, #0
 800270c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 800270e:	4818      	ldr	r0, [pc, #96]	@ (8002770 <HAL_InitTick+0xf0>)
 8002710:	f003 f888 	bl	8005824 <HAL_TIM_Base_Init>
 8002714:	4603      	mov	r3, r0
 8002716:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800271a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800271e:	2b00      	cmp	r3, #0
 8002720:	d11b      	bne.n	800275a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002722:	4813      	ldr	r0, [pc, #76]	@ (8002770 <HAL_InitTick+0xf0>)
 8002724:	f003 f8d8 	bl	80058d8 <HAL_TIM_Base_Start_IT>
 8002728:	4603      	mov	r3, r0
 800272a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800272e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002732:	2b00      	cmp	r3, #0
 8002734:	d111      	bne.n	800275a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002736:	201c      	movs	r0, #28
 8002738:	f000 fce6 	bl	8003108 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b0f      	cmp	r3, #15
 8002740:	d808      	bhi.n	8002754 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002742:	2200      	movs	r2, #0
 8002744:	6879      	ldr	r1, [r7, #4]
 8002746:	201c      	movs	r0, #28
 8002748:	f000 fcc2 	bl	80030d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800274c:	4a09      	ldr	r2, [pc, #36]	@ (8002774 <HAL_InitTick+0xf4>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	e002      	b.n	800275a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800275a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800275e:	4618      	mov	r0, r3
 8002760:	3738      	adds	r7, #56	@ 0x38
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800
 800276c:	431bde83 	.word	0x431bde83
 8002770:	200029ac 	.word	0x200029ac
 8002774:	20000008 	.word	0x20000008

08002778 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 800277c:	4b0e      	ldr	r3, [pc, #56]	@ (80027b8 <SDTimer_Handler+0x40>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d006      	beq.n	8002794 <SDTimer_Handler+0x1c>
    Timer1--;
 8002786:	4b0c      	ldr	r3, [pc, #48]	@ (80027b8 <SDTimer_Handler+0x40>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	b2db      	uxtb	r3, r3
 800278c:	3b01      	subs	r3, #1
 800278e:	b2da      	uxtb	r2, r3
 8002790:	4b09      	ldr	r3, [pc, #36]	@ (80027b8 <SDTimer_Handler+0x40>)
 8002792:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002794:	4b09      	ldr	r3, [pc, #36]	@ (80027bc <SDTimer_Handler+0x44>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d006      	beq.n	80027ac <SDTimer_Handler+0x34>
    Timer2--;
 800279e:	4b07      	ldr	r3, [pc, #28]	@ (80027bc <SDTimer_Handler+0x44>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	4b04      	ldr	r3, [pc, #16]	@ (80027bc <SDTimer_Handler+0x44>)
 80027aa:	701a      	strb	r2, [r3, #0]
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	200029f5 	.word	0x200029f5
 80027bc:	200029f6 	.word	0x200029f6

080027c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027c4:	bf00      	nop
 80027c6:	e7fd      	b.n	80027c4 <NMI_Handler+0x4>

080027c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027cc:	bf00      	nop
 80027ce:	e7fd      	b.n	80027cc <HardFault_Handler+0x4>

080027d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027d4:	bf00      	nop
 80027d6:	e7fd      	b.n	80027d4 <MemManage_Handler+0x4>

080027d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027dc:	bf00      	nop
 80027de:	e7fd      	b.n	80027dc <BusFault_Handler+0x4>

080027e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027e4:	bf00      	nop
 80027e6:	e7fd      	b.n	80027e4 <UsageFault_Handler+0x4>

080027e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  FatFsCnt++;
 80027fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002828 <TIM2_IRQHandler+0x30>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	3301      	adds	r3, #1
 8002804:	b2da      	uxtb	r2, r3
 8002806:	4b08      	ldr	r3, [pc, #32]	@ (8002828 <TIM2_IRQHandler+0x30>)
 8002808:	701a      	strb	r2, [r3, #0]
  if(FatFsCnt >= 10){
 800280a:	4b07      	ldr	r3, [pc, #28]	@ (8002828 <TIM2_IRQHandler+0x30>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b09      	cmp	r3, #9
 8002812:	d904      	bls.n	800281e <TIM2_IRQHandler+0x26>
	  FatFsCnt = 0;
 8002814:	4b04      	ldr	r3, [pc, #16]	@ (8002828 <TIM2_IRQHandler+0x30>)
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
	  SDTimer_Handler();
 800281a:	f7ff ffad 	bl	8002778 <SDTimer_Handler>
  }
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800281e:	4803      	ldr	r0, [pc, #12]	@ (800282c <TIM2_IRQHandler+0x34>)
 8002820:	f003 f8bc 	bl	800599c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}
 8002828:	200029f4 	.word	0x200029f4
 800282c:	200029ac 	.word	0x200029ac

08002830 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return 1;
 8002834:	2301      	movs	r3, #1
}
 8002836:	4618      	mov	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <_kill>:

int _kill(int pid, int sig)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800284a:	f00a f909 	bl	800ca60 <__errno>
 800284e:	4603      	mov	r3, r0
 8002850:	2216      	movs	r2, #22
 8002852:	601a      	str	r2, [r3, #0]
  return -1;
 8002854:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <_exit>:

void _exit (int status)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002868:	f04f 31ff 	mov.w	r1, #4294967295
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff ffe7 	bl	8002840 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002872:	bf00      	nop
 8002874:	e7fd      	b.n	8002872 <_exit+0x12>

08002876 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b086      	sub	sp, #24
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	e00a      	b.n	800289e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002888:	f3af 8000 	nop.w
 800288c:	4601      	mov	r1, r0
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	60ba      	str	r2, [r7, #8]
 8002894:	b2ca      	uxtb	r2, r1
 8002896:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	3301      	adds	r3, #1
 800289c:	617b      	str	r3, [r7, #20]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	dbf0      	blt.n	8002888 <_read+0x12>
  }

  return len;
 80028a6:	687b      	ldr	r3, [r7, #4]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3718      	adds	r7, #24
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	e009      	b.n	80028d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	60ba      	str	r2, [r7, #8]
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	3301      	adds	r3, #1
 80028d4:	617b      	str	r3, [r7, #20]
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	429a      	cmp	r2, r3
 80028dc:	dbf1      	blt.n	80028c2 <_write+0x12>
  }
  return len;
 80028de:	687b      	ldr	r3, [r7, #4]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <_close>:

int _close(int file)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002910:	605a      	str	r2, [r3, #4]
  return 0;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <_isatty>:

int _isatty(int file)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002928:	2301      	movs	r3, #1
}
 800292a:	4618      	mov	r0, r3
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002936:	b480      	push	{r7}
 8002938:	b085      	sub	sp, #20
 800293a:	af00      	add	r7, sp, #0
 800293c:	60f8      	str	r0, [r7, #12]
 800293e:	60b9      	str	r1, [r7, #8]
 8002940:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002958:	4a14      	ldr	r2, [pc, #80]	@ (80029ac <_sbrk+0x5c>)
 800295a:	4b15      	ldr	r3, [pc, #84]	@ (80029b0 <_sbrk+0x60>)
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002964:	4b13      	ldr	r3, [pc, #76]	@ (80029b4 <_sbrk+0x64>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d102      	bne.n	8002972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800296c:	4b11      	ldr	r3, [pc, #68]	@ (80029b4 <_sbrk+0x64>)
 800296e:	4a12      	ldr	r2, [pc, #72]	@ (80029b8 <_sbrk+0x68>)
 8002970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002972:	4b10      	ldr	r3, [pc, #64]	@ (80029b4 <_sbrk+0x64>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4413      	add	r3, r2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	429a      	cmp	r2, r3
 800297e:	d207      	bcs.n	8002990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002980:	f00a f86e 	bl	800ca60 <__errno>
 8002984:	4603      	mov	r3, r0
 8002986:	220c      	movs	r2, #12
 8002988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800298a:	f04f 33ff 	mov.w	r3, #4294967295
 800298e:	e009      	b.n	80029a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002990:	4b08      	ldr	r3, [pc, #32]	@ (80029b4 <_sbrk+0x64>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002996:	4b07      	ldr	r3, [pc, #28]	@ (80029b4 <_sbrk+0x64>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	4a05      	ldr	r2, [pc, #20]	@ (80029b4 <_sbrk+0x64>)
 80029a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029a2:	68fb      	ldr	r3, [r7, #12]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20018000 	.word	0x20018000
 80029b0:	00000400 	.word	0x00000400
 80029b4:	200029f8 	.word	0x200029f8
 80029b8:	20006928 	.word	0x20006928

080029bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029c0:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <SystemInit+0x20>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c6:	4a05      	ldr	r2, [pc, #20]	@ (80029dc <SystemInit+0x20>)
 80029c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <KeypadScanning>:

void VoiceProcessing(void *pvParameters){

}

void KeypadScanning (void *pvParameters){
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	eventoDisplay eventoEnviado;
	uint8_t keyPressed;
	FSM *FSM1 = &StateMachine;
 80029e8:	4b7d      	ldr	r3, [pc, #500]	@ (8002be0 <KeypadScanning+0x200>)
 80029ea:	613b      	str	r3, [r7, #16]
	FSM1->CurrentState = ESPERA_DIGITO_1;
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	2200      	movs	r2, #0
 80029f0:	71da      	strb	r2, [r3, #7]
	/*Inicio el funcionamiento con la pantalla inicial*/
	eventoEnviado = PANTALLA_INGRESE_CLAVE;
 80029f2:	2301      	movs	r3, #1
 80029f4:	73bb      	strb	r3, [r7, #14]
	xQueueSend(uiQueue, (void * ) &eventoEnviado, portMAX_DELAY);
 80029f6:	4b7b      	ldr	r3, [pc, #492]	@ (8002be4 <KeypadScanning+0x204>)
 80029f8:	6818      	ldr	r0, [r3, #0]
 80029fa:	f107 010e 	add.w	r1, r7, #14
 80029fe:	2300      	movs	r3, #0
 8002a00:	f04f 32ff 	mov.w	r2, #4294967295
 8002a04:	f007 fc36 	bl	800a274 <xQueueGenericSend>
	while(1){
		switch(FSM1->CurrentState){
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	79db      	ldrb	r3, [r3, #7]
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	f200 80cb 	bhi.w	8002ba8 <KeypadScanning+0x1c8>
 8002a12:	a201      	add	r2, pc, #4	@ (adr r2, 8002a18 <KeypadScanning+0x38>)
 8002a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a18:	08002a3d 	.word	0x08002a3d
 8002a1c:	08002a95 	.word	0x08002a95
 8002a20:	08002aa1 	.word	0x08002aa1
 8002a24:	08002aad 	.word	0x08002aad
 8002a28:	08002ab9 	.word	0x08002ab9
 8002a2c:	08002ac5 	.word	0x08002ac5
 8002a30:	08002ad1 	.word	0x08002ad1
 8002a34:	08002b7d 	.word	0x08002b7d
 8002a38:	08002b93 	.word	0x08002b93
		case ESPERA_DIGITO_1:
			/*Parseo la primer tecla*/
			keyPressed = GetKey();
 8002a3c:	f7fe fc94 	bl	8001368 <GetKey>
 8002a40:	4603      	mov	r3, r0
 8002a42:	73fb      	strb	r3, [r7, #15]
			if(keyPressed != 0){
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d021      	beq.n	8002a8e <KeypadScanning+0xae>
            	if((keyPressed != BORRAR_DIGITO) && (keyPressed != ENTER)){
 8002a4a:	7bfb      	ldrb	r3, [r7, #15]
 8002a4c:	2b23      	cmp	r3, #35	@ 0x23
 8002a4e:	f000 80b6 	beq.w	8002bbe <KeypadScanning+0x1de>
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a56:	f000 80b2 	beq.w	8002bbe <KeypadScanning+0x1de>
					FSM1->CurrentIndex = 0;												//Reinicializo indice del buffer
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	719a      	strb	r2, [r3, #6]
					FSM1->Buffer[FSM1->CurrentIndex] = keyPressed;						//Guardo el primer digito
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	799b      	ldrb	r3, [r3, #6]
 8002a64:	4619      	mov	r1, r3
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	7bfa      	ldrb	r2, [r7, #15]
 8002a6a:	545a      	strb	r2, [r3, r1]
					FSM1->CurrentIndex++;
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	799b      	ldrb	r3, [r3, #6]
 8002a70:	3301      	adds	r3, #1
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	719a      	strb	r2, [r3, #6]
					FSM1->StartTime = xTaskGetTickCount();								//Guardo tiempo de inicio para el timeout
 8002a78:	f008 fc54 	bl	800b324 <xTaskGetTickCount>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	609a      	str	r2, [r3, #8]
					FSM1->CurrentState = ESPERA_DIGITO_2;								//Config estado para parsear la sig tecla
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	2201      	movs	r2, #1
 8002a86:	71da      	strb	r2, [r3, #7]
					eventoEnviado = PANTALLA_AÑADIR_ENTRADA;							//Defino indicaciones para el display
 8002a88:	2302      	movs	r3, #2
 8002a8a:	73bb      	strb	r3, [r7, #14]
            	}
			}
			else{
				eventoEnviado = PANTALLA_INGRESE_CLAVE;
			}
			break;
 8002a8c:	e097      	b.n	8002bbe <KeypadScanning+0x1de>
				eventoEnviado = PANTALLA_INGRESE_CLAVE;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	73bb      	strb	r3, [r7, #14]
			break;
 8002a92:	e094      	b.n	8002bbe <KeypadScanning+0x1de>
		case ESPERA_DIGITO_2:
			eventoEnviado = HandleInput(FSM1);
 8002a94:	6938      	ldr	r0, [r7, #16]
 8002a96:	f7fe fc05 	bl	80012a4 <HandleInput>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	73bb      	strb	r3, [r7, #14]
			break;
 8002a9e:	e091      	b.n	8002bc4 <KeypadScanning+0x1e4>
		case ESPERA_DIGITO_3:
			eventoEnviado = HandleInput(FSM1);
 8002aa0:	6938      	ldr	r0, [r7, #16]
 8002aa2:	f7fe fbff 	bl	80012a4 <HandleInput>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	73bb      	strb	r3, [r7, #14]
			break;
 8002aaa:	e08b      	b.n	8002bc4 <KeypadScanning+0x1e4>
		case ESPERA_DIGITO_4:
			eventoEnviado = HandleInput(FSM1);
 8002aac:	6938      	ldr	r0, [r7, #16]
 8002aae:	f7fe fbf9 	bl	80012a4 <HandleInput>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	73bb      	strb	r3, [r7, #14]
			break;
 8002ab6:	e085      	b.n	8002bc4 <KeypadScanning+0x1e4>
		case ESPERA_DIGITO_5:
			eventoEnviado = HandleInput(FSM1);
 8002ab8:	6938      	ldr	r0, [r7, #16]
 8002aba:	f7fe fbf3 	bl	80012a4 <HandleInput>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	73bb      	strb	r3, [r7, #14]
			break;
 8002ac2:	e07f      	b.n	8002bc4 <KeypadScanning+0x1e4>
		case ESPERA_DIGITO_6:
			eventoEnviado = HandleInput(FSM1);
 8002ac4:	6938      	ldr	r0, [r7, #16]
 8002ac6:	f7fe fbed 	bl	80012a4 <HandleInput>
 8002aca:	4603      	mov	r3, r0
 8002acc:	73bb      	strb	r3, [r7, #14]
			break;
 8002ace:	e079      	b.n	8002bc4 <KeypadScanning+0x1e4>
		case ESPERA_ENTER:
			if((xTaskGetTickCount() - FSM1->StartTime) < pdMS_TO_TICKS(KEYPAD_TIMEOUT)){
 8002ad0:	f008 fc28 	bl	800b324 <xTaskGetTickCount>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d845      	bhi.n	8002b70 <KeypadScanning+0x190>
				keyPressed = GetKey();
 8002ae4:	f7fe fc40 	bl	8001368 <GetKey>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	73fb      	strb	r3, [r7, #15]
				if(keyPressed != 0){
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d03b      	beq.n	8002b6a <KeypadScanning+0x18a>
					if(keyPressed == BORRAR_DIGITO){
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	2b23      	cmp	r3, #35	@ 0x23
 8002af6:	d119      	bne.n	8002b2c <KeypadScanning+0x14c>
						FSM1->CurrentIndex--;
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	799b      	ldrb	r3, [r3, #6]
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	719a      	strb	r2, [r3, #6]
						FSM1->Buffer[FSM1->CurrentIndex] = 0;					//El digito obtenido en el estado anterior lo borro
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	799b      	ldrb	r3, [r3, #6]
 8002b08:	461a      	mov	r2, r3
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	5499      	strb	r1, [r3, r2]
						FSM1->StartTime = xTaskGetTickCount();					//Tomo nueva referencia para calcular timeout
 8002b10:	f008 fc08 	bl	800b324 <xTaskGetTickCount>
 8002b14:	4602      	mov	r2, r0
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	609a      	str	r2, [r3, #8]
						FSM1->CurrentState--;									//Vuelvo al estado anterior
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	79db      	ldrb	r3, [r3, #7]
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b2da      	uxtb	r2, r3
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	71da      	strb	r2, [r3, #7]
						eventoEnviado = PANTALLA_BORRAR_ENTRADA;
 8002b26:	2303      	movs	r3, #3
 8002b28:	73bb      	strb	r3, [r7, #14]
			else{
				FSM1->CurrentState = TIMEOUT;
				eventoEnviado = PANTALLA_TIMEOUT;

			}
			break;
 8002b2a:	e04a      	b.n	8002bc2 <KeypadScanning+0x1e2>
						if(keyPressed == ENTER){
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b30:	d147      	bne.n	8002bc2 <KeypadScanning+0x1e2>
							for(uint8_t i = 0; i < SEQUENCE_LEN; i++){
 8002b32:	2300      	movs	r3, #0
 8002b34:	75fb      	strb	r3, [r7, #23]
 8002b36:	e00c      	b.n	8002b52 <KeypadScanning+0x172>
								xQueueSend(sequenceQueue, &(FSM1->Buffer[i]), portMAX_DELAY);
 8002b38:	4b2b      	ldr	r3, [pc, #172]	@ (8002be8 <KeypadScanning+0x208>)
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	7dfb      	ldrb	r3, [r7, #23]
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	18d1      	adds	r1, r2, r3
 8002b42:	2300      	movs	r3, #0
 8002b44:	f04f 32ff 	mov.w	r2, #4294967295
 8002b48:	f007 fb94 	bl	800a274 <xQueueGenericSend>
							for(uint8_t i = 0; i < SEQUENCE_LEN; i++){
 8002b4c:	7dfb      	ldrb	r3, [r7, #23]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	75fb      	strb	r3, [r7, #23]
 8002b52:	7dfb      	ldrb	r3, [r7, #23]
 8002b54:	2b05      	cmp	r3, #5
 8002b56:	d9ef      	bls.n	8002b38 <KeypadScanning+0x158>
							ClearBuffer(FSM1->Buffer, 6);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	2106      	movs	r1, #6
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7fe fc95 	bl	800148c <ClearBuffer>
							FSM1->CurrentState = ESPERA_DIGITO_1;
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2200      	movs	r2, #0
 8002b66:	71da      	strb	r2, [r3, #7]
			break;
 8002b68:	e02b      	b.n	8002bc2 <KeypadScanning+0x1e2>
					eventoEnviado = PANTALLA_IDLE;								//No actualizar la pantalla
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	73bb      	strb	r3, [r7, #14]
			break;
 8002b6e:	e028      	b.n	8002bc2 <KeypadScanning+0x1e2>
				FSM1->CurrentState = TIMEOUT;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	2207      	movs	r2, #7
 8002b74:	71da      	strb	r2, [r3, #7]
				eventoEnviado = PANTALLA_TIMEOUT;
 8002b76:	2306      	movs	r3, #6
 8002b78:	73bb      	strb	r3, [r7, #14]
			break;
 8002b7a:	e022      	b.n	8002bc2 <KeypadScanning+0x1e2>
		case TIMEOUT:
			ClearBuffer(FSM1->Buffer, 6);								//Limpio buffer y vuelvo a estado inicial
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	2106      	movs	r1, #6
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe fc83 	bl	800148c <ClearBuffer>
			FSM1->CurrentState = ESPERA_DIGITO_1;
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	71da      	strb	r2, [r3, #7]
			eventoEnviado = PANTALLA_IDLE;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	73bb      	strb	r3, [r7, #14]
			break;
 8002b90:	e018      	b.n	8002bc4 <KeypadScanning+0x1e4>
		case INCOMPLETO:
			ClearBuffer(FSM1->Buffer, 6);
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	2106      	movs	r1, #6
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe fc78 	bl	800148c <ClearBuffer>
			FSM1->CurrentState = ESPERA_DIGITO_1;
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	71da      	strb	r2, [r3, #7]
			eventoEnviado = PANTALLA_IDLE;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73bb      	strb	r3, [r7, #14]
			break;
 8002ba6:	e00d      	b.n	8002bc4 <KeypadScanning+0x1e4>
		default:
			ClearBuffer(FSM1->Buffer, 6);
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	2106      	movs	r1, #6
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fe fc6d 	bl	800148c <ClearBuffer>
			FSM1->CurrentState = ESPERA_DIGITO_1;
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	71da      	strb	r2, [r3, #7]
			eventoEnviado = PANTALLA_IDLE;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	73bb      	strb	r3, [r7, #14]
			break;
 8002bbc:	e002      	b.n	8002bc4 <KeypadScanning+0x1e4>
			break;
 8002bbe:	bf00      	nop
 8002bc0:	e000      	b.n	8002bc4 <KeypadScanning+0x1e4>
			break;
 8002bc2:	bf00      	nop
		}
		/*Si el evento es PANTALLA_IDLE no se envian indicaciones al display*/
		/*En ese caso se deja la pantalla previa*/
		if(eventoEnviado != PANTALLA_IDLE) xQueueSend(uiQueue, (void * ) &eventoEnviado, portMAX_DELAY);
 8002bc4:	7bbb      	ldrb	r3, [r7, #14]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f43f af1e 	beq.w	8002a08 <KeypadScanning+0x28>
 8002bcc:	4b05      	ldr	r3, [pc, #20]	@ (8002be4 <KeypadScanning+0x204>)
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	f107 010e 	add.w	r1, r7, #14
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8002bda:	f007 fb4b 	bl	800a274 <xQueueGenericSend>
		switch(FSM1->CurrentState){
 8002bde:	e713      	b.n	8002a08 <KeypadScanning+0x28>
 8002be0:	200029fc 	.word	0x200029fc
 8002be4:	200029a0 	.word	0x200029a0
 8002be8:	200029a4 	.word	0x200029a4

08002bec <ScreenManager>:
	}
}

void ScreenManager  (void *pvParameters){
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	6078      	str	r0, [r7, #4]
	lockState magneticLockState;
	eventoDisplay eventoRecibido = PANTALLA_INGRESE_CLAVE;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	733b      	strb	r3, [r7, #12]
	uint8_t x = 10;														//x e y definen coordenadas en pantalla
 8002bf8:	230a      	movs	r3, #10
 8002bfa:	73fb      	strb	r3, [r7, #15]
	uint8_t y = 26;
 8002bfc:	231a      	movs	r3, #26
 8002bfe:	73bb      	strb	r3, [r7, #14]
	displayInit();
 8002c00:	f7fe fc78 	bl	80014f4 <displayInit>
	while(1){
		xQueueReceive(uiQueue, &eventoRecibido, portMAX_DELAY);			//La tarea espera indicaciones para cambiar la pantalla
 8002c04:	4b39      	ldr	r3, [pc, #228]	@ (8002cec <ScreenManager+0x100>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f107 010c 	add.w	r1, r7, #12
 8002c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c10:	4618      	mov	r0, r3
 8002c12:	f007 fcc1 	bl	800a598 <xQueueReceive>
		switch(eventoRecibido){
 8002c16:	7b3b      	ldrb	r3, [r7, #12]
 8002c18:	2b07      	cmp	r3, #7
 8002c1a:	d865      	bhi.n	8002ce8 <ScreenManager+0xfc>
 8002c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8002c24 <ScreenManager+0x38>)
 8002c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c22:	bf00      	nop
 8002c24:	08002ce9 	.word	0x08002ce9
 8002c28:	08002c45 	.word	0x08002c45
 8002c2c:	08002c4f 	.word	0x08002c4f
 8002c30:	08002c75 	.word	0x08002c75
 8002c34:	08002cb7 	.word	0x08002cb7
 8002c38:	08002cdb 	.word	0x08002cdb
 8002c3c:	08002c9b 	.word	0x08002c9b
 8002c40:	08002ca9 	.word	0x08002ca9
		case PANTALLA_INGRESE_CLAVE:
			x = 10;
 8002c44:	230a      	movs	r3, #10
 8002c46:	73fb      	strb	r3, [r7, #15]
			displayInsertKeyMsg();
 8002c48:	f7fe fc5a 	bl	8001500 <displayInsertKeyMsg>
			break;
 8002c4c:	e04d      	b.n	8002cea <ScreenManager+0xfe>
		case PANTALLA_AÑADIR_ENTRADA:
			ssd1306_SetCursor(x, y);
 8002c4e:	7bba      	ldrb	r2, [r7, #14]
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	4611      	mov	r1, r2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff f8e5 	bl	8001e24 <ssd1306_SetCursor>
			ssd1306_WriteString("*", Font_16x26, White);				//Añade *'s para representar ingreso de digitos
 8002c5a:	4b25      	ldr	r3, [pc, #148]	@ (8002cf0 <ScreenManager+0x104>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	9200      	str	r2, [sp, #0]
 8002c60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c62:	4824      	ldr	r0, [pc, #144]	@ (8002cf4 <ScreenManager+0x108>)
 8002c64:	f7ff f8b8 	bl	8001dd8 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8002c68:	f7fe ffaa 	bl	8001bc0 <ssd1306_UpdateScreen>
			x += 16;													//Avanzo una posición en pantalla acorde al font seleccionado
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
 8002c6e:	3310      	adds	r3, #16
 8002c70:	73fb      	strb	r3, [r7, #15]
			break;
 8002c72:	e03a      	b.n	8002cea <ScreenManager+0xfe>
		case PANTALLA_BORRAR_ENTRADA:
			x -= 16;													//Retrocedo una posicion en pantalla acorde al font seleccionado
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	3b10      	subs	r3, #16
 8002c78:	73fb      	strb	r3, [r7, #15]
			ssd1306_SetCursor(x, y);
 8002c7a:	7bba      	ldrb	r2, [r7, #14]
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	4611      	mov	r1, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff f8cf 	bl	8001e24 <ssd1306_SetCursor>
			ssd1306_WriteString(" ", Font_16x26, White);				//En caso de borrar relleno con espacio en blanco
 8002c86:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf0 <ScreenManager+0x104>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	9200      	str	r2, [sp, #0]
 8002c8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c8e:	481a      	ldr	r0, [pc, #104]	@ (8002cf8 <ScreenManager+0x10c>)
 8002c90:	f7ff f8a2 	bl	8001dd8 <ssd1306_WriteString>
			ssd1306_UpdateScreen();
 8002c94:	f7fe ff94 	bl	8001bc0 <ssd1306_UpdateScreen>
			break;
 8002c98:	e027      	b.n	8002cea <ScreenManager+0xfe>
		case PANTALLA_TIMEOUT:
			displayTimeoutMsg();
 8002c9a:	f7fe fc6b 	bl	8001574 <displayTimeoutMsg>
			HAL_Delay(3000);											//Timer bloqueante para evitar el ingreso de otra secuencia
 8002c9e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002ca2:	f000 f939 	bl	8002f18 <HAL_Delay>
			break;														//mientras se muestra el mensaje.
 8002ca6:	e020      	b.n	8002cea <ScreenManager+0xfe>
		case PANTALLA_SECUENCIA_INCOMPLETA:
			displayIncompleteMsg();
 8002ca8:	f7fe fc86 	bl	80015b8 <displayIncompleteMsg>
			HAL_Delay(3000);
 8002cac:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002cb0:	f000 f932 	bl	8002f18 <HAL_Delay>
			break;
 8002cb4:	e019      	b.n	8002cea <ScreenManager+0xfe>
		case PANTALLA_ACCESO_CONCEDIDO:
			displayAccessState();
 8002cb6:	f7fe fcc9 	bl	800164c <displayAccessState>
			magneticLockState = LOCK_ON;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	737b      	strb	r3, [r7, #13]
			HAL_Delay(3000);
 8002cbe:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002cc2:	f000 f929 	bl	8002f18 <HAL_Delay>
			xQueueSend(lockQueue, &magneticLockState, portMAX_DELAY);
 8002cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8002cfc <ScreenManager+0x110>)
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	f107 010d 	add.w	r1, r7, #13
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd4:	f007 face 	bl	800a274 <xQueueGenericSend>
			break;
 8002cd8:	e007      	b.n	8002cea <ScreenManager+0xfe>
		case PANTALLA_USUARIO_INEXISTENTE:
			displayNonExistentUserMsg();
 8002cda:	f7fe fceb 	bl	80016b4 <displayNonExistentUserMsg>
			HAL_Delay(3000);
 8002cde:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002ce2:	f000 f919 	bl	8002f18 <HAL_Delay>
			break;
 8002ce6:	e000      	b.n	8002cea <ScreenManager+0xfe>
		case PANTALLA_IDLE:
			/*No hacer nada*/
			break;
		default:
			break;
 8002ce8:	bf00      	nop
		xQueueReceive(uiQueue, &eventoRecibido, portMAX_DELAY);			//La tarea espera indicaciones para cambiar la pantalla
 8002cea:	e78b      	b.n	8002c04 <ScreenManager+0x18>
 8002cec:	200029a0 	.word	0x200029a0
 8002cf0:	0801016c 	.word	0x0801016c
 8002cf4:	0800e01c 	.word	0x0800e01c
 8002cf8:	0800e020 	.word	0x0800e020
 8002cfc:	200029a8 	.word	0x200029a8

08002d00 <sdHandler>:
		}
	}
}

void sdHandler(void *pvParameters){
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
	/***Esta tarea se encarga del manejo de la memoria SD***/
	eventoDisplay eventoEnviado;
	lockState magneticLockState= LOCK_ON;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	75bb      	strb	r3, [r7, #22]
	char accessSequence[SEQUENCE_LEN + 1];
	accessSequence[6] = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	74bb      	strb	r3, [r7, #18]
	char *userName;
	/*Realizo verificacion de archivos inicial*/
	verifyDatabase("database_personas.txt");
 8002d10:	482e      	ldr	r0, [pc, #184]	@ (8002dcc <sdHandler+0xcc>)
 8002d12:	f7fe fd6d 	bl	80017f0 <verifyDatabase>
	//verifyDatabaseFFT("database_fft.txt");
	verifyAccessRegister("registro_accesos.txt");
 8002d16:	482e      	ldr	r0, [pc, #184]	@ (8002dd0 <sdHandler+0xd0>)
 8002d18:	f7fe fd16 	bl	8001748 <verifyAccessRegister>
	while(1){
		/*Espero secuencia de 6 digitos*/
		for(uint8_t i = 0; i < SEQUENCE_LEN; i++){
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	77fb      	strb	r3, [r7, #31]
 8002d20:	e00d      	b.n	8002d3e <sdHandler+0x3e>
			xQueueReceive(sequenceQueue, &accessSequence[i], portMAX_DELAY);
 8002d22:	4b2c      	ldr	r3, [pc, #176]	@ (8002dd4 <sdHandler+0xd4>)
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	7ffb      	ldrb	r3, [r7, #31]
 8002d28:	f107 020c 	add.w	r2, r7, #12
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d32:	4619      	mov	r1, r3
 8002d34:	f007 fc30 	bl	800a598 <xQueueReceive>
		for(uint8_t i = 0; i < SEQUENCE_LEN; i++){
 8002d38:	7ffb      	ldrb	r3, [r7, #31]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	77fb      	strb	r3, [r7, #31]
 8002d3e:	7ffb      	ldrb	r3, [r7, #31]
 8002d40:	2b05      	cmp	r3, #5
 8002d42:	d9ee      	bls.n	8002d22 <sdHandler+0x22>
		}
		/*Verifico que la secuencia este en la base de datos de personas*/
		userName = searchUserOnDatabase(accessSequence, "database_personas.txt");
 8002d44:	f107 030c 	add.w	r3, r7, #12
 8002d48:	4920      	ldr	r1, [pc, #128]	@ (8002dcc <sdHandler+0xcc>)
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fe fda6 	bl	800189c <searchUserOnDatabase>
 8002d50:	61b8      	str	r0, [r7, #24]
		if(userName == USER_ERROR){
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d11b      	bne.n	8002d90 <sdHandler+0x90>
			userName = pvPortMalloc(25 * sizeof(char));
 8002d58:	2019      	movs	r0, #25
 8002d5a:	f009 fa67 	bl	800c22c <pvPortMalloc>
 8002d5e:	61b8      	str	r0, [r7, #24]
			snprintf(userName, 25, "Usuario desconocido");
 8002d60:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd8 <sdHandler+0xd8>)
 8002d62:	2119      	movs	r1, #25
 8002d64:	69b8      	ldr	r0, [r7, #24]
 8002d66:	f009 fd11 	bl	800c78c <sniprintf>
			recordOnRegister("registro_accesos.txt", userName, accessSequence);
 8002d6a:	f107 030c 	add.w	r3, r7, #12
 8002d6e:	461a      	mov	r2, r3
 8002d70:	69b9      	ldr	r1, [r7, #24]
 8002d72:	4817      	ldr	r0, [pc, #92]	@ (8002dd0 <sdHandler+0xd0>)
 8002d74:	f7fe fe3a 	bl	80019ec <recordOnRegister>
			eventoEnviado = PANTALLA_USUARIO_INEXISTENTE;
 8002d78:	2305      	movs	r3, #5
 8002d7a:	75fb      	strb	r3, [r7, #23]
			xQueueSend(uiQueue, &eventoEnviado, portMAX_DELAY);
 8002d7c:	4b17      	ldr	r3, [pc, #92]	@ (8002ddc <sdHandler+0xdc>)
 8002d7e:	6818      	ldr	r0, [r3, #0]
 8002d80:	f107 0117 	add.w	r1, r7, #23
 8002d84:	2300      	movs	r3, #0
 8002d86:	f04f 32ff 	mov.w	r2, #4294967295
 8002d8a:	f007 fa73 	bl	800a274 <xQueueGenericSend>
 8002d8e:	e7c5      	b.n	8002d1c <sdHandler+0x1c>
		}
		else{
			recordOnRegister("registro_accesos.txt", userName, accessSequence);
 8002d90:	f107 030c 	add.w	r3, r7, #12
 8002d94:	461a      	mov	r2, r3
 8002d96:	69b9      	ldr	r1, [r7, #24]
 8002d98:	480d      	ldr	r0, [pc, #52]	@ (8002dd0 <sdHandler+0xd0>)
 8002d9a:	f7fe fe27 	bl	80019ec <recordOnRegister>
			magneticLockState = LOCK_OFF;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	75bb      	strb	r3, [r7, #22]
			eventoEnviado = PANTALLA_ACCESO_CONCEDIDO;
 8002da2:	2304      	movs	r3, #4
 8002da4:	75fb      	strb	r3, [r7, #23]
			xQueueSend(lockQueue, &magneticLockState, portMAX_DELAY);				//Envio indicaciones a la cerradura
 8002da6:	4b0e      	ldr	r3, [pc, #56]	@ (8002de0 <sdHandler+0xe0>)
 8002da8:	6818      	ldr	r0, [r3, #0]
 8002daa:	f107 0116 	add.w	r1, r7, #22
 8002dae:	2300      	movs	r3, #0
 8002db0:	f04f 32ff 	mov.w	r2, #4294967295
 8002db4:	f007 fa5e 	bl	800a274 <xQueueGenericSend>
			xQueueSend(uiQueue, &eventoEnviado, portMAX_DELAY);						//Envio indicaciones al display
 8002db8:	4b08      	ldr	r3, [pc, #32]	@ (8002ddc <sdHandler+0xdc>)
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	f107 0117 	add.w	r1, r7, #23
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc6:	f007 fa55 	bl	800a274 <xQueueGenericSend>
		for(uint8_t i = 0; i < SEQUENCE_LEN; i++){
 8002dca:	e7a7      	b.n	8002d1c <sdHandler+0x1c>
 8002dcc:	0800e024 	.word	0x0800e024
 8002dd0:	0800e03c 	.word	0x0800e03c
 8002dd4:	200029a4 	.word	0x200029a4
 8002dd8:	0800e054 	.word	0x0800e054
 8002ddc:	200029a0 	.word	0x200029a0
 8002de0:	200029a8 	.word	0x200029a8

08002de4 <LockControl>:
		}															//Libero memoria utilizada
	}
}

void LockControl(void *pvParameters){
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	lockState magneticLockState = LOCK_ON;
 8002dec:	2301      	movs	r3, #1
 8002dee:	73fb      	strb	r3, [r7, #15]
	closeLock();
 8002df0:	f7fe fb74 	bl	80014dc <closeLock>
	while(1){
		xQueueReceive(lockQueue, &magneticLockState, portMAX_DELAY);
 8002df4:	4b0e      	ldr	r3, [pc, #56]	@ (8002e30 <LockControl+0x4c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f107 010f 	add.w	r1, r7, #15
 8002dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8002e00:	4618      	mov	r0, r3
 8002e02:	f007 fbc9 	bl	800a598 <xQueueReceive>
		if(magneticLockState == LOCK_OFF){
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d1f3      	bne.n	8002df4 <LockControl+0x10>
			openLock();
 8002e0c:	f7fe fb5a 	bl	80014c4 <openLock>
			xQueueReceive(lockQueue, &magneticLockState, portMAX_DELAY);			//Para sincronizar con la pantalla
 8002e10:	4b07      	ldr	r3, [pc, #28]	@ (8002e30 <LockControl+0x4c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f107 010f 	add.w	r1, r7, #15
 8002e18:	f04f 32ff 	mov.w	r2, #4294967295
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f007 fbbb 	bl	800a598 <xQueueReceive>
			if(magneticLockState == LOCK_ON) closeLock();
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d1e5      	bne.n	8002df4 <LockControl+0x10>
 8002e28:	f7fe fb58 	bl	80014dc <closeLock>
		xQueueReceive(lockQueue, &magneticLockState, portMAX_DELAY);
 8002e2c:	e7e2      	b.n	8002df4 <LockControl+0x10>
 8002e2e:	bf00      	nop
 8002e30:	200029a8 	.word	0x200029a8

08002e34 <IdleTask>:
		}
	}
}

void IdleTask(void *pvParameters){
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
	while(1){
 8002e3c:	bf00      	nop
 8002e3e:	e7fd      	b.n	8002e3c <IdleTask+0x8>

08002e40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e78 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e44:	f7ff fdba 	bl	80029bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e48:	480c      	ldr	r0, [pc, #48]	@ (8002e7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e4a:	490d      	ldr	r1, [pc, #52]	@ (8002e80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e50:	e002      	b.n	8002e58 <LoopCopyDataInit>

08002e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e56:	3304      	adds	r3, #4

08002e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e5c:	d3f9      	bcc.n	8002e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e60:	4c0a      	ldr	r4, [pc, #40]	@ (8002e8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e64:	e001      	b.n	8002e6a <LoopFillZerobss>

08002e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e68:	3204      	adds	r2, #4

08002e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e6c:	d3fb      	bcc.n	8002e66 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002e6e:	f009 fdfd 	bl	800ca6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e72:	f7ff f83b 	bl	8001eec <main>
  bx  lr    
 8002e76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e78:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e80:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002e84:	080106c0 	.word	0x080106c0
  ldr r2, =_sbss
 8002e88:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002e8c:	20006928 	.word	0x20006928

08002e90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e90:	e7fe      	b.n	8002e90 <ADC_IRQHandler>
	...

08002e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e98:	4b0e      	ldr	r3, [pc, #56]	@ (8002ed4 <HAL_Init+0x40>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed4 <HAL_Init+0x40>)
 8002e9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ea2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed4 <HAL_Init+0x40>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ed4 <HAL_Init+0x40>)
 8002eaa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eb0:	4b08      	ldr	r3, [pc, #32]	@ (8002ed4 <HAL_Init+0x40>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a07      	ldr	r2, [pc, #28]	@ (8002ed4 <HAL_Init+0x40>)
 8002eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ebc:	2003      	movs	r0, #3
 8002ebe:	f000 f8fc 	bl	80030ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ec2:	200f      	movs	r0, #15
 8002ec4:	f7ff fbdc 	bl	8002680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ec8:	f7ff faaa 	bl	8002420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	40023c00 	.word	0x40023c00

08002ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002edc:	4b06      	ldr	r3, [pc, #24]	@ (8002ef8 <HAL_IncTick+0x20>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4b06      	ldr	r3, [pc, #24]	@ (8002efc <HAL_IncTick+0x24>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	4a04      	ldr	r2, [pc, #16]	@ (8002efc <HAL_IncTick+0x24>)
 8002eea:	6013      	str	r3, [r2, #0]
}
 8002eec:	bf00      	nop
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	2000000c 	.word	0x2000000c
 8002efc:	20002a08 	.word	0x20002a08

08002f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return uwTick;
 8002f04:	4b03      	ldr	r3, [pc, #12]	@ (8002f14 <HAL_GetTick+0x14>)
 8002f06:	681b      	ldr	r3, [r3, #0]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	20002a08 	.word	0x20002a08

08002f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f20:	f7ff ffee 	bl	8002f00 <HAL_GetTick>
 8002f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f30:	d005      	beq.n	8002f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f32:	4b0a      	ldr	r3, [pc, #40]	@ (8002f5c <HAL_Delay+0x44>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f3e:	bf00      	nop
 8002f40:	f7ff ffde 	bl	8002f00 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d8f7      	bhi.n	8002f40 <HAL_Delay+0x28>
  {
  }
}
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	2000000c 	.word	0x2000000c

08002f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f70:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f92:	4a04      	ldr	r2, [pc, #16]	@ (8002fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	60d3      	str	r3, [r2, #12]
}
 8002f98:	bf00      	nop
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fac:	4b04      	ldr	r3, [pc, #16]	@ (8002fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	0a1b      	lsrs	r3, r3, #8
 8002fb2:	f003 0307 	and.w	r3, r3, #7
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	db0b      	blt.n	8002fee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
 8002fd8:	f003 021f 	and.w	r2, r3, #31
 8002fdc:	4907      	ldr	r1, [pc, #28]	@ (8002ffc <__NVIC_EnableIRQ+0x38>)
 8002fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	e000e100 	.word	0xe000e100

08003000 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	4603      	mov	r3, r0
 8003008:	6039      	str	r1, [r7, #0]
 800300a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800300c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003010:	2b00      	cmp	r3, #0
 8003012:	db0a      	blt.n	800302a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	b2da      	uxtb	r2, r3
 8003018:	490c      	ldr	r1, [pc, #48]	@ (800304c <__NVIC_SetPriority+0x4c>)
 800301a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301e:	0112      	lsls	r2, r2, #4
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	440b      	add	r3, r1
 8003024:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003028:	e00a      	b.n	8003040 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	b2da      	uxtb	r2, r3
 800302e:	4908      	ldr	r1, [pc, #32]	@ (8003050 <__NVIC_SetPriority+0x50>)
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	3b04      	subs	r3, #4
 8003038:	0112      	lsls	r2, r2, #4
 800303a:	b2d2      	uxtb	r2, r2
 800303c:	440b      	add	r3, r1
 800303e:	761a      	strb	r2, [r3, #24]
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr
 800304c:	e000e100 	.word	0xe000e100
 8003050:	e000ed00 	.word	0xe000ed00

08003054 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003054:	b480      	push	{r7}
 8003056:	b089      	sub	sp, #36	@ 0x24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f1c3 0307 	rsb	r3, r3, #7
 800306e:	2b04      	cmp	r3, #4
 8003070:	bf28      	it	cs
 8003072:	2304      	movcs	r3, #4
 8003074:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3304      	adds	r3, #4
 800307a:	2b06      	cmp	r3, #6
 800307c:	d902      	bls.n	8003084 <NVIC_EncodePriority+0x30>
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3b03      	subs	r3, #3
 8003082:	e000      	b.n	8003086 <NVIC_EncodePriority+0x32>
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003088:	f04f 32ff 	mov.w	r2, #4294967295
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43da      	mvns	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	401a      	ands	r2, r3
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800309c:	f04f 31ff 	mov.w	r1, #4294967295
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	fa01 f303 	lsl.w	r3, r1, r3
 80030a6:	43d9      	mvns	r1, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030ac:	4313      	orrs	r3, r2
         );
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3724      	adds	r7, #36	@ 0x24
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr

080030ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7ff ff4c 	bl	8002f60 <__NVIC_SetPriorityGrouping>
}
 80030c8:	bf00      	nop
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	4603      	mov	r3, r0
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
 80030dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030e2:	f7ff ff61 	bl	8002fa8 <__NVIC_GetPriorityGrouping>
 80030e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	6978      	ldr	r0, [r7, #20]
 80030ee:	f7ff ffb1 	bl	8003054 <NVIC_EncodePriority>
 80030f2:	4602      	mov	r2, r0
 80030f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030f8:	4611      	mov	r1, r2
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff ff80 	bl	8003000 <__NVIC_SetPriority>
}
 8003100:	bf00      	nop
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003116:	4618      	mov	r0, r3
 8003118:	f7ff ff54 	bl	8002fc4 <__NVIC_EnableIRQ>
}
 800311c:	bf00      	nop
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003124:	b480      	push	{r7}
 8003126:	b089      	sub	sp, #36	@ 0x24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003136:	2300      	movs	r3, #0
 8003138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800313a:	2300      	movs	r3, #0
 800313c:	61fb      	str	r3, [r7, #28]
 800313e:	e159      	b.n	80033f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003140:	2201      	movs	r2, #1
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	697a      	ldr	r2, [r7, #20]
 8003150:	4013      	ands	r3, r2
 8003152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	429a      	cmp	r2, r3
 800315a:	f040 8148 	bne.w	80033ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b01      	cmp	r3, #1
 8003168:	d005      	beq.n	8003176 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003172:	2b02      	cmp	r3, #2
 8003174:	d130      	bne.n	80031d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	2203      	movs	r2, #3
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4013      	ands	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031ac:	2201      	movs	r2, #1
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	091b      	lsrs	r3, r3, #4
 80031c2:	f003 0201 	and.w	r2, r3, #1
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	2b03      	cmp	r3, #3
 80031e2:	d017      	beq.n	8003214 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	2203      	movs	r2, #3
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f003 0303 	and.w	r3, r3, #3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d123      	bne.n	8003268 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	08da      	lsrs	r2, r3, #3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3208      	adds	r2, #8
 8003228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	f003 0307 	and.w	r3, r3, #7
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	220f      	movs	r2, #15
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	691a      	ldr	r2, [r3, #16]
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f003 0307 	and.w	r3, r3, #7
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	08da      	lsrs	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	3208      	adds	r2, #8
 8003262:	69b9      	ldr	r1, [r7, #24]
 8003264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	2203      	movs	r2, #3
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	4013      	ands	r3, r2
 800327e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f003 0203 	and.w	r2, r3, #3
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4313      	orrs	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 80a2 	beq.w	80033ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	4b57      	ldr	r3, [pc, #348]	@ (800340c <HAL_GPIO_Init+0x2e8>)
 80032b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b2:	4a56      	ldr	r2, [pc, #344]	@ (800340c <HAL_GPIO_Init+0x2e8>)
 80032b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80032ba:	4b54      	ldr	r3, [pc, #336]	@ (800340c <HAL_GPIO_Init+0x2e8>)
 80032bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032c6:	4a52      	ldr	r2, [pc, #328]	@ (8003410 <HAL_GPIO_Init+0x2ec>)
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	089b      	lsrs	r3, r3, #2
 80032cc:	3302      	adds	r3, #2
 80032ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0303 	and.w	r3, r3, #3
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	220f      	movs	r2, #15
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43db      	mvns	r3, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4013      	ands	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a49      	ldr	r2, [pc, #292]	@ (8003414 <HAL_GPIO_Init+0x2f0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d019      	beq.n	8003326 <HAL_GPIO_Init+0x202>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a48      	ldr	r2, [pc, #288]	@ (8003418 <HAL_GPIO_Init+0x2f4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d013      	beq.n	8003322 <HAL_GPIO_Init+0x1fe>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a47      	ldr	r2, [pc, #284]	@ (800341c <HAL_GPIO_Init+0x2f8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d00d      	beq.n	800331e <HAL_GPIO_Init+0x1fa>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a46      	ldr	r2, [pc, #280]	@ (8003420 <HAL_GPIO_Init+0x2fc>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d007      	beq.n	800331a <HAL_GPIO_Init+0x1f6>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a45      	ldr	r2, [pc, #276]	@ (8003424 <HAL_GPIO_Init+0x300>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d101      	bne.n	8003316 <HAL_GPIO_Init+0x1f2>
 8003312:	2304      	movs	r3, #4
 8003314:	e008      	b.n	8003328 <HAL_GPIO_Init+0x204>
 8003316:	2307      	movs	r3, #7
 8003318:	e006      	b.n	8003328 <HAL_GPIO_Init+0x204>
 800331a:	2303      	movs	r3, #3
 800331c:	e004      	b.n	8003328 <HAL_GPIO_Init+0x204>
 800331e:	2302      	movs	r3, #2
 8003320:	e002      	b.n	8003328 <HAL_GPIO_Init+0x204>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <HAL_GPIO_Init+0x204>
 8003326:	2300      	movs	r3, #0
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	f002 0203 	and.w	r2, r2, #3
 800332e:	0092      	lsls	r2, r2, #2
 8003330:	4093      	lsls	r3, r2
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4313      	orrs	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003338:	4935      	ldr	r1, [pc, #212]	@ (8003410 <HAL_GPIO_Init+0x2ec>)
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	089b      	lsrs	r3, r3, #2
 800333e:	3302      	adds	r3, #2
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003346:	4b38      	ldr	r3, [pc, #224]	@ (8003428 <HAL_GPIO_Init+0x304>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	43db      	mvns	r3, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4013      	ands	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4313      	orrs	r3, r2
 8003368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800336a:	4a2f      	ldr	r2, [pc, #188]	@ (8003428 <HAL_GPIO_Init+0x304>)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003370:	4b2d      	ldr	r3, [pc, #180]	@ (8003428 <HAL_GPIO_Init+0x304>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4313      	orrs	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003394:	4a24      	ldr	r2, [pc, #144]	@ (8003428 <HAL_GPIO_Init+0x304>)
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800339a:	4b23      	ldr	r3, [pc, #140]	@ (8003428 <HAL_GPIO_Init+0x304>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033be:	4a1a      	ldr	r2, [pc, #104]	@ (8003428 <HAL_GPIO_Init+0x304>)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033c4:	4b18      	ldr	r3, [pc, #96]	@ (8003428 <HAL_GPIO_Init+0x304>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003428 <HAL_GPIO_Init+0x304>)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3301      	adds	r3, #1
 80033f2:	61fb      	str	r3, [r7, #28]
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	2b0f      	cmp	r3, #15
 80033f8:	f67f aea2 	bls.w	8003140 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033fc:	bf00      	nop
 80033fe:	bf00      	nop
 8003400:	3724      	adds	r7, #36	@ 0x24
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	40023800 	.word	0x40023800
 8003410:	40013800 	.word	0x40013800
 8003414:	40020000 	.word	0x40020000
 8003418:	40020400 	.word	0x40020400
 800341c:	40020800 	.word	0x40020800
 8003420:	40020c00 	.word	0x40020c00
 8003424:	40021000 	.word	0x40021000
 8003428:	40013c00 	.word	0x40013c00

0800342c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	887b      	ldrh	r3, [r7, #2]
 800343e:	4013      	ands	r3, r2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003444:	2301      	movs	r3, #1
 8003446:	73fb      	strb	r3, [r7, #15]
 8003448:	e001      	b.n	800344e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800344a:	2300      	movs	r3, #0
 800344c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800344e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	460b      	mov	r3, r1
 8003466:	807b      	strh	r3, [r7, #2]
 8003468:	4613      	mov	r3, r2
 800346a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800346c:	787b      	ldrb	r3, [r7, #1]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003472:	887a      	ldrh	r2, [r7, #2]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003478:	e003      	b.n	8003482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800347a:	887b      	ldrh	r3, [r7, #2]
 800347c:	041a      	lsls	r2, r3, #16
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	619a      	str	r2, [r3, #24]
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
	...

08003490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b084      	sub	sp, #16
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e12b      	b.n	80036fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d106      	bne.n	80034bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7fe ffde 	bl	8002478 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2224      	movs	r2, #36	@ 0x24
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0201 	bic.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034f4:	f001 f8ea 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
 80034f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4a81      	ldr	r2, [pc, #516]	@ (8003704 <HAL_I2C_Init+0x274>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d807      	bhi.n	8003514 <HAL_I2C_Init+0x84>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4a80      	ldr	r2, [pc, #512]	@ (8003708 <HAL_I2C_Init+0x278>)
 8003508:	4293      	cmp	r3, r2
 800350a:	bf94      	ite	ls
 800350c:	2301      	movls	r3, #1
 800350e:	2300      	movhi	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	e006      	b.n	8003522 <HAL_I2C_Init+0x92>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	4a7d      	ldr	r2, [pc, #500]	@ (800370c <HAL_I2C_Init+0x27c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	bf94      	ite	ls
 800351c:	2301      	movls	r3, #1
 800351e:	2300      	movhi	r3, #0
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e0e7      	b.n	80036fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	4a78      	ldr	r2, [pc, #480]	@ (8003710 <HAL_I2C_Init+0x280>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	0c9b      	lsrs	r3, r3, #18
 8003534:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	430a      	orrs	r2, r1
 8003548:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	4a6a      	ldr	r2, [pc, #424]	@ (8003704 <HAL_I2C_Init+0x274>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d802      	bhi.n	8003564 <HAL_I2C_Init+0xd4>
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	3301      	adds	r3, #1
 8003562:	e009      	b.n	8003578 <HAL_I2C_Init+0xe8>
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800356a:	fb02 f303 	mul.w	r3, r2, r3
 800356e:	4a69      	ldr	r2, [pc, #420]	@ (8003714 <HAL_I2C_Init+0x284>)
 8003570:	fba2 2303 	umull	r2, r3, r2, r3
 8003574:	099b      	lsrs	r3, r3, #6
 8003576:	3301      	adds	r3, #1
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6812      	ldr	r2, [r2, #0]
 800357c:	430b      	orrs	r3, r1
 800357e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800358a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	495c      	ldr	r1, [pc, #368]	@ (8003704 <HAL_I2C_Init+0x274>)
 8003594:	428b      	cmp	r3, r1
 8003596:	d819      	bhi.n	80035cc <HAL_I2C_Init+0x13c>
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	1e59      	subs	r1, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80035a6:	1c59      	adds	r1, r3, #1
 80035a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035ac:	400b      	ands	r3, r1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_I2C_Init+0x138>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	1e59      	subs	r1, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80035c0:	3301      	adds	r3, #1
 80035c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c6:	e051      	b.n	800366c <HAL_I2C_Init+0x1dc>
 80035c8:	2304      	movs	r3, #4
 80035ca:	e04f      	b.n	800366c <HAL_I2C_Init+0x1dc>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d111      	bne.n	80035f8 <HAL_I2C_Init+0x168>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1e58      	subs	r0, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	440b      	add	r3, r1
 80035e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e6:	3301      	adds	r3, #1
 80035e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	e012      	b.n	800361e <HAL_I2C_Init+0x18e>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1e58      	subs	r0, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6859      	ldr	r1, [r3, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	0099      	lsls	r1, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	fbb0 f3f3 	udiv	r3, r0, r3
 800360e:	3301      	adds	r3, #1
 8003610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003614:	2b00      	cmp	r3, #0
 8003616:	bf0c      	ite	eq
 8003618:	2301      	moveq	r3, #1
 800361a:	2300      	movne	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_I2C_Init+0x196>
 8003622:	2301      	movs	r3, #1
 8003624:	e022      	b.n	800366c <HAL_I2C_Init+0x1dc>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10e      	bne.n	800364c <HAL_I2C_Init+0x1bc>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1e58      	subs	r0, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6859      	ldr	r1, [r3, #4]
 8003636:	460b      	mov	r3, r1
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	440b      	add	r3, r1
 800363c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003640:	3301      	adds	r3, #1
 8003642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800364a:	e00f      	b.n	800366c <HAL_I2C_Init+0x1dc>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	1e58      	subs	r0, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6859      	ldr	r1, [r3, #4]
 8003654:	460b      	mov	r3, r1
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	0099      	lsls	r1, r3, #2
 800365c:	440b      	add	r3, r1
 800365e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003662:	3301      	adds	r3, #1
 8003664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003668:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	6809      	ldr	r1, [r1, #0]
 8003670:	4313      	orrs	r3, r2
 8003672:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	69da      	ldr	r2, [r3, #28]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800369a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6911      	ldr	r1, [r2, #16]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	68d2      	ldr	r2, [r2, #12]
 80036a6:	4311      	orrs	r1, r2
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	430b      	orrs	r3, r1
 80036ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695a      	ldr	r2, [r3, #20]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	000186a0 	.word	0x000186a0
 8003708:	001e847f 	.word	0x001e847f
 800370c:	003d08ff 	.word	0x003d08ff
 8003710:	431bde83 	.word	0x431bde83
 8003714:	10624dd3 	.word	0x10624dd3

08003718 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af02      	add	r7, sp, #8
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	4608      	mov	r0, r1
 8003722:	4611      	mov	r1, r2
 8003724:	461a      	mov	r2, r3
 8003726:	4603      	mov	r3, r0
 8003728:	817b      	strh	r3, [r7, #10]
 800372a:	460b      	mov	r3, r1
 800372c:	813b      	strh	r3, [r7, #8]
 800372e:	4613      	mov	r3, r2
 8003730:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003732:	f7ff fbe5 	bl	8002f00 <HAL_GetTick>
 8003736:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b20      	cmp	r3, #32
 8003742:	f040 80d9 	bne.w	80038f8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	2319      	movs	r3, #25
 800374c:	2201      	movs	r2, #1
 800374e:	496d      	ldr	r1, [pc, #436]	@ (8003904 <HAL_I2C_Mem_Write+0x1ec>)
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f971 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800375c:	2302      	movs	r3, #2
 800375e:	e0cc      	b.n	80038fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <HAL_I2C_Mem_Write+0x56>
 800376a:	2302      	movs	r3, #2
 800376c:	e0c5      	b.n	80038fa <HAL_I2C_Mem_Write+0x1e2>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0301 	and.w	r3, r3, #1
 8003780:	2b01      	cmp	r3, #1
 8003782:	d007      	beq.n	8003794 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2221      	movs	r2, #33	@ 0x21
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2240      	movs	r2, #64	@ 0x40
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a3a      	ldr	r2, [r7, #32]
 80037be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80037c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4a4d      	ldr	r2, [pc, #308]	@ (8003908 <HAL_I2C_Mem_Write+0x1f0>)
 80037d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037d6:	88f8      	ldrh	r0, [r7, #6]
 80037d8:	893a      	ldrh	r2, [r7, #8]
 80037da:	8979      	ldrh	r1, [r7, #10]
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	9301      	str	r3, [sp, #4]
 80037e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	4603      	mov	r3, r0
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f890 	bl	800390c <I2C_RequestMemoryWrite>
 80037ec:	4603      	mov	r3, r0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d052      	beq.n	8003898 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e081      	b.n	80038fa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 fa36 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00d      	beq.n	8003822 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	2b04      	cmp	r3, #4
 800380c:	d107      	bne.n	800381e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800381c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e06b      	b.n	80038fa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003826:	781a      	ldrb	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003848:	b29b      	uxth	r3, r3
 800384a:	3b01      	subs	r3, #1
 800384c:	b29a      	uxth	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	f003 0304 	and.w	r3, r3, #4
 800385c:	2b04      	cmp	r3, #4
 800385e:	d11b      	bne.n	8003898 <HAL_I2C_Mem_Write+0x180>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003864:	2b00      	cmp	r3, #0
 8003866:	d017      	beq.n	8003898 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800386c:	781a      	ldrb	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1aa      	bne.n	80037f6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 fa29 	bl	8003cfc <I2C_WaitOnBTFFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00d      	beq.n	80038cc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b4:	2b04      	cmp	r3, #4
 80038b6:	d107      	bne.n	80038c8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038c6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e016      	b.n	80038fa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	e000      	b.n	80038fa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038f8:	2302      	movs	r3, #2
  }
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	00100002 	.word	0x00100002
 8003908:	ffff0000 	.word	0xffff0000

0800390c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af02      	add	r7, sp, #8
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	4608      	mov	r0, r1
 8003916:	4611      	mov	r1, r2
 8003918:	461a      	mov	r2, r3
 800391a:	4603      	mov	r3, r0
 800391c:	817b      	strh	r3, [r7, #10]
 800391e:	460b      	mov	r3, r1
 8003920:	813b      	strh	r3, [r7, #8]
 8003922:	4613      	mov	r3, r2
 8003924:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003934:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	6a3b      	ldr	r3, [r7, #32]
 800393c:	2200      	movs	r2, #0
 800393e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f878 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00d      	beq.n	800396a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003958:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800395c:	d103      	bne.n	8003966 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003964:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e05f      	b.n	8003a2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800396a:	897b      	ldrh	r3, [r7, #10]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	461a      	mov	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003978:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	6a3a      	ldr	r2, [r7, #32]
 800397e:	492d      	ldr	r1, [pc, #180]	@ (8003a34 <I2C_RequestMemoryWrite+0x128>)
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 f8d3 	bl	8003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e04c      	b.n	8003a2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a8:	6a39      	ldr	r1, [r7, #32]
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 f95e 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00d      	beq.n	80039d2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	d107      	bne.n	80039ce <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e02b      	b.n	8003a2a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d105      	bne.n	80039e4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039d8:	893b      	ldrh	r3, [r7, #8]
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	611a      	str	r2, [r3, #16]
 80039e2:	e021      	b.n	8003a28 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039e4:	893b      	ldrh	r3, [r7, #8]
 80039e6:	0a1b      	lsrs	r3, r3, #8
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f4:	6a39      	ldr	r1, [r7, #32]
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f938 	bl	8003c6c <I2C_WaitOnTXEFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00d      	beq.n	8003a1e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d107      	bne.n	8003a1a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a18:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e005      	b.n	8003a2a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a1e:	893b      	ldrh	r3, [r7, #8]
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a28:	2300      	movs	r3, #0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3718      	adds	r7, #24
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	00010002 	.word	0x00010002

08003a38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	4613      	mov	r3, r2
 8003a46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a48:	e048      	b.n	8003adc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a50:	d044      	beq.n	8003adc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a52:	f7ff fa55 	bl	8002f00 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d302      	bcc.n	8003a68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d139      	bne.n	8003adc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	0c1b      	lsrs	r3, r3, #16
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d10d      	bne.n	8003a8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	43da      	mvns	r2, r3
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf0c      	ite	eq
 8003a84:	2301      	moveq	r3, #1
 8003a86:	2300      	movne	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	e00c      	b.n	8003aa8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	43da      	mvns	r2, r3
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	bf0c      	ite	eq
 8003aa0:	2301      	moveq	r3, #1
 8003aa2:	2300      	movne	r3, #0
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	79fb      	ldrb	r3, [r7, #7]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d116      	bne.n	8003adc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac8:	f043 0220 	orr.w	r2, r3, #32
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e023      	b.n	8003b24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	0c1b      	lsrs	r3, r3, #16
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d10d      	bne.n	8003b02 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	43da      	mvns	r2, r3
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	4013      	ands	r3, r2
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	bf0c      	ite	eq
 8003af8:	2301      	moveq	r3, #1
 8003afa:	2300      	movne	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	461a      	mov	r2, r3
 8003b00:	e00c      	b.n	8003b1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	43da      	mvns	r2, r3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	bf0c      	ite	eq
 8003b14:	2301      	moveq	r3, #1
 8003b16:	2300      	movne	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	79fb      	ldrb	r3, [r7, #7]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d093      	beq.n	8003a4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3710      	adds	r7, #16
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b3a:	e071      	b.n	8003c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695b      	ldr	r3, [r3, #20]
 8003b42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b4a:	d123      	bne.n	8003b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003b64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b80:	f043 0204 	orr.w	r2, r3, #4
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e067      	b.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9a:	d041      	beq.n	8003c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9c:	f7ff f9b0 	bl	8002f00 <HAL_GetTick>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d302      	bcc.n	8003bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d136      	bne.n	8003c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	0c1b      	lsrs	r3, r3, #16
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d10c      	bne.n	8003bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	43da      	mvns	r2, r3
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	bf14      	ite	ne
 8003bce:	2301      	movne	r3, #1
 8003bd0:	2300      	moveq	r3, #0
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	e00b      	b.n	8003bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	43da      	mvns	r2, r3
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	4013      	ands	r3, r2
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bf14      	ite	ne
 8003be8:	2301      	movne	r3, #1
 8003bea:	2300      	moveq	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d016      	beq.n	8003c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0c:	f043 0220 	orr.w	r2, r3, #32
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e021      	b.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	0c1b      	lsrs	r3, r3, #16
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d10c      	bne.n	8003c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	43da      	mvns	r2, r3
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	4013      	ands	r3, r2
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bf14      	ite	ne
 8003c3c:	2301      	movne	r3, #1
 8003c3e:	2300      	moveq	r3, #0
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	e00b      	b.n	8003c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	43da      	mvns	r2, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	bf14      	ite	ne
 8003c56:	2301      	movne	r3, #1
 8003c58:	2300      	moveq	r3, #0
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f47f af6d 	bne.w	8003b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c78:	e034      	b.n	8003ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f000 f886 	bl	8003d8c <I2C_IsAcknowledgeFailed>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d001      	beq.n	8003c8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e034      	b.n	8003cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c90:	d028      	beq.n	8003ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c92:	f7ff f935 	bl	8002f00 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	68ba      	ldr	r2, [r7, #8]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d302      	bcc.n	8003ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d11d      	bne.n	8003ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb2:	2b80      	cmp	r3, #128	@ 0x80
 8003cb4:	d016      	beq.n	8003ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd0:	f043 0220 	orr.w	r2, r3, #32
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e007      	b.n	8003cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cee:	2b80      	cmp	r3, #128	@ 0x80
 8003cf0:	d1c3      	bne.n	8003c7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d08:	e034      	b.n	8003d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 f83e 	bl	8003d8c <I2C_IsAcknowledgeFailed>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e034      	b.n	8003d84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d028      	beq.n	8003d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d22:	f7ff f8ed 	bl	8002f00 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d302      	bcc.n	8003d38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d11d      	bne.n	8003d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d016      	beq.n	8003d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	f043 0220 	orr.w	r2, r3, #32
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e007      	b.n	8003d84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d1c3      	bne.n	8003d0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b083      	sub	sp, #12
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003da2:	d11b      	bne.n	8003ddc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2220      	movs	r2, #32
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc8:	f043 0204 	orr.w	r2, r3, #4
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
	...

08003dec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e267      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d075      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e0a:	4b88      	ldr	r3, [pc, #544]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 030c 	and.w	r3, r3, #12
 8003e12:	2b04      	cmp	r3, #4
 8003e14:	d00c      	beq.n	8003e30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e16:	4b85      	ldr	r3, [pc, #532]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d112      	bne.n	8003e48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e22:	4b82      	ldr	r3, [pc, #520]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e2a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e2e:	d10b      	bne.n	8003e48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e30:	4b7e      	ldr	r3, [pc, #504]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d05b      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x108>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d157      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e242      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e50:	d106      	bne.n	8003e60 <HAL_RCC_OscConfig+0x74>
 8003e52:	4b76      	ldr	r3, [pc, #472]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a75      	ldr	r2, [pc, #468]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e5c:	6013      	str	r3, [r2, #0]
 8003e5e:	e01d      	b.n	8003e9c <HAL_RCC_OscConfig+0xb0>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e68:	d10c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x98>
 8003e6a:	4b70      	ldr	r3, [pc, #448]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a6f      	ldr	r2, [pc, #444]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e70:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	4b6d      	ldr	r3, [pc, #436]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a6c      	ldr	r2, [pc, #432]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	e00b      	b.n	8003e9c <HAL_RCC_OscConfig+0xb0>
 8003e84:	4b69      	ldr	r3, [pc, #420]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a68      	ldr	r2, [pc, #416]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e8e:	6013      	str	r3, [r2, #0]
 8003e90:	4b66      	ldr	r3, [pc, #408]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a65      	ldr	r2, [pc, #404]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003e96:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d013      	beq.n	8003ecc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea4:	f7ff f82c 	bl	8002f00 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003eac:	f7ff f828 	bl	8002f00 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b64      	cmp	r3, #100	@ 0x64
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e207      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ebe:	4b5b      	ldr	r3, [pc, #364]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0f0      	beq.n	8003eac <HAL_RCC_OscConfig+0xc0>
 8003eca:	e014      	b.n	8003ef6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ecc:	f7ff f818 	bl	8002f00 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ed4:	f7ff f814 	bl	8002f00 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b64      	cmp	r3, #100	@ 0x64
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e1f3      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ee6:	4b51      	ldr	r3, [pc, #324]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1f0      	bne.n	8003ed4 <HAL_RCC_OscConfig+0xe8>
 8003ef2:	e000      	b.n	8003ef6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d063      	beq.n	8003fca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f02:	4b4a      	ldr	r3, [pc, #296]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 030c 	and.w	r3, r3, #12
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00b      	beq.n	8003f26 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f0e:	4b47      	ldr	r3, [pc, #284]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f16:	2b08      	cmp	r3, #8
 8003f18:	d11c      	bne.n	8003f54 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f1a:	4b44      	ldr	r3, [pc, #272]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d116      	bne.n	8003f54 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f26:	4b41      	ldr	r3, [pc, #260]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d005      	beq.n	8003f3e <HAL_RCC_OscConfig+0x152>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d001      	beq.n	8003f3e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e1c7      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f3e:	4b3b      	ldr	r3, [pc, #236]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	4937      	ldr	r1, [pc, #220]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f52:	e03a      	b.n	8003fca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d020      	beq.n	8003f9e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f5c:	4b34      	ldr	r3, [pc, #208]	@ (8004030 <HAL_RCC_OscConfig+0x244>)
 8003f5e:	2201      	movs	r2, #1
 8003f60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f62:	f7fe ffcd 	bl	8002f00 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f6a:	f7fe ffc9 	bl	8002f00 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e1a8      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f7c:	4b2b      	ldr	r3, [pc, #172]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f88:	4b28      	ldr	r3, [pc, #160]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	4925      	ldr	r1, [pc, #148]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	600b      	str	r3, [r1, #0]
 8003f9c:	e015      	b.n	8003fca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f9e:	4b24      	ldr	r3, [pc, #144]	@ (8004030 <HAL_RCC_OscConfig+0x244>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa4:	f7fe ffac 	bl	8002f00 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fac:	f7fe ffa8 	bl	8002f00 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e187      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fbe:	4b1b      	ldr	r3, [pc, #108]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1f0      	bne.n	8003fac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0308 	and.w	r3, r3, #8
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d036      	beq.n	8004044 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d016      	beq.n	800400c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fde:	4b15      	ldr	r3, [pc, #84]	@ (8004034 <HAL_RCC_OscConfig+0x248>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe4:	f7fe ff8c 	bl	8002f00 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fec:	f7fe ff88 	bl	8002f00 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e167      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800402c <HAL_RCC_OscConfig+0x240>)
 8004000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0f0      	beq.n	8003fec <HAL_RCC_OscConfig+0x200>
 800400a:	e01b      	b.n	8004044 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800400c:	4b09      	ldr	r3, [pc, #36]	@ (8004034 <HAL_RCC_OscConfig+0x248>)
 800400e:	2200      	movs	r2, #0
 8004010:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004012:	f7fe ff75 	bl	8002f00 <HAL_GetTick>
 8004016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004018:	e00e      	b.n	8004038 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800401a:	f7fe ff71 	bl	8002f00 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d907      	bls.n	8004038 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e150      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
 800402c:	40023800 	.word	0x40023800
 8004030:	42470000 	.word	0x42470000
 8004034:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004038:	4b88      	ldr	r3, [pc, #544]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 800403a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1ea      	bne.n	800401a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	f000 8097 	beq.w	8004180 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004052:	2300      	movs	r3, #0
 8004054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004056:	4b81      	ldr	r3, [pc, #516]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10f      	bne.n	8004082 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	4b7d      	ldr	r3, [pc, #500]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406a:	4a7c      	ldr	r2, [pc, #496]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 800406c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004070:	6413      	str	r3, [r2, #64]	@ 0x40
 8004072:	4b7a      	ldr	r3, [pc, #488]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800407a:	60bb      	str	r3, [r7, #8]
 800407c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800407e:	2301      	movs	r3, #1
 8004080:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004082:	4b77      	ldr	r3, [pc, #476]	@ (8004260 <HAL_RCC_OscConfig+0x474>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800408a:	2b00      	cmp	r3, #0
 800408c:	d118      	bne.n	80040c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800408e:	4b74      	ldr	r3, [pc, #464]	@ (8004260 <HAL_RCC_OscConfig+0x474>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a73      	ldr	r2, [pc, #460]	@ (8004260 <HAL_RCC_OscConfig+0x474>)
 8004094:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800409a:	f7fe ff31 	bl	8002f00 <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a2:	f7fe ff2d 	bl	8002f00 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e10c      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b4:	4b6a      	ldr	r3, [pc, #424]	@ (8004260 <HAL_RCC_OscConfig+0x474>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0f0      	beq.n	80040a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d106      	bne.n	80040d6 <HAL_RCC_OscConfig+0x2ea>
 80040c8:	4b64      	ldr	r3, [pc, #400]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 80040ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040cc:	4a63      	ldr	r2, [pc, #396]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 80040ce:	f043 0301 	orr.w	r3, r3, #1
 80040d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040d4:	e01c      	b.n	8004110 <HAL_RCC_OscConfig+0x324>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	2b05      	cmp	r3, #5
 80040dc:	d10c      	bne.n	80040f8 <HAL_RCC_OscConfig+0x30c>
 80040de:	4b5f      	ldr	r3, [pc, #380]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 80040e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040e2:	4a5e      	ldr	r2, [pc, #376]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 80040e4:	f043 0304 	orr.w	r3, r3, #4
 80040e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80040ea:	4b5c      	ldr	r3, [pc, #368]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 80040ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ee:	4a5b      	ldr	r2, [pc, #364]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 80040f0:	f043 0301 	orr.w	r3, r3, #1
 80040f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80040f6:	e00b      	b.n	8004110 <HAL_RCC_OscConfig+0x324>
 80040f8:	4b58      	ldr	r3, [pc, #352]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 80040fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040fc:	4a57      	ldr	r2, [pc, #348]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 80040fe:	f023 0301 	bic.w	r3, r3, #1
 8004102:	6713      	str	r3, [r2, #112]	@ 0x70
 8004104:	4b55      	ldr	r3, [pc, #340]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 8004106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004108:	4a54      	ldr	r2, [pc, #336]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 800410a:	f023 0304 	bic.w	r3, r3, #4
 800410e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d015      	beq.n	8004144 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004118:	f7fe fef2 	bl	8002f00 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411e:	e00a      	b.n	8004136 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004120:	f7fe feee 	bl	8002f00 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412e:	4293      	cmp	r3, r2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e0cb      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004136:	4b49      	ldr	r3, [pc, #292]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 8004138:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0ee      	beq.n	8004120 <HAL_RCC_OscConfig+0x334>
 8004142:	e014      	b.n	800416e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004144:	f7fe fedc 	bl	8002f00 <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800414a:	e00a      	b.n	8004162 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800414c:	f7fe fed8 	bl	8002f00 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	f241 3288 	movw	r2, #5000	@ 0x1388
 800415a:	4293      	cmp	r3, r2
 800415c:	d901      	bls.n	8004162 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800415e:	2303      	movs	r3, #3
 8004160:	e0b5      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004162:	4b3e      	ldr	r3, [pc, #248]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 8004164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1ee      	bne.n	800414c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800416e:	7dfb      	ldrb	r3, [r7, #23]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d105      	bne.n	8004180 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004174:	4b39      	ldr	r3, [pc, #228]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 8004176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004178:	4a38      	ldr	r2, [pc, #224]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 800417a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800417e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	2b00      	cmp	r3, #0
 8004186:	f000 80a1 	beq.w	80042cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800418a:	4b34      	ldr	r3, [pc, #208]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 030c 	and.w	r3, r3, #12
 8004192:	2b08      	cmp	r3, #8
 8004194:	d05c      	beq.n	8004250 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d141      	bne.n	8004222 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800419e:	4b31      	ldr	r3, [pc, #196]	@ (8004264 <HAL_RCC_OscConfig+0x478>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a4:	f7fe feac 	bl	8002f00 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ac:	f7fe fea8 	bl	8002f00 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e087      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041be:	4b27      	ldr	r3, [pc, #156]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f0      	bne.n	80041ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	69da      	ldr	r2, [r3, #28]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d8:	019b      	lsls	r3, r3, #6
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e0:	085b      	lsrs	r3, r3, #1
 80041e2:	3b01      	subs	r3, #1
 80041e4:	041b      	lsls	r3, r3, #16
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ec:	061b      	lsls	r3, r3, #24
 80041ee:	491b      	ldr	r1, [pc, #108]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004264 <HAL_RCC_OscConfig+0x478>)
 80041f6:	2201      	movs	r2, #1
 80041f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fa:	f7fe fe81 	bl	8002f00 <HAL_GetTick>
 80041fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004200:	e008      	b.n	8004214 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004202:	f7fe fe7d 	bl	8002f00 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b02      	cmp	r3, #2
 800420e:	d901      	bls.n	8004214 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	e05c      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004214:	4b11      	ldr	r3, [pc, #68]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d0f0      	beq.n	8004202 <HAL_RCC_OscConfig+0x416>
 8004220:	e054      	b.n	80042cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004222:	4b10      	ldr	r3, [pc, #64]	@ (8004264 <HAL_RCC_OscConfig+0x478>)
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004228:	f7fe fe6a 	bl	8002f00 <HAL_GetTick>
 800422c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422e:	e008      	b.n	8004242 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004230:	f7fe fe66 	bl	8002f00 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d901      	bls.n	8004242 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e045      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004242:	4b06      	ldr	r3, [pc, #24]	@ (800425c <HAL_RCC_OscConfig+0x470>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1f0      	bne.n	8004230 <HAL_RCC_OscConfig+0x444>
 800424e:	e03d      	b.n	80042cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	2b01      	cmp	r3, #1
 8004256:	d107      	bne.n	8004268 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e038      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
 800425c:	40023800 	.word	0x40023800
 8004260:	40007000 	.word	0x40007000
 8004264:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004268:	4b1b      	ldr	r3, [pc, #108]	@ (80042d8 <HAL_RCC_OscConfig+0x4ec>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	699b      	ldr	r3, [r3, #24]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d028      	beq.n	80042c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004280:	429a      	cmp	r2, r3
 8004282:	d121      	bne.n	80042c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800428e:	429a      	cmp	r2, r3
 8004290:	d11a      	bne.n	80042c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004292:	68fa      	ldr	r2, [r7, #12]
 8004294:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004298:	4013      	ands	r3, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800429e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d111      	bne.n	80042c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ae:	085b      	lsrs	r3, r3, #1
 80042b0:	3b01      	subs	r3, #1
 80042b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d107      	bne.n	80042c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d001      	beq.n	80042cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e000      	b.n	80042ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40023800 	.word	0x40023800

080042dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d101      	bne.n	80042f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e0cc      	b.n	800448a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042f0:	4b68      	ldr	r3, [pc, #416]	@ (8004494 <HAL_RCC_ClockConfig+0x1b8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0307 	and.w	r3, r3, #7
 80042f8:	683a      	ldr	r2, [r7, #0]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d90c      	bls.n	8004318 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fe:	4b65      	ldr	r3, [pc, #404]	@ (8004494 <HAL_RCC_ClockConfig+0x1b8>)
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004306:	4b63      	ldr	r3, [pc, #396]	@ (8004494 <HAL_RCC_ClockConfig+0x1b8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	429a      	cmp	r2, r3
 8004312:	d001      	beq.n	8004318 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e0b8      	b.n	800448a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0302 	and.w	r3, r3, #2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d020      	beq.n	8004366 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0304 	and.w	r3, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	d005      	beq.n	800433c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004330:	4b59      	ldr	r3, [pc, #356]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	4a58      	ldr	r2, [pc, #352]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800433a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0308 	and.w	r3, r3, #8
 8004344:	2b00      	cmp	r3, #0
 8004346:	d005      	beq.n	8004354 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004348:	4b53      	ldr	r3, [pc, #332]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	4a52      	ldr	r2, [pc, #328]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004352:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004354:	4b50      	ldr	r3, [pc, #320]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	494d      	ldr	r1, [pc, #308]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	4313      	orrs	r3, r2
 8004364:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d044      	beq.n	80043fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d107      	bne.n	800438a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800437a:	4b47      	ldr	r3, [pc, #284]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d119      	bne.n	80043ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e07f      	b.n	800448a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	2b02      	cmp	r3, #2
 8004390:	d003      	beq.n	800439a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004396:	2b03      	cmp	r3, #3
 8004398:	d107      	bne.n	80043aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800439a:	4b3f      	ldr	r3, [pc, #252]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d109      	bne.n	80043ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e06f      	b.n	800448a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e067      	b.n	800448a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ba:	4b37      	ldr	r3, [pc, #220]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f023 0203 	bic.w	r2, r3, #3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	4934      	ldr	r1, [pc, #208]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043cc:	f7fe fd98 	bl	8002f00 <HAL_GetTick>
 80043d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043d2:	e00a      	b.n	80043ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d4:	f7fe fd94 	bl	8002f00 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d901      	bls.n	80043ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e04f      	b.n	800448a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ea:	4b2b      	ldr	r3, [pc, #172]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	f003 020c 	and.w	r2, r3, #12
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d1eb      	bne.n	80043d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043fc:	4b25      	ldr	r3, [pc, #148]	@ (8004494 <HAL_RCC_ClockConfig+0x1b8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	683a      	ldr	r2, [r7, #0]
 8004406:	429a      	cmp	r2, r3
 8004408:	d20c      	bcs.n	8004424 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800440a:	4b22      	ldr	r3, [pc, #136]	@ (8004494 <HAL_RCC_ClockConfig+0x1b8>)
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004412:	4b20      	ldr	r3, [pc, #128]	@ (8004494 <HAL_RCC_ClockConfig+0x1b8>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	429a      	cmp	r2, r3
 800441e:	d001      	beq.n	8004424 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e032      	b.n	800448a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d008      	beq.n	8004442 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004430:	4b19      	ldr	r3, [pc, #100]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	4916      	ldr	r1, [pc, #88]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	4313      	orrs	r3, r2
 8004440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d009      	beq.n	8004462 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800444e:	4b12      	ldr	r3, [pc, #72]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	490e      	ldr	r1, [pc, #56]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	4313      	orrs	r3, r2
 8004460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004462:	f000 f821 	bl	80044a8 <HAL_RCC_GetSysClockFreq>
 8004466:	4602      	mov	r2, r0
 8004468:	4b0b      	ldr	r3, [pc, #44]	@ (8004498 <HAL_RCC_ClockConfig+0x1bc>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	091b      	lsrs	r3, r3, #4
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	490a      	ldr	r1, [pc, #40]	@ (800449c <HAL_RCC_ClockConfig+0x1c0>)
 8004474:	5ccb      	ldrb	r3, [r1, r3]
 8004476:	fa22 f303 	lsr.w	r3, r2, r3
 800447a:	4a09      	ldr	r2, [pc, #36]	@ (80044a0 <HAL_RCC_ClockConfig+0x1c4>)
 800447c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800447e:	4b09      	ldr	r3, [pc, #36]	@ (80044a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f7fe f8fc 	bl	8002680 <HAL_InitTick>

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40023c00 	.word	0x40023c00
 8004498:	40023800 	.word	0x40023800
 800449c:	08010178 	.word	0x08010178
 80044a0:	20000004 	.word	0x20000004
 80044a4:	20000008 	.word	0x20000008

080044a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044ac:	b094      	sub	sp, #80	@ 0x50
 80044ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80044b4:	2300      	movs	r3, #0
 80044b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044b8:	2300      	movs	r3, #0
 80044ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044c0:	4b79      	ldr	r3, [pc, #484]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f003 030c 	and.w	r3, r3, #12
 80044c8:	2b08      	cmp	r3, #8
 80044ca:	d00d      	beq.n	80044e8 <HAL_RCC_GetSysClockFreq+0x40>
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	f200 80e1 	bhi.w	8004694 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <HAL_RCC_GetSysClockFreq+0x34>
 80044d6:	2b04      	cmp	r3, #4
 80044d8:	d003      	beq.n	80044e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80044da:	e0db      	b.n	8004694 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044dc:	4b73      	ldr	r3, [pc, #460]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x204>)
 80044de:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80044e0:	e0db      	b.n	800469a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044e2:	4b73      	ldr	r3, [pc, #460]	@ (80046b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80044e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80044e6:	e0d8      	b.n	800469a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044e8:	4b6f      	ldr	r3, [pc, #444]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044f2:	4b6d      	ldr	r3, [pc, #436]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d063      	beq.n	80045c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044fe:	4b6a      	ldr	r3, [pc, #424]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	099b      	lsrs	r3, r3, #6
 8004504:	2200      	movs	r2, #0
 8004506:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004508:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800450a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800450c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004510:	633b      	str	r3, [r7, #48]	@ 0x30
 8004512:	2300      	movs	r3, #0
 8004514:	637b      	str	r3, [r7, #52]	@ 0x34
 8004516:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800451a:	4622      	mov	r2, r4
 800451c:	462b      	mov	r3, r5
 800451e:	f04f 0000 	mov.w	r0, #0
 8004522:	f04f 0100 	mov.w	r1, #0
 8004526:	0159      	lsls	r1, r3, #5
 8004528:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800452c:	0150      	lsls	r0, r2, #5
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	4621      	mov	r1, r4
 8004534:	1a51      	subs	r1, r2, r1
 8004536:	6139      	str	r1, [r7, #16]
 8004538:	4629      	mov	r1, r5
 800453a:	eb63 0301 	sbc.w	r3, r3, r1
 800453e:	617b      	str	r3, [r7, #20]
 8004540:	f04f 0200 	mov.w	r2, #0
 8004544:	f04f 0300 	mov.w	r3, #0
 8004548:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800454c:	4659      	mov	r1, fp
 800454e:	018b      	lsls	r3, r1, #6
 8004550:	4651      	mov	r1, sl
 8004552:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004556:	4651      	mov	r1, sl
 8004558:	018a      	lsls	r2, r1, #6
 800455a:	4651      	mov	r1, sl
 800455c:	ebb2 0801 	subs.w	r8, r2, r1
 8004560:	4659      	mov	r1, fp
 8004562:	eb63 0901 	sbc.w	r9, r3, r1
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	f04f 0300 	mov.w	r3, #0
 800456e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004572:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004576:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800457a:	4690      	mov	r8, r2
 800457c:	4699      	mov	r9, r3
 800457e:	4623      	mov	r3, r4
 8004580:	eb18 0303 	adds.w	r3, r8, r3
 8004584:	60bb      	str	r3, [r7, #8]
 8004586:	462b      	mov	r3, r5
 8004588:	eb49 0303 	adc.w	r3, r9, r3
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800459a:	4629      	mov	r1, r5
 800459c:	024b      	lsls	r3, r1, #9
 800459e:	4621      	mov	r1, r4
 80045a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045a4:	4621      	mov	r1, r4
 80045a6:	024a      	lsls	r2, r1, #9
 80045a8:	4610      	mov	r0, r2
 80045aa:	4619      	mov	r1, r3
 80045ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045ae:	2200      	movs	r2, #0
 80045b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045b8:	f7fb fe7a 	bl	80002b0 <__aeabi_uldivmod>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4613      	mov	r3, r2
 80045c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045c4:	e058      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045c6:	4b38      	ldr	r3, [pc, #224]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	099b      	lsrs	r3, r3, #6
 80045cc:	2200      	movs	r2, #0
 80045ce:	4618      	mov	r0, r3
 80045d0:	4611      	mov	r1, r2
 80045d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045d6:	623b      	str	r3, [r7, #32]
 80045d8:	2300      	movs	r3, #0
 80045da:	627b      	str	r3, [r7, #36]	@ 0x24
 80045dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045e0:	4642      	mov	r2, r8
 80045e2:	464b      	mov	r3, r9
 80045e4:	f04f 0000 	mov.w	r0, #0
 80045e8:	f04f 0100 	mov.w	r1, #0
 80045ec:	0159      	lsls	r1, r3, #5
 80045ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045f2:	0150      	lsls	r0, r2, #5
 80045f4:	4602      	mov	r2, r0
 80045f6:	460b      	mov	r3, r1
 80045f8:	4641      	mov	r1, r8
 80045fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80045fe:	4649      	mov	r1, r9
 8004600:	eb63 0b01 	sbc.w	fp, r3, r1
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	f04f 0300 	mov.w	r3, #0
 800460c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004610:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004614:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004618:	ebb2 040a 	subs.w	r4, r2, sl
 800461c:	eb63 050b 	sbc.w	r5, r3, fp
 8004620:	f04f 0200 	mov.w	r2, #0
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	00eb      	lsls	r3, r5, #3
 800462a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800462e:	00e2      	lsls	r2, r4, #3
 8004630:	4614      	mov	r4, r2
 8004632:	461d      	mov	r5, r3
 8004634:	4643      	mov	r3, r8
 8004636:	18e3      	adds	r3, r4, r3
 8004638:	603b      	str	r3, [r7, #0]
 800463a:	464b      	mov	r3, r9
 800463c:	eb45 0303 	adc.w	r3, r5, r3
 8004640:	607b      	str	r3, [r7, #4]
 8004642:	f04f 0200 	mov.w	r2, #0
 8004646:	f04f 0300 	mov.w	r3, #0
 800464a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800464e:	4629      	mov	r1, r5
 8004650:	028b      	lsls	r3, r1, #10
 8004652:	4621      	mov	r1, r4
 8004654:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004658:	4621      	mov	r1, r4
 800465a:	028a      	lsls	r2, r1, #10
 800465c:	4610      	mov	r0, r2
 800465e:	4619      	mov	r1, r3
 8004660:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004662:	2200      	movs	r2, #0
 8004664:	61bb      	str	r3, [r7, #24]
 8004666:	61fa      	str	r2, [r7, #28]
 8004668:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800466c:	f7fb fe20 	bl	80002b0 <__aeabi_uldivmod>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	4613      	mov	r3, r2
 8004676:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004678:	4b0b      	ldr	r3, [pc, #44]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	0c1b      	lsrs	r3, r3, #16
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	3301      	adds	r3, #1
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004688:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800468a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800468c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004690:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004692:	e002      	b.n	800469a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004694:	4b05      	ldr	r3, [pc, #20]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x204>)
 8004696:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800469a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800469c:	4618      	mov	r0, r3
 800469e:	3750      	adds	r7, #80	@ 0x50
 80046a0:	46bd      	mov	sp, r7
 80046a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046a6:	bf00      	nop
 80046a8:	40023800 	.word	0x40023800
 80046ac:	00f42400 	.word	0x00f42400
 80046b0:	007a1200 	.word	0x007a1200

080046b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046b8:	4b03      	ldr	r3, [pc, #12]	@ (80046c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046ba:	681b      	ldr	r3, [r3, #0]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	20000004 	.word	0x20000004

080046cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046d0:	f7ff fff0 	bl	80046b4 <HAL_RCC_GetHCLKFreq>
 80046d4:	4602      	mov	r2, r0
 80046d6:	4b05      	ldr	r3, [pc, #20]	@ (80046ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	0a9b      	lsrs	r3, r3, #10
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	4903      	ldr	r1, [pc, #12]	@ (80046f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046e2:	5ccb      	ldrb	r3, [r1, r3]
 80046e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40023800 	.word	0x40023800
 80046f0:	08010188 	.word	0x08010188

080046f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046f8:	f7ff ffdc 	bl	80046b4 <HAL_RCC_GetHCLKFreq>
 80046fc:	4602      	mov	r2, r0
 80046fe:	4b05      	ldr	r3, [pc, #20]	@ (8004714 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	0b5b      	lsrs	r3, r3, #13
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	4903      	ldr	r1, [pc, #12]	@ (8004718 <HAL_RCC_GetPCLK2Freq+0x24>)
 800470a:	5ccb      	ldrb	r3, [r1, r3]
 800470c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004710:	4618      	mov	r0, r3
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40023800 	.word	0x40023800
 8004718:	08010188 	.word	0x08010188

0800471c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	220f      	movs	r2, #15
 800472a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800472c:	4b12      	ldr	r3, [pc, #72]	@ (8004778 <HAL_RCC_GetClockConfig+0x5c>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f003 0203 	and.w	r2, r3, #3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004738:	4b0f      	ldr	r3, [pc, #60]	@ (8004778 <HAL_RCC_GetClockConfig+0x5c>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004744:	4b0c      	ldr	r3, [pc, #48]	@ (8004778 <HAL_RCC_GetClockConfig+0x5c>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004750:	4b09      	ldr	r3, [pc, #36]	@ (8004778 <HAL_RCC_GetClockConfig+0x5c>)
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	08db      	lsrs	r3, r3, #3
 8004756:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800475e:	4b07      	ldr	r3, [pc, #28]	@ (800477c <HAL_RCC_GetClockConfig+0x60>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0207 	and.w	r2, r3, #7
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	601a      	str	r2, [r3, #0]
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40023800 	.word	0x40023800
 800477c:	40023c00 	.word	0x40023c00

08004780 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d105      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d035      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047a8:	4b67      	ldr	r3, [pc, #412]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047ae:	f7fe fba7 	bl	8002f00 <HAL_GetTick>
 80047b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047b4:	e008      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047b6:	f7fe fba3 	bl	8002f00 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e0ba      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047c8:	4b60      	ldr	r3, [pc, #384]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1f0      	bne.n	80047b6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	019a      	lsls	r2, r3, #6
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	071b      	lsls	r3, r3, #28
 80047e0:	495a      	ldr	r1, [pc, #360]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047e8:	4b57      	ldr	r3, [pc, #348]	@ (8004948 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80047ea:	2201      	movs	r2, #1
 80047ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047ee:	f7fe fb87 	bl	8002f00 <HAL_GetTick>
 80047f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047f4:	e008      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047f6:	f7fe fb83 	bl	8002f00 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d901      	bls.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	e09a      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004808:	4b50      	ldr	r3, [pc, #320]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0f0      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	f000 8083 	beq.w	8004928 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004822:	2300      	movs	r3, #0
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	4b49      	ldr	r3, [pc, #292]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482a:	4a48      	ldr	r2, [pc, #288]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800482c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004830:	6413      	str	r3, [r2, #64]	@ 0x40
 8004832:	4b46      	ldr	r3, [pc, #280]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800483a:	60fb      	str	r3, [r7, #12]
 800483c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800483e:	4b44      	ldr	r3, [pc, #272]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a43      	ldr	r2, [pc, #268]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004848:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800484a:	f7fe fb59 	bl	8002f00 <HAL_GetTick>
 800484e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004850:	e008      	b.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004852:	f7fe fb55 	bl	8002f00 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e06c      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004864:	4b3a      	ldr	r3, [pc, #232]	@ (8004950 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f0      	beq.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004870:	4b36      	ldr	r3, [pc, #216]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004874:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004878:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d02f      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	429a      	cmp	r2, r3
 800488c:	d028      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800488e:	4b2f      	ldr	r3, [pc, #188]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004890:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004892:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004896:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004898:	4b2e      	ldr	r3, [pc, #184]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800489a:	2201      	movs	r2, #1
 800489c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800489e:	4b2d      	ldr	r3, [pc, #180]	@ (8004954 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80048a4:	4a29      	ldr	r2, [pc, #164]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048aa:	4b28      	ldr	r3, [pc, #160]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80048ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ae:	f003 0301 	and.w	r3, r3, #1
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d114      	bne.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80048b6:	f7fe fb23 	bl	8002f00 <HAL_GetTick>
 80048ba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048bc:	e00a      	b.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048be:	f7fe fb1f 	bl	8002f00 <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d901      	bls.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e034      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048d4:	4b1d      	ldr	r3, [pc, #116]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80048d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d0ee      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048ec:	d10d      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80048ee:	4b17      	ldr	r3, [pc, #92]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80048fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004902:	4912      	ldr	r1, [pc, #72]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004904:	4313      	orrs	r3, r2
 8004906:	608b      	str	r3, [r1, #8]
 8004908:	e005      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800490a:	4b10      	ldr	r3, [pc, #64]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	4a0f      	ldr	r2, [pc, #60]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004910:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004914:	6093      	str	r3, [r2, #8]
 8004916:	4b0d      	ldr	r3, [pc, #52]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004918:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004922:	490a      	ldr	r1, [pc, #40]	@ (800494c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004924:	4313      	orrs	r3, r2
 8004926:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	7c1a      	ldrb	r2, [r3, #16]
 8004938:	4b07      	ldr	r3, [pc, #28]	@ (8004958 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800493a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	42470068 	.word	0x42470068
 800494c:	40023800 	.word	0x40023800
 8004950:	40007000 	.word	0x40007000
 8004954:	42470e40 	.word	0x42470e40
 8004958:	424711e0 	.word	0x424711e0

0800495c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d101      	bne.n	8004972 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e073      	b.n	8004a5a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	7f5b      	ldrb	r3, [r3, #29]
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d105      	bne.n	8004988 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fd fdc0 	bl	8002508 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f003 0310 	and.w	r3, r3, #16
 8004998:	2b10      	cmp	r3, #16
 800499a:	d055      	beq.n	8004a48 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	22ca      	movs	r2, #202	@ 0xca
 80049a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2253      	movs	r2, #83	@ 0x53
 80049aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 fa49 	bl	8004e44 <RTC_EnterInitMode>
 80049b2:	4603      	mov	r3, r0
 80049b4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d12c      	bne.n	8004a16 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6812      	ldr	r2, [r2, #0]
 80049c6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80049ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049ce:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6899      	ldr	r1, [r3, #8]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685a      	ldr	r2, [r3, #4]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	68d2      	ldr	r2, [r2, #12]
 80049f6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6919      	ldr	r1, [r3, #16]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	041a      	lsls	r2, r3, #16
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 fa50 	bl	8004eb2 <RTC_ExitInitMode>
 8004a12:	4603      	mov	r3, r0
 8004a14:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004a16:	7bfb      	ldrb	r3, [r7, #15]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d110      	bne.n	8004a3e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a2a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699a      	ldr	r2, [r3, #24]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	22ff      	movs	r2, #255	@ 0xff
 8004a44:	625a      	str	r2, [r3, #36]	@ 0x24
 8004a46:	e001      	b.n	8004a4c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d102      	bne.n	8004a58 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004a62:	b590      	push	{r4, r7, lr}
 8004a64:	b087      	sub	sp, #28
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	7f1b      	ldrb	r3, [r3, #28]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d101      	bne.n	8004a7e <HAL_RTC_SetTime+0x1c>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e087      	b.n	8004b8e <HAL_RTC_SetTime+0x12c>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2201      	movs	r2, #1
 8004a82:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2202      	movs	r2, #2
 8004a88:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d126      	bne.n	8004ade <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d102      	bne.n	8004aa4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 fa27 	bl	8004efc <RTC_ByteToBcd2>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	785b      	ldrb	r3, [r3, #1]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fa20 	bl	8004efc <RTC_ByteToBcd2>
 8004abc:	4603      	mov	r3, r0
 8004abe:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004ac0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	789b      	ldrb	r3, [r3, #2]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 fa18 	bl	8004efc <RTC_ByteToBcd2>
 8004acc:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004ace:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	78db      	ldrb	r3, [r3, #3]
 8004ad6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	e018      	b.n	8004b10 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d102      	bne.n	8004af2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2200      	movs	r2, #0
 8004af0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	785b      	ldrb	r3, [r3, #1]
 8004afc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004afe:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004b04:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	78db      	ldrb	r3, [r3, #3]
 8004b0a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	22ca      	movs	r2, #202	@ 0xca
 8004b16:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2253      	movs	r2, #83	@ 0x53
 8004b1e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 f98f 	bl	8004e44 <RTC_EnterInitMode>
 8004b26:	4603      	mov	r3, r0
 8004b28:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004b2a:	7cfb      	ldrb	r3, [r7, #19]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d120      	bne.n	8004b72 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004b3a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004b3e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004b4e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6899      	ldr	r1, [r3, #8]
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 f9a2 	bl	8004eb2 <RTC_ExitInitMode>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004b72:	7cfb      	ldrb	r3, [r7, #19]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d102      	bne.n	8004b7e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	22ff      	movs	r2, #255	@ 0xff
 8004b84:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	771a      	strb	r2, [r3, #28]

  return status;
 8004b8c:	7cfb      	ldrb	r3, [r7, #19]
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	371c      	adds	r7, #28
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd90      	pop	{r4, r7, pc}

08004b96 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b086      	sub	sp, #24
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	60f8      	str	r0, [r7, #12]
 8004b9e:	60b9      	str	r1, [r7, #8]
 8004ba0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004bc8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004bcc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	0c1b      	lsrs	r3, r3, #16
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	0a1b      	lsrs	r3, r3, #8
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004be8:	b2da      	uxtb	r2, r3
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	0d9b      	lsrs	r3, r3, #22
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d11a      	bne.n	8004c48 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 f98e 	bl	8004f38 <RTC_Bcd2ToByte>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	461a      	mov	r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	785b      	ldrb	r3, [r3, #1]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f000 f985 	bl	8004f38 <RTC_Bcd2ToByte>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	461a      	mov	r2, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	789b      	ldrb	r3, [r3, #2]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 f97c 	bl	8004f38 <RTC_Bcd2ToByte>
 8004c40:	4603      	mov	r3, r0
 8004c42:	461a      	mov	r2, r3
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004c52:	b590      	push	{r4, r7, lr}
 8004c54:	b087      	sub	sp, #28
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	7f1b      	ldrb	r3, [r3, #28]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d101      	bne.n	8004c6e <HAL_RTC_SetDate+0x1c>
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	e071      	b.n	8004d52 <HAL_RTC_SetDate+0x100>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2201      	movs	r2, #1
 8004c72:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2202      	movs	r2, #2
 8004c78:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10e      	bne.n	8004c9e <HAL_RTC_SetDate+0x4c>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	785b      	ldrb	r3, [r3, #1]
 8004c84:	f003 0310 	and.w	r3, r3, #16
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d008      	beq.n	8004c9e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	785b      	ldrb	r3, [r3, #1]
 8004c90:	f023 0310 	bic.w	r3, r3, #16
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	330a      	adds	r3, #10
 8004c98:	b2da      	uxtb	r2, r3
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d11c      	bne.n	8004cde <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	78db      	ldrb	r3, [r3, #3]
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 f927 	bl	8004efc <RTC_ByteToBcd2>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	785b      	ldrb	r3, [r3, #1]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 f920 	bl	8004efc <RTC_ByteToBcd2>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004cc0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	789b      	ldrb	r3, [r3, #2]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 f918 	bl	8004efc <RTC_ByteToBcd2>
 8004ccc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004cce:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	e00e      	b.n	8004cfc <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	78db      	ldrb	r3, [r3, #3]
 8004ce2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	785b      	ldrb	r3, [r3, #1]
 8004ce8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004cea:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004cec:	68ba      	ldr	r2, [r7, #8]
 8004cee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004cf0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	22ca      	movs	r2, #202	@ 0xca
 8004d02:	625a      	str	r2, [r3, #36]	@ 0x24
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	2253      	movs	r2, #83	@ 0x53
 8004d0a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 f899 	bl	8004e44 <RTC_EnterInitMode>
 8004d12:	4603      	mov	r3, r0
 8004d14:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004d16:	7cfb      	ldrb	r3, [r7, #19]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10c      	bne.n	8004d36 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004d26:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004d2a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004d2c:	68f8      	ldr	r0, [r7, #12]
 8004d2e:	f000 f8c0 	bl	8004eb2 <RTC_ExitInitMode>
 8004d32:	4603      	mov	r3, r0
 8004d34:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004d36:	7cfb      	ldrb	r3, [r7, #19]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d102      	bne.n	8004d42 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	22ff      	movs	r2, #255	@ 0xff
 8004d48:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	771a      	strb	r2, [r3, #28]

  return status;
 8004d50:	7cfb      	ldrb	r3, [r7, #19]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd90      	pop	{r4, r7, pc}

08004d5a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b086      	sub	sp, #24
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004d74:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004d78:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	0c1b      	lsrs	r3, r3, #16
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	0a1b      	lsrs	r3, r3, #8
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	f003 031f 	and.w	r3, r3, #31
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	0b5b      	lsrs	r3, r3, #13
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d11a      	bne.n	8004dee <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	78db      	ldrb	r3, [r3, #3]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 f8bb 	bl	8004f38 <RTC_Bcd2ToByte>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	785b      	ldrb	r3, [r3, #1]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 f8b2 	bl	8004f38 <RTC_Bcd2ToByte>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	789b      	ldrb	r3, [r3, #2]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 f8a9 	bl	8004f38 <RTC_Bcd2ToByte>
 8004de6:	4603      	mov	r3, r0
 8004de8:	461a      	mov	r2, r3
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e00:	2300      	movs	r3, #0
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a0d      	ldr	r2, [pc, #52]	@ (8004e40 <HAL_RTC_WaitForSynchro+0x48>)
 8004e0a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e0c:	f7fe f878 	bl	8002f00 <HAL_GetTick>
 8004e10:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004e12:	e009      	b.n	8004e28 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e14:	f7fe f874 	bl	8002f00 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e22:	d901      	bls.n	8004e28 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e007      	b.n	8004e38 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0ee      	beq.n	8004e14 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	00013f5f 	.word	0x00013f5f

08004e44 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004e50:	2300      	movs	r3, #0
 8004e52:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d122      	bne.n	8004ea8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e70:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e72:	f7fe f845 	bl	8002f00 <HAL_GetTick>
 8004e76:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004e78:	e00c      	b.n	8004e94 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e7a:	f7fe f841 	bl	8002f00 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e88:	d904      	bls.n	8004e94 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2204      	movs	r2, #4
 8004e8e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d102      	bne.n	8004ea8 <RTC_EnterInitMode+0x64>
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d1e8      	bne.n	8004e7a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b084      	sub	sp, #16
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68da      	ldr	r2, [r3, #12]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ecc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f003 0320 	and.w	r3, r3, #32
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10a      	bne.n	8004ef2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f7ff ff8b 	bl	8004df8 <HAL_RTC_WaitForSynchro>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d004      	beq.n	8004ef2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2204      	movs	r2, #4
 8004eec:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b085      	sub	sp, #20
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	4603      	mov	r3, r0
 8004f04:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004f06:	2300      	movs	r3, #0
 8004f08:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004f0a:	e005      	b.n	8004f18 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004f12:	79fb      	ldrb	r3, [r7, #7]
 8004f14:	3b0a      	subs	r3, #10
 8004f16:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	2b09      	cmp	r3, #9
 8004f1c:	d8f6      	bhi.n	8004f0c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	b2db      	uxtb	r3, r3
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	4603      	mov	r3, r0
 8004f40:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004f46:	79fb      	ldrb	r3, [r7, #7]
 8004f48:	091b      	lsrs	r3, r3, #4
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	4613      	mov	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	79fb      	ldrb	r3, [r7, #7]
 8004f5e:	f003 030f 	and.w	r3, r3, #15
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	4413      	add	r3, r2
 8004f66:	b2db      	uxtb	r3, r3
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3714      	adds	r7, #20
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d101      	bne.n	8004f86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e07b      	b.n	800507e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d108      	bne.n	8004fa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f96:	d009      	beq.n	8004fac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	61da      	str	r2, [r3, #28]
 8004f9e:	e005      	b.n	8004fac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d106      	bne.n	8004fcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f7fd faca 	bl	8002560 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2202      	movs	r2, #2
 8004fd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fe2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ff4:	431a      	orrs	r2, r3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ffe:	431a      	orrs	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	f003 0302 	and.w	r3, r3, #2
 8005008:	431a      	orrs	r2, r3
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	695b      	ldr	r3, [r3, #20]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800501c:	431a      	orrs	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005030:	ea42 0103 	orr.w	r1, r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005038:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	0c1b      	lsrs	r3, r3, #16
 800504a:	f003 0104 	and.w	r1, r3, #4
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005052:	f003 0210 	and.w	r2, r3, #16
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	69da      	ldr	r2, [r3, #28]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800506c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b088      	sub	sp, #32
 800508a:	af00      	add	r7, sp, #0
 800508c:	60f8      	str	r0, [r7, #12]
 800508e:	60b9      	str	r1, [r7, #8]
 8005090:	603b      	str	r3, [r7, #0]
 8005092:	4613      	mov	r3, r2
 8005094:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005096:	2300      	movs	r3, #0
 8005098:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d101      	bne.n	80050a8 <HAL_SPI_Transmit+0x22>
 80050a4:	2302      	movs	r3, #2
 80050a6:	e12d      	b.n	8005304 <HAL_SPI_Transmit+0x27e>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050b0:	f7fd ff26 	bl	8002f00 <HAL_GetTick>
 80050b4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80050b6:	88fb      	ldrh	r3, [r7, #6]
 80050b8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d002      	beq.n	80050cc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80050c6:	2302      	movs	r3, #2
 80050c8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050ca:	e116      	b.n	80052fa <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <HAL_SPI_Transmit+0x52>
 80050d2:	88fb      	ldrh	r3, [r7, #6]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d102      	bne.n	80050de <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050dc:	e10d      	b.n	80052fa <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2203      	movs	r2, #3
 80050e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	88fa      	ldrh	r2, [r7, #6]
 80050f6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	88fa      	ldrh	r2, [r7, #6]
 80050fc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2200      	movs	r2, #0
 8005108:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2200      	movs	r2, #0
 800511a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005124:	d10f      	bne.n	8005146 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005134:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005144:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005150:	2b40      	cmp	r3, #64	@ 0x40
 8005152:	d007      	beq.n	8005164 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005162:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800516c:	d14f      	bne.n	800520e <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <HAL_SPI_Transmit+0xf6>
 8005176:	8afb      	ldrh	r3, [r7, #22]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d142      	bne.n	8005202 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005180:	881a      	ldrh	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518c:	1c9a      	adds	r2, r3, #2
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005196:	b29b      	uxth	r3, r3
 8005198:	3b01      	subs	r3, #1
 800519a:	b29a      	uxth	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80051a0:	e02f      	b.n	8005202 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d112      	bne.n	80051d6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051b4:	881a      	ldrh	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051c0:	1c9a      	adds	r2, r3, #2
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80051d4:	e015      	b.n	8005202 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051d6:	f7fd fe93 	bl	8002f00 <HAL_GetTick>
 80051da:	4602      	mov	r2, r0
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	683a      	ldr	r2, [r7, #0]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d803      	bhi.n	80051ee <HAL_SPI_Transmit+0x168>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ec:	d102      	bne.n	80051f4 <HAL_SPI_Transmit+0x16e>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d106      	bne.n	8005202 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005200:	e07b      	b.n	80052fa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005206:	b29b      	uxth	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d1ca      	bne.n	80051a2 <HAL_SPI_Transmit+0x11c>
 800520c:	e050      	b.n	80052b0 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d002      	beq.n	800521c <HAL_SPI_Transmit+0x196>
 8005216:	8afb      	ldrh	r3, [r7, #22]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d144      	bne.n	80052a6 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	330c      	adds	r3, #12
 8005226:	7812      	ldrb	r2, [r2, #0]
 8005228:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005238:	b29b      	uxth	r3, r3
 800523a:	3b01      	subs	r3, #1
 800523c:	b29a      	uxth	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005242:	e030      	b.n	80052a6 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 0302 	and.w	r3, r3, #2
 800524e:	2b02      	cmp	r3, #2
 8005250:	d113      	bne.n	800527a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	330c      	adds	r3, #12
 800525c:	7812      	ldrb	r2, [r2, #0]
 800525e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005278:	e015      	b.n	80052a6 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800527a:	f7fd fe41 	bl	8002f00 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d803      	bhi.n	8005292 <HAL_SPI_Transmit+0x20c>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005290:	d102      	bne.n	8005298 <HAL_SPI_Transmit+0x212>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d106      	bne.n	80052a6 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80052a4:	e029      	b.n	80052fa <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1c9      	bne.n	8005244 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052b0:	69ba      	ldr	r2, [r7, #24]
 80052b2:	6839      	ldr	r1, [r7, #0]
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	f000 fa61 	bl	800577c <SPI_EndRxTxTransaction>
 80052ba:	4603      	mov	r3, r0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2220      	movs	r2, #32
 80052c4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10a      	bne.n	80052e4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052ce:	2300      	movs	r3, #0
 80052d0:	613b      	str	r3, [r7, #16]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	613b      	str	r3, [r7, #16]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	613b      	str	r3, [r7, #16]
 80052e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	77fb      	strb	r3, [r7, #31]
 80052f0:	e003      	b.n	80052fa <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005302:	7ffb      	ldrb	r3, [r7, #31]
}
 8005304:	4618      	mov	r0, r3
 8005306:	3720      	adds	r7, #32
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08c      	sub	sp, #48	@ 0x30
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
 8005318:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800531a:	2301      	movs	r3, #1
 800531c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800531e:	2300      	movs	r3, #0
 8005320:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_SPI_TransmitReceive+0x26>
 800532e:	2302      	movs	r3, #2
 8005330:	e198      	b.n	8005664 <HAL_SPI_TransmitReceive+0x358>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2201      	movs	r2, #1
 8005336:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800533a:	f7fd fde1 	bl	8002f00 <HAL_GetTick>
 800533e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005350:	887b      	ldrh	r3, [r7, #2]
 8005352:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005354:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005358:	2b01      	cmp	r3, #1
 800535a:	d00f      	beq.n	800537c <HAL_SPI_TransmitReceive+0x70>
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005362:	d107      	bne.n	8005374 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d103      	bne.n	8005374 <HAL_SPI_TransmitReceive+0x68>
 800536c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005370:	2b04      	cmp	r3, #4
 8005372:	d003      	beq.n	800537c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005374:	2302      	movs	r3, #2
 8005376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800537a:	e16d      	b.n	8005658 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d005      	beq.n	800538e <HAL_SPI_TransmitReceive+0x82>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d002      	beq.n	800538e <HAL_SPI_TransmitReceive+0x82>
 8005388:	887b      	ldrh	r3, [r7, #2]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d103      	bne.n	8005396 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005394:	e160      	b.n	8005658 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d003      	beq.n	80053aa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2205      	movs	r2, #5
 80053a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	887a      	ldrh	r2, [r7, #2]
 80053ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	887a      	ldrh	r2, [r7, #2]
 80053c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	887a      	ldrh	r2, [r7, #2]
 80053cc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	887a      	ldrh	r2, [r7, #2]
 80053d2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ea:	2b40      	cmp	r3, #64	@ 0x40
 80053ec:	d007      	beq.n	80053fe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005406:	d17c      	bne.n	8005502 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d002      	beq.n	8005416 <HAL_SPI_TransmitReceive+0x10a>
 8005410:	8b7b      	ldrh	r3, [r7, #26]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d16a      	bne.n	80054ec <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800541a:	881a      	ldrh	r2, [r3, #0]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005426:	1c9a      	adds	r2, r3, #2
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005430:	b29b      	uxth	r3, r3
 8005432:	3b01      	subs	r3, #1
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800543a:	e057      	b.n	80054ec <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b02      	cmp	r3, #2
 8005448:	d11b      	bne.n	8005482 <HAL_SPI_TransmitReceive+0x176>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d016      	beq.n	8005482 <HAL_SPI_TransmitReceive+0x176>
 8005454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005456:	2b01      	cmp	r3, #1
 8005458:	d113      	bne.n	8005482 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545e:	881a      	ldrh	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800546a:	1c9a      	adds	r2, r3, #2
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005474:	b29b      	uxth	r3, r3
 8005476:	3b01      	subs	r3, #1
 8005478:	b29a      	uxth	r2, r3
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800547e:	2300      	movs	r3, #0
 8005480:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b01      	cmp	r3, #1
 800548e:	d119      	bne.n	80054c4 <HAL_SPI_TransmitReceive+0x1b8>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005494:	b29b      	uxth	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d014      	beq.n	80054c4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68da      	ldr	r2, [r3, #12]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a4:	b292      	uxth	r2, r2
 80054a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ac:	1c9a      	adds	r2, r3, #2
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	3b01      	subs	r3, #1
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054c0:	2301      	movs	r3, #1
 80054c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054c4:	f7fd fd1c 	bl	8002f00 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d80b      	bhi.n	80054ec <HAL_SPI_TransmitReceive+0x1e0>
 80054d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054da:	d007      	beq.n	80054ec <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80054ea:	e0b5      	b.n	8005658 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1a2      	bne.n	800543c <HAL_SPI_TransmitReceive+0x130>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d19d      	bne.n	800543c <HAL_SPI_TransmitReceive+0x130>
 8005500:	e080      	b.n	8005604 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <HAL_SPI_TransmitReceive+0x204>
 800550a:	8b7b      	ldrh	r3, [r7, #26]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d16f      	bne.n	80055f0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	7812      	ldrb	r2, [r2, #0]
 800551c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005522:	1c5a      	adds	r2, r3, #1
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800552c:	b29b      	uxth	r3, r3
 800552e:	3b01      	subs	r3, #1
 8005530:	b29a      	uxth	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005536:	e05b      	b.n	80055f0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f003 0302 	and.w	r3, r3, #2
 8005542:	2b02      	cmp	r3, #2
 8005544:	d11c      	bne.n	8005580 <HAL_SPI_TransmitReceive+0x274>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800554a:	b29b      	uxth	r3, r3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d017      	beq.n	8005580 <HAL_SPI_TransmitReceive+0x274>
 8005550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005552:	2b01      	cmp	r3, #1
 8005554:	d114      	bne.n	8005580 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	330c      	adds	r3, #12
 8005560:	7812      	ldrb	r2, [r2, #0]
 8005562:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005568:	1c5a      	adds	r2, r3, #1
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005572:	b29b      	uxth	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f003 0301 	and.w	r3, r3, #1
 800558a:	2b01      	cmp	r3, #1
 800558c:	d119      	bne.n	80055c2 <HAL_SPI_TransmitReceive+0x2b6>
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005592:	b29b      	uxth	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d014      	beq.n	80055c2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68da      	ldr	r2, [r3, #12]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	3b01      	subs	r3, #1
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80055be:	2301      	movs	r3, #1
 80055c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80055c2:	f7fd fc9d 	bl	8002f00 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d803      	bhi.n	80055da <HAL_SPI_TransmitReceive+0x2ce>
 80055d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d8:	d102      	bne.n	80055e0 <HAL_SPI_TransmitReceive+0x2d4>
 80055da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d107      	bne.n	80055f0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80055ee:	e033      	b.n	8005658 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d19e      	bne.n	8005538 <HAL_SPI_TransmitReceive+0x22c>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055fe:	b29b      	uxth	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	d199      	bne.n	8005538 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005606:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 f8b7 	bl	800577c <SPI_EndRxTxTransaction>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d006      	beq.n	8005622 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2220      	movs	r2, #32
 800561e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005620:	e01a      	b.n	8005658 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10a      	bne.n	8005640 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800562a:	2300      	movs	r3, #0
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800564e:	e003      	b.n	8005658 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005660:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005664:	4618      	mov	r0, r3
 8005666:	3730      	adds	r7, #48	@ 0x30
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b088      	sub	sp, #32
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	603b      	str	r3, [r7, #0]
 8005678:	4613      	mov	r3, r2
 800567a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800567c:	f7fd fc40 	bl	8002f00 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005684:	1a9b      	subs	r3, r3, r2
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	4413      	add	r3, r2
 800568a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800568c:	f7fd fc38 	bl	8002f00 <HAL_GetTick>
 8005690:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005692:	4b39      	ldr	r3, [pc, #228]	@ (8005778 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	015b      	lsls	r3, r3, #5
 8005698:	0d1b      	lsrs	r3, r3, #20
 800569a:	69fa      	ldr	r2, [r7, #28]
 800569c:	fb02 f303 	mul.w	r3, r2, r3
 80056a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056a2:	e054      	b.n	800574e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056aa:	d050      	beq.n	800574e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056ac:	f7fd fc28 	bl	8002f00 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	69fa      	ldr	r2, [r7, #28]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d902      	bls.n	80056c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d13d      	bne.n	800573e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80056d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056da:	d111      	bne.n	8005700 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056e4:	d004      	beq.n	80056f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056ee:	d107      	bne.n	8005700 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005704:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005708:	d10f      	bne.n	800572a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005728:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e017      	b.n	800576e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005744:	2300      	movs	r3, #0
 8005746:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	3b01      	subs	r3, #1
 800574c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689a      	ldr	r2, [r3, #8]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4013      	ands	r3, r2
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	429a      	cmp	r2, r3
 800575c:	bf0c      	ite	eq
 800575e:	2301      	moveq	r3, #1
 8005760:	2300      	movne	r3, #0
 8005762:	b2db      	uxtb	r3, r3
 8005764:	461a      	mov	r2, r3
 8005766:	79fb      	ldrb	r3, [r7, #7]
 8005768:	429a      	cmp	r2, r3
 800576a:	d19b      	bne.n	80056a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3720      	adds	r7, #32
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20000004 	.word	0x20000004

0800577c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af02      	add	r7, sp, #8
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2201      	movs	r2, #1
 8005790:	2102      	movs	r1, #2
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f7ff ff6a 	bl	800566c <SPI_WaitFlagStateUntilTimeout>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d007      	beq.n	80057ae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a2:	f043 0220 	orr.w	r2, r3, #32
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e032      	b.n	8005814 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057ae:	4b1b      	ldr	r3, [pc, #108]	@ (800581c <SPI_EndRxTxTransaction+0xa0>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a1b      	ldr	r2, [pc, #108]	@ (8005820 <SPI_EndRxTxTransaction+0xa4>)
 80057b4:	fba2 2303 	umull	r2, r3, r2, r3
 80057b8:	0d5b      	lsrs	r3, r3, #21
 80057ba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80057be:	fb02 f303 	mul.w	r3, r2, r3
 80057c2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057cc:	d112      	bne.n	80057f4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2200      	movs	r2, #0
 80057d6:	2180      	movs	r1, #128	@ 0x80
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f7ff ff47 	bl	800566c <SPI_WaitFlagStateUntilTimeout>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d016      	beq.n	8005812 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057e8:	f043 0220 	orr.w	r2, r3, #32
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e00f      	b.n	8005814 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800580a:	2b80      	cmp	r3, #128	@ 0x80
 800580c:	d0f2      	beq.n	80057f4 <SPI_EndRxTxTransaction+0x78>
 800580e:	e000      	b.n	8005812 <SPI_EndRxTxTransaction+0x96>
        break;
 8005810:	bf00      	nop
  }

  return HAL_OK;
 8005812:	2300      	movs	r3, #0
}
 8005814:	4618      	mov	r0, r3
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}
 800581c:	20000004 	.word	0x20000004
 8005820:	165e9f81 	.word	0x165e9f81

08005824 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d101      	bne.n	8005836 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e041      	b.n	80058ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d106      	bne.n	8005850 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f839 	bl	80058c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3304      	adds	r3, #4
 8005860:	4619      	mov	r1, r3
 8005862:	4610      	mov	r0, r2
 8005864:	f000 f9b2 	bl	8005bcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2201      	movs	r2, #1
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
	...

080058d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058d8:	b480      	push	{r7}
 80058da:	b085      	sub	sp, #20
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d001      	beq.n	80058f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e044      	b.n	800597a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68da      	ldr	r2, [r3, #12]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0201 	orr.w	r2, r2, #1
 8005906:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a1e      	ldr	r2, [pc, #120]	@ (8005988 <HAL_TIM_Base_Start_IT+0xb0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d018      	beq.n	8005944 <HAL_TIM_Base_Start_IT+0x6c>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800591a:	d013      	beq.n	8005944 <HAL_TIM_Base_Start_IT+0x6c>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a1a      	ldr	r2, [pc, #104]	@ (800598c <HAL_TIM_Base_Start_IT+0xb4>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00e      	beq.n	8005944 <HAL_TIM_Base_Start_IT+0x6c>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a19      	ldr	r2, [pc, #100]	@ (8005990 <HAL_TIM_Base_Start_IT+0xb8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d009      	beq.n	8005944 <HAL_TIM_Base_Start_IT+0x6c>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a17      	ldr	r2, [pc, #92]	@ (8005994 <HAL_TIM_Base_Start_IT+0xbc>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d004      	beq.n	8005944 <HAL_TIM_Base_Start_IT+0x6c>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a16      	ldr	r2, [pc, #88]	@ (8005998 <HAL_TIM_Base_Start_IT+0xc0>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d111      	bne.n	8005968 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f003 0307 	and.w	r3, r3, #7
 800594e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b06      	cmp	r3, #6
 8005954:	d010      	beq.n	8005978 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f042 0201 	orr.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005966:	e007      	b.n	8005978 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0201 	orr.w	r2, r2, #1
 8005976:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3714      	adds	r7, #20
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	40010000 	.word	0x40010000
 800598c:	40000400 	.word	0x40000400
 8005990:	40000800 	.word	0x40000800
 8005994:	40000c00 	.word	0x40000c00
 8005998:	40014000 	.word	0x40014000

0800599c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	691b      	ldr	r3, [r3, #16]
 80059b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d020      	beq.n	8005a00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d01b      	beq.n	8005a00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f06f 0202 	mvn.w	r2, #2
 80059d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	f003 0303 	and.w	r3, r3, #3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 f8d2 	bl	8005b90 <HAL_TIM_IC_CaptureCallback>
 80059ec:	e005      	b.n	80059fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f8c4 	bl	8005b7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f8d5 	bl	8005ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f003 0304 	and.w	r3, r3, #4
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d020      	beq.n	8005a4c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f003 0304 	and.w	r3, r3, #4
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d01b      	beq.n	8005a4c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f06f 0204 	mvn.w	r2, #4
 8005a1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2202      	movs	r2, #2
 8005a22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f8ac 	bl	8005b90 <HAL_TIM_IC_CaptureCallback>
 8005a38:	e005      	b.n	8005a46 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f89e 	bl	8005b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f8af 	bl	8005ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f003 0308 	and.w	r3, r3, #8
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d020      	beq.n	8005a98 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f003 0308 	and.w	r3, r3, #8
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d01b      	beq.n	8005a98 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f06f 0208 	mvn.w	r2, #8
 8005a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2204      	movs	r2, #4
 8005a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f886 	bl	8005b90 <HAL_TIM_IC_CaptureCallback>
 8005a84:	e005      	b.n	8005a92 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f878 	bl	8005b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f889 	bl	8005ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f003 0310 	and.w	r3, r3, #16
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d020      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f003 0310 	and.w	r3, r3, #16
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d01b      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f06f 0210 	mvn.w	r2, #16
 8005ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2208      	movs	r2, #8
 8005aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f860 	bl	8005b90 <HAL_TIM_IC_CaptureCallback>
 8005ad0:	e005      	b.n	8005ade <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f852 	bl	8005b7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f863 	bl	8005ba4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00c      	beq.n	8005b08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f003 0301 	and.w	r3, r3, #1
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d007      	beq.n	8005b08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0201 	mvn.w	r2, #1
 8005b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fc fc76 	bl	80023f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00c      	beq.n	8005b2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d007      	beq.n	8005b2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f8e6 	bl	8005cf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00c      	beq.n	8005b50 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d007      	beq.n	8005b50 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f834 	bl	8005bb8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	f003 0320 	and.w	r3, r3, #32
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00c      	beq.n	8005b74 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f003 0320 	and.w	r3, r3, #32
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d007      	beq.n	8005b74 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f06f 0220 	mvn.w	r2, #32
 8005b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 f8b8 	bl	8005ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b74:	bf00      	nop
 8005b76:	3710      	adds	r7, #16
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bc0:	bf00      	nop
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	4a3a      	ldr	r2, [pc, #232]	@ (8005cc8 <TIM_Base_SetConfig+0xfc>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d00f      	beq.n	8005c04 <TIM_Base_SetConfig+0x38>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bea:	d00b      	beq.n	8005c04 <TIM_Base_SetConfig+0x38>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4a37      	ldr	r2, [pc, #220]	@ (8005ccc <TIM_Base_SetConfig+0x100>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d007      	beq.n	8005c04 <TIM_Base_SetConfig+0x38>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a36      	ldr	r2, [pc, #216]	@ (8005cd0 <TIM_Base_SetConfig+0x104>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d003      	beq.n	8005c04 <TIM_Base_SetConfig+0x38>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a35      	ldr	r2, [pc, #212]	@ (8005cd4 <TIM_Base_SetConfig+0x108>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d108      	bne.n	8005c16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a2b      	ldr	r2, [pc, #172]	@ (8005cc8 <TIM_Base_SetConfig+0xfc>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d01b      	beq.n	8005c56 <TIM_Base_SetConfig+0x8a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c24:	d017      	beq.n	8005c56 <TIM_Base_SetConfig+0x8a>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a28      	ldr	r2, [pc, #160]	@ (8005ccc <TIM_Base_SetConfig+0x100>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d013      	beq.n	8005c56 <TIM_Base_SetConfig+0x8a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a27      	ldr	r2, [pc, #156]	@ (8005cd0 <TIM_Base_SetConfig+0x104>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d00f      	beq.n	8005c56 <TIM_Base_SetConfig+0x8a>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a26      	ldr	r2, [pc, #152]	@ (8005cd4 <TIM_Base_SetConfig+0x108>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d00b      	beq.n	8005c56 <TIM_Base_SetConfig+0x8a>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	4a25      	ldr	r2, [pc, #148]	@ (8005cd8 <TIM_Base_SetConfig+0x10c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d007      	beq.n	8005c56 <TIM_Base_SetConfig+0x8a>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a24      	ldr	r2, [pc, #144]	@ (8005cdc <TIM_Base_SetConfig+0x110>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d003      	beq.n	8005c56 <TIM_Base_SetConfig+0x8a>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a23      	ldr	r2, [pc, #140]	@ (8005ce0 <TIM_Base_SetConfig+0x114>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d108      	bne.n	8005c68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	68db      	ldr	r3, [r3, #12]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8005cc8 <TIM_Base_SetConfig+0xfc>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d103      	bne.n	8005c9c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	691a      	ldr	r2, [r3, #16]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	691b      	ldr	r3, [r3, #16]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d105      	bne.n	8005cba <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	f023 0201 	bic.w	r2, r3, #1
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	611a      	str	r2, [r3, #16]
  }
}
 8005cba:	bf00      	nop
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	40010000 	.word	0x40010000
 8005ccc:	40000400 	.word	0x40000400
 8005cd0:	40000800 	.word	0x40000800
 8005cd4:	40000c00 	.word	0x40000c00
 8005cd8:	40014000 	.word	0x40014000
 8005cdc:	40014400 	.word	0x40014400
 8005ce0:	40014800 	.word	0x40014800

08005ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e042      	b.n	8005da4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d106      	bne.n	8005d38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7fc fc5c 	bl	80025f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2224      	movs	r2, #36	@ 0x24
 8005d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68da      	ldr	r2, [r3, #12]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f973 	bl	800603c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	691a      	ldr	r2, [r3, #16]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695a      	ldr	r2, [r3, #20]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005d74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68da      	ldr	r2, [r3, #12]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2220      	movs	r2, #32
 8005d98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005da2:	2300      	movs	r3, #0
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08a      	sub	sp, #40	@ 0x28
 8005db0:	af02      	add	r7, sp, #8
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	603b      	str	r3, [r7, #0]
 8005db8:	4613      	mov	r3, r2
 8005dba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d175      	bne.n	8005eb8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d002      	beq.n	8005dd8 <HAL_UART_Transmit+0x2c>
 8005dd2:	88fb      	ldrh	r3, [r7, #6]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d101      	bne.n	8005ddc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e06e      	b.n	8005eba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2221      	movs	r2, #33	@ 0x21
 8005de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dea:	f7fd f889 	bl	8002f00 <HAL_GetTick>
 8005dee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	88fa      	ldrh	r2, [r7, #6]
 8005df4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	88fa      	ldrh	r2, [r7, #6]
 8005dfa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e04:	d108      	bne.n	8005e18 <HAL_UART_Transmit+0x6c>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d104      	bne.n	8005e18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	61bb      	str	r3, [r7, #24]
 8005e16:	e003      	b.n	8005e20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e20:	e02e      	b.n	8005e80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2180      	movs	r1, #128	@ 0x80
 8005e2c:	68f8      	ldr	r0, [r7, #12]
 8005e2e:	f000 f848 	bl	8005ec2 <UART_WaitOnFlagUntilTimeout>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d005      	beq.n	8005e44 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e03a      	b.n	8005eba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10b      	bne.n	8005e62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	881b      	ldrh	r3, [r3, #0]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	3302      	adds	r3, #2
 8005e5e:	61bb      	str	r3, [r7, #24]
 8005e60:	e007      	b.n	8005e72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	781a      	ldrb	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1cb      	bne.n	8005e22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	9300      	str	r3, [sp, #0]
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	2200      	movs	r2, #0
 8005e92:	2140      	movs	r1, #64	@ 0x40
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 f814 	bl	8005ec2 <UART_WaitOnFlagUntilTimeout>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d005      	beq.n	8005eac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e006      	b.n	8005eba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	e000      	b.n	8005eba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005eb8:	2302      	movs	r3, #2
  }
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3720      	adds	r7, #32
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b086      	sub	sp, #24
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	60f8      	str	r0, [r7, #12]
 8005eca:	60b9      	str	r1, [r7, #8]
 8005ecc:	603b      	str	r3, [r7, #0]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed2:	e03b      	b.n	8005f4c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ed4:	6a3b      	ldr	r3, [r7, #32]
 8005ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eda:	d037      	beq.n	8005f4c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005edc:	f7fd f810 	bl	8002f00 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	6a3a      	ldr	r2, [r7, #32]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d302      	bcc.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0x30>
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	e03a      	b.n	8005f6c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f003 0304 	and.w	r3, r3, #4
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d023      	beq.n	8005f4c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	2b80      	cmp	r3, #128	@ 0x80
 8005f08:	d020      	beq.n	8005f4c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2b40      	cmp	r3, #64	@ 0x40
 8005f0e:	d01d      	beq.n	8005f4c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f003 0308 	and.w	r3, r3, #8
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d116      	bne.n	8005f4c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005f1e:	2300      	movs	r3, #0
 8005f20:	617b      	str	r3, [r7, #20]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	617b      	str	r3, [r7, #20]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	617b      	str	r3, [r7, #20]
 8005f32:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f000 f81d 	bl	8005f74 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2208      	movs	r2, #8
 8005f3e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e00f      	b.n	8005f6c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	4013      	ands	r3, r2
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	bf0c      	ite	eq
 8005f5c:	2301      	moveq	r3, #1
 8005f5e:	2300      	movne	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	461a      	mov	r2, r3
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d0b4      	beq.n	8005ed4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3718      	adds	r7, #24
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b095      	sub	sp, #84	@ 0x54
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	330c      	adds	r3, #12
 8005f82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f86:	e853 3f00 	ldrex	r3, [r3]
 8005f8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	330c      	adds	r3, #12
 8005f9a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f9c:	643a      	str	r2, [r7, #64]	@ 0x40
 8005f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005fa2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005fa4:	e841 2300 	strex	r3, r2, [r1]
 8005fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1e5      	bne.n	8005f7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	3314      	adds	r3, #20
 8005fb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb8:	6a3b      	ldr	r3, [r7, #32]
 8005fba:	e853 3f00 	ldrex	r3, [r3]
 8005fbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	f023 0301 	bic.w	r3, r3, #1
 8005fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3314      	adds	r3, #20
 8005fce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fd0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fd8:	e841 2300 	strex	r3, r2, [r1]
 8005fdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1e5      	bne.n	8005fb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d119      	bne.n	8006020 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	330c      	adds	r3, #12
 8005ff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	e853 3f00 	ldrex	r3, [r3]
 8005ffa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f023 0310 	bic.w	r3, r3, #16
 8006002:	647b      	str	r3, [r7, #68]	@ 0x44
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	330c      	adds	r3, #12
 800600a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800600c:	61ba      	str	r2, [r7, #24]
 800600e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006010:	6979      	ldr	r1, [r7, #20]
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	e841 2300 	strex	r3, r2, [r1]
 8006018:	613b      	str	r3, [r7, #16]
   return(result);
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d1e5      	bne.n	8005fec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2220      	movs	r2, #32
 8006024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800602e:	bf00      	nop
 8006030:	3754      	adds	r7, #84	@ 0x54
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
	...

0800603c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800603c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006040:	b0c0      	sub	sp, #256	@ 0x100
 8006042:	af00      	add	r7, sp, #0
 8006044:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006058:	68d9      	ldr	r1, [r3, #12]
 800605a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	ea40 0301 	orr.w	r3, r0, r1
 8006064:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	431a      	orrs	r2, r3
 8006074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	431a      	orrs	r2, r3
 800607c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	4313      	orrs	r3, r2
 8006084:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006094:	f021 010c 	bic.w	r1, r1, #12
 8006098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80060a2:	430b      	orrs	r3, r1
 80060a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80060b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b6:	6999      	ldr	r1, [r3, #24]
 80060b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	ea40 0301 	orr.w	r3, r0, r1
 80060c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	4b8f      	ldr	r3, [pc, #572]	@ (8006308 <UART_SetConfig+0x2cc>)
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d005      	beq.n	80060dc <UART_SetConfig+0xa0>
 80060d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	4b8d      	ldr	r3, [pc, #564]	@ (800630c <UART_SetConfig+0x2d0>)
 80060d8:	429a      	cmp	r2, r3
 80060da:	d104      	bne.n	80060e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060dc:	f7fe fb0a 	bl	80046f4 <HAL_RCC_GetPCLK2Freq>
 80060e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80060e4:	e003      	b.n	80060ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060e6:	f7fe faf1 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
 80060ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060f8:	f040 810c 	bne.w	8006314 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006100:	2200      	movs	r2, #0
 8006102:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006106:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800610a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800610e:	4622      	mov	r2, r4
 8006110:	462b      	mov	r3, r5
 8006112:	1891      	adds	r1, r2, r2
 8006114:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006116:	415b      	adcs	r3, r3
 8006118:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800611a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800611e:	4621      	mov	r1, r4
 8006120:	eb12 0801 	adds.w	r8, r2, r1
 8006124:	4629      	mov	r1, r5
 8006126:	eb43 0901 	adc.w	r9, r3, r1
 800612a:	f04f 0200 	mov.w	r2, #0
 800612e:	f04f 0300 	mov.w	r3, #0
 8006132:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006136:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800613a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800613e:	4690      	mov	r8, r2
 8006140:	4699      	mov	r9, r3
 8006142:	4623      	mov	r3, r4
 8006144:	eb18 0303 	adds.w	r3, r8, r3
 8006148:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800614c:	462b      	mov	r3, r5
 800614e:	eb49 0303 	adc.w	r3, r9, r3
 8006152:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006162:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006166:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800616a:	460b      	mov	r3, r1
 800616c:	18db      	adds	r3, r3, r3
 800616e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006170:	4613      	mov	r3, r2
 8006172:	eb42 0303 	adc.w	r3, r2, r3
 8006176:	657b      	str	r3, [r7, #84]	@ 0x54
 8006178:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800617c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006180:	f7fa f896 	bl	80002b0 <__aeabi_uldivmod>
 8006184:	4602      	mov	r2, r0
 8006186:	460b      	mov	r3, r1
 8006188:	4b61      	ldr	r3, [pc, #388]	@ (8006310 <UART_SetConfig+0x2d4>)
 800618a:	fba3 2302 	umull	r2, r3, r3, r2
 800618e:	095b      	lsrs	r3, r3, #5
 8006190:	011c      	lsls	r4, r3, #4
 8006192:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006196:	2200      	movs	r2, #0
 8006198:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800619c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80061a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80061a4:	4642      	mov	r2, r8
 80061a6:	464b      	mov	r3, r9
 80061a8:	1891      	adds	r1, r2, r2
 80061aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80061ac:	415b      	adcs	r3, r3
 80061ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80061b4:	4641      	mov	r1, r8
 80061b6:	eb12 0a01 	adds.w	sl, r2, r1
 80061ba:	4649      	mov	r1, r9
 80061bc:	eb43 0b01 	adc.w	fp, r3, r1
 80061c0:	f04f 0200 	mov.w	r2, #0
 80061c4:	f04f 0300 	mov.w	r3, #0
 80061c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061d4:	4692      	mov	sl, r2
 80061d6:	469b      	mov	fp, r3
 80061d8:	4643      	mov	r3, r8
 80061da:	eb1a 0303 	adds.w	r3, sl, r3
 80061de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061e2:	464b      	mov	r3, r9
 80061e4:	eb4b 0303 	adc.w	r3, fp, r3
 80061e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80061fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006200:	460b      	mov	r3, r1
 8006202:	18db      	adds	r3, r3, r3
 8006204:	643b      	str	r3, [r7, #64]	@ 0x40
 8006206:	4613      	mov	r3, r2
 8006208:	eb42 0303 	adc.w	r3, r2, r3
 800620c:	647b      	str	r3, [r7, #68]	@ 0x44
 800620e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006212:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006216:	f7fa f84b 	bl	80002b0 <__aeabi_uldivmod>
 800621a:	4602      	mov	r2, r0
 800621c:	460b      	mov	r3, r1
 800621e:	4611      	mov	r1, r2
 8006220:	4b3b      	ldr	r3, [pc, #236]	@ (8006310 <UART_SetConfig+0x2d4>)
 8006222:	fba3 2301 	umull	r2, r3, r3, r1
 8006226:	095b      	lsrs	r3, r3, #5
 8006228:	2264      	movs	r2, #100	@ 0x64
 800622a:	fb02 f303 	mul.w	r3, r2, r3
 800622e:	1acb      	subs	r3, r1, r3
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006236:	4b36      	ldr	r3, [pc, #216]	@ (8006310 <UART_SetConfig+0x2d4>)
 8006238:	fba3 2302 	umull	r2, r3, r3, r2
 800623c:	095b      	lsrs	r3, r3, #5
 800623e:	005b      	lsls	r3, r3, #1
 8006240:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006244:	441c      	add	r4, r3
 8006246:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800624a:	2200      	movs	r2, #0
 800624c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006250:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006254:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006258:	4642      	mov	r2, r8
 800625a:	464b      	mov	r3, r9
 800625c:	1891      	adds	r1, r2, r2
 800625e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006260:	415b      	adcs	r3, r3
 8006262:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006264:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006268:	4641      	mov	r1, r8
 800626a:	1851      	adds	r1, r2, r1
 800626c:	6339      	str	r1, [r7, #48]	@ 0x30
 800626e:	4649      	mov	r1, r9
 8006270:	414b      	adcs	r3, r1
 8006272:	637b      	str	r3, [r7, #52]	@ 0x34
 8006274:	f04f 0200 	mov.w	r2, #0
 8006278:	f04f 0300 	mov.w	r3, #0
 800627c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006280:	4659      	mov	r1, fp
 8006282:	00cb      	lsls	r3, r1, #3
 8006284:	4651      	mov	r1, sl
 8006286:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800628a:	4651      	mov	r1, sl
 800628c:	00ca      	lsls	r2, r1, #3
 800628e:	4610      	mov	r0, r2
 8006290:	4619      	mov	r1, r3
 8006292:	4603      	mov	r3, r0
 8006294:	4642      	mov	r2, r8
 8006296:	189b      	adds	r3, r3, r2
 8006298:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800629c:	464b      	mov	r3, r9
 800629e:	460a      	mov	r2, r1
 80062a0:	eb42 0303 	adc.w	r3, r2, r3
 80062a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80062b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80062b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80062bc:	460b      	mov	r3, r1
 80062be:	18db      	adds	r3, r3, r3
 80062c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062c2:	4613      	mov	r3, r2
 80062c4:	eb42 0303 	adc.w	r3, r2, r3
 80062c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80062ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80062d2:	f7f9 ffed 	bl	80002b0 <__aeabi_uldivmod>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	4b0d      	ldr	r3, [pc, #52]	@ (8006310 <UART_SetConfig+0x2d4>)
 80062dc:	fba3 1302 	umull	r1, r3, r3, r2
 80062e0:	095b      	lsrs	r3, r3, #5
 80062e2:	2164      	movs	r1, #100	@ 0x64
 80062e4:	fb01 f303 	mul.w	r3, r1, r3
 80062e8:	1ad3      	subs	r3, r2, r3
 80062ea:	00db      	lsls	r3, r3, #3
 80062ec:	3332      	adds	r3, #50	@ 0x32
 80062ee:	4a08      	ldr	r2, [pc, #32]	@ (8006310 <UART_SetConfig+0x2d4>)
 80062f0:	fba2 2303 	umull	r2, r3, r2, r3
 80062f4:	095b      	lsrs	r3, r3, #5
 80062f6:	f003 0207 	and.w	r2, r3, #7
 80062fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4422      	add	r2, r4
 8006302:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006304:	e106      	b.n	8006514 <UART_SetConfig+0x4d8>
 8006306:	bf00      	nop
 8006308:	40011000 	.word	0x40011000
 800630c:	40011400 	.word	0x40011400
 8006310:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006318:	2200      	movs	r2, #0
 800631a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800631e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006322:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006326:	4642      	mov	r2, r8
 8006328:	464b      	mov	r3, r9
 800632a:	1891      	adds	r1, r2, r2
 800632c:	6239      	str	r1, [r7, #32]
 800632e:	415b      	adcs	r3, r3
 8006330:	627b      	str	r3, [r7, #36]	@ 0x24
 8006332:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006336:	4641      	mov	r1, r8
 8006338:	1854      	adds	r4, r2, r1
 800633a:	4649      	mov	r1, r9
 800633c:	eb43 0501 	adc.w	r5, r3, r1
 8006340:	f04f 0200 	mov.w	r2, #0
 8006344:	f04f 0300 	mov.w	r3, #0
 8006348:	00eb      	lsls	r3, r5, #3
 800634a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800634e:	00e2      	lsls	r2, r4, #3
 8006350:	4614      	mov	r4, r2
 8006352:	461d      	mov	r5, r3
 8006354:	4643      	mov	r3, r8
 8006356:	18e3      	adds	r3, r4, r3
 8006358:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800635c:	464b      	mov	r3, r9
 800635e:	eb45 0303 	adc.w	r3, r5, r3
 8006362:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006372:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006376:	f04f 0200 	mov.w	r2, #0
 800637a:	f04f 0300 	mov.w	r3, #0
 800637e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006382:	4629      	mov	r1, r5
 8006384:	008b      	lsls	r3, r1, #2
 8006386:	4621      	mov	r1, r4
 8006388:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800638c:	4621      	mov	r1, r4
 800638e:	008a      	lsls	r2, r1, #2
 8006390:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006394:	f7f9 ff8c 	bl	80002b0 <__aeabi_uldivmod>
 8006398:	4602      	mov	r2, r0
 800639a:	460b      	mov	r3, r1
 800639c:	4b60      	ldr	r3, [pc, #384]	@ (8006520 <UART_SetConfig+0x4e4>)
 800639e:	fba3 2302 	umull	r2, r3, r3, r2
 80063a2:	095b      	lsrs	r3, r3, #5
 80063a4:	011c      	lsls	r4, r3, #4
 80063a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063aa:	2200      	movs	r2, #0
 80063ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80063b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80063b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80063b8:	4642      	mov	r2, r8
 80063ba:	464b      	mov	r3, r9
 80063bc:	1891      	adds	r1, r2, r2
 80063be:	61b9      	str	r1, [r7, #24]
 80063c0:	415b      	adcs	r3, r3
 80063c2:	61fb      	str	r3, [r7, #28]
 80063c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063c8:	4641      	mov	r1, r8
 80063ca:	1851      	adds	r1, r2, r1
 80063cc:	6139      	str	r1, [r7, #16]
 80063ce:	4649      	mov	r1, r9
 80063d0:	414b      	adcs	r3, r1
 80063d2:	617b      	str	r3, [r7, #20]
 80063d4:	f04f 0200 	mov.w	r2, #0
 80063d8:	f04f 0300 	mov.w	r3, #0
 80063dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063e0:	4659      	mov	r1, fp
 80063e2:	00cb      	lsls	r3, r1, #3
 80063e4:	4651      	mov	r1, sl
 80063e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063ea:	4651      	mov	r1, sl
 80063ec:	00ca      	lsls	r2, r1, #3
 80063ee:	4610      	mov	r0, r2
 80063f0:	4619      	mov	r1, r3
 80063f2:	4603      	mov	r3, r0
 80063f4:	4642      	mov	r2, r8
 80063f6:	189b      	adds	r3, r3, r2
 80063f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80063fc:	464b      	mov	r3, r9
 80063fe:	460a      	mov	r2, r1
 8006400:	eb42 0303 	adc.w	r3, r2, r3
 8006404:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006412:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006414:	f04f 0200 	mov.w	r2, #0
 8006418:	f04f 0300 	mov.w	r3, #0
 800641c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006420:	4649      	mov	r1, r9
 8006422:	008b      	lsls	r3, r1, #2
 8006424:	4641      	mov	r1, r8
 8006426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800642a:	4641      	mov	r1, r8
 800642c:	008a      	lsls	r2, r1, #2
 800642e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006432:	f7f9 ff3d 	bl	80002b0 <__aeabi_uldivmod>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4611      	mov	r1, r2
 800643c:	4b38      	ldr	r3, [pc, #224]	@ (8006520 <UART_SetConfig+0x4e4>)
 800643e:	fba3 2301 	umull	r2, r3, r3, r1
 8006442:	095b      	lsrs	r3, r3, #5
 8006444:	2264      	movs	r2, #100	@ 0x64
 8006446:	fb02 f303 	mul.w	r3, r2, r3
 800644a:	1acb      	subs	r3, r1, r3
 800644c:	011b      	lsls	r3, r3, #4
 800644e:	3332      	adds	r3, #50	@ 0x32
 8006450:	4a33      	ldr	r2, [pc, #204]	@ (8006520 <UART_SetConfig+0x4e4>)
 8006452:	fba2 2303 	umull	r2, r3, r2, r3
 8006456:	095b      	lsrs	r3, r3, #5
 8006458:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800645c:	441c      	add	r4, r3
 800645e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006462:	2200      	movs	r2, #0
 8006464:	673b      	str	r3, [r7, #112]	@ 0x70
 8006466:	677a      	str	r2, [r7, #116]	@ 0x74
 8006468:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800646c:	4642      	mov	r2, r8
 800646e:	464b      	mov	r3, r9
 8006470:	1891      	adds	r1, r2, r2
 8006472:	60b9      	str	r1, [r7, #8]
 8006474:	415b      	adcs	r3, r3
 8006476:	60fb      	str	r3, [r7, #12]
 8006478:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800647c:	4641      	mov	r1, r8
 800647e:	1851      	adds	r1, r2, r1
 8006480:	6039      	str	r1, [r7, #0]
 8006482:	4649      	mov	r1, r9
 8006484:	414b      	adcs	r3, r1
 8006486:	607b      	str	r3, [r7, #4]
 8006488:	f04f 0200 	mov.w	r2, #0
 800648c:	f04f 0300 	mov.w	r3, #0
 8006490:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006494:	4659      	mov	r1, fp
 8006496:	00cb      	lsls	r3, r1, #3
 8006498:	4651      	mov	r1, sl
 800649a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800649e:	4651      	mov	r1, sl
 80064a0:	00ca      	lsls	r2, r1, #3
 80064a2:	4610      	mov	r0, r2
 80064a4:	4619      	mov	r1, r3
 80064a6:	4603      	mov	r3, r0
 80064a8:	4642      	mov	r2, r8
 80064aa:	189b      	adds	r3, r3, r2
 80064ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064ae:	464b      	mov	r3, r9
 80064b0:	460a      	mov	r2, r1
 80064b2:	eb42 0303 	adc.w	r3, r2, r3
 80064b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80064c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80064c4:	f04f 0200 	mov.w	r2, #0
 80064c8:	f04f 0300 	mov.w	r3, #0
 80064cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80064d0:	4649      	mov	r1, r9
 80064d2:	008b      	lsls	r3, r1, #2
 80064d4:	4641      	mov	r1, r8
 80064d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064da:	4641      	mov	r1, r8
 80064dc:	008a      	lsls	r2, r1, #2
 80064de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80064e2:	f7f9 fee5 	bl	80002b0 <__aeabi_uldivmod>
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006520 <UART_SetConfig+0x4e4>)
 80064ec:	fba3 1302 	umull	r1, r3, r3, r2
 80064f0:	095b      	lsrs	r3, r3, #5
 80064f2:	2164      	movs	r1, #100	@ 0x64
 80064f4:	fb01 f303 	mul.w	r3, r1, r3
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	011b      	lsls	r3, r3, #4
 80064fc:	3332      	adds	r3, #50	@ 0x32
 80064fe:	4a08      	ldr	r2, [pc, #32]	@ (8006520 <UART_SetConfig+0x4e4>)
 8006500:	fba2 2303 	umull	r2, r3, r2, r3
 8006504:	095b      	lsrs	r3, r3, #5
 8006506:	f003 020f 	and.w	r2, r3, #15
 800650a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4422      	add	r2, r4
 8006512:	609a      	str	r2, [r3, #8]
}
 8006514:	bf00      	nop
 8006516:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800651a:	46bd      	mov	sp, r7
 800651c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006520:	51eb851f 	.word	0x51eb851f

08006524 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006528:	4904      	ldr	r1, [pc, #16]	@ (800653c <MX_FATFS_Init+0x18>)
 800652a:	4805      	ldr	r0, [pc, #20]	@ (8006540 <MX_FATFS_Init+0x1c>)
 800652c:	f003 fa96 	bl	8009a5c <FATFS_LinkDriver>
 8006530:	4603      	mov	r3, r0
 8006532:	461a      	mov	r2, r3
 8006534:	4b03      	ldr	r3, [pc, #12]	@ (8006544 <MX_FATFS_Init+0x20>)
 8006536:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006538:	bf00      	nop
 800653a:	bd80      	pop	{r7, pc}
 800653c:	20002a10 	.word	0x20002a10
 8006540:	20000010 	.word	0x20000010
 8006544:	20002a0c 	.word	0x20002a0c

08006548 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006548:	b480      	push	{r7}
 800654a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800654c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800654e:	4618      	mov	r0, r3
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	4603      	mov	r3, r0
 8006560:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8006562:	79fb      	ldrb	r3, [r7, #7]
 8006564:	4618      	mov	r0, r3
 8006566:	f7fa fb83 	bl	8000c70 <SD_disk_initialize>
 800656a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800656c:	4618      	mov	r0, r3
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	4603      	mov	r3, r0
 800657c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800657e:	79fb      	ldrb	r3, [r7, #7]
 8006580:	4618      	mov	r0, r3
 8006582:	f7fa fc61 	bl	8000e48 <SD_disk_status>
 8006586:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006588:	4618      	mov	r0, r3
 800658a:	3708      	adds	r7, #8
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	607a      	str	r2, [r7, #4]
 800659a:	603b      	str	r3, [r7, #0]
 800659c:	4603      	mov	r3, r0
 800659e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 80065a0:	7bf8      	ldrb	r0, [r7, #15]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	68b9      	ldr	r1, [r7, #8]
 80065a8:	f7fa fc64 	bl	8000e74 <SD_disk_read>
 80065ac:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3710      	adds	r7, #16
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b084      	sub	sp, #16
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
 80065c0:	603b      	str	r3, [r7, #0]
 80065c2:	4603      	mov	r3, r0
 80065c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80065c6:	7bf8      	ldrb	r0, [r7, #15]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	68b9      	ldr	r1, [r7, #8]
 80065ce:	f7fa fcbb 	bl	8000f48 <SD_disk_write>
 80065d2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3710      	adds	r7, #16
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}

080065dc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	4603      	mov	r3, r0
 80065e4:	603a      	str	r2, [r7, #0]
 80065e6:	71fb      	strb	r3, [r7, #7]
 80065e8:	460b      	mov	r3, r1
 80065ea:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl (pdrv, cmd, buff);
 80065ec:	79b9      	ldrb	r1, [r7, #6]
 80065ee:	79fb      	ldrb	r3, [r7, #7]
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f7fa fd2c 	bl	8001050 <SD_disk_ioctl>
 80065f8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
	...

08006604 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	4603      	mov	r3, r0
 800660c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800660e:	79fb      	ldrb	r3, [r7, #7]
 8006610:	4a08      	ldr	r2, [pc, #32]	@ (8006634 <disk_status+0x30>)
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	4413      	add	r3, r2
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	79fa      	ldrb	r2, [r7, #7]
 800661c:	4905      	ldr	r1, [pc, #20]	@ (8006634 <disk_status+0x30>)
 800661e:	440a      	add	r2, r1
 8006620:	7a12      	ldrb	r2, [r2, #8]
 8006622:	4610      	mov	r0, r2
 8006624:	4798      	blx	r3
 8006626:	4603      	mov	r3, r0
 8006628:	73fb      	strb	r3, [r7, #15]
  return stat;
 800662a:	7bfb      	ldrb	r3, [r7, #15]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3710      	adds	r7, #16
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	20002a3c 	.word	0x20002a3c

08006638 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b084      	sub	sp, #16
 800663c:	af00      	add	r7, sp, #0
 800663e:	4603      	mov	r3, r0
 8006640:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006646:	79fb      	ldrb	r3, [r7, #7]
 8006648:	4a0e      	ldr	r2, [pc, #56]	@ (8006684 <disk_initialize+0x4c>)
 800664a:	5cd3      	ldrb	r3, [r2, r3]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d114      	bne.n	800667a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006650:	79fb      	ldrb	r3, [r7, #7]
 8006652:	4a0c      	ldr	r2, [pc, #48]	@ (8006684 <disk_initialize+0x4c>)
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4413      	add	r3, r2
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	79fa      	ldrb	r2, [r7, #7]
 800665e:	4909      	ldr	r1, [pc, #36]	@ (8006684 <disk_initialize+0x4c>)
 8006660:	440a      	add	r2, r1
 8006662:	7a12      	ldrb	r2, [r2, #8]
 8006664:	4610      	mov	r0, r2
 8006666:	4798      	blx	r3
 8006668:	4603      	mov	r3, r0
 800666a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800666c:	7bfb      	ldrb	r3, [r7, #15]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d103      	bne.n	800667a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8006672:	79fb      	ldrb	r3, [r7, #7]
 8006674:	4a03      	ldr	r2, [pc, #12]	@ (8006684 <disk_initialize+0x4c>)
 8006676:	2101      	movs	r1, #1
 8006678:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800667a:	7bfb      	ldrb	r3, [r7, #15]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	20002a3c 	.word	0x20002a3c

08006688 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006688:	b590      	push	{r4, r7, lr}
 800668a:	b087      	sub	sp, #28
 800668c:	af00      	add	r7, sp, #0
 800668e:	60b9      	str	r1, [r7, #8]
 8006690:	607a      	str	r2, [r7, #4]
 8006692:	603b      	str	r3, [r7, #0]
 8006694:	4603      	mov	r3, r0
 8006696:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006698:	7bfb      	ldrb	r3, [r7, #15]
 800669a:	4a0a      	ldr	r2, [pc, #40]	@ (80066c4 <disk_read+0x3c>)
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	689c      	ldr	r4, [r3, #8]
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	4a07      	ldr	r2, [pc, #28]	@ (80066c4 <disk_read+0x3c>)
 80066a8:	4413      	add	r3, r2
 80066aa:	7a18      	ldrb	r0, [r3, #8]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	68b9      	ldr	r1, [r7, #8]
 80066b2:	47a0      	blx	r4
 80066b4:	4603      	mov	r3, r0
 80066b6:	75fb      	strb	r3, [r7, #23]
  return res;
 80066b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	371c      	adds	r7, #28
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd90      	pop	{r4, r7, pc}
 80066c2:	bf00      	nop
 80066c4:	20002a3c 	.word	0x20002a3c

080066c8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80066c8:	b590      	push	{r4, r7, lr}
 80066ca:	b087      	sub	sp, #28
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60b9      	str	r1, [r7, #8]
 80066d0:	607a      	str	r2, [r7, #4]
 80066d2:	603b      	str	r3, [r7, #0]
 80066d4:	4603      	mov	r3, r0
 80066d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
 80066da:	4a0a      	ldr	r2, [pc, #40]	@ (8006704 <disk_write+0x3c>)
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	68dc      	ldr	r4, [r3, #12]
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
 80066e6:	4a07      	ldr	r2, [pc, #28]	@ (8006704 <disk_write+0x3c>)
 80066e8:	4413      	add	r3, r2
 80066ea:	7a18      	ldrb	r0, [r3, #8]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	68b9      	ldr	r1, [r7, #8]
 80066f2:	47a0      	blx	r4
 80066f4:	4603      	mov	r3, r0
 80066f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	371c      	adds	r7, #28
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd90      	pop	{r4, r7, pc}
 8006702:	bf00      	nop
 8006704:	20002a3c 	.word	0x20002a3c

08006708 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	4603      	mov	r3, r0
 8006710:	603a      	str	r2, [r7, #0]
 8006712:	71fb      	strb	r3, [r7, #7]
 8006714:	460b      	mov	r3, r1
 8006716:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006718:	79fb      	ldrb	r3, [r7, #7]
 800671a:	4a09      	ldr	r2, [pc, #36]	@ (8006740 <disk_ioctl+0x38>)
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	79fa      	ldrb	r2, [r7, #7]
 8006726:	4906      	ldr	r1, [pc, #24]	@ (8006740 <disk_ioctl+0x38>)
 8006728:	440a      	add	r2, r1
 800672a:	7a10      	ldrb	r0, [r2, #8]
 800672c:	79b9      	ldrb	r1, [r7, #6]
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	4798      	blx	r3
 8006732:	4603      	mov	r3, r0
 8006734:	73fb      	strb	r3, [r7, #15]
  return res;
 8006736:	7bfb      	ldrb	r3, [r7, #15]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	20002a3c 	.word	0x20002a3c

08006744 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3301      	adds	r3, #1
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8006754:	89fb      	ldrh	r3, [r7, #14]
 8006756:	021b      	lsls	r3, r3, #8
 8006758:	b21a      	sxth	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	b21b      	sxth	r3, r3
 8006760:	4313      	orrs	r3, r2
 8006762:	b21b      	sxth	r3, r3
 8006764:	81fb      	strh	r3, [r7, #14]
	return rv;
 8006766:	89fb      	ldrh	r3, [r7, #14]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr

08006774 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	3303      	adds	r3, #3
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	021b      	lsls	r3, r3, #8
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	3202      	adds	r2, #2
 800678c:	7812      	ldrb	r2, [r2, #0]
 800678e:	4313      	orrs	r3, r2
 8006790:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	021b      	lsls	r3, r3, #8
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	3201      	adds	r2, #1
 800679a:	7812      	ldrb	r2, [r2, #0]
 800679c:	4313      	orrs	r3, r2
 800679e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	021b      	lsls	r3, r3, #8
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	7812      	ldrb	r2, [r2, #0]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
	return rv;
 80067ac:	68fb      	ldr	r3, [r7, #12]
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3714      	adds	r7, #20
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr

080067ba <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80067ba:	b480      	push	{r7}
 80067bc:	b083      	sub	sp, #12
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	460b      	mov	r3, r1
 80067c4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	1c5a      	adds	r2, r3, #1
 80067ca:	607a      	str	r2, [r7, #4]
 80067cc:	887a      	ldrh	r2, [r7, #2]
 80067ce:	b2d2      	uxtb	r2, r2
 80067d0:	701a      	strb	r2, [r3, #0]
 80067d2:	887b      	ldrh	r3, [r7, #2]
 80067d4:	0a1b      	lsrs	r3, r3, #8
 80067d6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	607a      	str	r2, [r7, #4]
 80067de:	887a      	ldrh	r2, [r7, #2]
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	701a      	strb	r2, [r3, #0]
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	607a      	str	r2, [r7, #4]
 8006800:	683a      	ldr	r2, [r7, #0]
 8006802:	b2d2      	uxtb	r2, r2
 8006804:	701a      	strb	r2, [r3, #0]
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	0a1b      	lsrs	r3, r3, #8
 800680a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	1c5a      	adds	r2, r3, #1
 8006810:	607a      	str	r2, [r7, #4]
 8006812:	683a      	ldr	r2, [r7, #0]
 8006814:	b2d2      	uxtb	r2, r2
 8006816:	701a      	strb	r2, [r3, #0]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	0a1b      	lsrs	r3, r3, #8
 800681c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	607a      	str	r2, [r7, #4]
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	b2d2      	uxtb	r2, r2
 8006828:	701a      	strb	r2, [r3, #0]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	0a1b      	lsrs	r3, r3, #8
 800682e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	1c5a      	adds	r2, r3, #1
 8006834:	607a      	str	r2, [r7, #4]
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	b2d2      	uxtb	r2, r2
 800683a:	701a      	strb	r2, [r3, #0]
}
 800683c:	bf00      	nop
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8006848:	b480      	push	{r7}
 800684a:	b087      	sub	sp, #28
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00d      	beq.n	800687e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	1c53      	adds	r3, r2, #1
 8006866:	613b      	str	r3, [r7, #16]
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	1c59      	adds	r1, r3, #1
 800686c:	6179      	str	r1, [r7, #20]
 800686e:	7812      	ldrb	r2, [r2, #0]
 8006870:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	3b01      	subs	r3, #1
 8006876:	607b      	str	r3, [r7, #4]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1f1      	bne.n	8006862 <mem_cpy+0x1a>
	}
}
 800687e:	bf00      	nop
 8006880:	371c      	adds	r7, #28
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800688a:	b480      	push	{r7}
 800688c:	b087      	sub	sp, #28
 800688e:	af00      	add	r7, sp, #0
 8006890:	60f8      	str	r0, [r7, #12]
 8006892:	60b9      	str	r1, [r7, #8]
 8006894:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	617a      	str	r2, [r7, #20]
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	b2d2      	uxtb	r2, r2
 80068a4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	3b01      	subs	r3, #1
 80068aa:	607b      	str	r3, [r7, #4]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1f3      	bne.n	800689a <mem_set+0x10>
}
 80068b2:	bf00      	nop
 80068b4:	bf00      	nop
 80068b6:	371c      	adds	r7, #28
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80068c0:	b480      	push	{r7}
 80068c2:	b089      	sub	sp, #36	@ 0x24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	61fb      	str	r3, [r7, #28]
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80068d4:	2300      	movs	r3, #0
 80068d6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	1c5a      	adds	r2, r3, #1
 80068dc:	61fa      	str	r2, [r7, #28]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	4619      	mov	r1, r3
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	1c5a      	adds	r2, r3, #1
 80068e6:	61ba      	str	r2, [r7, #24]
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	1acb      	subs	r3, r1, r3
 80068ec:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	3b01      	subs	r3, #1
 80068f2:	607b      	str	r3, [r7, #4]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <mem_cmp+0x40>
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d0eb      	beq.n	80068d8 <mem_cmp+0x18>

	return r;
 8006900:	697b      	ldr	r3, [r7, #20]
}
 8006902:	4618      	mov	r0, r3
 8006904:	3724      	adds	r7, #36	@ 0x24
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr

0800690e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800690e:	b480      	push	{r7}
 8006910:	b083      	sub	sp, #12
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
 8006916:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006918:	e002      	b.n	8006920 <chk_chr+0x12>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	3301      	adds	r3, #1
 800691e:	607b      	str	r3, [r7, #4]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d005      	beq.n	8006934 <chk_chr+0x26>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	461a      	mov	r2, r3
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	4293      	cmp	r3, r2
 8006932:	d1f2      	bne.n	800691a <chk_chr+0xc>
	return *str;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	781b      	ldrb	r3, [r3, #0]
}
 8006938:	4618      	mov	r0, r3
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d009      	beq.n	8006966 <lock_fs+0x22>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	4618      	mov	r0, r3
 8006958:	f003 f982 	bl	8009c60 <ff_req_grant>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d001      	beq.n	8006966 <lock_fs+0x22>
 8006962:	2301      	movs	r3, #1
 8006964:	e000      	b.n	8006968 <lock_fs+0x24>
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3708      	adds	r7, #8
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	460b      	mov	r3, r1
 800697a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00d      	beq.n	800699e <unlock_fs+0x2e>
 8006982:	78fb      	ldrb	r3, [r7, #3]
 8006984:	2b0c      	cmp	r3, #12
 8006986:	d00a      	beq.n	800699e <unlock_fs+0x2e>
 8006988:	78fb      	ldrb	r3, [r7, #3]
 800698a:	2b0b      	cmp	r3, #11
 800698c:	d007      	beq.n	800699e <unlock_fs+0x2e>
 800698e:	78fb      	ldrb	r3, [r7, #3]
 8006990:	2b0f      	cmp	r3, #15
 8006992:	d004      	beq.n	800699e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	4618      	mov	r0, r3
 800699a:	f003 f976 	bl	8009c8a <ff_rel_grant>
	}
}
 800699e:	bf00      	nop
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
	...

080069a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80069b2:	2300      	movs	r3, #0
 80069b4:	60bb      	str	r3, [r7, #8]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	60fb      	str	r3, [r7, #12]
 80069ba:	e029      	b.n	8006a10 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80069bc:	4a27      	ldr	r2, [pc, #156]	@ (8006a5c <chk_lock+0xb4>)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	011b      	lsls	r3, r3, #4
 80069c2:	4413      	add	r3, r2
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d01d      	beq.n	8006a06 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80069ca:	4a24      	ldr	r2, [pc, #144]	@ (8006a5c <chk_lock+0xb4>)
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	011b      	lsls	r3, r3, #4
 80069d0:	4413      	add	r3, r2
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d116      	bne.n	8006a0a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80069dc:	4a1f      	ldr	r2, [pc, #124]	@ (8006a5c <chk_lock+0xb4>)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	011b      	lsls	r3, r3, #4
 80069e2:	4413      	add	r3, r2
 80069e4:	3304      	adds	r3, #4
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d10c      	bne.n	8006a0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80069f0:	4a1a      	ldr	r2, [pc, #104]	@ (8006a5c <chk_lock+0xb4>)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	011b      	lsls	r3, r3, #4
 80069f6:	4413      	add	r3, r2
 80069f8:	3308      	adds	r3, #8
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d102      	bne.n	8006a0a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006a04:	e007      	b.n	8006a16 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006a06:	2301      	movs	r3, #1
 8006a08:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d9d2      	bls.n	80069bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	d109      	bne.n	8006a30 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d102      	bne.n	8006a28 <chk_lock+0x80>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d101      	bne.n	8006a2c <chk_lock+0x84>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	e010      	b.n	8006a4e <chk_lock+0xa6>
 8006a2c:	2312      	movs	r3, #18
 8006a2e:	e00e      	b.n	8006a4e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d108      	bne.n	8006a48 <chk_lock+0xa0>
 8006a36:	4a09      	ldr	r2, [pc, #36]	@ (8006a5c <chk_lock+0xb4>)
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	011b      	lsls	r3, r3, #4
 8006a3c:	4413      	add	r3, r2
 8006a3e:	330c      	adds	r3, #12
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a46:	d101      	bne.n	8006a4c <chk_lock+0xa4>
 8006a48:	2310      	movs	r3, #16
 8006a4a:	e000      	b.n	8006a4e <chk_lock+0xa6>
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	20002a1c 	.word	0x20002a1c

08006a60 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006a66:	2300      	movs	r3, #0
 8006a68:	607b      	str	r3, [r7, #4]
 8006a6a:	e002      	b.n	8006a72 <enq_lock+0x12>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	607b      	str	r3, [r7, #4]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d806      	bhi.n	8006a86 <enq_lock+0x26>
 8006a78:	4a09      	ldr	r2, [pc, #36]	@ (8006aa0 <enq_lock+0x40>)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	011b      	lsls	r3, r3, #4
 8006a7e:	4413      	add	r3, r2
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1f2      	bne.n	8006a6c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	bf14      	ite	ne
 8006a8c:	2301      	movne	r3, #1
 8006a8e:	2300      	moveq	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	370c      	adds	r7, #12
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	20002a1c 	.word	0x20002a1c

08006aa4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60fb      	str	r3, [r7, #12]
 8006ab2:	e01f      	b.n	8006af4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006ab4:	4a41      	ldr	r2, [pc, #260]	@ (8006bbc <inc_lock+0x118>)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	011b      	lsls	r3, r3, #4
 8006aba:	4413      	add	r3, r2
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d113      	bne.n	8006aee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006ac6:	4a3d      	ldr	r2, [pc, #244]	@ (8006bbc <inc_lock+0x118>)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	011b      	lsls	r3, r3, #4
 8006acc:	4413      	add	r3, r2
 8006ace:	3304      	adds	r3, #4
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d109      	bne.n	8006aee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006ada:	4a38      	ldr	r2, [pc, #224]	@ (8006bbc <inc_lock+0x118>)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	011b      	lsls	r3, r3, #4
 8006ae0:	4413      	add	r3, r2
 8006ae2:	3308      	adds	r3, #8
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d006      	beq.n	8006afc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	3301      	adds	r3, #1
 8006af2:	60fb      	str	r3, [r7, #12]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d9dc      	bls.n	8006ab4 <inc_lock+0x10>
 8006afa:	e000      	b.n	8006afe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006afc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d132      	bne.n	8006b6a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006b04:	2300      	movs	r3, #0
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	e002      	b.n	8006b10 <inc_lock+0x6c>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	60fb      	str	r3, [r7, #12]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d806      	bhi.n	8006b24 <inc_lock+0x80>
 8006b16:	4a29      	ldr	r2, [pc, #164]	@ (8006bbc <inc_lock+0x118>)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	011b      	lsls	r3, r3, #4
 8006b1c:	4413      	add	r3, r2
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1f2      	bne.n	8006b0a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d101      	bne.n	8006b2e <inc_lock+0x8a>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	e040      	b.n	8006bb0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	4922      	ldr	r1, [pc, #136]	@ (8006bbc <inc_lock+0x118>)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	011b      	lsls	r3, r3, #4
 8006b38:	440b      	add	r3, r1
 8006b3a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	491e      	ldr	r1, [pc, #120]	@ (8006bbc <inc_lock+0x118>)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	011b      	lsls	r3, r3, #4
 8006b46:	440b      	add	r3, r1
 8006b48:	3304      	adds	r3, #4
 8006b4a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	695a      	ldr	r2, [r3, #20]
 8006b50:	491a      	ldr	r1, [pc, #104]	@ (8006bbc <inc_lock+0x118>)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	011b      	lsls	r3, r3, #4
 8006b56:	440b      	add	r3, r1
 8006b58:	3308      	adds	r3, #8
 8006b5a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006b5c:	4a17      	ldr	r2, [pc, #92]	@ (8006bbc <inc_lock+0x118>)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	011b      	lsls	r3, r3, #4
 8006b62:	4413      	add	r3, r2
 8006b64:	330c      	adds	r3, #12
 8006b66:	2200      	movs	r2, #0
 8006b68:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d009      	beq.n	8006b84 <inc_lock+0xe0>
 8006b70:	4a12      	ldr	r2, [pc, #72]	@ (8006bbc <inc_lock+0x118>)
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	011b      	lsls	r3, r3, #4
 8006b76:	4413      	add	r3, r2
 8006b78:	330c      	adds	r3, #12
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <inc_lock+0xe0>
 8006b80:	2300      	movs	r3, #0
 8006b82:	e015      	b.n	8006bb0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d108      	bne.n	8006b9c <inc_lock+0xf8>
 8006b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8006bbc <inc_lock+0x118>)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	011b      	lsls	r3, r3, #4
 8006b90:	4413      	add	r3, r2
 8006b92:	330c      	adds	r3, #12
 8006b94:	881b      	ldrh	r3, [r3, #0]
 8006b96:	3301      	adds	r3, #1
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	e001      	b.n	8006ba0 <inc_lock+0xfc>
 8006b9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006ba0:	4906      	ldr	r1, [pc, #24]	@ (8006bbc <inc_lock+0x118>)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	011b      	lsls	r3, r3, #4
 8006ba6:	440b      	add	r3, r1
 8006ba8:	330c      	adds	r3, #12
 8006baa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	3301      	adds	r3, #1
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	20002a1c 	.word	0x20002a1c

08006bc0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	607b      	str	r3, [r7, #4]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d825      	bhi.n	8006c20 <dec_lock+0x60>
		n = Files[i].ctr;
 8006bd4:	4a17      	ldr	r2, [pc, #92]	@ (8006c34 <dec_lock+0x74>)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	011b      	lsls	r3, r3, #4
 8006bda:	4413      	add	r3, r2
 8006bdc:	330c      	adds	r3, #12
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006be2:	89fb      	ldrh	r3, [r7, #14]
 8006be4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006be8:	d101      	bne.n	8006bee <dec_lock+0x2e>
 8006bea:	2300      	movs	r3, #0
 8006bec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006bee:	89fb      	ldrh	r3, [r7, #14]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <dec_lock+0x3a>
 8006bf4:	89fb      	ldrh	r3, [r7, #14]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006bfa:	4a0e      	ldr	r2, [pc, #56]	@ (8006c34 <dec_lock+0x74>)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	011b      	lsls	r3, r3, #4
 8006c00:	4413      	add	r3, r2
 8006c02:	330c      	adds	r3, #12
 8006c04:	89fa      	ldrh	r2, [r7, #14]
 8006c06:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006c08:	89fb      	ldrh	r3, [r7, #14]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d105      	bne.n	8006c1a <dec_lock+0x5a>
 8006c0e:	4a09      	ldr	r2, [pc, #36]	@ (8006c34 <dec_lock+0x74>)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	011b      	lsls	r3, r3, #4
 8006c14:	4413      	add	r3, r2
 8006c16:	2200      	movs	r2, #0
 8006c18:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	737b      	strb	r3, [r7, #13]
 8006c1e:	e001      	b.n	8006c24 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006c20:	2302      	movs	r3, #2
 8006c22:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006c24:	7b7b      	ldrb	r3, [r7, #13]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3714      	adds	r7, #20
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	20002a1c 	.word	0x20002a1c

08006c38 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006c40:	2300      	movs	r3, #0
 8006c42:	60fb      	str	r3, [r7, #12]
 8006c44:	e010      	b.n	8006c68 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006c46:	4a0d      	ldr	r2, [pc, #52]	@ (8006c7c <clear_lock+0x44>)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	011b      	lsls	r3, r3, #4
 8006c4c:	4413      	add	r3, r2
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d105      	bne.n	8006c62 <clear_lock+0x2a>
 8006c56:	4a09      	ldr	r2, [pc, #36]	@ (8006c7c <clear_lock+0x44>)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	011b      	lsls	r3, r3, #4
 8006c5c:	4413      	add	r3, r2
 8006c5e:	2200      	movs	r2, #0
 8006c60:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	3301      	adds	r3, #1
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d9eb      	bls.n	8006c46 <clear_lock+0xe>
	}
}
 8006c6e:	bf00      	nop
 8006c70:	bf00      	nop
 8006c72:	3714      	adds	r7, #20
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	20002a1c 	.word	0x20002a1c

08006c80 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	78db      	ldrb	r3, [r3, #3]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d034      	beq.n	8006cfe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c98:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	7858      	ldrb	r0, [r3, #1]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	f7ff fd0e 	bl	80066c8 <disk_write>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	73fb      	strb	r3, [r7, #15]
 8006cb6:	e022      	b.n	8006cfe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc2:	697a      	ldr	r2, [r7, #20]
 8006cc4:	1ad2      	subs	r2, r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d217      	bcs.n	8006cfe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	789b      	ldrb	r3, [r3, #2]
 8006cd2:	613b      	str	r3, [r7, #16]
 8006cd4:	e010      	b.n	8006cf8 <sync_window+0x78>
					wsect += fs->fsize;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	4413      	add	r3, r2
 8006cde:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	7858      	ldrb	r0, [r3, #1]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006cea:	2301      	movs	r3, #1
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	f7ff fceb 	bl	80066c8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d8eb      	bhi.n	8006cd6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d1a:	683a      	ldr	r2, [r7, #0]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d01b      	beq.n	8006d58 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7ff ffad 	bl	8006c80 <sync_window>
 8006d26:	4603      	mov	r3, r0
 8006d28:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d113      	bne.n	8006d58 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	7858      	ldrb	r0, [r3, #1]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	f7ff fca3 	bl	8006688 <disk_read>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d004      	beq.n	8006d52 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006d48:	f04f 33ff 	mov.w	r3, #4294967295
 8006d4c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
	...

08006d64 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b084      	sub	sp, #16
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7ff ff87 	bl	8006c80 <sync_window>
 8006d72:	4603      	mov	r3, r0
 8006d74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006d76:	7bfb      	ldrb	r3, [r7, #15]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d159      	bne.n	8006e30 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	2b03      	cmp	r3, #3
 8006d82:	d149      	bne.n	8006e18 <sync_fs+0xb4>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	791b      	ldrb	r3, [r3, #4]
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d145      	bne.n	8006e18 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	899b      	ldrh	r3, [r3, #12]
 8006d96:	461a      	mov	r2, r3
 8006d98:	2100      	movs	r1, #0
 8006d9a:	f7ff fd76 	bl	800688a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	333c      	adds	r3, #60	@ 0x3c
 8006da2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006da6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7ff fd05 	bl	80067ba <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	333c      	adds	r3, #60	@ 0x3c
 8006db4:	4921      	ldr	r1, [pc, #132]	@ (8006e3c <sync_fs+0xd8>)
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7ff fd1a 	bl	80067f0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	333c      	adds	r3, #60	@ 0x3c
 8006dc0:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006dc4:	491e      	ldr	r1, [pc, #120]	@ (8006e40 <sync_fs+0xdc>)
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f7ff fd12 	bl	80067f0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	333c      	adds	r3, #60	@ 0x3c
 8006dd0:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	4619      	mov	r1, r3
 8006dda:	4610      	mov	r0, r2
 8006ddc:	f7ff fd08 	bl	80067f0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	333c      	adds	r3, #60	@ 0x3c
 8006de4:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	4619      	mov	r1, r3
 8006dee:	4610      	mov	r0, r2
 8006df0:	f7ff fcfe 	bl	80067f0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	7858      	ldrb	r0, [r3, #1]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	f7ff fc5b 	bl	80066c8 <disk_write>
			fs->fsi_flag = 0;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	785b      	ldrb	r3, [r3, #1]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	2100      	movs	r1, #0
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7ff fc71 	bl	8006708 <disk_ioctl>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d001      	beq.n	8006e30 <sync_fs+0xcc>
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	41615252 	.word	0x41615252
 8006e40:	61417272 	.word	0x61417272

08006e44 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	3b02      	subs	r3, #2
 8006e52:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	3b02      	subs	r3, #2
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d301      	bcc.n	8006e64 <clust2sect+0x20>
 8006e60:	2300      	movs	r3, #0
 8006e62:	e008      	b.n	8006e76 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	895b      	ldrh	r3, [r3, #10]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	fb03 f202 	mul.w	r2, r3, r2
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e74:	4413      	add	r3, r2
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr

08006e82 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b086      	sub	sp, #24
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d904      	bls.n	8006ea2 <get_fat+0x20>
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	6a1b      	ldr	r3, [r3, #32]
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d302      	bcc.n	8006ea8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	617b      	str	r3, [r7, #20]
 8006ea6:	e0ba      	b.n	800701e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8006eac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	f000 8082 	beq.w	8006fbc <get_fat+0x13a>
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	f300 80a6 	bgt.w	800700a <get_fat+0x188>
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d002      	beq.n	8006ec8 <get_fat+0x46>
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d055      	beq.n	8006f72 <get_fat+0xf0>
 8006ec6:	e0a0      	b.n	800700a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	60fb      	str	r3, [r7, #12]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	085b      	lsrs	r3, r3, #1
 8006ed0:	68fa      	ldr	r2, [r7, #12]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	899b      	ldrh	r3, [r3, #12]
 8006ede:	4619      	mov	r1, r3
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ee6:	4413      	add	r3, r2
 8006ee8:	4619      	mov	r1, r3
 8006eea:	6938      	ldr	r0, [r7, #16]
 8006eec:	f7ff ff0c 	bl	8006d08 <move_window>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f040 808c 	bne.w	8007010 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	1c5a      	adds	r2, r3, #1
 8006efc:	60fa      	str	r2, [r7, #12]
 8006efe:	693a      	ldr	r2, [r7, #16]
 8006f00:	8992      	ldrh	r2, [r2, #12]
 8006f02:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f06:	fb01 f202 	mul.w	r2, r1, r2
 8006f0a:	1a9b      	subs	r3, r3, r2
 8006f0c:	693a      	ldr	r2, [r7, #16]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f14:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	899b      	ldrh	r3, [r3, #12]
 8006f1e:	4619      	mov	r1, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f26:	4413      	add	r3, r2
 8006f28:	4619      	mov	r1, r3
 8006f2a:	6938      	ldr	r0, [r7, #16]
 8006f2c:	f7ff feec 	bl	8006d08 <move_window>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d16e      	bne.n	8007014 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	899b      	ldrh	r3, [r3, #12]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f42:	fb01 f202 	mul.w	r2, r1, r2
 8006f46:	1a9b      	subs	r3, r3, r2
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f50:	021b      	lsls	r3, r3, #8
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	4313      	orrs	r3, r2
 8006f56:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	f003 0301 	and.w	r3, r3, #1
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d002      	beq.n	8006f68 <get_fat+0xe6>
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	091b      	lsrs	r3, r3, #4
 8006f66:	e002      	b.n	8006f6e <get_fat+0xec>
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f6e:	617b      	str	r3, [r7, #20]
			break;
 8006f70:	e055      	b.n	800701e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	899b      	ldrh	r3, [r3, #12]
 8006f7a:	085b      	lsrs	r3, r3, #1
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	4619      	mov	r1, r3
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f86:	4413      	add	r3, r2
 8006f88:	4619      	mov	r1, r3
 8006f8a:	6938      	ldr	r0, [r7, #16]
 8006f8c:	f7ff febc 	bl	8006d08 <move_window>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d140      	bne.n	8007018 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	693a      	ldr	r2, [r7, #16]
 8006fa2:	8992      	ldrh	r2, [r2, #12]
 8006fa4:	fbb3 f0f2 	udiv	r0, r3, r2
 8006fa8:	fb00 f202 	mul.w	r2, r0, r2
 8006fac:	1a9b      	subs	r3, r3, r2
 8006fae:	440b      	add	r3, r1
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7ff fbc7 	bl	8006744 <ld_word>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	617b      	str	r3, [r7, #20]
			break;
 8006fba:	e030      	b.n	800701e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	899b      	ldrh	r3, [r3, #12]
 8006fc4:	089b      	lsrs	r3, r3, #2
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	4619      	mov	r1, r3
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fd0:	4413      	add	r3, r2
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6938      	ldr	r0, [r7, #16]
 8006fd6:	f7ff fe97 	bl	8006d08 <move_window>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d11d      	bne.n	800701c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	693a      	ldr	r2, [r7, #16]
 8006fec:	8992      	ldrh	r2, [r2, #12]
 8006fee:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ff2:	fb00 f202 	mul.w	r2, r0, r2
 8006ff6:	1a9b      	subs	r3, r3, r2
 8006ff8:	440b      	add	r3, r1
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f7ff fbba 	bl	8006774 <ld_dword>
 8007000:	4603      	mov	r3, r0
 8007002:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007006:	617b      	str	r3, [r7, #20]
			break;
 8007008:	e009      	b.n	800701e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800700a:	2301      	movs	r3, #1
 800700c:	617b      	str	r3, [r7, #20]
 800700e:	e006      	b.n	800701e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007010:	bf00      	nop
 8007012:	e004      	b.n	800701e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007014:	bf00      	nop
 8007016:	e002      	b.n	800701e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007018:	bf00      	nop
 800701a:	e000      	b.n	800701e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800701c:	bf00      	nop
		}
	}

	return val;
 800701e:	697b      	ldr	r3, [r7, #20]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007028:	b590      	push	{r4, r7, lr}
 800702a:	b089      	sub	sp, #36	@ 0x24
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007034:	2302      	movs	r3, #2
 8007036:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	2b01      	cmp	r3, #1
 800703c:	f240 8109 	bls.w	8007252 <put_fat+0x22a>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	429a      	cmp	r2, r3
 8007048:	f080 8103 	bcs.w	8007252 <put_fat+0x22a>
		switch (fs->fs_type) {
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2b03      	cmp	r3, #3
 8007052:	f000 80b6 	beq.w	80071c2 <put_fat+0x19a>
 8007056:	2b03      	cmp	r3, #3
 8007058:	f300 80fb 	bgt.w	8007252 <put_fat+0x22a>
 800705c:	2b01      	cmp	r3, #1
 800705e:	d003      	beq.n	8007068 <put_fat+0x40>
 8007060:	2b02      	cmp	r3, #2
 8007062:	f000 8083 	beq.w	800716c <put_fat+0x144>
 8007066:	e0f4      	b.n	8007252 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	61bb      	str	r3, [r7, #24]
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	085b      	lsrs	r3, r3, #1
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	4413      	add	r3, r2
 8007074:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	899b      	ldrh	r3, [r3, #12]
 800707e:	4619      	mov	r1, r3
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	fbb3 f3f1 	udiv	r3, r3, r1
 8007086:	4413      	add	r3, r2
 8007088:	4619      	mov	r1, r3
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f7ff fe3c 	bl	8006d08 <move_window>
 8007090:	4603      	mov	r3, r0
 8007092:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007094:	7ffb      	ldrb	r3, [r7, #31]
 8007096:	2b00      	cmp	r3, #0
 8007098:	f040 80d4 	bne.w	8007244 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	1c5a      	adds	r2, r3, #1
 80070a6:	61ba      	str	r2, [r7, #24]
 80070a8:	68fa      	ldr	r2, [r7, #12]
 80070aa:	8992      	ldrh	r2, [r2, #12]
 80070ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80070b0:	fb00 f202 	mul.w	r2, r0, r2
 80070b4:	1a9b      	subs	r3, r3, r2
 80070b6:	440b      	add	r3, r1
 80070b8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00d      	beq.n	80070e0 <put_fat+0xb8>
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	781b      	ldrb	r3, [r3, #0]
 80070c8:	b25b      	sxtb	r3, r3
 80070ca:	f003 030f 	and.w	r3, r3, #15
 80070ce:	b25a      	sxtb	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	011b      	lsls	r3, r3, #4
 80070d6:	b25b      	sxtb	r3, r3
 80070d8:	4313      	orrs	r3, r2
 80070da:	b25b      	sxtb	r3, r3
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	e001      	b.n	80070e4 <put_fat+0xbc>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	697a      	ldr	r2, [r7, #20]
 80070e6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2201      	movs	r2, #1
 80070ec:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	899b      	ldrh	r3, [r3, #12]
 80070f6:	4619      	mov	r1, r3
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80070fe:	4413      	add	r3, r2
 8007100:	4619      	mov	r1, r3
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f7ff fe00 	bl	8006d08 <move_window>
 8007108:	4603      	mov	r3, r0
 800710a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800710c:	7ffb      	ldrb	r3, [r7, #31]
 800710e:	2b00      	cmp	r3, #0
 8007110:	f040 809a 	bne.w	8007248 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	899b      	ldrh	r3, [r3, #12]
 800711e:	461a      	mov	r2, r3
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	fbb3 f0f2 	udiv	r0, r3, r2
 8007126:	fb00 f202 	mul.w	r2, r0, r2
 800712a:	1a9b      	subs	r3, r3, r2
 800712c:	440b      	add	r3, r1
 800712e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <put_fat+0x11a>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	091b      	lsrs	r3, r3, #4
 800713e:	b2db      	uxtb	r3, r3
 8007140:	e00e      	b.n	8007160 <put_fat+0x138>
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	b25b      	sxtb	r3, r3
 8007148:	f023 030f 	bic.w	r3, r3, #15
 800714c:	b25a      	sxtb	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	0a1b      	lsrs	r3, r3, #8
 8007152:	b25b      	sxtb	r3, r3
 8007154:	f003 030f 	and.w	r3, r3, #15
 8007158:	b25b      	sxtb	r3, r3
 800715a:	4313      	orrs	r3, r2
 800715c:	b25b      	sxtb	r3, r3
 800715e:	b2db      	uxtb	r3, r3
 8007160:	697a      	ldr	r2, [r7, #20]
 8007162:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2201      	movs	r2, #1
 8007168:	70da      	strb	r2, [r3, #3]
			break;
 800716a:	e072      	b.n	8007252 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	899b      	ldrh	r3, [r3, #12]
 8007174:	085b      	lsrs	r3, r3, #1
 8007176:	b29b      	uxth	r3, r3
 8007178:	4619      	mov	r1, r3
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	fbb3 f3f1 	udiv	r3, r3, r1
 8007180:	4413      	add	r3, r2
 8007182:	4619      	mov	r1, r3
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f7ff fdbf 	bl	8006d08 <move_window>
 800718a:	4603      	mov	r3, r0
 800718c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800718e:	7ffb      	ldrb	r3, [r7, #31]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d15b      	bne.n	800724c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	005b      	lsls	r3, r3, #1
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	8992      	ldrh	r2, [r2, #12]
 80071a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80071a6:	fb00 f202 	mul.w	r2, r0, r2
 80071aa:	1a9b      	subs	r3, r3, r2
 80071ac:	440b      	add	r3, r1
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	b292      	uxth	r2, r2
 80071b2:	4611      	mov	r1, r2
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7ff fb00 	bl	80067ba <st_word>
			fs->wflag = 1;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2201      	movs	r2, #1
 80071be:	70da      	strb	r2, [r3, #3]
			break;
 80071c0:	e047      	b.n	8007252 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	899b      	ldrh	r3, [r3, #12]
 80071ca:	089b      	lsrs	r3, r3, #2
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	4619      	mov	r1, r3
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80071d6:	4413      	add	r3, r2
 80071d8:	4619      	mov	r1, r3
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	f7ff fd94 	bl	8006d08 <move_window>
 80071e0:	4603      	mov	r3, r0
 80071e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80071e4:	7ffb      	ldrb	r3, [r7, #31]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d132      	bne.n	8007250 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	009b      	lsls	r3, r3, #2
 80071fa:	68fa      	ldr	r2, [r7, #12]
 80071fc:	8992      	ldrh	r2, [r2, #12]
 80071fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8007202:	fb00 f202 	mul.w	r2, r0, r2
 8007206:	1a9b      	subs	r3, r3, r2
 8007208:	440b      	add	r3, r1
 800720a:	4618      	mov	r0, r3
 800720c:	f7ff fab2 	bl	8006774 <ld_dword>
 8007210:	4603      	mov	r3, r0
 8007212:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007216:	4323      	orrs	r3, r4
 8007218:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	8992      	ldrh	r2, [r2, #12]
 8007228:	fbb3 f0f2 	udiv	r0, r3, r2
 800722c:	fb00 f202 	mul.w	r2, r0, r2
 8007230:	1a9b      	subs	r3, r3, r2
 8007232:	440b      	add	r3, r1
 8007234:	6879      	ldr	r1, [r7, #4]
 8007236:	4618      	mov	r0, r3
 8007238:	f7ff fada 	bl	80067f0 <st_dword>
			fs->wflag = 1;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2201      	movs	r2, #1
 8007240:	70da      	strb	r2, [r3, #3]
			break;
 8007242:	e006      	b.n	8007252 <put_fat+0x22a>
			if (res != FR_OK) break;
 8007244:	bf00      	nop
 8007246:	e004      	b.n	8007252 <put_fat+0x22a>
			if (res != FR_OK) break;
 8007248:	bf00      	nop
 800724a:	e002      	b.n	8007252 <put_fat+0x22a>
			if (res != FR_OK) break;
 800724c:	bf00      	nop
 800724e:	e000      	b.n	8007252 <put_fat+0x22a>
			if (res != FR_OK) break;
 8007250:	bf00      	nop
		}
	}
	return res;
 8007252:	7ffb      	ldrb	r3, [r7, #31]
}
 8007254:	4618      	mov	r0, r3
 8007256:	3724      	adds	r7, #36	@ 0x24
 8007258:	46bd      	mov	sp, r7
 800725a:	bd90      	pop	{r4, r7, pc}

0800725c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b088      	sub	sp, #32
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007268:	2300      	movs	r3, #0
 800726a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d904      	bls.n	8007282 <remove_chain+0x26>
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	6a1b      	ldr	r3, [r3, #32]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	429a      	cmp	r2, r3
 8007280:	d301      	bcc.n	8007286 <remove_chain+0x2a>
 8007282:	2302      	movs	r3, #2
 8007284:	e04b      	b.n	800731e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00c      	beq.n	80072a6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800728c:	f04f 32ff 	mov.w	r2, #4294967295
 8007290:	6879      	ldr	r1, [r7, #4]
 8007292:	69b8      	ldr	r0, [r7, #24]
 8007294:	f7ff fec8 	bl	8007028 <put_fat>
 8007298:	4603      	mov	r3, r0
 800729a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800729c:	7ffb      	ldrb	r3, [r7, #31]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <remove_chain+0x4a>
 80072a2:	7ffb      	ldrb	r3, [r7, #31]
 80072a4:	e03b      	b.n	800731e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80072a6:	68b9      	ldr	r1, [r7, #8]
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f7ff fdea 	bl	8006e82 <get_fat>
 80072ae:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d031      	beq.n	800731a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	2b01      	cmp	r3, #1
 80072ba:	d101      	bne.n	80072c0 <remove_chain+0x64>
 80072bc:	2302      	movs	r3, #2
 80072be:	e02e      	b.n	800731e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c6:	d101      	bne.n	80072cc <remove_chain+0x70>
 80072c8:	2301      	movs	r3, #1
 80072ca:	e028      	b.n	800731e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80072cc:	2200      	movs	r2, #0
 80072ce:	68b9      	ldr	r1, [r7, #8]
 80072d0:	69b8      	ldr	r0, [r7, #24]
 80072d2:	f7ff fea9 	bl	8007028 <put_fat>
 80072d6:	4603      	mov	r3, r0
 80072d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80072da:	7ffb      	ldrb	r3, [r7, #31]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d001      	beq.n	80072e4 <remove_chain+0x88>
 80072e0:	7ffb      	ldrb	r3, [r7, #31]
 80072e2:	e01c      	b.n	800731e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	69da      	ldr	r2, [r3, #28]
 80072e8:	69bb      	ldr	r3, [r7, #24]
 80072ea:	6a1b      	ldr	r3, [r3, #32]
 80072ec:	3b02      	subs	r3, #2
 80072ee:	429a      	cmp	r2, r3
 80072f0:	d20b      	bcs.n	800730a <remove_chain+0xae>
			fs->free_clst++;
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	69db      	ldr	r3, [r3, #28]
 80072f6:	1c5a      	adds	r2, r3, #1
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	791b      	ldrb	r3, [r3, #4]
 8007300:	f043 0301 	orr.w	r3, r3, #1
 8007304:	b2da      	uxtb	r2, r3
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	68ba      	ldr	r2, [r7, #8]
 8007314:	429a      	cmp	r2, r3
 8007316:	d3c6      	bcc.n	80072a6 <remove_chain+0x4a>
 8007318:	e000      	b.n	800731c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800731a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3720      	adds	r7, #32
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b088      	sub	sp, #32
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10d      	bne.n	8007358 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d004      	beq.n	8007352 <create_chain+0x2c>
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	6a1b      	ldr	r3, [r3, #32]
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	429a      	cmp	r2, r3
 8007350:	d31b      	bcc.n	800738a <create_chain+0x64>
 8007352:	2301      	movs	r3, #1
 8007354:	61bb      	str	r3, [r7, #24]
 8007356:	e018      	b.n	800738a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff fd91 	bl	8006e82 <get_fat>
 8007360:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d801      	bhi.n	800736c <create_chain+0x46>
 8007368:	2301      	movs	r3, #1
 800736a:	e070      	b.n	800744e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007372:	d101      	bne.n	8007378 <create_chain+0x52>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	e06a      	b.n	800744e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	6a1b      	ldr	r3, [r3, #32]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	429a      	cmp	r2, r3
 8007380:	d201      	bcs.n	8007386 <create_chain+0x60>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	e063      	b.n	800744e <create_chain+0x128>
		scl = clst;
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800738a:	69bb      	ldr	r3, [r7, #24]
 800738c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	3301      	adds	r3, #1
 8007392:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	69fa      	ldr	r2, [r7, #28]
 800739a:	429a      	cmp	r2, r3
 800739c:	d307      	bcc.n	80073ae <create_chain+0x88>
				ncl = 2;
 800739e:	2302      	movs	r3, #2
 80073a0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80073a2:	69fa      	ldr	r2, [r7, #28]
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d901      	bls.n	80073ae <create_chain+0x88>
 80073aa:	2300      	movs	r3, #0
 80073ac:	e04f      	b.n	800744e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80073ae:	69f9      	ldr	r1, [r7, #28]
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7ff fd66 	bl	8006e82 <get_fat>
 80073b6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00e      	beq.n	80073dc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d003      	beq.n	80073cc <create_chain+0xa6>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ca:	d101      	bne.n	80073d0 <create_chain+0xaa>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	e03e      	b.n	800744e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80073d0:	69fa      	ldr	r2, [r7, #28]
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d1da      	bne.n	800738e <create_chain+0x68>
 80073d8:	2300      	movs	r3, #0
 80073da:	e038      	b.n	800744e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80073dc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80073de:	f04f 32ff 	mov.w	r2, #4294967295
 80073e2:	69f9      	ldr	r1, [r7, #28]
 80073e4:	6938      	ldr	r0, [r7, #16]
 80073e6:	f7ff fe1f 	bl	8007028 <put_fat>
 80073ea:	4603      	mov	r3, r0
 80073ec:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80073ee:	7dfb      	ldrb	r3, [r7, #23]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d109      	bne.n	8007408 <create_chain+0xe2>
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d006      	beq.n	8007408 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80073fa:	69fa      	ldr	r2, [r7, #28]
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	6938      	ldr	r0, [r7, #16]
 8007400:	f7ff fe12 	bl	8007028 <put_fat>
 8007404:	4603      	mov	r3, r0
 8007406:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007408:	7dfb      	ldrb	r3, [r7, #23]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d116      	bne.n	800743c <create_chain+0x116>
		fs->last_clst = ncl;
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	69fa      	ldr	r2, [r7, #28]
 8007412:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	69da      	ldr	r2, [r3, #28]
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	6a1b      	ldr	r3, [r3, #32]
 800741c:	3b02      	subs	r3, #2
 800741e:	429a      	cmp	r2, r3
 8007420:	d804      	bhi.n	800742c <create_chain+0x106>
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	1e5a      	subs	r2, r3, #1
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	791b      	ldrb	r3, [r3, #4]
 8007430:	f043 0301 	orr.w	r3, r3, #1
 8007434:	b2da      	uxtb	r2, r3
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	711a      	strb	r2, [r3, #4]
 800743a:	e007      	b.n	800744c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800743c:	7dfb      	ldrb	r3, [r7, #23]
 800743e:	2b01      	cmp	r3, #1
 8007440:	d102      	bne.n	8007448 <create_chain+0x122>
 8007442:	f04f 33ff 	mov.w	r3, #4294967295
 8007446:	e000      	b.n	800744a <create_chain+0x124>
 8007448:	2301      	movs	r3, #1
 800744a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800744c:	69fb      	ldr	r3, [r7, #28]
}
 800744e:	4618      	mov	r0, r3
 8007450:	3720      	adds	r7, #32
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007456:	b480      	push	{r7}
 8007458:	b087      	sub	sp, #28
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800746a:	3304      	adds	r3, #4
 800746c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	899b      	ldrh	r3, [r3, #12]
 8007472:	461a      	mov	r2, r3
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	fbb3 f3f2 	udiv	r3, r3, r2
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	8952      	ldrh	r2, [r2, #10]
 800747e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007482:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	1d1a      	adds	r2, r3, #4
 8007488:	613a      	str	r2, [r7, #16]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800748e:	68bb      	ldr	r3, [r7, #8]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <clmt_clust+0x42>
 8007494:	2300      	movs	r3, #0
 8007496:	e010      	b.n	80074ba <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007498:	697a      	ldr	r2, [r7, #20]
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	429a      	cmp	r2, r3
 800749e:	d307      	bcc.n	80074b0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	617b      	str	r3, [r7, #20]
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	3304      	adds	r3, #4
 80074ac:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80074ae:	e7e9      	b.n	8007484 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80074b0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	4413      	add	r3, r2
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	371c      	adds	r7, #28
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr

080074c6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b086      	sub	sp, #24
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074dc:	d204      	bcs.n	80074e8 <dir_sdi+0x22>
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	f003 031f 	and.w	r3, r3, #31
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <dir_sdi+0x26>
		return FR_INT_ERR;
 80074e8:	2302      	movs	r3, #2
 80074ea:	e071      	b.n	80075d0 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d106      	bne.n	800750c <dir_sdi+0x46>
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	2b02      	cmp	r3, #2
 8007504:	d902      	bls.n	800750c <dir_sdi+0x46>
		clst = fs->dirbase;
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800750a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10c      	bne.n	800752c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	095b      	lsrs	r3, r3, #5
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	8912      	ldrh	r2, [r2, #8]
 800751a:	4293      	cmp	r3, r2
 800751c:	d301      	bcc.n	8007522 <dir_sdi+0x5c>
 800751e:	2302      	movs	r3, #2
 8007520:	e056      	b.n	80075d0 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	61da      	str	r2, [r3, #28]
 800752a:	e02d      	b.n	8007588 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	895b      	ldrh	r3, [r3, #10]
 8007530:	461a      	mov	r2, r3
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	899b      	ldrh	r3, [r3, #12]
 8007536:	fb02 f303 	mul.w	r3, r2, r3
 800753a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800753c:	e019      	b.n	8007572 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6979      	ldr	r1, [r7, #20]
 8007542:	4618      	mov	r0, r3
 8007544:	f7ff fc9d 	bl	8006e82 <get_fat>
 8007548:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007550:	d101      	bne.n	8007556 <dir_sdi+0x90>
 8007552:	2301      	movs	r3, #1
 8007554:	e03c      	b.n	80075d0 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2b01      	cmp	r3, #1
 800755a:	d904      	bls.n	8007566 <dir_sdi+0xa0>
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	6a1b      	ldr	r3, [r3, #32]
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	429a      	cmp	r2, r3
 8007564:	d301      	bcc.n	800756a <dir_sdi+0xa4>
 8007566:	2302      	movs	r3, #2
 8007568:	e032      	b.n	80075d0 <dir_sdi+0x10a>
			ofs -= csz;
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	429a      	cmp	r2, r3
 8007578:	d2e1      	bcs.n	800753e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800757a:	6979      	ldr	r1, [r7, #20]
 800757c:	6938      	ldr	r0, [r7, #16]
 800757e:	f7ff fc61 	bl	8006e44 <clust2sect>
 8007582:	4602      	mov	r2, r0
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <dir_sdi+0xd4>
 8007596:	2302      	movs	r3, #2
 8007598:	e01a      	b.n	80075d0 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	69da      	ldr	r2, [r3, #28]
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	899b      	ldrh	r3, [r3, #12]
 80075a2:	4619      	mov	r1, r3
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80075aa:	441a      	add	r2, r3
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	899b      	ldrh	r3, [r3, #12]
 80075ba:	461a      	mov	r2, r3
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	fbb3 f0f2 	udiv	r0, r3, r2
 80075c2:	fb00 f202 	mul.w	r2, r0, r2
 80075c6:	1a9b      	subs	r3, r3, r2
 80075c8:	18ca      	adds	r2, r1, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80075ce:	2300      	movs	r3, #0
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	3718      	adds	r7, #24
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	3320      	adds	r3, #32
 80075ee:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	69db      	ldr	r3, [r3, #28]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d003      	beq.n	8007600 <dir_next+0x28>
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80075fe:	d301      	bcc.n	8007604 <dir_next+0x2c>
 8007600:	2304      	movs	r3, #4
 8007602:	e0bb      	b.n	800777c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	899b      	ldrh	r3, [r3, #12]
 8007608:	461a      	mov	r2, r3
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007610:	fb01 f202 	mul.w	r2, r1, r2
 8007614:	1a9b      	subs	r3, r3, r2
 8007616:	2b00      	cmp	r3, #0
 8007618:	f040 809d 	bne.w	8007756 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	69db      	ldr	r3, [r3, #28]
 8007620:	1c5a      	adds	r2, r3, #1
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	699b      	ldr	r3, [r3, #24]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10b      	bne.n	8007646 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	095b      	lsrs	r3, r3, #5
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	8912      	ldrh	r2, [r2, #8]
 8007636:	4293      	cmp	r3, r2
 8007638:	f0c0 808d 	bcc.w	8007756 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	61da      	str	r2, [r3, #28]
 8007642:	2304      	movs	r3, #4
 8007644:	e09a      	b.n	800777c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	899b      	ldrh	r3, [r3, #12]
 800764a:	461a      	mov	r2, r3
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007652:	68fa      	ldr	r2, [r7, #12]
 8007654:	8952      	ldrh	r2, [r2, #10]
 8007656:	3a01      	subs	r2, #1
 8007658:	4013      	ands	r3, r2
 800765a:	2b00      	cmp	r3, #0
 800765c:	d17b      	bne.n	8007756 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	4619      	mov	r1, r3
 8007666:	4610      	mov	r0, r2
 8007668:	f7ff fc0b 	bl	8006e82 <get_fat>
 800766c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d801      	bhi.n	8007678 <dir_next+0xa0>
 8007674:	2302      	movs	r3, #2
 8007676:	e081      	b.n	800777c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767e:	d101      	bne.n	8007684 <dir_next+0xac>
 8007680:	2301      	movs	r3, #1
 8007682:	e07b      	b.n	800777c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	429a      	cmp	r2, r3
 800768c:	d359      	bcc.n	8007742 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d104      	bne.n	800769e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2200      	movs	r2, #0
 8007698:	61da      	str	r2, [r3, #28]
 800769a:	2304      	movs	r3, #4
 800769c:	e06e      	b.n	800777c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	4619      	mov	r1, r3
 80076a6:	4610      	mov	r0, r2
 80076a8:	f7ff fe3d 	bl	8007326 <create_chain>
 80076ac:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d101      	bne.n	80076b8 <dir_next+0xe0>
 80076b4:	2307      	movs	r3, #7
 80076b6:	e061      	b.n	800777c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d101      	bne.n	80076c2 <dir_next+0xea>
 80076be:	2302      	movs	r3, #2
 80076c0:	e05c      	b.n	800777c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c8:	d101      	bne.n	80076ce <dir_next+0xf6>
 80076ca:	2301      	movs	r3, #1
 80076cc:	e056      	b.n	800777c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f7ff fad6 	bl	8006c80 <sync_window>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <dir_next+0x106>
 80076da:	2301      	movs	r3, #1
 80076dc:	e04e      	b.n	800777c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	899b      	ldrh	r3, [r3, #12]
 80076e8:	461a      	mov	r2, r3
 80076ea:	2100      	movs	r1, #0
 80076ec:	f7ff f8cd 	bl	800688a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80076f0:	2300      	movs	r3, #0
 80076f2:	613b      	str	r3, [r7, #16]
 80076f4:	6979      	ldr	r1, [r7, #20]
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f7ff fba4 	bl	8006e44 <clust2sect>
 80076fc:	4602      	mov	r2, r0
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	639a      	str	r2, [r3, #56]	@ 0x38
 8007702:	e012      	b.n	800772a <dir_next+0x152>
						fs->wflag = 1;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2201      	movs	r2, #1
 8007708:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800770a:	68f8      	ldr	r0, [r7, #12]
 800770c:	f7ff fab8 	bl	8006c80 <sync_window>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <dir_next+0x142>
 8007716:	2301      	movs	r3, #1
 8007718:	e030      	b.n	800777c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	3301      	adds	r3, #1
 800771e:	613b      	str	r3, [r7, #16]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	639a      	str	r2, [r3, #56]	@ 0x38
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	895b      	ldrh	r3, [r3, #10]
 800772e:	461a      	mov	r2, r3
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	4293      	cmp	r3, r2
 8007734:	d3e6      	bcc.n	8007704 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	1ad2      	subs	r2, r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007748:	6979      	ldr	r1, [r7, #20]
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f7ff fb7a 	bl	8006e44 <clust2sect>
 8007750:	4602      	mov	r2, r0
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	899b      	ldrh	r3, [r3, #12]
 8007766:	461a      	mov	r2, r3
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	fbb3 f0f2 	udiv	r0, r3, r2
 800776e:	fb00 f202 	mul.w	r2, r0, r2
 8007772:	1a9b      	subs	r3, r3, r2
 8007774:	18ca      	adds	r2, r1, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3718      	adds	r7, #24
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}

08007784 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007794:	2100      	movs	r1, #0
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7ff fe95 	bl	80074c6 <dir_sdi>
 800779c:	4603      	mov	r3, r0
 800779e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80077a0:	7dfb      	ldrb	r3, [r7, #23]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d12b      	bne.n	80077fe <dir_alloc+0x7a>
		n = 0;
 80077a6:	2300      	movs	r3, #0
 80077a8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	4619      	mov	r1, r3
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f7ff faa9 	bl	8006d08 <move_window>
 80077b6:	4603      	mov	r3, r0
 80077b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80077ba:	7dfb      	ldrb	r3, [r7, #23]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d11d      	bne.n	80077fc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a1b      	ldr	r3, [r3, #32]
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	2be5      	cmp	r3, #229	@ 0xe5
 80077c8:	d004      	beq.n	80077d4 <dir_alloc+0x50>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d107      	bne.n	80077e4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	3301      	adds	r3, #1
 80077d8:	613b      	str	r3, [r7, #16]
 80077da:	693a      	ldr	r2, [r7, #16]
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d102      	bne.n	80077e8 <dir_alloc+0x64>
 80077e2:	e00c      	b.n	80077fe <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80077e4:	2300      	movs	r3, #0
 80077e6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80077e8:	2101      	movs	r1, #1
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7ff fef4 	bl	80075d8 <dir_next>
 80077f0:	4603      	mov	r3, r0
 80077f2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80077f4:	7dfb      	ldrb	r3, [r7, #23]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d0d7      	beq.n	80077aa <dir_alloc+0x26>
 80077fa:	e000      	b.n	80077fe <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80077fc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80077fe:	7dfb      	ldrb	r3, [r7, #23]
 8007800:	2b04      	cmp	r3, #4
 8007802:	d101      	bne.n	8007808 <dir_alloc+0x84>
 8007804:	2307      	movs	r3, #7
 8007806:	75fb      	strb	r3, [r7, #23]
	return res;
 8007808:	7dfb      	ldrb	r3, [r7, #23]
}
 800780a:	4618      	mov	r0, r3
 800780c:	3718      	adds	r7, #24
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}

08007812 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	331a      	adds	r3, #26
 8007820:	4618      	mov	r0, r3
 8007822:	f7fe ff8f 	bl	8006744 <ld_word>
 8007826:	4603      	mov	r3, r0
 8007828:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	2b03      	cmp	r3, #3
 8007830:	d109      	bne.n	8007846 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	3314      	adds	r3, #20
 8007836:	4618      	mov	r0, r3
 8007838:	f7fe ff84 	bl	8006744 <ld_word>
 800783c:	4603      	mov	r3, r0
 800783e:	041b      	lsls	r3, r3, #16
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	4313      	orrs	r3, r2
 8007844:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007846:	68fb      	ldr	r3, [r7, #12]
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b084      	sub	sp, #16
 8007854:	af00      	add	r7, sp, #0
 8007856:	60f8      	str	r0, [r7, #12]
 8007858:	60b9      	str	r1, [r7, #8]
 800785a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	331a      	adds	r3, #26
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	b292      	uxth	r2, r2
 8007864:	4611      	mov	r1, r2
 8007866:	4618      	mov	r0, r3
 8007868:	f7fe ffa7 	bl	80067ba <st_word>
	if (fs->fs_type == FS_FAT32) {
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b03      	cmp	r3, #3
 8007872:	d109      	bne.n	8007888 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	f103 0214 	add.w	r2, r3, #20
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	0c1b      	lsrs	r3, r3, #16
 800787e:	b29b      	uxth	r3, r3
 8007880:	4619      	mov	r1, r3
 8007882:	4610      	mov	r0, r2
 8007884:	f7fe ff99 	bl	80067ba <st_word>
	}
}
 8007888:	bf00      	nop
 800788a:	3710      	adds	r7, #16
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007890:	b590      	push	{r4, r7, lr}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	331a      	adds	r3, #26
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fe ff50 	bl	8006744 <ld_word>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <cmp_lfn+0x1e>
 80078aa:	2300      	movs	r3, #0
 80078ac:	e059      	b.n	8007962 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80078b6:	1e5a      	subs	r2, r3, #1
 80078b8:	4613      	mov	r3, r2
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	4413      	add	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4413      	add	r3, r2
 80078c2:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80078c4:	2301      	movs	r3, #1
 80078c6:	81fb      	strh	r3, [r7, #14]
 80078c8:	2300      	movs	r3, #0
 80078ca:	613b      	str	r3, [r7, #16]
 80078cc:	e033      	b.n	8007936 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80078ce:	4a27      	ldr	r2, [pc, #156]	@ (800796c <cmp_lfn+0xdc>)
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	4413      	add	r3, r2
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	461a      	mov	r2, r3
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	4413      	add	r3, r2
 80078dc:	4618      	mov	r0, r3
 80078de:	f7fe ff31 	bl	8006744 <ld_word>
 80078e2:	4603      	mov	r3, r0
 80078e4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80078e6:	89fb      	ldrh	r3, [r7, #14]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d01a      	beq.n	8007922 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	2bfe      	cmp	r3, #254	@ 0xfe
 80078f0:	d812      	bhi.n	8007918 <cmp_lfn+0x88>
 80078f2:	89bb      	ldrh	r3, [r7, #12]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f002 f8fd 	bl	8009af4 <ff_wtoupper>
 80078fa:	4603      	mov	r3, r0
 80078fc:	461c      	mov	r4, r3
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	1c5a      	adds	r2, r3, #1
 8007902:	617a      	str	r2, [r7, #20]
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	4413      	add	r3, r2
 800790a:	881b      	ldrh	r3, [r3, #0]
 800790c:	4618      	mov	r0, r3
 800790e:	f002 f8f1 	bl	8009af4 <ff_wtoupper>
 8007912:	4603      	mov	r3, r0
 8007914:	429c      	cmp	r4, r3
 8007916:	d001      	beq.n	800791c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8007918:	2300      	movs	r3, #0
 800791a:	e022      	b.n	8007962 <cmp_lfn+0xd2>
			}
			wc = uc;
 800791c:	89bb      	ldrh	r3, [r7, #12]
 800791e:	81fb      	strh	r3, [r7, #14]
 8007920:	e006      	b.n	8007930 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8007922:	89bb      	ldrh	r3, [r7, #12]
 8007924:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007928:	4293      	cmp	r3, r2
 800792a:	d001      	beq.n	8007930 <cmp_lfn+0xa0>
 800792c:	2300      	movs	r3, #0
 800792e:	e018      	b.n	8007962 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	3301      	adds	r3, #1
 8007934:	613b      	str	r3, [r7, #16]
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	2b0c      	cmp	r3, #12
 800793a:	d9c8      	bls.n	80078ce <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00b      	beq.n	8007960 <cmp_lfn+0xd0>
 8007948:	89fb      	ldrh	r3, [r7, #14]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d008      	beq.n	8007960 <cmp_lfn+0xd0>
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	005b      	lsls	r3, r3, #1
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	4413      	add	r3, r2
 8007956:	881b      	ldrh	r3, [r3, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d001      	beq.n	8007960 <cmp_lfn+0xd0>
 800795c:	2300      	movs	r3, #0
 800795e:	e000      	b.n	8007962 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007960:	2301      	movs	r3, #1
}
 8007962:	4618      	mov	r0, r3
 8007964:	371c      	adds	r7, #28
 8007966:	46bd      	mov	sp, r7
 8007968:	bd90      	pop	{r4, r7, pc}
 800796a:	bf00      	nop
 800796c:	08010210 	.word	0x08010210

08007970 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b088      	sub	sp, #32
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	4611      	mov	r1, r2
 800797c:	461a      	mov	r2, r3
 800797e:	460b      	mov	r3, r1
 8007980:	71fb      	strb	r3, [r7, #7]
 8007982:	4613      	mov	r3, r2
 8007984:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	330d      	adds	r3, #13
 800798a:	79ba      	ldrb	r2, [r7, #6]
 800798c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	330b      	adds	r3, #11
 8007992:	220f      	movs	r2, #15
 8007994:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	330c      	adds	r3, #12
 800799a:	2200      	movs	r2, #0
 800799c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	331a      	adds	r3, #26
 80079a2:	2100      	movs	r1, #0
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fe ff08 	bl	80067ba <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80079aa:	79fb      	ldrb	r3, [r7, #7]
 80079ac:	1e5a      	subs	r2, r3, #1
 80079ae:	4613      	mov	r3, r2
 80079b0:	005b      	lsls	r3, r3, #1
 80079b2:	4413      	add	r3, r2
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	4413      	add	r3, r2
 80079b8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80079ba:	2300      	movs	r3, #0
 80079bc:	82fb      	strh	r3, [r7, #22]
 80079be:	2300      	movs	r3, #0
 80079c0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80079c2:	8afb      	ldrh	r3, [r7, #22]
 80079c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d007      	beq.n	80079dc <put_lfn+0x6c>
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	1c5a      	adds	r2, r3, #1
 80079d0:	61fa      	str	r2, [r7, #28]
 80079d2:	005b      	lsls	r3, r3, #1
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	4413      	add	r3, r2
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80079dc:	4a17      	ldr	r2, [pc, #92]	@ (8007a3c <put_lfn+0xcc>)
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	4413      	add	r3, r2
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	461a      	mov	r2, r3
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	4413      	add	r3, r2
 80079ea:	8afa      	ldrh	r2, [r7, #22]
 80079ec:	4611      	mov	r1, r2
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7fe fee3 	bl	80067ba <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80079f4:	8afb      	ldrh	r3, [r7, #22]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d102      	bne.n	8007a00 <put_lfn+0x90>
 80079fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80079fe:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	3301      	adds	r3, #1
 8007a04:	61bb      	str	r3, [r7, #24]
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	2b0c      	cmp	r3, #12
 8007a0a:	d9da      	bls.n	80079c2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007a0c:	8afb      	ldrh	r3, [r7, #22]
 8007a0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d006      	beq.n	8007a24 <put_lfn+0xb4>
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	005b      	lsls	r3, r3, #1
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d103      	bne.n	8007a2c <put_lfn+0xbc>
 8007a24:	79fb      	ldrb	r3, [r7, #7]
 8007a26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a2a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	79fa      	ldrb	r2, [r7, #7]
 8007a30:	701a      	strb	r2, [r3, #0]
}
 8007a32:	bf00      	nop
 8007a34:	3720      	adds	r7, #32
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	08010210 	.word	0x08010210

08007a40 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b08c      	sub	sp, #48	@ 0x30
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	607a      	str	r2, [r7, #4]
 8007a4c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8007a4e:	220b      	movs	r2, #11
 8007a50:	68b9      	ldr	r1, [r7, #8]
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f7fe fef8 	bl	8006848 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2b05      	cmp	r3, #5
 8007a5c:	d92b      	bls.n	8007ab6 <gen_numname+0x76>
		sr = seq;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007a62:	e022      	b.n	8007aaa <gen_numname+0x6a>
			wc = *lfn++;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	1c9a      	adds	r2, r3, #2
 8007a68:	607a      	str	r2, [r7, #4]
 8007a6a:	881b      	ldrh	r3, [r3, #0]
 8007a6c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8007a6e:	2300      	movs	r3, #0
 8007a70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a72:	e017      	b.n	8007aa4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	005a      	lsls	r2, r3, #1
 8007a78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	4413      	add	r3, r2
 8007a80:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007a82:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007a84:	085b      	lsrs	r3, r3, #1
 8007a86:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d005      	beq.n	8007a9e <gen_numname+0x5e>
 8007a92:	69fb      	ldr	r3, [r7, #28]
 8007a94:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8007a98:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8007a9c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8007a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa6:	2b0f      	cmp	r3, #15
 8007aa8:	d9e4      	bls.n	8007a74 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	881b      	ldrh	r3, [r3, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1d8      	bne.n	8007a64 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007ab2:	69fb      	ldr	r3, [r7, #28]
 8007ab4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007ab6:	2307      	movs	r3, #7
 8007ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	f003 030f 	and.w	r3, r3, #15
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	3330      	adds	r3, #48	@ 0x30
 8007ac6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8007aca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007ace:	2b39      	cmp	r3, #57	@ 0x39
 8007ad0:	d904      	bls.n	8007adc <gen_numname+0x9c>
 8007ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007ad6:	3307      	adds	r3, #7
 8007ad8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8007adc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ade:	1e5a      	subs	r2, r3, #1
 8007ae0:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007ae2:	3330      	adds	r3, #48	@ 0x30
 8007ae4:	443b      	add	r3, r7
 8007ae6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8007aea:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	091b      	lsrs	r3, r3, #4
 8007af2:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1df      	bne.n	8007aba <gen_numname+0x7a>
	ns[i] = '~';
 8007afa:	f107 0214 	add.w	r2, r7, #20
 8007afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b00:	4413      	add	r3, r2
 8007b02:	227e      	movs	r2, #126	@ 0x7e
 8007b04:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007b06:	2300      	movs	r3, #0
 8007b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b0a:	e002      	b.n	8007b12 <gen_numname+0xd2>
 8007b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b0e:	3301      	adds	r3, #1
 8007b10:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d205      	bcs.n	8007b26 <gen_numname+0xe6>
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1e:	4413      	add	r3, r2
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	2b20      	cmp	r3, #32
 8007b24:	d1f2      	bne.n	8007b0c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b28:	2b07      	cmp	r3, #7
 8007b2a:	d807      	bhi.n	8007b3c <gen_numname+0xfc>
 8007b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b2e:	1c5a      	adds	r2, r3, #1
 8007b30:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007b32:	3330      	adds	r3, #48	@ 0x30
 8007b34:	443b      	add	r3, r7
 8007b36:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007b3a:	e000      	b.n	8007b3e <gen_numname+0xfe>
 8007b3c:	2120      	movs	r1, #32
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b40:	1c5a      	adds	r2, r3, #1
 8007b42:	627a      	str	r2, [r7, #36]	@ 0x24
 8007b44:	68fa      	ldr	r2, [r7, #12]
 8007b46:	4413      	add	r3, r2
 8007b48:	460a      	mov	r2, r1
 8007b4a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b4e:	2b07      	cmp	r3, #7
 8007b50:	d9e9      	bls.n	8007b26 <gen_numname+0xe6>
}
 8007b52:	bf00      	nop
 8007b54:	bf00      	nop
 8007b56:	3730      	adds	r7, #48	@ 0x30
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007b64:	2300      	movs	r3, #0
 8007b66:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007b68:	230b      	movs	r3, #11
 8007b6a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
 8007b6e:	b2da      	uxtb	r2, r3
 8007b70:	0852      	lsrs	r2, r2, #1
 8007b72:	01db      	lsls	r3, r3, #7
 8007b74:	4313      	orrs	r3, r2
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	1c59      	adds	r1, r3, #1
 8007b7c:	6079      	str	r1, [r7, #4]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	4413      	add	r3, r2
 8007b82:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	3b01      	subs	r3, #1
 8007b88:	60bb      	str	r3, [r7, #8]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1ed      	bne.n	8007b6c <sum_sfn+0x10>
	return sum;
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b086      	sub	sp, #24
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007bac:	2100      	movs	r1, #0
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f7ff fc89 	bl	80074c6 <dir_sdi>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007bb8:	7dfb      	ldrb	r3, [r7, #23]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <dir_find+0x24>
 8007bbe:	7dfb      	ldrb	r3, [r7, #23]
 8007bc0:	e0a9      	b.n	8007d16 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007bc2:	23ff      	movs	r3, #255	@ 0xff
 8007bc4:	753b      	strb	r3, [r7, #20]
 8007bc6:	7d3b      	ldrb	r3, [r7, #20]
 8007bc8:	757b      	strb	r3, [r7, #21]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	6938      	ldr	r0, [r7, #16]
 8007bda:	f7ff f895 	bl	8006d08 <move_window>
 8007bde:	4603      	mov	r3, r0
 8007be0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007be2:	7dfb      	ldrb	r3, [r7, #23]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f040 8090 	bne.w	8007d0a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a1b      	ldr	r3, [r3, #32]
 8007bee:	781b      	ldrb	r3, [r3, #0]
 8007bf0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007bf2:	7dbb      	ldrb	r3, [r7, #22]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d102      	bne.n	8007bfe <dir_find+0x60>
 8007bf8:	2304      	movs	r3, #4
 8007bfa:	75fb      	strb	r3, [r7, #23]
 8007bfc:	e08a      	b.n	8007d14 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	330b      	adds	r3, #11
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c0a:	73fb      	strb	r3, [r7, #15]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	7bfa      	ldrb	r2, [r7, #15]
 8007c10:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007c12:	7dbb      	ldrb	r3, [r7, #22]
 8007c14:	2be5      	cmp	r3, #229	@ 0xe5
 8007c16:	d007      	beq.n	8007c28 <dir_find+0x8a>
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
 8007c1a:	f003 0308 	and.w	r3, r3, #8
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d009      	beq.n	8007c36 <dir_find+0x98>
 8007c22:	7bfb      	ldrb	r3, [r7, #15]
 8007c24:	2b0f      	cmp	r3, #15
 8007c26:	d006      	beq.n	8007c36 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007c28:	23ff      	movs	r3, #255	@ 0xff
 8007c2a:	757b      	strb	r3, [r7, #21]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c32:	631a      	str	r2, [r3, #48]	@ 0x30
 8007c34:	e05e      	b.n	8007cf4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
 8007c38:	2b0f      	cmp	r3, #15
 8007c3a:	d136      	bne.n	8007caa <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007c42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d154      	bne.n	8007cf4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007c4a:	7dbb      	ldrb	r3, [r7, #22]
 8007c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00d      	beq.n	8007c70 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a1b      	ldr	r3, [r3, #32]
 8007c58:	7b5b      	ldrb	r3, [r3, #13]
 8007c5a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007c5c:	7dbb      	ldrb	r3, [r7, #22]
 8007c5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c62:	75bb      	strb	r3, [r7, #22]
 8007c64:	7dbb      	ldrb	r3, [r7, #22]
 8007c66:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	695a      	ldr	r2, [r3, #20]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007c70:	7dba      	ldrb	r2, [r7, #22]
 8007c72:	7d7b      	ldrb	r3, [r7, #21]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d115      	bne.n	8007ca4 <dir_find+0x106>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a1b      	ldr	r3, [r3, #32]
 8007c7c:	330d      	adds	r3, #13
 8007c7e:	781b      	ldrb	r3, [r3, #0]
 8007c80:	7d3a      	ldrb	r2, [r7, #20]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d10e      	bne.n	8007ca4 <dir_find+0x106>
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	691a      	ldr	r2, [r3, #16]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a1b      	ldr	r3, [r3, #32]
 8007c8e:	4619      	mov	r1, r3
 8007c90:	4610      	mov	r0, r2
 8007c92:	f7ff fdfd 	bl	8007890 <cmp_lfn>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d003      	beq.n	8007ca4 <dir_find+0x106>
 8007c9c:	7d7b      	ldrb	r3, [r7, #21]
 8007c9e:	3b01      	subs	r3, #1
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	e000      	b.n	8007ca6 <dir_find+0x108>
 8007ca4:	23ff      	movs	r3, #255	@ 0xff
 8007ca6:	757b      	strb	r3, [r7, #21]
 8007ca8:	e024      	b.n	8007cf4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007caa:	7d7b      	ldrb	r3, [r7, #21]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d109      	bne.n	8007cc4 <dir_find+0x126>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a1b      	ldr	r3, [r3, #32]
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7ff ff51 	bl	8007b5c <sum_sfn>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	7d3b      	ldrb	r3, [r7, #20]
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d024      	beq.n	8007d0e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007cca:	f003 0301 	and.w	r3, r3, #1
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10a      	bne.n	8007ce8 <dir_find+0x14a>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a18      	ldr	r0, [r3, #32]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	3324      	adds	r3, #36	@ 0x24
 8007cda:	220b      	movs	r2, #11
 8007cdc:	4619      	mov	r1, r3
 8007cde:	f7fe fdef 	bl	80068c0 <mem_cmp>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d014      	beq.n	8007d12 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007ce8:	23ff      	movs	r3, #255	@ 0xff
 8007cea:	757b      	strb	r3, [r7, #21]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f7ff fc6e 	bl	80075d8 <dir_next>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007d00:	7dfb      	ldrb	r3, [r7, #23]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f43f af65 	beq.w	8007bd2 <dir_find+0x34>
 8007d08:	e004      	b.n	8007d14 <dir_find+0x176>
		if (res != FR_OK) break;
 8007d0a:	bf00      	nop
 8007d0c:	e002      	b.n	8007d14 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007d0e:	bf00      	nop
 8007d10:	e000      	b.n	8007d14 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007d12:	bf00      	nop

	return res;
 8007d14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3718      	adds	r7, #24
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
	...

08007d20 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b08c      	sub	sp, #48	@ 0x30
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007d34:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d001      	beq.n	8007d40 <dir_register+0x20>
 8007d3c:	2306      	movs	r3, #6
 8007d3e:	e0e0      	b.n	8007f02 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007d40:	2300      	movs	r3, #0
 8007d42:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d44:	e002      	b.n	8007d4c <dir_register+0x2c>
 8007d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d48:	3301      	adds	r3, #1
 8007d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	691a      	ldr	r2, [r3, #16]
 8007d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d52:	005b      	lsls	r3, r3, #1
 8007d54:	4413      	add	r3, r2
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1f4      	bne.n	8007d46 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8007d62:	f107 030c 	add.w	r3, r7, #12
 8007d66:	220c      	movs	r2, #12
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f7fe fd6d 	bl	8006848 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d032      	beq.n	8007dde <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2240      	movs	r2, #64	@ 0x40
 8007d7c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8007d80:	2301      	movs	r3, #1
 8007d82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007d84:	e016      	b.n	8007db4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	691a      	ldr	r2, [r3, #16]
 8007d90:	f107 010c 	add.w	r1, r7, #12
 8007d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d96:	f7ff fe53 	bl	8007a40 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7ff feff 	bl	8007b9e <dir_find>
 8007da0:	4603      	mov	r3, r0
 8007da2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8007da6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d106      	bne.n	8007dbc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db0:	3301      	adds	r3, #1
 8007db2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db6:	2b63      	cmp	r3, #99	@ 0x63
 8007db8:	d9e5      	bls.n	8007d86 <dir_register+0x66>
 8007dba:	e000      	b.n	8007dbe <dir_register+0x9e>
			if (res != FR_OK) break;
 8007dbc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc0:	2b64      	cmp	r3, #100	@ 0x64
 8007dc2:	d101      	bne.n	8007dc8 <dir_register+0xa8>
 8007dc4:	2307      	movs	r3, #7
 8007dc6:	e09c      	b.n	8007f02 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007dc8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007dcc:	2b04      	cmp	r3, #4
 8007dce:	d002      	beq.n	8007dd6 <dir_register+0xb6>
 8007dd0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007dd4:	e095      	b.n	8007f02 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007dd6:	7dfa      	ldrb	r2, [r7, #23]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007dde:	7dfb      	ldrb	r3, [r7, #23]
 8007de0:	f003 0302 	and.w	r3, r3, #2
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d007      	beq.n	8007df8 <dir_register+0xd8>
 8007de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dea:	330c      	adds	r3, #12
 8007dec:	4a47      	ldr	r2, [pc, #284]	@ (8007f0c <dir_register+0x1ec>)
 8007dee:	fba2 2303 	umull	r2, r3, r2, r3
 8007df2:	089b      	lsrs	r3, r3, #2
 8007df4:	3301      	adds	r3, #1
 8007df6:	e000      	b.n	8007dfa <dir_register+0xda>
 8007df8:	2301      	movs	r3, #1
 8007dfa:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007dfc:	6a39      	ldr	r1, [r7, #32]
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7ff fcc0 	bl	8007784 <dir_alloc>
 8007e04:	4603      	mov	r3, r0
 8007e06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007e0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d148      	bne.n	8007ea4 <dir_register+0x184>
 8007e12:	6a3b      	ldr	r3, [r7, #32]
 8007e14:	3b01      	subs	r3, #1
 8007e16:	623b      	str	r3, [r7, #32]
 8007e18:	6a3b      	ldr	r3, [r7, #32]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d042      	beq.n	8007ea4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	695a      	ldr	r2, [r3, #20]
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	015b      	lsls	r3, r3, #5
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	4619      	mov	r1, r3
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f7ff fb4b 	bl	80074c6 <dir_sdi>
 8007e30:	4603      	mov	r3, r0
 8007e32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007e36:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d132      	bne.n	8007ea4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3324      	adds	r3, #36	@ 0x24
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7ff fe8a 	bl	8007b5c <sum_sfn>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	69db      	ldr	r3, [r3, #28]
 8007e50:	4619      	mov	r1, r3
 8007e52:	69f8      	ldr	r0, [r7, #28]
 8007e54:	f7fe ff58 	bl	8006d08 <move_window>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8007e5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d11d      	bne.n	8007ea2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	6918      	ldr	r0, [r3, #16]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a19      	ldr	r1, [r3, #32]
 8007e6e:	6a3b      	ldr	r3, [r7, #32]
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	7efb      	ldrb	r3, [r7, #27]
 8007e74:	f7ff fd7c 	bl	8007970 <put_lfn>
				fs->wflag = 1;
 8007e78:	69fb      	ldr	r3, [r7, #28]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007e7e:	2100      	movs	r1, #0
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f7ff fba9 	bl	80075d8 <dir_next>
 8007e86:	4603      	mov	r3, r0
 8007e88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8007e8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d107      	bne.n	8007ea4 <dir_register+0x184>
 8007e94:	6a3b      	ldr	r3, [r7, #32]
 8007e96:	3b01      	subs	r3, #1
 8007e98:	623b      	str	r3, [r7, #32]
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1d5      	bne.n	8007e4c <dir_register+0x12c>
 8007ea0:	e000      	b.n	8007ea4 <dir_register+0x184>
				if (res != FR_OK) break;
 8007ea2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007ea4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d128      	bne.n	8007efe <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	69db      	ldr	r3, [r3, #28]
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	69f8      	ldr	r0, [r7, #28]
 8007eb4:	f7fe ff28 	bl	8006d08 <move_window>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007ebe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d11b      	bne.n	8007efe <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	2220      	movs	r2, #32
 8007ecc:	2100      	movs	r1, #0
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7fe fcdb 	bl	800688a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a18      	ldr	r0, [r3, #32]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	3324      	adds	r3, #36	@ 0x24
 8007edc:	220b      	movs	r2, #11
 8007ede:	4619      	mov	r1, r3
 8007ee0:	f7fe fcb2 	bl	8006848 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a1b      	ldr	r3, [r3, #32]
 8007eee:	330c      	adds	r3, #12
 8007ef0:	f002 0218 	and.w	r2, r2, #24
 8007ef4:	b2d2      	uxtb	r2, r2
 8007ef6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	2201      	movs	r2, #1
 8007efc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007efe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3730      	adds	r7, #48	@ 0x30
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	4ec4ec4f 	.word	0x4ec4ec4f

08007f10 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b088      	sub	sp, #32
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	2200      	movs	r2, #0
 8007f24:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	69db      	ldr	r3, [r3, #28]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f000 80ca 	beq.w	80080c4 <get_fileinfo+0x1b4>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f38:	d032      	beq.n	8007fa0 <get_fileinfo+0x90>
			i = j = 0;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	61bb      	str	r3, [r7, #24]
 8007f3e:	69bb      	ldr	r3, [r7, #24]
 8007f40:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007f42:	e01b      	b.n	8007f7c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8007f44:	89fb      	ldrh	r3, [r7, #14]
 8007f46:	2100      	movs	r1, #0
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f001 fd97 	bl	8009a7c <ff_convert>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8007f52:	89fb      	ldrh	r3, [r7, #14]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d102      	bne.n	8007f5e <get_fileinfo+0x4e>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	61fb      	str	r3, [r7, #28]
 8007f5c:	e01a      	b.n	8007f94 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	2bfe      	cmp	r3, #254	@ 0xfe
 8007f62:	d902      	bls.n	8007f6a <get_fileinfo+0x5a>
 8007f64:	2300      	movs	r3, #0
 8007f66:	61fb      	str	r3, [r7, #28]
 8007f68:	e014      	b.n	8007f94 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	1c5a      	adds	r2, r3, #1
 8007f6e:	61fa      	str	r2, [r7, #28]
 8007f70:	89fa      	ldrh	r2, [r7, #14]
 8007f72:	b2d1      	uxtb	r1, r2
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	4413      	add	r3, r2
 8007f78:	460a      	mov	r2, r1
 8007f7a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	691a      	ldr	r2, [r3, #16]
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	1c59      	adds	r1, r3, #1
 8007f84:	61b9      	str	r1, [r7, #24]
 8007f86:	005b      	lsls	r3, r3, #1
 8007f88:	4413      	add	r3, r2
 8007f8a:	881b      	ldrh	r3, [r3, #0]
 8007f8c:	81fb      	strh	r3, [r7, #14]
 8007f8e:	89fb      	ldrh	r3, [r7, #14]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1d7      	bne.n	8007f44 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8007f94:	683a      	ldr	r2, [r7, #0]
 8007f96:	69fb      	ldr	r3, [r7, #28]
 8007f98:	4413      	add	r3, r2
 8007f9a:	3316      	adds	r3, #22
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	61bb      	str	r3, [r7, #24]
 8007fa4:	69bb      	ldr	r3, [r7, #24]
 8007fa6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	69fb      	ldr	r3, [r7, #28]
 8007fac:	4413      	add	r3, r2
 8007fae:	3316      	adds	r3, #22
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8007fb4:	e04d      	b.n	8008052 <get_fileinfo+0x142>
		c = (TCHAR)dp->dir[i++];
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a1a      	ldr	r2, [r3, #32]
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	1c59      	adds	r1, r3, #1
 8007fbe:	61f9      	str	r1, [r7, #28]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	781b      	ldrb	r3, [r3, #0]
 8007fc4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007fc6:	7dfb      	ldrb	r3, [r7, #23]
 8007fc8:	2b20      	cmp	r3, #32
 8007fca:	d041      	beq.n	8008050 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007fcc:	7dfb      	ldrb	r3, [r7, #23]
 8007fce:	2b05      	cmp	r3, #5
 8007fd0:	d101      	bne.n	8007fd6 <get_fileinfo+0xc6>
 8007fd2:	23e5      	movs	r3, #229	@ 0xe5
 8007fd4:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	2b09      	cmp	r3, #9
 8007fda:	d10f      	bne.n	8007ffc <get_fileinfo+0xec>
			if (!lfv) fno->fname[j] = '.';
 8007fdc:	89bb      	ldrh	r3, [r7, #12]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d105      	bne.n	8007fee <get_fileinfo+0xde>
 8007fe2:	683a      	ldr	r2, [r7, #0]
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	3316      	adds	r3, #22
 8007fea:	222e      	movs	r2, #46	@ 0x2e
 8007fec:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	1c5a      	adds	r2, r3, #1
 8007ff2:	61ba      	str	r2, [r7, #24]
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	222e      	movs	r2, #46	@ 0x2e
 8007ffa:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8007ffc:	683a      	ldr	r2, [r7, #0]
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	4413      	add	r3, r2
 8008002:	3309      	adds	r3, #9
 8008004:	7dfa      	ldrb	r2, [r7, #23]
 8008006:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8008008:	89bb      	ldrh	r3, [r7, #12]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d11c      	bne.n	8008048 <get_fileinfo+0x138>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800800e:	7dfb      	ldrb	r3, [r7, #23]
 8008010:	2b40      	cmp	r3, #64	@ 0x40
 8008012:	d913      	bls.n	800803c <get_fileinfo+0x12c>
 8008014:	7dfb      	ldrb	r3, [r7, #23]
 8008016:	2b5a      	cmp	r3, #90	@ 0x5a
 8008018:	d810      	bhi.n	800803c <get_fileinfo+0x12c>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	330c      	adds	r3, #12
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	461a      	mov	r2, r3
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	2b08      	cmp	r3, #8
 8008028:	d901      	bls.n	800802e <get_fileinfo+0x11e>
 800802a:	2310      	movs	r3, #16
 800802c:	e000      	b.n	8008030 <get_fileinfo+0x120>
 800802e:	2308      	movs	r3, #8
 8008030:	4013      	ands	r3, r2
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <get_fileinfo+0x12c>
				c += 0x20;			/* To lower */
 8008036:	7dfb      	ldrb	r3, [r7, #23]
 8008038:	3320      	adds	r3, #32
 800803a:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800803c:	683a      	ldr	r2, [r7, #0]
 800803e:	69bb      	ldr	r3, [r7, #24]
 8008040:	4413      	add	r3, r2
 8008042:	3316      	adds	r3, #22
 8008044:	7dfa      	ldrb	r2, [r7, #23]
 8008046:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	3301      	adds	r3, #1
 800804c:	61bb      	str	r3, [r7, #24]
 800804e:	e000      	b.n	8008052 <get_fileinfo+0x142>
		if (c == ' ') continue;				/* Skip padding spaces */
 8008050:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	2b0a      	cmp	r3, #10
 8008056:	d9ae      	bls.n	8007fb6 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8008058:	89bb      	ldrh	r3, [r7, #12]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d10d      	bne.n	800807a <get_fileinfo+0x16a>
		fno->fname[j] = 0;
 800805e:	683a      	ldr	r2, [r7, #0]
 8008060:	69bb      	ldr	r3, [r7, #24]
 8008062:	4413      	add	r3, r2
 8008064:	3316      	adds	r3, #22
 8008066:	2200      	movs	r2, #0
 8008068:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	330c      	adds	r3, #12
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <get_fileinfo+0x16a>
 8008076:	2300      	movs	r3, #0
 8008078:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	4413      	add	r3, r2
 8008080:	3309      	adds	r3, #9
 8008082:	2200      	movs	r2, #0
 8008084:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a1b      	ldr	r3, [r3, #32]
 800808a:	7ada      	ldrb	r2, [r3, #11]
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6a1b      	ldr	r3, [r3, #32]
 8008094:	331c      	adds	r3, #28
 8008096:	4618      	mov	r0, r3
 8008098:	f7fe fb6c 	bl	8006774 <ld_dword>
 800809c:	4602      	mov	r2, r0
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	3316      	adds	r3, #22
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7fe fb63 	bl	8006774 <ld_dword>
 80080ae:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	80da      	strh	r2, [r3, #6]
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	0c1b      	lsrs	r3, r3, #16
 80080bc:	b29a      	uxth	r2, r3
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	809a      	strh	r2, [r3, #4]
 80080c2:	e000      	b.n	80080c6 <get_fileinfo+0x1b6>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80080c4:	bf00      	nop
}
 80080c6:	3720      	adds	r7, #32
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}

080080cc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b08a      	sub	sp, #40	@ 0x28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	613b      	str	r3, [r7, #16]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	60fb      	str	r3, [r7, #12]
 80080e4:	2300      	movs	r3, #0
 80080e6:	617b      	str	r3, [r7, #20]
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	1c5a      	adds	r2, r3, #1
 80080f0:	61ba      	str	r2, [r7, #24]
 80080f2:	693a      	ldr	r2, [r7, #16]
 80080f4:	4413      	add	r3, r2
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80080fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80080fc:	2b1f      	cmp	r3, #31
 80080fe:	d940      	bls.n	8008182 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008100:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008102:	2b2f      	cmp	r3, #47	@ 0x2f
 8008104:	d006      	beq.n	8008114 <create_name+0x48>
 8008106:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008108:	2b5c      	cmp	r3, #92	@ 0x5c
 800810a:	d110      	bne.n	800812e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800810c:	e002      	b.n	8008114 <create_name+0x48>
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	3301      	adds	r3, #1
 8008112:	61bb      	str	r3, [r7, #24]
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	4413      	add	r3, r2
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	2b2f      	cmp	r3, #47	@ 0x2f
 800811e:	d0f6      	beq.n	800810e <create_name+0x42>
 8008120:	693a      	ldr	r2, [r7, #16]
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	4413      	add	r3, r2
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	2b5c      	cmp	r3, #92	@ 0x5c
 800812a:	d0f0      	beq.n	800810e <create_name+0x42>
			break;
 800812c:	e02a      	b.n	8008184 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	2bfe      	cmp	r3, #254	@ 0xfe
 8008132:	d901      	bls.n	8008138 <create_name+0x6c>
 8008134:	2306      	movs	r3, #6
 8008136:	e17d      	b.n	8008434 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008138:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800813a:	b2db      	uxtb	r3, r3
 800813c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800813e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008140:	2101      	movs	r1, #1
 8008142:	4618      	mov	r0, r3
 8008144:	f001 fc9a 	bl	8009a7c <ff_convert>
 8008148:	4603      	mov	r3, r0
 800814a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800814c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <create_name+0x8a>
 8008152:	2306      	movs	r3, #6
 8008154:	e16e      	b.n	8008434 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008156:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008158:	2b7f      	cmp	r3, #127	@ 0x7f
 800815a:	d809      	bhi.n	8008170 <create_name+0xa4>
 800815c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800815e:	4619      	mov	r1, r3
 8008160:	488d      	ldr	r0, [pc, #564]	@ (8008398 <create_name+0x2cc>)
 8008162:	f7fe fbd4 	bl	800690e <chk_chr>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <create_name+0xa4>
 800816c:	2306      	movs	r3, #6
 800816e:	e161      	b.n	8008434 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	1c5a      	adds	r2, r3, #1
 8008174:	617a      	str	r2, [r7, #20]
 8008176:	005b      	lsls	r3, r3, #1
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	4413      	add	r3, r2
 800817c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800817e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008180:	e7b4      	b.n	80080ec <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008182:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	441a      	add	r2, r3
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800818e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008190:	2b1f      	cmp	r3, #31
 8008192:	d801      	bhi.n	8008198 <create_name+0xcc>
 8008194:	2304      	movs	r3, #4
 8008196:	e000      	b.n	800819a <create_name+0xce>
 8008198:	2300      	movs	r3, #0
 800819a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800819e:	e011      	b.n	80081c4 <create_name+0xf8>
		w = lfn[di - 1];
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80081a6:	3b01      	subs	r3, #1
 80081a8:	005b      	lsls	r3, r3, #1
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	4413      	add	r3, r2
 80081ae:	881b      	ldrh	r3, [r3, #0]
 80081b0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80081b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80081b4:	2b20      	cmp	r3, #32
 80081b6:	d002      	beq.n	80081be <create_name+0xf2>
 80081b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80081ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80081bc:	d106      	bne.n	80081cc <create_name+0x100>
		di--;
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	3b01      	subs	r3, #1
 80081c2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1ea      	bne.n	80081a0 <create_name+0xd4>
 80081ca:	e000      	b.n	80081ce <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80081cc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	005b      	lsls	r3, r3, #1
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	4413      	add	r3, r2
 80081d6:	2200      	movs	r2, #0
 80081d8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <create_name+0x118>
 80081e0:	2306      	movs	r3, #6
 80081e2:	e127      	b.n	8008434 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	3324      	adds	r3, #36	@ 0x24
 80081e8:	220b      	movs	r2, #11
 80081ea:	2120      	movs	r1, #32
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fe fb4c 	bl	800688a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80081f2:	2300      	movs	r3, #0
 80081f4:	61bb      	str	r3, [r7, #24]
 80081f6:	e002      	b.n	80081fe <create_name+0x132>
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	3301      	adds	r3, #1
 80081fc:	61bb      	str	r3, [r7, #24]
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	005b      	lsls	r3, r3, #1
 8008202:	68fa      	ldr	r2, [r7, #12]
 8008204:	4413      	add	r3, r2
 8008206:	881b      	ldrh	r3, [r3, #0]
 8008208:	2b20      	cmp	r3, #32
 800820a:	d0f5      	beq.n	80081f8 <create_name+0x12c>
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	005b      	lsls	r3, r3, #1
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	4413      	add	r3, r2
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	2b2e      	cmp	r3, #46	@ 0x2e
 8008218:	d0ee      	beq.n	80081f8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d009      	beq.n	8008234 <create_name+0x168>
 8008220:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008224:	f043 0303 	orr.w	r3, r3, #3
 8008228:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800822c:	e002      	b.n	8008234 <create_name+0x168>
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	3b01      	subs	r3, #1
 8008232:	617b      	str	r3, [r7, #20]
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d009      	beq.n	800824e <create_name+0x182>
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008240:	3b01      	subs	r3, #1
 8008242:	005b      	lsls	r3, r3, #1
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	4413      	add	r3, r2
 8008248:	881b      	ldrh	r3, [r3, #0]
 800824a:	2b2e      	cmp	r3, #46	@ 0x2e
 800824c:	d1ef      	bne.n	800822e <create_name+0x162>

	i = b = 0; ni = 8;
 800824e:	2300      	movs	r3, #0
 8008250:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008254:	2300      	movs	r3, #0
 8008256:	623b      	str	r3, [r7, #32]
 8008258:	2308      	movs	r3, #8
 800825a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	1c5a      	adds	r2, r3, #1
 8008260:	61ba      	str	r2, [r7, #24]
 8008262:	005b      	lsls	r3, r3, #1
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	4413      	add	r3, r2
 8008268:	881b      	ldrh	r3, [r3, #0]
 800826a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800826c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800826e:	2b00      	cmp	r3, #0
 8008270:	f000 8090 	beq.w	8008394 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008274:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008276:	2b20      	cmp	r3, #32
 8008278:	d006      	beq.n	8008288 <create_name+0x1bc>
 800827a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800827c:	2b2e      	cmp	r3, #46	@ 0x2e
 800827e:	d10a      	bne.n	8008296 <create_name+0x1ca>
 8008280:	69ba      	ldr	r2, [r7, #24]
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	429a      	cmp	r2, r3
 8008286:	d006      	beq.n	8008296 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008288:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800828c:	f043 0303 	orr.w	r3, r3, #3
 8008290:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008294:	e07d      	b.n	8008392 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008296:	6a3a      	ldr	r2, [r7, #32]
 8008298:	69fb      	ldr	r3, [r7, #28]
 800829a:	429a      	cmp	r2, r3
 800829c:	d203      	bcs.n	80082a6 <create_name+0x1da>
 800829e:	69ba      	ldr	r2, [r7, #24]
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d123      	bne.n	80082ee <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	2b0b      	cmp	r3, #11
 80082aa:	d106      	bne.n	80082ba <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80082ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082b0:	f043 0303 	orr.w	r3, r3, #3
 80082b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80082b8:	e075      	b.n	80083a6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80082ba:	69ba      	ldr	r2, [r7, #24]
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d005      	beq.n	80082ce <create_name+0x202>
 80082c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082c6:	f043 0303 	orr.w	r3, r3, #3
 80082ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80082ce:	69ba      	ldr	r2, [r7, #24]
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d866      	bhi.n	80083a4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	61bb      	str	r3, [r7, #24]
 80082da:	2308      	movs	r3, #8
 80082dc:	623b      	str	r3, [r7, #32]
 80082de:	230b      	movs	r3, #11
 80082e0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80082e2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80082ec:	e051      	b.n	8008392 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80082ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80082f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80082f2:	d914      	bls.n	800831e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80082f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80082f6:	2100      	movs	r1, #0
 80082f8:	4618      	mov	r0, r3
 80082fa:	f001 fbbf 	bl	8009a7c <ff_convert>
 80082fe:	4603      	mov	r3, r0
 8008300:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008302:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008304:	2b00      	cmp	r3, #0
 8008306:	d004      	beq.n	8008312 <create_name+0x246>
 8008308:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800830a:	3b80      	subs	r3, #128	@ 0x80
 800830c:	4a23      	ldr	r2, [pc, #140]	@ (800839c <create_name+0x2d0>)
 800830e:	5cd3      	ldrb	r3, [r2, r3]
 8008310:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008312:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008316:	f043 0302 	orr.w	r3, r3, #2
 800831a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800831e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008320:	2b00      	cmp	r3, #0
 8008322:	d007      	beq.n	8008334 <create_name+0x268>
 8008324:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008326:	4619      	mov	r1, r3
 8008328:	481d      	ldr	r0, [pc, #116]	@ (80083a0 <create_name+0x2d4>)
 800832a:	f7fe faf0 	bl	800690e <chk_chr>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d008      	beq.n	8008346 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008334:	235f      	movs	r3, #95	@ 0x5f
 8008336:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008338:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800833c:	f043 0303 	orr.w	r3, r3, #3
 8008340:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008344:	e01b      	b.n	800837e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008346:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008348:	2b40      	cmp	r3, #64	@ 0x40
 800834a:	d909      	bls.n	8008360 <create_name+0x294>
 800834c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800834e:	2b5a      	cmp	r3, #90	@ 0x5a
 8008350:	d806      	bhi.n	8008360 <create_name+0x294>
					b |= 2;
 8008352:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008356:	f043 0302 	orr.w	r3, r3, #2
 800835a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800835e:	e00e      	b.n	800837e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008360:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008362:	2b60      	cmp	r3, #96	@ 0x60
 8008364:	d90b      	bls.n	800837e <create_name+0x2b2>
 8008366:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008368:	2b7a      	cmp	r3, #122	@ 0x7a
 800836a:	d808      	bhi.n	800837e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800836c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008370:	f043 0301 	orr.w	r3, r3, #1
 8008374:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008378:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800837a:	3b20      	subs	r3, #32
 800837c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800837e:	6a3b      	ldr	r3, [r7, #32]
 8008380:	1c5a      	adds	r2, r3, #1
 8008382:	623a      	str	r2, [r7, #32]
 8008384:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008386:	b2d1      	uxtb	r1, r2
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	4413      	add	r3, r2
 800838c:	460a      	mov	r2, r1
 800838e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008392:	e763      	b.n	800825c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008394:	bf00      	nop
 8008396:	e006      	b.n	80083a6 <create_name+0x2da>
 8008398:	0800e068 	.word	0x0800e068
 800839c:	08010190 	.word	0x08010190
 80083a0:	0800e074 	.word	0x0800e074
			if (si > di) break;			/* No extension */
 80083a4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80083ac:	2be5      	cmp	r3, #229	@ 0xe5
 80083ae:	d103      	bne.n	80083b8 <create_name+0x2ec>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2205      	movs	r2, #5
 80083b4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	2b08      	cmp	r3, #8
 80083bc:	d104      	bne.n	80083c8 <create_name+0x2fc>
 80083be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80083c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80083cc:	f003 030c 	and.w	r3, r3, #12
 80083d0:	2b0c      	cmp	r3, #12
 80083d2:	d005      	beq.n	80083e0 <create_name+0x314>
 80083d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80083d8:	f003 0303 	and.w	r3, r3, #3
 80083dc:	2b03      	cmp	r3, #3
 80083de:	d105      	bne.n	80083ec <create_name+0x320>
 80083e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083e4:	f043 0302 	orr.w	r3, r3, #2
 80083e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80083ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083f0:	f003 0302 	and.w	r3, r3, #2
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d117      	bne.n	8008428 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80083f8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80083fc:	f003 0303 	and.w	r3, r3, #3
 8008400:	2b01      	cmp	r3, #1
 8008402:	d105      	bne.n	8008410 <create_name+0x344>
 8008404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008408:	f043 0310 	orr.w	r3, r3, #16
 800840c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008410:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008414:	f003 030c 	and.w	r3, r3, #12
 8008418:	2b04      	cmp	r3, #4
 800841a:	d105      	bne.n	8008428 <create_name+0x35c>
 800841c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008420:	f043 0308 	orr.w	r3, r3, #8
 8008424:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800842e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8008432:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008434:	4618      	mov	r0, r3
 8008436:	3728      	adds	r7, #40	@ 0x28
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b086      	sub	sp, #24
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008450:	e002      	b.n	8008458 <follow_path+0x1c>
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	3301      	adds	r3, #1
 8008456:	603b      	str	r3, [r7, #0]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	2b2f      	cmp	r3, #47	@ 0x2f
 800845e:	d0f8      	beq.n	8008452 <follow_path+0x16>
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	2b5c      	cmp	r3, #92	@ 0x5c
 8008466:	d0f4      	beq.n	8008452 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	2200      	movs	r2, #0
 800846c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	2b1f      	cmp	r3, #31
 8008474:	d80a      	bhi.n	800848c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2280      	movs	r2, #128	@ 0x80
 800847a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800847e:	2100      	movs	r1, #0
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f7ff f820 	bl	80074c6 <dir_sdi>
 8008486:	4603      	mov	r3, r0
 8008488:	75fb      	strb	r3, [r7, #23]
 800848a:	e048      	b.n	800851e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800848c:	463b      	mov	r3, r7
 800848e:	4619      	mov	r1, r3
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7ff fe1b 	bl	80080cc <create_name>
 8008496:	4603      	mov	r3, r0
 8008498:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800849a:	7dfb      	ldrb	r3, [r7, #23]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d139      	bne.n	8008514 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f7ff fb7c 	bl	8007b9e <dir_find>
 80084a6:	4603      	mov	r3, r0
 80084a8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80084b0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80084b2:	7dfb      	ldrb	r3, [r7, #23]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00a      	beq.n	80084ce <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
 80084ba:	2b04      	cmp	r3, #4
 80084bc:	d12c      	bne.n	8008518 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80084be:	7afb      	ldrb	r3, [r7, #11]
 80084c0:	f003 0304 	and.w	r3, r3, #4
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d127      	bne.n	8008518 <follow_path+0xdc>
 80084c8:	2305      	movs	r3, #5
 80084ca:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80084cc:	e024      	b.n	8008518 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80084ce:	7afb      	ldrb	r3, [r7, #11]
 80084d0:	f003 0304 	and.w	r3, r3, #4
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d121      	bne.n	800851c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	799b      	ldrb	r3, [r3, #6]
 80084dc:	f003 0310 	and.w	r3, r3, #16
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d102      	bne.n	80084ea <follow_path+0xae>
				res = FR_NO_PATH; break;
 80084e4:	2305      	movs	r3, #5
 80084e6:	75fb      	strb	r3, [r7, #23]
 80084e8:	e019      	b.n	800851e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	695b      	ldr	r3, [r3, #20]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	8992      	ldrh	r2, [r2, #12]
 80084f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80084fc:	fb00 f202 	mul.w	r2, r0, r2
 8008500:	1a9b      	subs	r3, r3, r2
 8008502:	440b      	add	r3, r1
 8008504:	4619      	mov	r1, r3
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f7ff f983 	bl	8007812 <ld_clust>
 800850c:	4602      	mov	r2, r0
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008512:	e7bb      	b.n	800848c <follow_path+0x50>
			if (res != FR_OK) break;
 8008514:	bf00      	nop
 8008516:	e002      	b.n	800851e <follow_path+0xe2>
				break;
 8008518:	bf00      	nop
 800851a:	e000      	b.n	800851e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800851c:	bf00      	nop
			}
		}
	}

	return res;
 800851e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3718      	adds	r7, #24
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008528:	b480      	push	{r7}
 800852a:	b087      	sub	sp, #28
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008530:	f04f 33ff 	mov.w	r3, #4294967295
 8008534:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d031      	beq.n	80085a2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	617b      	str	r3, [r7, #20]
 8008544:	e002      	b.n	800854c <get_ldnumber+0x24>
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	3301      	adds	r3, #1
 800854a:	617b      	str	r3, [r7, #20]
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	2b1f      	cmp	r3, #31
 8008552:	d903      	bls.n	800855c <get_ldnumber+0x34>
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	2b3a      	cmp	r3, #58	@ 0x3a
 800855a:	d1f4      	bne.n	8008546 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	2b3a      	cmp	r3, #58	@ 0x3a
 8008562:	d11c      	bne.n	800859e <get_ldnumber+0x76>
			tp = *path;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	1c5a      	adds	r2, r3, #1
 800856e:	60fa      	str	r2, [r7, #12]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	3b30      	subs	r3, #48	@ 0x30
 8008574:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	2b09      	cmp	r3, #9
 800857a:	d80e      	bhi.n	800859a <get_ldnumber+0x72>
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	429a      	cmp	r2, r3
 8008582:	d10a      	bne.n	800859a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d107      	bne.n	800859a <get_ldnumber+0x72>
					vol = (int)i;
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	3301      	adds	r3, #1
 8008592:	617b      	str	r3, [r7, #20]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	697a      	ldr	r2, [r7, #20]
 8008598:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800859a:	693b      	ldr	r3, [r7, #16]
 800859c:	e002      	b.n	80085a4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800859e:	2300      	movs	r3, #0
 80085a0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80085a2:	693b      	ldr	r3, [r7, #16]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	371c      	adds	r7, #28
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	70da      	strb	r2, [r3, #3]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f04f 32ff 	mov.w	r2, #4294967295
 80085c6:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80085c8:	6839      	ldr	r1, [r7, #0]
 80085ca:	6878      	ldr	r0, [r7, #4]
 80085cc:	f7fe fb9c 	bl	8006d08 <move_window>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d001      	beq.n	80085da <check_fs+0x2a>
 80085d6:	2304      	movs	r3, #4
 80085d8:	e038      	b.n	800864c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	333c      	adds	r3, #60	@ 0x3c
 80085de:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80085e2:	4618      	mov	r0, r3
 80085e4:	f7fe f8ae 	bl	8006744 <ld_word>
 80085e8:	4603      	mov	r3, r0
 80085ea:	461a      	mov	r2, r3
 80085ec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d001      	beq.n	80085f8 <check_fs+0x48>
 80085f4:	2303      	movs	r3, #3
 80085f6:	e029      	b.n	800864c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80085fe:	2be9      	cmp	r3, #233	@ 0xe9
 8008600:	d009      	beq.n	8008616 <check_fs+0x66>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008608:	2beb      	cmp	r3, #235	@ 0xeb
 800860a:	d11e      	bne.n	800864a <check_fs+0x9a>
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008612:	2b90      	cmp	r3, #144	@ 0x90
 8008614:	d119      	bne.n	800864a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	333c      	adds	r3, #60	@ 0x3c
 800861a:	3336      	adds	r3, #54	@ 0x36
 800861c:	4618      	mov	r0, r3
 800861e:	f7fe f8a9 	bl	8006774 <ld_dword>
 8008622:	4603      	mov	r3, r0
 8008624:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008628:	4a0a      	ldr	r2, [pc, #40]	@ (8008654 <check_fs+0xa4>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d101      	bne.n	8008632 <check_fs+0x82>
 800862e:	2300      	movs	r3, #0
 8008630:	e00c      	b.n	800864c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	333c      	adds	r3, #60	@ 0x3c
 8008636:	3352      	adds	r3, #82	@ 0x52
 8008638:	4618      	mov	r0, r3
 800863a:	f7fe f89b 	bl	8006774 <ld_dword>
 800863e:	4603      	mov	r3, r0
 8008640:	4a05      	ldr	r2, [pc, #20]	@ (8008658 <check_fs+0xa8>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d101      	bne.n	800864a <check_fs+0x9a>
 8008646:	2300      	movs	r3, #0
 8008648:	e000      	b.n	800864c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800864a:	2302      	movs	r3, #2
}
 800864c:	4618      	mov	r0, r3
 800864e:	3708      	adds	r7, #8
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	00544146 	.word	0x00544146
 8008658:	33544146 	.word	0x33544146

0800865c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b096      	sub	sp, #88	@ 0x58
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	4613      	mov	r3, r2
 8008668:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	2200      	movs	r2, #0
 800866e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f7ff ff59 	bl	8008528 <get_ldnumber>
 8008676:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800867a:	2b00      	cmp	r3, #0
 800867c:	da01      	bge.n	8008682 <find_volume+0x26>
 800867e:	230b      	movs	r3, #11
 8008680:	e26a      	b.n	8008b58 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008682:	4aa3      	ldr	r2, [pc, #652]	@ (8008910 <find_volume+0x2b4>)
 8008684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800868a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800868c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800868e:	2b00      	cmp	r3, #0
 8008690:	d101      	bne.n	8008696 <find_volume+0x3a>
 8008692:	230c      	movs	r3, #12
 8008694:	e260      	b.n	8008b58 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 8008696:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008698:	f7fe f954 	bl	8006944 <lock_fs>
 800869c:	4603      	mov	r3, r0
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d101      	bne.n	80086a6 <find_volume+0x4a>
 80086a2:	230f      	movs	r3, #15
 80086a4:	e258      	b.n	8008b58 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80086aa:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80086ac:	79fb      	ldrb	r3, [r7, #7]
 80086ae:	f023 0301 	bic.w	r3, r3, #1
 80086b2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80086b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d01a      	beq.n	80086f2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 80086bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086be:	785b      	ldrb	r3, [r3, #1]
 80086c0:	4618      	mov	r0, r3
 80086c2:	f7fd ff9f 	bl	8006604 <disk_status>
 80086c6:	4603      	mov	r3, r0
 80086c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80086cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80086d0:	f003 0301 	and.w	r3, r3, #1
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10c      	bne.n	80086f2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80086d8:	79fb      	ldrb	r3, [r7, #7]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d007      	beq.n	80086ee <find_volume+0x92>
 80086de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80086e2:	f003 0304 	and.w	r3, r3, #4
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80086ea:	230a      	movs	r3, #10
 80086ec:	e234      	b.n	8008b58 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 80086ee:	2300      	movs	r3, #0
 80086f0:	e232      	b.n	8008b58 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80086f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f4:	2200      	movs	r2, #0
 80086f6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80086f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086fa:	b2da      	uxtb	r2, r3
 80086fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086fe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008702:	785b      	ldrb	r3, [r3, #1]
 8008704:	4618      	mov	r0, r3
 8008706:	f7fd ff97 	bl	8006638 <disk_initialize>
 800870a:	4603      	mov	r3, r0
 800870c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008710:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008714:	f003 0301 	and.w	r3, r3, #1
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800871c:	2303      	movs	r3, #3
 800871e:	e21b      	b.n	8008b58 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008720:	79fb      	ldrb	r3, [r7, #7]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d007      	beq.n	8008736 <find_volume+0xda>
 8008726:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800872a:	f003 0304 	and.w	r3, r3, #4
 800872e:	2b00      	cmp	r3, #0
 8008730:	d001      	beq.n	8008736 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8008732:	230a      	movs	r3, #10
 8008734:	e210      	b.n	8008b58 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8008736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008738:	7858      	ldrb	r0, [r3, #1]
 800873a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800873c:	330c      	adds	r3, #12
 800873e:	461a      	mov	r2, r3
 8008740:	2102      	movs	r1, #2
 8008742:	f7fd ffe1 	bl	8006708 <disk_ioctl>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <find_volume+0xf4>
 800874c:	2301      	movs	r3, #1
 800874e:	e203      	b.n	8008b58 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008752:	899b      	ldrh	r3, [r3, #12]
 8008754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008758:	d80d      	bhi.n	8008776 <find_volume+0x11a>
 800875a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800875c:	899b      	ldrh	r3, [r3, #12]
 800875e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008762:	d308      	bcc.n	8008776 <find_volume+0x11a>
 8008764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008766:	899b      	ldrh	r3, [r3, #12]
 8008768:	461a      	mov	r2, r3
 800876a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800876c:	899b      	ldrh	r3, [r3, #12]
 800876e:	3b01      	subs	r3, #1
 8008770:	4013      	ands	r3, r2
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <find_volume+0x11e>
 8008776:	2301      	movs	r3, #1
 8008778:	e1ee      	b.n	8008b58 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800877a:	2300      	movs	r3, #0
 800877c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800877e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008780:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008782:	f7ff ff15 	bl	80085b0 <check_fs>
 8008786:	4603      	mov	r3, r0
 8008788:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800878c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008790:	2b02      	cmp	r3, #2
 8008792:	d149      	bne.n	8008828 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008794:	2300      	movs	r3, #0
 8008796:	643b      	str	r3, [r7, #64]	@ 0x40
 8008798:	e01e      	b.n	80087d8 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800879a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879c:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80087a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087a2:	011b      	lsls	r3, r3, #4
 80087a4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80087a8:	4413      	add	r3, r2
 80087aa:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80087ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ae:	3304      	adds	r3, #4
 80087b0:	781b      	ldrb	r3, [r3, #0]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d006      	beq.n	80087c4 <find_volume+0x168>
 80087b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087b8:	3308      	adds	r3, #8
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7fd ffda 	bl	8006774 <ld_dword>
 80087c0:	4602      	mov	r2, r0
 80087c2:	e000      	b.n	80087c6 <find_volume+0x16a>
 80087c4:	2200      	movs	r2, #0
 80087c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	3358      	adds	r3, #88	@ 0x58
 80087cc:	443b      	add	r3, r7
 80087ce:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80087d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087d4:	3301      	adds	r3, #1
 80087d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80087d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087da:	2b03      	cmp	r3, #3
 80087dc:	d9dd      	bls.n	800879a <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80087de:	2300      	movs	r3, #0
 80087e0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80087e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d002      	beq.n	80087ee <find_volume+0x192>
 80087e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087ea:	3b01      	subs	r3, #1
 80087ec:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80087ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	3358      	adds	r3, #88	@ 0x58
 80087f4:	443b      	add	r3, r7
 80087f6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80087fa:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80087fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d005      	beq.n	800880e <find_volume+0x1b2>
 8008802:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008804:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008806:	f7ff fed3 	bl	80085b0 <check_fs>
 800880a:	4603      	mov	r3, r0
 800880c:	e000      	b.n	8008810 <find_volume+0x1b4>
 800880e:	2303      	movs	r3, #3
 8008810:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008814:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008818:	2b01      	cmp	r3, #1
 800881a:	d905      	bls.n	8008828 <find_volume+0x1cc>
 800881c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800881e:	3301      	adds	r3, #1
 8008820:	643b      	str	r3, [r7, #64]	@ 0x40
 8008822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008824:	2b03      	cmp	r3, #3
 8008826:	d9e2      	bls.n	80087ee <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008828:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800882c:	2b04      	cmp	r3, #4
 800882e:	d101      	bne.n	8008834 <find_volume+0x1d8>
 8008830:	2301      	movs	r3, #1
 8008832:	e191      	b.n	8008b58 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008834:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008838:	2b01      	cmp	r3, #1
 800883a:	d901      	bls.n	8008840 <find_volume+0x1e4>
 800883c:	230d      	movs	r3, #13
 800883e:	e18b      	b.n	8008b58 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008842:	333c      	adds	r3, #60	@ 0x3c
 8008844:	330b      	adds	r3, #11
 8008846:	4618      	mov	r0, r3
 8008848:	f7fd ff7c 	bl	8006744 <ld_word>
 800884c:	4603      	mov	r3, r0
 800884e:	461a      	mov	r2, r3
 8008850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008852:	899b      	ldrh	r3, [r3, #12]
 8008854:	429a      	cmp	r2, r3
 8008856:	d001      	beq.n	800885c <find_volume+0x200>
 8008858:	230d      	movs	r3, #13
 800885a:	e17d      	b.n	8008b58 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800885c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800885e:	333c      	adds	r3, #60	@ 0x3c
 8008860:	3316      	adds	r3, #22
 8008862:	4618      	mov	r0, r3
 8008864:	f7fd ff6e 	bl	8006744 <ld_word>
 8008868:	4603      	mov	r3, r0
 800886a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800886c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800886e:	2b00      	cmp	r3, #0
 8008870:	d106      	bne.n	8008880 <find_volume+0x224>
 8008872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008874:	333c      	adds	r3, #60	@ 0x3c
 8008876:	3324      	adds	r3, #36	@ 0x24
 8008878:	4618      	mov	r0, r3
 800887a:	f7fd ff7b 	bl	8006774 <ld_dword>
 800887e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008882:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008884:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008888:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 800888c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800888e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008892:	789b      	ldrb	r3, [r3, #2]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d005      	beq.n	80088a4 <find_volume+0x248>
 8008898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800889a:	789b      	ldrb	r3, [r3, #2]
 800889c:	2b02      	cmp	r3, #2
 800889e:	d001      	beq.n	80088a4 <find_volume+0x248>
 80088a0:	230d      	movs	r3, #13
 80088a2:	e159      	b.n	8008b58 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80088a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a6:	789b      	ldrb	r3, [r3, #2]
 80088a8:	461a      	mov	r2, r3
 80088aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088ac:	fb02 f303 	mul.w	r3, r2, r3
 80088b0:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80088b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b4:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80088b8:	461a      	mov	r2, r3
 80088ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088bc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80088be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c0:	895b      	ldrh	r3, [r3, #10]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d008      	beq.n	80088d8 <find_volume+0x27c>
 80088c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088c8:	895b      	ldrh	r3, [r3, #10]
 80088ca:	461a      	mov	r2, r3
 80088cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ce:	895b      	ldrh	r3, [r3, #10]
 80088d0:	3b01      	subs	r3, #1
 80088d2:	4013      	ands	r3, r2
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d001      	beq.n	80088dc <find_volume+0x280>
 80088d8:	230d      	movs	r3, #13
 80088da:	e13d      	b.n	8008b58 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80088dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088de:	333c      	adds	r3, #60	@ 0x3c
 80088e0:	3311      	adds	r3, #17
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fd ff2e 	bl	8006744 <ld_word>
 80088e8:	4603      	mov	r3, r0
 80088ea:	461a      	mov	r2, r3
 80088ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ee:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80088f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f2:	891b      	ldrh	r3, [r3, #8]
 80088f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80088f6:	8992      	ldrh	r2, [r2, #12]
 80088f8:	0952      	lsrs	r2, r2, #5
 80088fa:	b292      	uxth	r2, r2
 80088fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008900:	fb01 f202 	mul.w	r2, r1, r2
 8008904:	1a9b      	subs	r3, r3, r2
 8008906:	b29b      	uxth	r3, r3
 8008908:	2b00      	cmp	r3, #0
 800890a:	d003      	beq.n	8008914 <find_volume+0x2b8>
 800890c:	230d      	movs	r3, #13
 800890e:	e123      	b.n	8008b58 <find_volume+0x4fc>
 8008910:	20002a14 	.word	0x20002a14

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008914:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008916:	333c      	adds	r3, #60	@ 0x3c
 8008918:	3313      	adds	r3, #19
 800891a:	4618      	mov	r0, r3
 800891c:	f7fd ff12 	bl	8006744 <ld_word>
 8008920:	4603      	mov	r3, r0
 8008922:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008924:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008926:	2b00      	cmp	r3, #0
 8008928:	d106      	bne.n	8008938 <find_volume+0x2dc>
 800892a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800892c:	333c      	adds	r3, #60	@ 0x3c
 800892e:	3320      	adds	r3, #32
 8008930:	4618      	mov	r0, r3
 8008932:	f7fd ff1f 	bl	8006774 <ld_dword>
 8008936:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800893a:	333c      	adds	r3, #60	@ 0x3c
 800893c:	330e      	adds	r3, #14
 800893e:	4618      	mov	r0, r3
 8008940:	f7fd ff00 	bl	8006744 <ld_word>
 8008944:	4603      	mov	r3, r0
 8008946:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008948:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800894a:	2b00      	cmp	r3, #0
 800894c:	d101      	bne.n	8008952 <find_volume+0x2f6>
 800894e:	230d      	movs	r3, #13
 8008950:	e102      	b.n	8008b58 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008952:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008954:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008956:	4413      	add	r3, r2
 8008958:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800895a:	8911      	ldrh	r1, [r2, #8]
 800895c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800895e:	8992      	ldrh	r2, [r2, #12]
 8008960:	0952      	lsrs	r2, r2, #5
 8008962:	b292      	uxth	r2, r2
 8008964:	fbb1 f2f2 	udiv	r2, r1, r2
 8008968:	b292      	uxth	r2, r2
 800896a:	4413      	add	r3, r2
 800896c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800896e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008972:	429a      	cmp	r2, r3
 8008974:	d201      	bcs.n	800897a <find_volume+0x31e>
 8008976:	230d      	movs	r3, #13
 8008978:	e0ee      	b.n	8008b58 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800897a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800897c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008982:	8952      	ldrh	r2, [r2, #10]
 8008984:	fbb3 f3f2 	udiv	r3, r3, r2
 8008988:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800898a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800898c:	2b00      	cmp	r3, #0
 800898e:	d101      	bne.n	8008994 <find_volume+0x338>
 8008990:	230d      	movs	r3, #13
 8008992:	e0e1      	b.n	8008b58 <find_volume+0x4fc>
		fmt = FS_FAT32;
 8008994:	2303      	movs	r3, #3
 8008996:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800899a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d802      	bhi.n	80089aa <find_volume+0x34e>
 80089a4:	2302      	movs	r3, #2
 80089a6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80089aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ac:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80089b0:	4293      	cmp	r3, r2
 80089b2:	d802      	bhi.n	80089ba <find_volume+0x35e>
 80089b4:	2301      	movs	r3, #1
 80089b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80089ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089bc:	1c9a      	adds	r2, r3, #2
 80089be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c0:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 80089c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089c4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80089c6:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80089c8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80089ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089cc:	441a      	add	r2, r3
 80089ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d0:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 80089d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80089d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d6:	441a      	add	r2, r3
 80089d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089da:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 80089dc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80089e0:	2b03      	cmp	r3, #3
 80089e2:	d11e      	bne.n	8008a22 <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80089e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089e6:	333c      	adds	r3, #60	@ 0x3c
 80089e8:	332a      	adds	r3, #42	@ 0x2a
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7fd feaa 	bl	8006744 <ld_word>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <find_volume+0x39e>
 80089f6:	230d      	movs	r3, #13
 80089f8:	e0ae      	b.n	8008b58 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80089fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089fc:	891b      	ldrh	r3, [r3, #8]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d001      	beq.n	8008a06 <find_volume+0x3aa>
 8008a02:	230d      	movs	r3, #13
 8008a04:	e0a8      	b.n	8008b58 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a08:	333c      	adds	r3, #60	@ 0x3c
 8008a0a:	332c      	adds	r3, #44	@ 0x2c
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fd feb1 	bl	8006774 <ld_dword>
 8008a12:	4602      	mov	r2, r0
 8008a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a16:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a1a:	6a1b      	ldr	r3, [r3, #32]
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a20:	e01f      	b.n	8008a62 <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a24:	891b      	ldrh	r3, [r3, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d101      	bne.n	8008a2e <find_volume+0x3d2>
 8008a2a:	230d      	movs	r3, #13
 8008a2c:	e094      	b.n	8008b58 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a34:	441a      	add	r2, r3
 8008a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a38:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008a3a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d103      	bne.n	8008a4a <find_volume+0x3ee>
 8008a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a44:	6a1b      	ldr	r3, [r3, #32]
 8008a46:	005b      	lsls	r3, r3, #1
 8008a48:	e00a      	b.n	8008a60 <find_volume+0x404>
 8008a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a4c:	6a1a      	ldr	r2, [r3, #32]
 8008a4e:	4613      	mov	r3, r2
 8008a50:	005b      	lsls	r3, r3, #1
 8008a52:	4413      	add	r3, r2
 8008a54:	085a      	lsrs	r2, r3, #1
 8008a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008a60:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008a66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a68:	899b      	ldrh	r3, [r3, #12]
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a6e:	440b      	add	r3, r1
 8008a70:	3b01      	subs	r3, #1
 8008a72:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008a74:	8989      	ldrh	r1, [r1, #12]
 8008a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d201      	bcs.n	8008a82 <find_volume+0x426>
 8008a7e:	230d      	movs	r3, #13
 8008a80:	e06a      	b.n	8008b58 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a84:	f04f 32ff 	mov.w	r2, #4294967295
 8008a88:	61da      	str	r2, [r3, #28]
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a8c:	69da      	ldr	r2, [r3, #28]
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a90:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8008a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a94:	2280      	movs	r2, #128	@ 0x80
 8008a96:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008a98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008a9c:	2b03      	cmp	r3, #3
 8008a9e:	d149      	bne.n	8008b34 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa2:	333c      	adds	r3, #60	@ 0x3c
 8008aa4:	3330      	adds	r3, #48	@ 0x30
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fd fe4c 	bl	8006744 <ld_word>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d140      	bne.n	8008b34 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008ab2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008aba:	f7fe f925 	bl	8006d08 <move_window>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d137      	bne.n	8008b34 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 8008ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008acc:	333c      	adds	r3, #60	@ 0x3c
 8008ace:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fd fe36 	bl	8006744 <ld_word>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	461a      	mov	r2, r3
 8008adc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d127      	bne.n	8008b34 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ae6:	333c      	adds	r3, #60	@ 0x3c
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7fd fe43 	bl	8006774 <ld_dword>
 8008aee:	4603      	mov	r3, r0
 8008af0:	4a1b      	ldr	r2, [pc, #108]	@ (8008b60 <find_volume+0x504>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d11e      	bne.n	8008b34 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008af8:	333c      	adds	r3, #60	@ 0x3c
 8008afa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7fd fe38 	bl	8006774 <ld_dword>
 8008b04:	4603      	mov	r3, r0
 8008b06:	4a17      	ldr	r2, [pc, #92]	@ (8008b64 <find_volume+0x508>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d113      	bne.n	8008b34 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b0e:	333c      	adds	r3, #60	@ 0x3c
 8008b10:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7fd fe2d 	bl	8006774 <ld_dword>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b1e:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b22:	333c      	adds	r3, #60	@ 0x3c
 8008b24:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7fd fe23 	bl	8006774 <ld_dword>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b32:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b36:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8008b3a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008b3c:	4b0a      	ldr	r3, [pc, #40]	@ (8008b68 <find_volume+0x50c>)
 8008b3e:	881b      	ldrh	r3, [r3, #0]
 8008b40:	3301      	adds	r3, #1
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	4b08      	ldr	r3, [pc, #32]	@ (8008b68 <find_volume+0x50c>)
 8008b46:	801a      	strh	r2, [r3, #0]
 8008b48:	4b07      	ldr	r3, [pc, #28]	@ (8008b68 <find_volume+0x50c>)
 8008b4a:	881a      	ldrh	r2, [r3, #0]
 8008b4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b4e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008b50:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008b52:	f7fe f871 	bl	8006c38 <clear_lock>
#endif
	return FR_OK;
 8008b56:	2300      	movs	r3, #0
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3758      	adds	r7, #88	@ 0x58
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	41615252 	.word	0x41615252
 8008b64:	61417272 	.word	0x61417272
 8008b68:	20002a18 	.word	0x20002a18

08008b6c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008b76:	2309      	movs	r3, #9
 8008b78:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d02e      	beq.n	8008bde <validate+0x72>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d02a      	beq.n	8008bde <validate+0x72>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d025      	beq.n	8008bde <validate+0x72>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	889a      	ldrh	r2, [r3, #4]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	88db      	ldrh	r3, [r3, #6]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d11e      	bne.n	8008bde <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7fd fecd 	bl	8006944 <lock_fs>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d014      	beq.n	8008bda <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	785b      	ldrb	r3, [r3, #1]
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fd fd24 	bl	8006604 <disk_status>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	f003 0301 	and.w	r3, r3, #1
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d102      	bne.n	8008bcc <validate+0x60>
				res = FR_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	73fb      	strb	r3, [r7, #15]
 8008bca:	e008      	b.n	8008bde <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7fd fecc 	bl	8006970 <unlock_fs>
 8008bd8:	e001      	b.n	8008bde <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8008bda:	230f      	movs	r3, #15
 8008bdc:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d102      	bne.n	8008bea <validate+0x7e>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	e000      	b.n	8008bec <validate+0x80>
 8008bea:	2300      	movs	r3, #0
 8008bec:	683a      	ldr	r2, [r7, #0]
 8008bee:	6013      	str	r3, [r2, #0]
	return res;
 8008bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
	...

08008bfc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b088      	sub	sp, #32
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	4613      	mov	r3, r2
 8008c08:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008c0e:	f107 0310 	add.w	r3, r7, #16
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7ff fc88 	bl	8008528 <get_ldnumber>
 8008c18:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008c1a:	69fb      	ldr	r3, [r7, #28]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	da01      	bge.n	8008c24 <f_mount+0x28>
 8008c20:	230b      	movs	r3, #11
 8008c22:	e048      	b.n	8008cb6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008c24:	4a26      	ldr	r2, [pc, #152]	@ (8008cc0 <f_mount+0xc4>)
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c2c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008c2e:	69bb      	ldr	r3, [r7, #24]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00f      	beq.n	8008c54 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008c34:	69b8      	ldr	r0, [r7, #24]
 8008c36:	f7fd ffff 	bl	8006c38 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	695b      	ldr	r3, [r3, #20]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f001 f802 	bl	8009c48 <ff_del_syncobj>
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d101      	bne.n	8008c4e <f_mount+0x52>
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	e033      	b.n	8008cb6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	2200      	movs	r2, #0
 8008c52:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00f      	beq.n	8008c7a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	b2da      	uxtb	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	3314      	adds	r3, #20
 8008c68:	4619      	mov	r1, r3
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	f000 ffcc 	bl	8009c08 <ff_cre_syncobj>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d101      	bne.n	8008c7a <f_mount+0x7e>
 8008c76:	2302      	movs	r3, #2
 8008c78:	e01d      	b.n	8008cb6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	4910      	ldr	r1, [pc, #64]	@ (8008cc0 <f_mount+0xc4>)
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d002      	beq.n	8008c90 <f_mount+0x94>
 8008c8a:	79fb      	ldrb	r3, [r7, #7]
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d001      	beq.n	8008c94 <f_mount+0x98>
 8008c90:	2300      	movs	r3, #0
 8008c92:	e010      	b.n	8008cb6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008c94:	f107 010c 	add.w	r1, r7, #12
 8008c98:	f107 0308 	add.w	r3, r7, #8
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7ff fcdc 	bl	800865c <find_volume>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	7dfa      	ldrb	r2, [r7, #23]
 8008cac:	4611      	mov	r1, r2
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7fd fe5e 	bl	8006970 <unlock_fs>
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3720      	adds	r7, #32
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	20002a14 	.word	0x20002a14

08008cc4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b09a      	sub	sp, #104	@ 0x68
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d101      	bne.n	8008cdc <f_open+0x18>
 8008cd8:	2309      	movs	r3, #9
 8008cda:	e1d3      	b.n	8009084 <f_open+0x3c0>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008cdc:	79fb      	ldrb	r3, [r7, #7]
 8008cde:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ce2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008ce4:	79fa      	ldrb	r2, [r7, #7]
 8008ce6:	f107 0110 	add.w	r1, r7, #16
 8008cea:	f107 0308 	add.w	r3, r7, #8
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7ff fcb4 	bl	800865c <find_volume>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8008cfa:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f040 81b0 	bne.w	8009064 <f_open+0x3a0>
		dj.obj.fs = fs;
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8008d08:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008d0c:	f000 ffc8 	bl	8009ca0 <ff_memalloc>
 8008d10:	65b8      	str	r0, [r7, #88]	@ 0x58
 8008d12:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d106      	bne.n	8008d26 <f_open+0x62>
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	2111      	movs	r1, #17
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7fd fe27 	bl	8006970 <unlock_fs>
 8008d22:	2311      	movs	r3, #17
 8008d24:	e1ae      	b.n	8009084 <f_open+0x3c0>
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d2a:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008d2c:	68ba      	ldr	r2, [r7, #8]
 8008d2e:	f107 0314 	add.w	r3, r7, #20
 8008d32:	4611      	mov	r1, r2
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7ff fb81 	bl	800843c <follow_path>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008d40:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d118      	bne.n	8008d7a <f_open+0xb6>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008d48:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008d4c:	b25b      	sxtb	r3, r3
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	da03      	bge.n	8008d5a <f_open+0x96>
				res = FR_INVALID_NAME;
 8008d52:	2306      	movs	r3, #6
 8008d54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008d58:	e00f      	b.n	8008d7a <f_open+0xb6>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008d5a:	79fb      	ldrb	r3, [r7, #7]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	bf8c      	ite	hi
 8008d60:	2301      	movhi	r3, #1
 8008d62:	2300      	movls	r3, #0
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	461a      	mov	r2, r3
 8008d68:	f107 0314 	add.w	r3, r7, #20
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fd fe1a 	bl	80069a8 <chk_lock>
 8008d74:	4603      	mov	r3, r0
 8008d76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008d7a:	79fb      	ldrb	r3, [r7, #7]
 8008d7c:	f003 031c 	and.w	r3, r3, #28
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d07f      	beq.n	8008e84 <f_open+0x1c0>
			if (res != FR_OK) {					/* No file, create new */
 8008d84:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d017      	beq.n	8008dbc <f_open+0xf8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008d8c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008d90:	2b04      	cmp	r3, #4
 8008d92:	d10e      	bne.n	8008db2 <f_open+0xee>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008d94:	f7fd fe64 	bl	8006a60 <enq_lock>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d006      	beq.n	8008dac <f_open+0xe8>
 8008d9e:	f107 0314 	add.w	r3, r7, #20
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7fe ffbc 	bl	8007d20 <dir_register>
 8008da8:	4603      	mov	r3, r0
 8008daa:	e000      	b.n	8008dae <f_open+0xea>
 8008dac:	2312      	movs	r3, #18
 8008dae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008db2:	79fb      	ldrb	r3, [r7, #7]
 8008db4:	f043 0308 	orr.w	r3, r3, #8
 8008db8:	71fb      	strb	r3, [r7, #7]
 8008dba:	e010      	b.n	8008dde <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008dbc:	7ebb      	ldrb	r3, [r7, #26]
 8008dbe:	f003 0311 	and.w	r3, r3, #17
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <f_open+0x10a>
					res = FR_DENIED;
 8008dc6:	2307      	movs	r3, #7
 8008dc8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008dcc:	e007      	b.n	8008dde <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008dce:	79fb      	ldrb	r3, [r7, #7]
 8008dd0:	f003 0304 	and.w	r3, r3, #4
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <f_open+0x11a>
 8008dd8:	2308      	movs	r3, #8
 8008dda:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008dde:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d168      	bne.n	8008eb8 <f_open+0x1f4>
 8008de6:	79fb      	ldrb	r3, [r7, #7]
 8008de8:	f003 0308 	and.w	r3, r3, #8
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d063      	beq.n	8008eb8 <f_open+0x1f4>
				dw = GET_FATTIME();
 8008df0:	f7fd fbaa 	bl	8006548 <get_fattime>
 8008df4:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008df8:	330e      	adds	r3, #14
 8008dfa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7fd fcf7 	bl	80067f0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e04:	3316      	adds	r3, #22
 8008e06:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7fd fcf1 	bl	80067f0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e10:	330b      	adds	r3, #11
 8008e12:	2220      	movs	r2, #32
 8008e14:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008e1a:	4611      	mov	r1, r2
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fe fcf8 	bl	8007812 <ld_clust>
 8008e22:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008e28:	2200      	movs	r2, #0
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fe fd10 	bl	8007850 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e32:	331c      	adds	r3, #28
 8008e34:	2100      	movs	r1, #0
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fd fcda 	bl	80067f0 <st_dword>
					fs->wflag = 1;
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008e42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d037      	beq.n	8008eb8 <f_open+0x1f4>
						dw = fs->winsect;
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e4c:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 8008e4e:	f107 0314 	add.w	r3, r7, #20
 8008e52:	2200      	movs	r2, #0
 8008e54:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fe fa00 	bl	800725c <remove_chain>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8008e62:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d126      	bne.n	8008eb8 <f_open+0x1f4>
							res = move_window(fs, dw);
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7fd ff4a 	bl	8006d08 <move_window>
 8008e74:	4603      	mov	r3, r0
 8008e76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008e7e:	3a01      	subs	r2, #1
 8008e80:	619a      	str	r2, [r3, #24]
 8008e82:	e019      	b.n	8008eb8 <f_open+0x1f4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008e84:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d115      	bne.n	8008eb8 <f_open+0x1f4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008e8c:	7ebb      	ldrb	r3, [r7, #26]
 8008e8e:	f003 0310 	and.w	r3, r3, #16
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d003      	beq.n	8008e9e <f_open+0x1da>
					res = FR_NO_FILE;
 8008e96:	2304      	movs	r3, #4
 8008e98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008e9c:	e00c      	b.n	8008eb8 <f_open+0x1f4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008e9e:	79fb      	ldrb	r3, [r7, #7]
 8008ea0:	f003 0302 	and.w	r3, r3, #2
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d007      	beq.n	8008eb8 <f_open+0x1f4>
 8008ea8:	7ebb      	ldrb	r3, [r7, #26]
 8008eaa:	f003 0301 	and.w	r3, r3, #1
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d002      	beq.n	8008eb8 <f_open+0x1f4>
						res = FR_DENIED;
 8008eb2:	2307      	movs	r3, #7
 8008eb4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008eb8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d126      	bne.n	8008f0e <f_open+0x24a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008ec0:	79fb      	ldrb	r3, [r7, #7]
 8008ec2:	f003 0308 	and.w	r3, r3, #8
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d003      	beq.n	8008ed2 <f_open+0x20e>
				mode |= FA_MODIFIED;
 8008eca:	79fb      	ldrb	r3, [r7, #7]
 8008ecc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ed0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008eda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008ee0:	79fb      	ldrb	r3, [r7, #7]
 8008ee2:	2b01      	cmp	r3, #1
 8008ee4:	bf8c      	ite	hi
 8008ee6:	2301      	movhi	r3, #1
 8008ee8:	2300      	movls	r3, #0
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	461a      	mov	r2, r3
 8008eee:	f107 0314 	add.w	r3, r7, #20
 8008ef2:	4611      	mov	r1, r2
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fd fdd5 	bl	8006aa4 <inc_lock>
 8008efa:	4602      	mov	r2, r0
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d102      	bne.n	8008f0e <f_open+0x24a>
 8008f08:	2302      	movs	r3, #2
 8008f0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008f0e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f040 80a3 	bne.w	800905e <f_open+0x39a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fe fc77 	bl	8007812 <ld_clust>
 8008f24:	4602      	mov	r2, r0
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f2c:	331c      	adds	r3, #28
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7fd fc20 	bl	8006774 <ld_dword>
 8008f34:	4602      	mov	r2, r0
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	88da      	ldrh	r2, [r3, #6]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	79fa      	ldrb	r2, [r7, #7]
 8008f52:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2200      	movs	r2, #0
 8008f58:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2200      	movs	r2, #0
 8008f64:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	3330      	adds	r3, #48	@ 0x30
 8008f6a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008f6e:	2100      	movs	r1, #0
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fd fc8a 	bl	800688a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008f76:	79fb      	ldrb	r3, [r7, #7]
 8008f78:	f003 0320 	and.w	r3, r3, #32
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d06e      	beq.n	800905e <f_open+0x39a>
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d06a      	beq.n	800905e <f_open+0x39a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	68da      	ldr	r2, [r3, #12]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	895b      	ldrh	r3, [r3, #10]
 8008f94:	461a      	mov	r2, r3
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	899b      	ldrh	r3, [r3, #12]
 8008f9a:	fb02 f303 	mul.w	r3, r2, r3
 8008f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008fac:	e016      	b.n	8008fdc <f_open+0x318>
					clst = get_fat(&fp->obj, clst);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7fd ff65 	bl	8006e82 <get_fat>
 8008fb8:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008fba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d802      	bhi.n	8008fc6 <f_open+0x302>
 8008fc0:	2302      	movs	r3, #2
 8008fc2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008fc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fcc:	d102      	bne.n	8008fd4 <f_open+0x310>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008fd4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008fd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fd8:	1ad3      	subs	r3, r2, r3
 8008fda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008fdc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d103      	bne.n	8008fec <f_open+0x328>
 8008fe4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008fe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d8e0      	bhi.n	8008fae <f_open+0x2ea>
				}
				fp->clust = clst;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008ff0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008ff2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d131      	bne.n	800905e <f_open+0x39a>
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	899b      	ldrh	r3, [r3, #12]
 8008ffe:	461a      	mov	r2, r3
 8009000:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009002:	fbb3 f1f2 	udiv	r1, r3, r2
 8009006:	fb01 f202 	mul.w	r2, r1, r2
 800900a:	1a9b      	subs	r3, r3, r2
 800900c:	2b00      	cmp	r3, #0
 800900e:	d026      	beq.n	800905e <f_open+0x39a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009014:	4618      	mov	r0, r3
 8009016:	f7fd ff15 	bl	8006e44 <clust2sect>
 800901a:	64b8      	str	r0, [r7, #72]	@ 0x48
 800901c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800901e:	2b00      	cmp	r3, #0
 8009020:	d103      	bne.n	800902a <f_open+0x366>
						res = FR_INT_ERR;
 8009022:	2302      	movs	r3, #2
 8009024:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009028:	e019      	b.n	800905e <f_open+0x39a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	899b      	ldrh	r3, [r3, #12]
 800902e:	461a      	mov	r2, r3
 8009030:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009032:	fbb3 f2f2 	udiv	r2, r3, r2
 8009036:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009038:	441a      	add	r2, r3
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	7858      	ldrb	r0, [r3, #1]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	6a1a      	ldr	r2, [r3, #32]
 800904c:	2301      	movs	r3, #1
 800904e:	f7fd fb1b 	bl	8006688 <disk_read>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d002      	beq.n	800905e <f_open+0x39a>
 8009058:	2301      	movs	r3, #1
 800905a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 800905e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009060:	f000 fe2a 	bl	8009cb8 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009064:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009068:	2b00      	cmp	r3, #0
 800906a:	d002      	beq.n	8009072 <f_open+0x3ae>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2200      	movs	r2, #0
 8009070:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8009078:	4611      	mov	r1, r2
 800907a:	4618      	mov	r0, r3
 800907c:	f7fd fc78 	bl	8006970 <unlock_fs>
 8009080:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8009084:	4618      	mov	r0, r3
 8009086:	3768      	adds	r7, #104	@ 0x68
 8009088:	46bd      	mov	sp, r7
 800908a:	bd80      	pop	{r7, pc}

0800908c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b08e      	sub	sp, #56	@ 0x38
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	60b9      	str	r1, [r7, #8]
 8009096:	607a      	str	r2, [r7, #4]
 8009098:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	2200      	movs	r2, #0
 80090a2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f107 0214 	add.w	r2, r7, #20
 80090aa:	4611      	mov	r1, r2
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7ff fd5d 	bl	8008b6c <validate>
 80090b2:	4603      	mov	r3, r0
 80090b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80090b8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d107      	bne.n	80090d0 <f_read+0x44>
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	7d5b      	ldrb	r3, [r3, #21]
 80090c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80090c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d009      	beq.n	80090e4 <f_read+0x58>
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80090d6:	4611      	mov	r1, r2
 80090d8:	4618      	mov	r0, r3
 80090da:	f7fd fc49 	bl	8006970 <unlock_fs>
 80090de:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80090e2:	e15d      	b.n	80093a0 <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	7d1b      	ldrb	r3, [r3, #20]
 80090e8:	f003 0301 	and.w	r3, r3, #1
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d106      	bne.n	80090fe <f_read+0x72>
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	2107      	movs	r1, #7
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fd fc3b 	bl	8006970 <unlock_fs>
 80090fa:	2307      	movs	r3, #7
 80090fc:	e150      	b.n	80093a0 <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	68da      	ldr	r2, [r3, #12]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	6a3b      	ldr	r3, [r7, #32]
 800910e:	429a      	cmp	r2, r3
 8009110:	f240 813c 	bls.w	800938c <f_read+0x300>
 8009114:	6a3b      	ldr	r3, [r7, #32]
 8009116:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009118:	e138      	b.n	800938c <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	699b      	ldr	r3, [r3, #24]
 800911e:	697a      	ldr	r2, [r7, #20]
 8009120:	8992      	ldrh	r2, [r2, #12]
 8009122:	fbb3 f1f2 	udiv	r1, r3, r2
 8009126:	fb01 f202 	mul.w	r2, r1, r2
 800912a:	1a9b      	subs	r3, r3, r2
 800912c:	2b00      	cmp	r3, #0
 800912e:	f040 80f3 	bne.w	8009318 <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	697a      	ldr	r2, [r7, #20]
 8009138:	8992      	ldrh	r2, [r2, #12]
 800913a:	fbb3 f3f2 	udiv	r3, r3, r2
 800913e:	697a      	ldr	r2, [r7, #20]
 8009140:	8952      	ldrh	r2, [r2, #10]
 8009142:	3a01      	subs	r2, #1
 8009144:	4013      	ands	r3, r2
 8009146:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d139      	bne.n	80091c2 <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d103      	bne.n	800915e <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	633b      	str	r3, [r7, #48]	@ 0x30
 800915c:	e013      	b.n	8009186 <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009162:	2b00      	cmp	r3, #0
 8009164:	d007      	beq.n	8009176 <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	699b      	ldr	r3, [r3, #24]
 800916a:	4619      	mov	r1, r3
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f7fe f972 	bl	8007456 <clmt_clust>
 8009172:	6338      	str	r0, [r7, #48]	@ 0x30
 8009174:	e007      	b.n	8009186 <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	69db      	ldr	r3, [r3, #28]
 800917c:	4619      	mov	r1, r3
 800917e:	4610      	mov	r0, r2
 8009180:	f7fd fe7f 	bl	8006e82 <get_fat>
 8009184:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8009186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009188:	2b01      	cmp	r3, #1
 800918a:	d809      	bhi.n	80091a0 <f_read+0x114>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2202      	movs	r2, #2
 8009190:	755a      	strb	r2, [r3, #21]
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	2102      	movs	r1, #2
 8009196:	4618      	mov	r0, r3
 8009198:	f7fd fbea 	bl	8006970 <unlock_fs>
 800919c:	2302      	movs	r3, #2
 800919e:	e0ff      	b.n	80093a0 <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80091a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091a6:	d109      	bne.n	80091bc <f_read+0x130>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2201      	movs	r2, #1
 80091ac:	755a      	strb	r2, [r3, #21]
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2101      	movs	r1, #1
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fd fbdc 	bl	8006970 <unlock_fs>
 80091b8:	2301      	movs	r3, #1
 80091ba:	e0f1      	b.n	80093a0 <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091c0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80091c2:	697a      	ldr	r2, [r7, #20]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	4619      	mov	r1, r3
 80091ca:	4610      	mov	r0, r2
 80091cc:	f7fd fe3a 	bl	8006e44 <clust2sect>
 80091d0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d109      	bne.n	80091ec <f_read+0x160>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2202      	movs	r2, #2
 80091dc:	755a      	strb	r2, [r3, #21]
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	2102      	movs	r1, #2
 80091e2:	4618      	mov	r0, r3
 80091e4:	f7fd fbc4 	bl	8006970 <unlock_fs>
 80091e8:	2302      	movs	r3, #2
 80091ea:	e0d9      	b.n	80093a0 <f_read+0x314>
			sect += csect;
 80091ec:	69ba      	ldr	r2, [r7, #24]
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	4413      	add	r3, r2
 80091f2:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	899b      	ldrh	r3, [r3, #12]
 80091f8:	461a      	mov	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009200:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009204:	2b00      	cmp	r3, #0
 8009206:	d046      	beq.n	8009296 <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009208:	69fa      	ldr	r2, [r7, #28]
 800920a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800920c:	4413      	add	r3, r2
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	8952      	ldrh	r2, [r2, #10]
 8009212:	4293      	cmp	r3, r2
 8009214:	d905      	bls.n	8009222 <f_read+0x196>
					cc = fs->csize - csect;
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	895b      	ldrh	r3, [r3, #10]
 800921a:	461a      	mov	r2, r3
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	7858      	ldrb	r0, [r3, #1]
 8009226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009228:	69ba      	ldr	r2, [r7, #24]
 800922a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800922c:	f7fd fa2c 	bl	8006688 <disk_read>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d009      	beq.n	800924a <f_read+0x1be>
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2201      	movs	r2, #1
 800923a:	755a      	strb	r2, [r3, #21]
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	2101      	movs	r1, #1
 8009240:	4618      	mov	r0, r3
 8009242:	f7fd fb95 	bl	8006970 <unlock_fs>
 8009246:	2301      	movs	r3, #1
 8009248:	e0aa      	b.n	80093a0 <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	7d1b      	ldrb	r3, [r3, #20]
 800924e:	b25b      	sxtb	r3, r3
 8009250:	2b00      	cmp	r3, #0
 8009252:	da18      	bge.n	8009286 <f_read+0x1fa>
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6a1a      	ldr	r2, [r3, #32]
 8009258:	69bb      	ldr	r3, [r7, #24]
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800925e:	429a      	cmp	r2, r3
 8009260:	d911      	bls.n	8009286 <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6a1a      	ldr	r2, [r3, #32]
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	8992      	ldrh	r2, [r2, #12]
 800926e:	fb02 f303 	mul.w	r3, r2, r3
 8009272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009274:	18d0      	adds	r0, r2, r3
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	899b      	ldrh	r3, [r3, #12]
 8009280:	461a      	mov	r2, r3
 8009282:	f7fd fae1 	bl	8006848 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	899b      	ldrh	r3, [r3, #12]
 800928a:	461a      	mov	r2, r3
 800928c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800928e:	fb02 f303 	mul.w	r3, r2, r3
 8009292:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8009294:	e066      	b.n	8009364 <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6a1b      	ldr	r3, [r3, #32]
 800929a:	69ba      	ldr	r2, [r7, #24]
 800929c:	429a      	cmp	r2, r3
 800929e:	d038      	beq.n	8009312 <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	7d1b      	ldrb	r3, [r3, #20]
 80092a4:	b25b      	sxtb	r3, r3
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	da1d      	bge.n	80092e6 <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	7858      	ldrb	r0, [r3, #1]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6a1a      	ldr	r2, [r3, #32]
 80092b8:	2301      	movs	r3, #1
 80092ba:	f7fd fa05 	bl	80066c8 <disk_write>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d009      	beq.n	80092d8 <f_read+0x24c>
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2201      	movs	r2, #1
 80092c8:	755a      	strb	r2, [r3, #21]
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2101      	movs	r1, #1
 80092ce:	4618      	mov	r0, r3
 80092d0:	f7fd fb4e 	bl	8006970 <unlock_fs>
 80092d4:	2301      	movs	r3, #1
 80092d6:	e063      	b.n	80093a0 <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	7d1b      	ldrb	r3, [r3, #20]
 80092dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092e0:	b2da      	uxtb	r2, r3
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	7858      	ldrb	r0, [r3, #1]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80092f0:	2301      	movs	r3, #1
 80092f2:	69ba      	ldr	r2, [r7, #24]
 80092f4:	f7fd f9c8 	bl	8006688 <disk_read>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d009      	beq.n	8009312 <f_read+0x286>
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2201      	movs	r2, #1
 8009302:	755a      	strb	r2, [r3, #21]
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	2101      	movs	r1, #1
 8009308:	4618      	mov	r0, r3
 800930a:	f7fd fb31 	bl	8006970 <unlock_fs>
 800930e:	2301      	movs	r3, #1
 8009310:	e046      	b.n	80093a0 <f_read+0x314>
			}
#endif
			fp->sect = sect;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	69ba      	ldr	r2, [r7, #24]
 8009316:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	899b      	ldrh	r3, [r3, #12]
 800931c:	4618      	mov	r0, r3
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	8992      	ldrh	r2, [r2, #12]
 8009326:	fbb3 f1f2 	udiv	r1, r3, r2
 800932a:	fb01 f202 	mul.w	r2, r1, r2
 800932e:	1a9b      	subs	r3, r3, r2
 8009330:	1ac3      	subs	r3, r0, r3
 8009332:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8009334:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	429a      	cmp	r2, r3
 800933a:	d901      	bls.n	8009340 <f_read+0x2b4>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	699b      	ldr	r3, [r3, #24]
 800934a:	697a      	ldr	r2, [r7, #20]
 800934c:	8992      	ldrh	r2, [r2, #12]
 800934e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009352:	fb00 f202 	mul.w	r2, r0, r2
 8009356:	1a9b      	subs	r3, r3, r2
 8009358:	440b      	add	r3, r1
 800935a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800935c:	4619      	mov	r1, r3
 800935e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009360:	f7fd fa72 	bl	8006848 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009368:	4413      	add	r3, r2
 800936a:	627b      	str	r3, [r7, #36]	@ 0x24
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	699a      	ldr	r2, [r3, #24]
 8009370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009372:	441a      	add	r2, r3
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	619a      	str	r2, [r3, #24]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800937e:	441a      	add	r2, r3
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	601a      	str	r2, [r3, #0]
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2b00      	cmp	r3, #0
 8009390:	f47f aec3 	bne.w	800911a <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	2100      	movs	r1, #0
 8009398:	4618      	mov	r0, r3
 800939a:	f7fd fae9 	bl	8006970 <unlock_fs>
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3738      	adds	r7, #56	@ 0x38
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b08c      	sub	sp, #48	@ 0x30
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
 80093b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	2200      	movs	r2, #0
 80093be:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f107 0210 	add.w	r2, r7, #16
 80093c6:	4611      	mov	r1, r2
 80093c8:	4618      	mov	r0, r3
 80093ca:	f7ff fbcf 	bl	8008b6c <validate>
 80093ce:	4603      	mov	r3, r0
 80093d0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80093d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d107      	bne.n	80093ec <f_write+0x44>
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	7d5b      	ldrb	r3, [r3, #21]
 80093e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80093e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d009      	beq.n	8009400 <f_write+0x58>
 80093ec:	693b      	ldr	r3, [r7, #16]
 80093ee:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80093f2:	4611      	mov	r1, r2
 80093f4:	4618      	mov	r0, r3
 80093f6:	f7fd fabb 	bl	8006970 <unlock_fs>
 80093fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80093fe:	e192      	b.n	8009726 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	7d1b      	ldrb	r3, [r3, #20]
 8009404:	f003 0302 	and.w	r3, r3, #2
 8009408:	2b00      	cmp	r3, #0
 800940a:	d106      	bne.n	800941a <f_write+0x72>
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	2107      	movs	r1, #7
 8009410:	4618      	mov	r0, r3
 8009412:	f7fd faad 	bl	8006970 <unlock_fs>
 8009416:	2307      	movs	r3, #7
 8009418:	e185      	b.n	8009726 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	699a      	ldr	r2, [r3, #24]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	441a      	add	r2, r3
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	699b      	ldr	r3, [r3, #24]
 8009426:	429a      	cmp	r2, r3
 8009428:	f080 816a 	bcs.w	8009700 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	699b      	ldr	r3, [r3, #24]
 8009430:	43db      	mvns	r3, r3
 8009432:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009434:	e164      	b.n	8009700 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	693a      	ldr	r2, [r7, #16]
 800943c:	8992      	ldrh	r2, [r2, #12]
 800943e:	fbb3 f1f2 	udiv	r1, r3, r2
 8009442:	fb01 f202 	mul.w	r2, r1, r2
 8009446:	1a9b      	subs	r3, r3, r2
 8009448:	2b00      	cmp	r3, #0
 800944a:	f040 810f 	bne.w	800966c <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	699b      	ldr	r3, [r3, #24]
 8009452:	693a      	ldr	r2, [r7, #16]
 8009454:	8992      	ldrh	r2, [r2, #12]
 8009456:	fbb3 f3f2 	udiv	r3, r3, r2
 800945a:	693a      	ldr	r2, [r7, #16]
 800945c:	8952      	ldrh	r2, [r2, #10]
 800945e:	3a01      	subs	r2, #1
 8009460:	4013      	ands	r3, r2
 8009462:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009464:	69bb      	ldr	r3, [r7, #24]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d14d      	bne.n	8009506 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d10c      	bne.n	800948c <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800947a:	2b00      	cmp	r3, #0
 800947c:	d11a      	bne.n	80094b4 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2100      	movs	r1, #0
 8009482:	4618      	mov	r0, r3
 8009484:	f7fd ff4f 	bl	8007326 <create_chain>
 8009488:	62b8      	str	r0, [r7, #40]	@ 0x28
 800948a:	e013      	b.n	80094b4 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009490:	2b00      	cmp	r3, #0
 8009492:	d007      	beq.n	80094a4 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	699b      	ldr	r3, [r3, #24]
 8009498:	4619      	mov	r1, r3
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f7fd ffdb 	bl	8007456 <clmt_clust>
 80094a0:	62b8      	str	r0, [r7, #40]	@ 0x28
 80094a2:	e007      	b.n	80094b4 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	69db      	ldr	r3, [r3, #28]
 80094aa:	4619      	mov	r1, r3
 80094ac:	4610      	mov	r0, r2
 80094ae:	f7fd ff3a 	bl	8007326 <create_chain>
 80094b2:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80094b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f000 8127 	beq.w	800970a <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80094bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094be:	2b01      	cmp	r3, #1
 80094c0:	d109      	bne.n	80094d6 <f_write+0x12e>
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2202      	movs	r2, #2
 80094c6:	755a      	strb	r2, [r3, #21]
 80094c8:	693b      	ldr	r3, [r7, #16]
 80094ca:	2102      	movs	r1, #2
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7fd fa4f 	bl	8006970 <unlock_fs>
 80094d2:	2302      	movs	r3, #2
 80094d4:	e127      	b.n	8009726 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80094d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094dc:	d109      	bne.n	80094f2 <f_write+0x14a>
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2201      	movs	r2, #1
 80094e2:	755a      	strb	r2, [r3, #21]
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	2101      	movs	r1, #1
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7fd fa41 	bl	8006970 <unlock_fs>
 80094ee:	2301      	movs	r3, #1
 80094f0:	e119      	b.n	8009726 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094f6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d102      	bne.n	8009506 <f_write+0x15e>
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009504:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	7d1b      	ldrb	r3, [r3, #20]
 800950a:	b25b      	sxtb	r3, r3
 800950c:	2b00      	cmp	r3, #0
 800950e:	da1d      	bge.n	800954c <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	7858      	ldrb	r0, [r3, #1]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6a1a      	ldr	r2, [r3, #32]
 800951e:	2301      	movs	r3, #1
 8009520:	f7fd f8d2 	bl	80066c8 <disk_write>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d009      	beq.n	800953e <f_write+0x196>
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2201      	movs	r2, #1
 800952e:	755a      	strb	r2, [r3, #21]
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	2101      	movs	r1, #1
 8009534:	4618      	mov	r0, r3
 8009536:	f7fd fa1b 	bl	8006970 <unlock_fs>
 800953a:	2301      	movs	r3, #1
 800953c:	e0f3      	b.n	8009726 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	7d1b      	ldrb	r3, [r3, #20]
 8009542:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009546:	b2da      	uxtb	r2, r3
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800954c:	693a      	ldr	r2, [r7, #16]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	69db      	ldr	r3, [r3, #28]
 8009552:	4619      	mov	r1, r3
 8009554:	4610      	mov	r0, r2
 8009556:	f7fd fc75 	bl	8006e44 <clust2sect>
 800955a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d109      	bne.n	8009576 <f_write+0x1ce>
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2202      	movs	r2, #2
 8009566:	755a      	strb	r2, [r3, #21]
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	2102      	movs	r1, #2
 800956c:	4618      	mov	r0, r3
 800956e:	f7fd f9ff 	bl	8006970 <unlock_fs>
 8009572:	2302      	movs	r3, #2
 8009574:	e0d7      	b.n	8009726 <f_write+0x37e>
			sect += csect;
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	69bb      	ldr	r3, [r7, #24]
 800957a:	4413      	add	r3, r2
 800957c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	899b      	ldrh	r3, [r3, #12]
 8009582:	461a      	mov	r2, r3
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	fbb3 f3f2 	udiv	r3, r3, r2
 800958a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800958c:	6a3b      	ldr	r3, [r7, #32]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d048      	beq.n	8009624 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009592:	69ba      	ldr	r2, [r7, #24]
 8009594:	6a3b      	ldr	r3, [r7, #32]
 8009596:	4413      	add	r3, r2
 8009598:	693a      	ldr	r2, [r7, #16]
 800959a:	8952      	ldrh	r2, [r2, #10]
 800959c:	4293      	cmp	r3, r2
 800959e:	d905      	bls.n	80095ac <f_write+0x204>
					cc = fs->csize - csect;
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	895b      	ldrh	r3, [r3, #10]
 80095a4:	461a      	mov	r2, r3
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	7858      	ldrb	r0, [r3, #1]
 80095b0:	6a3b      	ldr	r3, [r7, #32]
 80095b2:	697a      	ldr	r2, [r7, #20]
 80095b4:	69f9      	ldr	r1, [r7, #28]
 80095b6:	f7fd f887 	bl	80066c8 <disk_write>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d009      	beq.n	80095d4 <f_write+0x22c>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2201      	movs	r2, #1
 80095c4:	755a      	strb	r2, [r3, #21]
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	2101      	movs	r1, #1
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fd f9d0 	bl	8006970 <unlock_fs>
 80095d0:	2301      	movs	r3, #1
 80095d2:	e0a8      	b.n	8009726 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6a1a      	ldr	r2, [r3, #32]
 80095d8:	697b      	ldr	r3, [r7, #20]
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	6a3a      	ldr	r2, [r7, #32]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d918      	bls.n	8009614 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6a1a      	ldr	r2, [r3, #32]
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	1ad3      	subs	r3, r2, r3
 80095f0:	693a      	ldr	r2, [r7, #16]
 80095f2:	8992      	ldrh	r2, [r2, #12]
 80095f4:	fb02 f303 	mul.w	r3, r2, r3
 80095f8:	69fa      	ldr	r2, [r7, #28]
 80095fa:	18d1      	adds	r1, r2, r3
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	899b      	ldrh	r3, [r3, #12]
 8009600:	461a      	mov	r2, r3
 8009602:	f7fd f921 	bl	8006848 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	7d1b      	ldrb	r3, [r3, #20]
 800960a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800960e:	b2da      	uxtb	r2, r3
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	899b      	ldrh	r3, [r3, #12]
 8009618:	461a      	mov	r2, r3
 800961a:	6a3b      	ldr	r3, [r7, #32]
 800961c:	fb02 f303 	mul.w	r3, r2, r3
 8009620:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8009622:	e050      	b.n	80096c6 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6a1b      	ldr	r3, [r3, #32]
 8009628:	697a      	ldr	r2, [r7, #20]
 800962a:	429a      	cmp	r2, r3
 800962c:	d01b      	beq.n	8009666 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	699a      	ldr	r2, [r3, #24]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009636:	429a      	cmp	r2, r3
 8009638:	d215      	bcs.n	8009666 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	7858      	ldrb	r0, [r3, #1]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009644:	2301      	movs	r3, #1
 8009646:	697a      	ldr	r2, [r7, #20]
 8009648:	f7fd f81e 	bl	8006688 <disk_read>
 800964c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800964e:	2b00      	cmp	r3, #0
 8009650:	d009      	beq.n	8009666 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2201      	movs	r2, #1
 8009656:	755a      	strb	r2, [r3, #21]
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	2101      	movs	r1, #1
 800965c:	4618      	mov	r0, r3
 800965e:	f7fd f987 	bl	8006970 <unlock_fs>
 8009662:	2301      	movs	r3, #1
 8009664:	e05f      	b.n	8009726 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	697a      	ldr	r2, [r7, #20]
 800966a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	899b      	ldrh	r3, [r3, #12]
 8009670:	4618      	mov	r0, r3
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	699b      	ldr	r3, [r3, #24]
 8009676:	693a      	ldr	r2, [r7, #16]
 8009678:	8992      	ldrh	r2, [r2, #12]
 800967a:	fbb3 f1f2 	udiv	r1, r3, r2
 800967e:	fb01 f202 	mul.w	r2, r1, r2
 8009682:	1a9b      	subs	r3, r3, r2
 8009684:	1ac3      	subs	r3, r0, r3
 8009686:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	429a      	cmp	r2, r3
 800968e:	d901      	bls.n	8009694 <f_write+0x2ec>
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	693a      	ldr	r2, [r7, #16]
 80096a0:	8992      	ldrh	r2, [r2, #12]
 80096a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80096a6:	fb00 f202 	mul.w	r2, r0, r2
 80096aa:	1a9b      	subs	r3, r3, r2
 80096ac:	440b      	add	r3, r1
 80096ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096b0:	69f9      	ldr	r1, [r7, #28]
 80096b2:	4618      	mov	r0, r3
 80096b4:	f7fd f8c8 	bl	8006848 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	7d1b      	ldrb	r3, [r3, #20]
 80096bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80096c0:	b2da      	uxtb	r2, r3
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80096c6:	69fa      	ldr	r2, [r7, #28]
 80096c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ca:	4413      	add	r3, r2
 80096cc:	61fb      	str	r3, [r7, #28]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	699a      	ldr	r2, [r3, #24]
 80096d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d4:	441a      	add	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	619a      	str	r2, [r3, #24]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	68da      	ldr	r2, [r3, #12]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	699b      	ldr	r3, [r3, #24]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	bf38      	it	cc
 80096e6:	461a      	movcc	r2, r3
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	60da      	str	r2, [r3, #12]
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096f2:	441a      	add	r2, r3
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	601a      	str	r2, [r3, #0]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fc:	1ad3      	subs	r3, r2, r3
 80096fe:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2b00      	cmp	r3, #0
 8009704:	f47f ae97 	bne.w	8009436 <f_write+0x8e>
 8009708:	e000      	b.n	800970c <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800970a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	7d1b      	ldrb	r3, [r3, #20]
 8009710:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009714:	b2da      	uxtb	r2, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800971a:	693b      	ldr	r3, [r7, #16]
 800971c:	2100      	movs	r1, #0
 800971e:	4618      	mov	r0, r3
 8009720:	f7fd f926 	bl	8006970 <unlock_fs>
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3730      	adds	r7, #48	@ 0x30
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}

0800972e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b086      	sub	sp, #24
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f107 0208 	add.w	r2, r7, #8
 800973c:	4611      	mov	r1, r2
 800973e:	4618      	mov	r0, r3
 8009740:	f7ff fa14 	bl	8008b6c <validate>
 8009744:	4603      	mov	r3, r0
 8009746:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009748:	7dfb      	ldrb	r3, [r7, #23]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d16d      	bne.n	800982a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	7d1b      	ldrb	r3, [r3, #20]
 8009752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009756:	2b00      	cmp	r3, #0
 8009758:	d067      	beq.n	800982a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	7d1b      	ldrb	r3, [r3, #20]
 800975e:	b25b      	sxtb	r3, r3
 8009760:	2b00      	cmp	r3, #0
 8009762:	da1a      	bge.n	800979a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	7858      	ldrb	r0, [r3, #1]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a1a      	ldr	r2, [r3, #32]
 8009772:	2301      	movs	r3, #1
 8009774:	f7fc ffa8 	bl	80066c8 <disk_write>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d006      	beq.n	800978c <f_sync+0x5e>
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	2101      	movs	r1, #1
 8009782:	4618      	mov	r0, r3
 8009784:	f7fd f8f4 	bl	8006970 <unlock_fs>
 8009788:	2301      	movs	r3, #1
 800978a:	e055      	b.n	8009838 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	7d1b      	ldrb	r3, [r3, #20]
 8009790:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009794:	b2da      	uxtb	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800979a:	f7fc fed5 	bl	8006548 <get_fattime>
 800979e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097a6:	4619      	mov	r1, r3
 80097a8:	4610      	mov	r0, r2
 80097aa:	f7fd faad 	bl	8006d08 <move_window>
 80097ae:	4603      	mov	r3, r0
 80097b0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80097b2:	7dfb      	ldrb	r3, [r7, #23]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d138      	bne.n	800982a <f_sync+0xfc>
					dir = fp->dir_ptr;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097bc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	330b      	adds	r3, #11
 80097c2:	781a      	ldrb	r2, [r3, #0]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	330b      	adds	r3, #11
 80097c8:	f042 0220 	orr.w	r2, r2, #32
 80097cc:	b2d2      	uxtb	r2, r2
 80097ce:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6818      	ldr	r0, [r3, #0]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	461a      	mov	r2, r3
 80097da:	68f9      	ldr	r1, [r7, #12]
 80097dc:	f7fe f838 	bl	8007850 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	f103 021c 	add.w	r2, r3, #28
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	68db      	ldr	r3, [r3, #12]
 80097ea:	4619      	mov	r1, r3
 80097ec:	4610      	mov	r0, r2
 80097ee:	f7fc ffff 	bl	80067f0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	3316      	adds	r3, #22
 80097f6:	6939      	ldr	r1, [r7, #16]
 80097f8:	4618      	mov	r0, r3
 80097fa:	f7fc fff9 	bl	80067f0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	3312      	adds	r3, #18
 8009802:	2100      	movs	r1, #0
 8009804:	4618      	mov	r0, r3
 8009806:	f7fc ffd8 	bl	80067ba <st_word>
					fs->wflag = 1;
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	2201      	movs	r2, #1
 800980e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	4618      	mov	r0, r3
 8009814:	f7fd faa6 	bl	8006d64 <sync_fs>
 8009818:	4603      	mov	r3, r0
 800981a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	7d1b      	ldrb	r3, [r3, #20]
 8009820:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009824:	b2da      	uxtb	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	7dfa      	ldrb	r2, [r7, #23]
 800982e:	4611      	mov	r1, r2
 8009830:	4618      	mov	r0, r3
 8009832:	f7fd f89d 	bl	8006970 <unlock_fs>
 8009836:	7dfb      	ldrb	r3, [r7, #23]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3718      	adds	r7, #24
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7ff ff70 	bl	800972e <f_sync>
 800984e:	4603      	mov	r3, r0
 8009850:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009852:	7bfb      	ldrb	r3, [r7, #15]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d11d      	bne.n	8009894 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f107 0208 	add.w	r2, r7, #8
 800985e:	4611      	mov	r1, r2
 8009860:	4618      	mov	r0, r3
 8009862:	f7ff f983 	bl	8008b6c <validate>
 8009866:	4603      	mov	r3, r0
 8009868:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800986a:	7bfb      	ldrb	r3, [r7, #15]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d111      	bne.n	8009894 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	4618      	mov	r0, r3
 8009876:	f7fd f9a3 	bl	8006bc0 <dec_lock>
 800987a:	4603      	mov	r3, r0
 800987c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800987e:	7bfb      	ldrb	r3, [r7, #15]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d102      	bne.n	800988a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	2100      	movs	r1, #0
 800988e:	4618      	mov	r0, r3
 8009890:	f7fd f86e 	bl	8006970 <unlock_fs>
#endif
		}
	}
	return res;
 8009894:	7bfb      	ldrb	r3, [r7, #15]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b092      	sub	sp, #72	@ 0x48
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80098a8:	f107 010c 	add.w	r1, r7, #12
 80098ac:	1d3b      	adds	r3, r7, #4
 80098ae:	2200      	movs	r2, #0
 80098b0:	4618      	mov	r0, r3
 80098b2:	f7fe fed3 	bl	800865c <find_volume>
 80098b6:	4603      	mov	r3, r0
 80098b8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 80098bc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d134      	bne.n	800992e <f_stat+0x90>
		INIT_NAMBUF(dj.obj.fs);
 80098c4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80098c8:	f000 f9ea 	bl	8009ca0 <ff_memalloc>
 80098cc:	6438      	str	r0, [r7, #64]	@ 0x40
 80098ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d106      	bne.n	80098e2 <f_stat+0x44>
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2111      	movs	r1, #17
 80098d8:	4618      	mov	r0, r3
 80098da:	f7fd f849 	bl	8006970 <unlock_fs>
 80098de:	2311      	movs	r3, #17
 80098e0:	e02e      	b.n	8009940 <f_stat+0xa2>
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80098e6:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	f107 030c 	add.w	r3, r7, #12
 80098ee:	4611      	mov	r1, r2
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7fe fda3 	bl	800843c <follow_path>
 80098f6:	4603      	mov	r3, r0
 80098f8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		if (res == FR_OK) {				/* Follow completed */
 80098fc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8009900:	2b00      	cmp	r3, #0
 8009902:	d111      	bne.n	8009928 <f_stat+0x8a>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8009904:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8009908:	b25b      	sxtb	r3, r3
 800990a:	2b00      	cmp	r3, #0
 800990c:	da03      	bge.n	8009916 <f_stat+0x78>
				res = FR_INVALID_NAME;
 800990e:	2306      	movs	r3, #6
 8009910:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8009914:	e008      	b.n	8009928 <f_stat+0x8a>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d005      	beq.n	8009928 <f_stat+0x8a>
 800991c:	f107 030c 	add.w	r3, r7, #12
 8009920:	6839      	ldr	r1, [r7, #0]
 8009922:	4618      	mov	r0, r3
 8009924:	f7fe faf4 	bl	8007f10 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
 8009928:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800992a:	f000 f9c5 	bl	8009cb8 <ff_memfree>
	}

	LEAVE_FF(dj.obj.fs, res);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8009934:	4611      	mov	r1, r2
 8009936:	4618      	mov	r0, r3
 8009938:	f7fd f81a 	bl	8006970 <unlock_fs>
 800993c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8009940:	4618      	mov	r0, r3
 8009942:	3748      	adds	r7, #72	@ 0x48
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b088      	sub	sp, #32
 800994c:	af00      	add	r7, sp, #0
 800994e:	60f8      	str	r0, [r7, #12]
 8009950:	60b9      	str	r1, [r7, #8]
 8009952:	607a      	str	r2, [r7, #4]
	int n = 0;
 8009954:	2300      	movs	r3, #0
 8009956:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800995c:	e01c      	b.n	8009998 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800995e:	f107 0310 	add.w	r3, r7, #16
 8009962:	f107 0114 	add.w	r1, r7, #20
 8009966:	2201      	movs	r2, #1
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f7ff fb8f 	bl	800908c <f_read>
		if (rc != 1) break;
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d117      	bne.n	80099a4 <f_gets+0x5c>
		c = s[0];
 8009974:	7d3b      	ldrb	r3, [r7, #20]
 8009976:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009978:	7dfb      	ldrb	r3, [r7, #23]
 800997a:	2b0d      	cmp	r3, #13
 800997c:	d00b      	beq.n	8009996 <f_gets+0x4e>
		*p++ = c;
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	1c5a      	adds	r2, r3, #1
 8009982:	61ba      	str	r2, [r7, #24]
 8009984:	7dfa      	ldrb	r2, [r7, #23]
 8009986:	701a      	strb	r2, [r3, #0]
		n++;
 8009988:	69fb      	ldr	r3, [r7, #28]
 800998a:	3301      	adds	r3, #1
 800998c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800998e:	7dfb      	ldrb	r3, [r7, #23]
 8009990:	2b0a      	cmp	r3, #10
 8009992:	d009      	beq.n	80099a8 <f_gets+0x60>
 8009994:	e000      	b.n	8009998 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009996:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	3b01      	subs	r3, #1
 800999c:	69fa      	ldr	r2, [r7, #28]
 800999e:	429a      	cmp	r2, r3
 80099a0:	dbdd      	blt.n	800995e <f_gets+0x16>
 80099a2:	e002      	b.n	80099aa <f_gets+0x62>
		if (rc != 1) break;
 80099a4:	bf00      	nop
 80099a6:	e000      	b.n	80099aa <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 80099a8:	bf00      	nop
	}
	*p = 0;
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	2200      	movs	r2, #0
 80099ae:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d001      	beq.n	80099ba <f_gets+0x72>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	e000      	b.n	80099bc <f_gets+0x74>
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3720      	adds	r7, #32
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80099c4:	b480      	push	{r7}
 80099c6:	b087      	sub	sp, #28
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	4613      	mov	r3, r2
 80099d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80099d2:	2301      	movs	r3, #1
 80099d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80099d6:	2300      	movs	r3, #0
 80099d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80099da:	4b1f      	ldr	r3, [pc, #124]	@ (8009a58 <FATFS_LinkDriverEx+0x94>)
 80099dc:	7a5b      	ldrb	r3, [r3, #9]
 80099de:	b2db      	uxtb	r3, r3
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d131      	bne.n	8009a48 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80099e4:	4b1c      	ldr	r3, [pc, #112]	@ (8009a58 <FATFS_LinkDriverEx+0x94>)
 80099e6:	7a5b      	ldrb	r3, [r3, #9]
 80099e8:	b2db      	uxtb	r3, r3
 80099ea:	461a      	mov	r2, r3
 80099ec:	4b1a      	ldr	r3, [pc, #104]	@ (8009a58 <FATFS_LinkDriverEx+0x94>)
 80099ee:	2100      	movs	r1, #0
 80099f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80099f2:	4b19      	ldr	r3, [pc, #100]	@ (8009a58 <FATFS_LinkDriverEx+0x94>)
 80099f4:	7a5b      	ldrb	r3, [r3, #9]
 80099f6:	b2db      	uxtb	r3, r3
 80099f8:	4a17      	ldr	r2, [pc, #92]	@ (8009a58 <FATFS_LinkDriverEx+0x94>)
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4413      	add	r3, r2
 80099fe:	68fa      	ldr	r2, [r7, #12]
 8009a00:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009a02:	4b15      	ldr	r3, [pc, #84]	@ (8009a58 <FATFS_LinkDriverEx+0x94>)
 8009a04:	7a5b      	ldrb	r3, [r3, #9]
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	461a      	mov	r2, r3
 8009a0a:	4b13      	ldr	r3, [pc, #76]	@ (8009a58 <FATFS_LinkDriverEx+0x94>)
 8009a0c:	4413      	add	r3, r2
 8009a0e:	79fa      	ldrb	r2, [r7, #7]
 8009a10:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009a12:	4b11      	ldr	r3, [pc, #68]	@ (8009a58 <FATFS_LinkDriverEx+0x94>)
 8009a14:	7a5b      	ldrb	r3, [r3, #9]
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	1c5a      	adds	r2, r3, #1
 8009a1a:	b2d1      	uxtb	r1, r2
 8009a1c:	4a0e      	ldr	r2, [pc, #56]	@ (8009a58 <FATFS_LinkDriverEx+0x94>)
 8009a1e:	7251      	strb	r1, [r2, #9]
 8009a20:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009a22:	7dbb      	ldrb	r3, [r7, #22]
 8009a24:	3330      	adds	r3, #48	@ 0x30
 8009a26:	b2da      	uxtb	r2, r3
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	3301      	adds	r3, #1
 8009a30:	223a      	movs	r2, #58	@ 0x3a
 8009a32:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	3302      	adds	r3, #2
 8009a38:	222f      	movs	r2, #47	@ 0x2f
 8009a3a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	3303      	adds	r3, #3
 8009a40:	2200      	movs	r2, #0
 8009a42:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009a44:	2300      	movs	r3, #0
 8009a46:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	371c      	adds	r7, #28
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr
 8009a56:	bf00      	nop
 8009a58:	20002a3c 	.word	0x20002a3c

08009a5c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
 8009a64:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009a66:	2200      	movs	r2, #0
 8009a68:	6839      	ldr	r1, [r7, #0]
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f7ff ffaa 	bl	80099c4 <FATFS_LinkDriverEx>
 8009a70:	4603      	mov	r3, r0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3708      	adds	r7, #8
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
	...

08009a7c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b085      	sub	sp, #20
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	4603      	mov	r3, r0
 8009a84:	6039      	str	r1, [r7, #0]
 8009a86:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009a88:	88fb      	ldrh	r3, [r7, #6]
 8009a8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a8c:	d802      	bhi.n	8009a94 <ff_convert+0x18>
		c = chr;
 8009a8e:	88fb      	ldrh	r3, [r7, #6]
 8009a90:	81fb      	strh	r3, [r7, #14]
 8009a92:	e025      	b.n	8009ae0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d00b      	beq.n	8009ab2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8009a9a:	88fb      	ldrh	r3, [r7, #6]
 8009a9c:	2bff      	cmp	r3, #255	@ 0xff
 8009a9e:	d805      	bhi.n	8009aac <ff_convert+0x30>
 8009aa0:	88fb      	ldrh	r3, [r7, #6]
 8009aa2:	3b80      	subs	r3, #128	@ 0x80
 8009aa4:	4a12      	ldr	r2, [pc, #72]	@ (8009af0 <ff_convert+0x74>)
 8009aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009aaa:	e000      	b.n	8009aae <ff_convert+0x32>
 8009aac:	2300      	movs	r3, #0
 8009aae:	81fb      	strh	r3, [r7, #14]
 8009ab0:	e016      	b.n	8009ae0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	81fb      	strh	r3, [r7, #14]
 8009ab6:	e009      	b.n	8009acc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009ab8:	89fb      	ldrh	r3, [r7, #14]
 8009aba:	4a0d      	ldr	r2, [pc, #52]	@ (8009af0 <ff_convert+0x74>)
 8009abc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ac0:	88fa      	ldrh	r2, [r7, #6]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d006      	beq.n	8009ad4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009ac6:	89fb      	ldrh	r3, [r7, #14]
 8009ac8:	3301      	adds	r3, #1
 8009aca:	81fb      	strh	r3, [r7, #14]
 8009acc:	89fb      	ldrh	r3, [r7, #14]
 8009ace:	2b7f      	cmp	r3, #127	@ 0x7f
 8009ad0:	d9f2      	bls.n	8009ab8 <ff_convert+0x3c>
 8009ad2:	e000      	b.n	8009ad6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009ad4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009ad6:	89fb      	ldrh	r3, [r7, #14]
 8009ad8:	3380      	adds	r3, #128	@ 0x80
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009ae0:	89fb      	ldrh	r3, [r7, #14]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3714      	adds	r7, #20
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr
 8009aee:	bf00      	nop
 8009af0:	08010220 	.word	0x08010220

08009af4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b087      	sub	sp, #28
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	4603      	mov	r3, r0
 8009afc:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8009afe:	88fb      	ldrh	r3, [r7, #6]
 8009b00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b04:	d201      	bcs.n	8009b0a <ff_wtoupper+0x16>
 8009b06:	4b3e      	ldr	r3, [pc, #248]	@ (8009c00 <ff_wtoupper+0x10c>)
 8009b08:	e000      	b.n	8009b0c <ff_wtoupper+0x18>
 8009b0a:	4b3e      	ldr	r3, [pc, #248]	@ (8009c04 <ff_wtoupper+0x110>)
 8009b0c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	1c9a      	adds	r2, r3, #2
 8009b12:	617a      	str	r2, [r7, #20]
 8009b14:	881b      	ldrh	r3, [r3, #0]
 8009b16:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009b18:	8a7b      	ldrh	r3, [r7, #18]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d068      	beq.n	8009bf0 <ff_wtoupper+0xfc>
 8009b1e:	88fa      	ldrh	r2, [r7, #6]
 8009b20:	8a7b      	ldrh	r3, [r7, #18]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d364      	bcc.n	8009bf0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009b26:	697b      	ldr	r3, [r7, #20]
 8009b28:	1c9a      	adds	r2, r3, #2
 8009b2a:	617a      	str	r2, [r7, #20]
 8009b2c:	881b      	ldrh	r3, [r3, #0]
 8009b2e:	823b      	strh	r3, [r7, #16]
 8009b30:	8a3b      	ldrh	r3, [r7, #16]
 8009b32:	0a1b      	lsrs	r3, r3, #8
 8009b34:	81fb      	strh	r3, [r7, #14]
 8009b36:	8a3b      	ldrh	r3, [r7, #16]
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8009b3c:	88fa      	ldrh	r2, [r7, #6]
 8009b3e:	8a79      	ldrh	r1, [r7, #18]
 8009b40:	8a3b      	ldrh	r3, [r7, #16]
 8009b42:	440b      	add	r3, r1
 8009b44:	429a      	cmp	r2, r3
 8009b46:	da49      	bge.n	8009bdc <ff_wtoupper+0xe8>
			switch (cmd) {
 8009b48:	89fb      	ldrh	r3, [r7, #14]
 8009b4a:	2b08      	cmp	r3, #8
 8009b4c:	d84f      	bhi.n	8009bee <ff_wtoupper+0xfa>
 8009b4e:	a201      	add	r2, pc, #4	@ (adr r2, 8009b54 <ff_wtoupper+0x60>)
 8009b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b54:	08009b79 	.word	0x08009b79
 8009b58:	08009b8b 	.word	0x08009b8b
 8009b5c:	08009ba1 	.word	0x08009ba1
 8009b60:	08009ba9 	.word	0x08009ba9
 8009b64:	08009bb1 	.word	0x08009bb1
 8009b68:	08009bb9 	.word	0x08009bb9
 8009b6c:	08009bc1 	.word	0x08009bc1
 8009b70:	08009bc9 	.word	0x08009bc9
 8009b74:	08009bd1 	.word	0x08009bd1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009b78:	88fa      	ldrh	r2, [r7, #6]
 8009b7a:	8a7b      	ldrh	r3, [r7, #18]
 8009b7c:	1ad3      	subs	r3, r2, r3
 8009b7e:	005b      	lsls	r3, r3, #1
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	4413      	add	r3, r2
 8009b84:	881b      	ldrh	r3, [r3, #0]
 8009b86:	80fb      	strh	r3, [r7, #6]
 8009b88:	e027      	b.n	8009bda <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8009b8a:	88fa      	ldrh	r2, [r7, #6]
 8009b8c:	8a7b      	ldrh	r3, [r7, #18]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	f003 0301 	and.w	r3, r3, #1
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	88fa      	ldrh	r2, [r7, #6]
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	80fb      	strh	r3, [r7, #6]
 8009b9e:	e01c      	b.n	8009bda <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009ba0:	88fb      	ldrh	r3, [r7, #6]
 8009ba2:	3b10      	subs	r3, #16
 8009ba4:	80fb      	strh	r3, [r7, #6]
 8009ba6:	e018      	b.n	8009bda <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009ba8:	88fb      	ldrh	r3, [r7, #6]
 8009baa:	3b20      	subs	r3, #32
 8009bac:	80fb      	strh	r3, [r7, #6]
 8009bae:	e014      	b.n	8009bda <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009bb0:	88fb      	ldrh	r3, [r7, #6]
 8009bb2:	3b30      	subs	r3, #48	@ 0x30
 8009bb4:	80fb      	strh	r3, [r7, #6]
 8009bb6:	e010      	b.n	8009bda <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009bb8:	88fb      	ldrh	r3, [r7, #6]
 8009bba:	3b1a      	subs	r3, #26
 8009bbc:	80fb      	strh	r3, [r7, #6]
 8009bbe:	e00c      	b.n	8009bda <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009bc0:	88fb      	ldrh	r3, [r7, #6]
 8009bc2:	3308      	adds	r3, #8
 8009bc4:	80fb      	strh	r3, [r7, #6]
 8009bc6:	e008      	b.n	8009bda <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009bc8:	88fb      	ldrh	r3, [r7, #6]
 8009bca:	3b50      	subs	r3, #80	@ 0x50
 8009bcc:	80fb      	strh	r3, [r7, #6]
 8009bce:	e004      	b.n	8009bda <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009bd0:	88fb      	ldrh	r3, [r7, #6]
 8009bd2:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8009bd6:	80fb      	strh	r3, [r7, #6]
 8009bd8:	bf00      	nop
			}
			break;
 8009bda:	e008      	b.n	8009bee <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8009bdc:	89fb      	ldrh	r3, [r7, #14]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d195      	bne.n	8009b0e <ff_wtoupper+0x1a>
 8009be2:	8a3b      	ldrh	r3, [r7, #16]
 8009be4:	005b      	lsls	r3, r3, #1
 8009be6:	697a      	ldr	r2, [r7, #20]
 8009be8:	4413      	add	r3, r2
 8009bea:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8009bec:	e78f      	b.n	8009b0e <ff_wtoupper+0x1a>
			break;
 8009bee:	bf00      	nop
	}

	return chr;
 8009bf0:	88fb      	ldrh	r3, [r7, #6]
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	371c      	adds	r7, #28
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	08010320 	.word	0x08010320
 8009c04:	08010514 	.word	0x08010514

08009c08 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	4603      	mov	r3, r0
 8009c10:	6039      	str	r1, [r7, #0]
 8009c12:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8009c14:	2300      	movs	r3, #0
 8009c16:	60fb      	str	r3, [r7, #12]
 8009c18:	2300      	movs	r3, #0
 8009c1a:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 8009c1c:	f107 030c 	add.w	r3, r7, #12
 8009c20:	2101      	movs	r1, #1
 8009c22:	4618      	mov	r0, r3
 8009c24:	f000 f865 	bl	8009cf2 <osSemaphoreCreate>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	bf14      	ite	ne
 8009c36:	2301      	movne	r3, #1
 8009c38:	2300      	moveq	r3, #0
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	617b      	str	r3, [r7, #20]

    return ret;
 8009c3e:	697b      	ldr	r3, [r7, #20]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3718      	adds	r7, #24
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b082      	sub	sp, #8
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 f905 	bl	8009e60 <osSemaphoreDelete>
#endif
    return 1;
 8009c56:	2301      	movs	r3, #1
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3708      	adds	r7, #8
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 8009c6c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 f871 	bl	8009d58 <osSemaphoreWait>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d101      	bne.n	8009c80 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009c80:	68fb      	ldr	r3, [r7, #12]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8009c8a:	b580      	push	{r7, lr}
 8009c8c:	b082      	sub	sp, #8
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 f8ae 	bl	8009df4 <osSemaphoreRelease>
#endif
}
 8009c98:	bf00      	nop
 8009c9a:	3708      	adds	r7, #8
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f002 fabf 	bl	800c22c <pvPortMalloc>
 8009cae:	4603      	mov	r3, r0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f002 fb81 	bl	800c3c8 <vPortFree>
}
 8009cc6:	bf00      	nop
 8009cc8:	3708      	adds	r7, #8
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009cce:	b480      	push	{r7}
 8009cd0:	b083      	sub	sp, #12
 8009cd2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cd4:	f3ef 8305 	mrs	r3, IPSR
 8009cd8:	607b      	str	r3, [r7, #4]
  return(result);
 8009cda:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	bf14      	ite	ne
 8009ce0:	2301      	movne	r3, #1
 8009ce2:	2300      	moveq	r3, #0
 8009ce4:	b2db      	uxtb	r3, r3
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	370c      	adds	r7, #12
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr

08009cf2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009cf2:	b580      	push	{r7, lr}
 8009cf4:	b086      	sub	sp, #24
 8009cf6:	af02      	add	r7, sp, #8
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00f      	beq.n	8009d24 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d10a      	bne.n	8009d20 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	685b      	ldr	r3, [r3, #4]
 8009d0e:	2203      	movs	r2, #3
 8009d10:	9200      	str	r2, [sp, #0]
 8009d12:	2200      	movs	r2, #0
 8009d14:	2100      	movs	r1, #0
 8009d16:	2001      	movs	r0, #1
 8009d18:	f000 f9d4 	bl	800a0c4 <xQueueGenericCreateStatic>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	e016      	b.n	8009d4e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009d20:	2300      	movs	r3, #0
 8009d22:	e014      	b.n	8009d4e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d110      	bne.n	8009d4c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009d2a:	2203      	movs	r2, #3
 8009d2c:	2100      	movs	r1, #0
 8009d2e:	2001      	movs	r0, #1
 8009d30:	f000 fa45 	bl	800a1be <xQueueGenericCreate>
 8009d34:	60f8      	str	r0, [r7, #12]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d005      	beq.n	8009d48 <osSemaphoreCreate+0x56>
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	2200      	movs	r2, #0
 8009d40:	2100      	movs	r1, #0
 8009d42:	68f8      	ldr	r0, [r7, #12]
 8009d44:	f000 fa96 	bl	800a274 <xQueueGenericSend>
      return sema;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	e000      	b.n	8009d4e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009d4c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
	...

08009d58 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009d62:	2300      	movs	r3, #0
 8009d64:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d101      	bne.n	8009d70 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009d6c:	2380      	movs	r3, #128	@ 0x80
 8009d6e:	e03a      	b.n	8009de6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009d70:	2300      	movs	r3, #0
 8009d72:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d7a:	d103      	bne.n	8009d84 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d80:	60fb      	str	r3, [r7, #12]
 8009d82:	e009      	b.n	8009d98 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d006      	beq.n	8009d98 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d101      	bne.n	8009d98 <osSemaphoreWait+0x40>
      ticks = 1;
 8009d94:	2301      	movs	r3, #1
 8009d96:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009d98:	f7ff ff99 	bl	8009cce <inHandlerMode>
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d017      	beq.n	8009dd2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009da2:	f107 0308 	add.w	r3, r7, #8
 8009da6:	461a      	mov	r2, r3
 8009da8:	2100      	movs	r1, #0
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 fde6 	bl	800a97c <xQueueReceiveFromISR>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d001      	beq.n	8009dba <osSemaphoreWait+0x62>
      return osErrorOS;
 8009db6:	23ff      	movs	r3, #255	@ 0xff
 8009db8:	e015      	b.n	8009de6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d011      	beq.n	8009de4 <osSemaphoreWait+0x8c>
 8009dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8009df0 <osSemaphoreWait+0x98>)
 8009dc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009dc6:	601a      	str	r2, [r3, #0]
 8009dc8:	f3bf 8f4f 	dsb	sy
 8009dcc:	f3bf 8f6f 	isb	sy
 8009dd0:	e008      	b.n	8009de4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009dd2:	68f9      	ldr	r1, [r7, #12]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 fcc1 	bl	800a75c <xQueueSemaphoreTake>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d001      	beq.n	8009de4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009de0:	23ff      	movs	r3, #255	@ 0xff
 8009de2:	e000      	b.n	8009de6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	e000ed04 	.word	0xe000ed04

08009df4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009e00:	2300      	movs	r3, #0
 8009e02:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009e04:	f7ff ff63 	bl	8009cce <inHandlerMode>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d016      	beq.n	8009e3c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009e0e:	f107 0308 	add.w	r3, r7, #8
 8009e12:	4619      	mov	r1, r3
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 fb2f 	bl	800a478 <xQueueGiveFromISR>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	d001      	beq.n	8009e24 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009e20:	23ff      	movs	r3, #255	@ 0xff
 8009e22:	e017      	b.n	8009e54 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d013      	beq.n	8009e52 <osSemaphoreRelease+0x5e>
 8009e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8009e5c <osSemaphoreRelease+0x68>)
 8009e2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e30:	601a      	str	r2, [r3, #0]
 8009e32:	f3bf 8f4f 	dsb	sy
 8009e36:	f3bf 8f6f 	isb	sy
 8009e3a:	e00a      	b.n	8009e52 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	2200      	movs	r2, #0
 8009e40:	2100      	movs	r1, #0
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 fa16 	bl	800a274 <xQueueGenericSend>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d001      	beq.n	8009e52 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009e4e:	23ff      	movs	r3, #255	@ 0xff
 8009e50:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009e52:	68fb      	ldr	r3, [r7, #12]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3710      	adds	r7, #16
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	e000ed04 	.word	0xe000ed04

08009e60 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b082      	sub	sp, #8
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009e68:	f7ff ff31 	bl	8009cce <inHandlerMode>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d001      	beq.n	8009e76 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8009e72:	2382      	movs	r3, #130	@ 0x82
 8009e74:	e003      	b.n	8009e7e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fe02 	bl	800aa80 <vQueueDelete>

  return osOK; 
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3708      	adds	r7, #8
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e86:	b480      	push	{r7}
 8009e88:	b083      	sub	sp, #12
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f103 0208 	add.w	r2, r3, #8
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8009e9e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f103 0208 	add.w	r2, r3, #8
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f103 0208 	add.w	r2, r3, #8
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009eba:	bf00      	nop
 8009ebc:	370c      	adds	r7, #12
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b083      	sub	sp, #12
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009ed4:	bf00      	nop
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	689a      	ldr	r2, [r3, #8]
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	683a      	ldr	r2, [r7, #0]
 8009f04:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	683a      	ldr	r2, [r7, #0]
 8009f0a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	1c5a      	adds	r2, r3, #1
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	601a      	str	r2, [r3, #0]
}
 8009f1c:	bf00      	nop
 8009f1e:	3714      	adds	r7, #20
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f3e:	d103      	bne.n	8009f48 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	60fb      	str	r3, [r7, #12]
 8009f46:	e00c      	b.n	8009f62 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	3308      	adds	r3, #8
 8009f4c:	60fb      	str	r3, [r7, #12]
 8009f4e:	e002      	b.n	8009f56 <vListInsert+0x2e>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	60fb      	str	r3, [r7, #12]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	68ba      	ldr	r2, [r7, #8]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d2f6      	bcs.n	8009f50 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	685a      	ldr	r2, [r3, #4]
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	683a      	ldr	r2, [r7, #0]
 8009f70:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	683a      	ldr	r2, [r7, #0]
 8009f7c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	1c5a      	adds	r2, r3, #1
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	601a      	str	r2, [r3, #0]
}
 8009f8e:	bf00      	nop
 8009f90:	3714      	adds	r7, #20
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr

08009f9a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f9a:	b480      	push	{r7}
 8009f9c:	b085      	sub	sp, #20
 8009f9e:	af00      	add	r7, sp, #0
 8009fa0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	6892      	ldr	r2, [r2, #8]
 8009fb0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	6852      	ldr	r2, [r2, #4]
 8009fba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d103      	bne.n	8009fce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	689a      	ldr	r2, [r3, #8]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	1e5a      	subs	r2, r3, #1
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3714      	adds	r7, #20
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr
	...

08009ff0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d10b      	bne.n	800a01c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a008:	f383 8811 	msr	BASEPRI, r3
 800a00c:	f3bf 8f6f 	isb	sy
 800a010:	f3bf 8f4f 	dsb	sy
 800a014:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a016:	bf00      	nop
 800a018:	bf00      	nop
 800a01a:	e7fd      	b.n	800a018 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a01c:	f001 ffe4 	bl	800bfe8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a028:	68f9      	ldr	r1, [r7, #12]
 800a02a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a02c:	fb01 f303 	mul.w	r3, r1, r3
 800a030:	441a      	add	r2, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	2200      	movs	r2, #0
 800a03a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a04c:	3b01      	subs	r3, #1
 800a04e:	68f9      	ldr	r1, [r7, #12]
 800a050:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a052:	fb01 f303 	mul.w	r3, r1, r3
 800a056:	441a      	add	r2, r3
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	22ff      	movs	r2, #255	@ 0xff
 800a060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	22ff      	movs	r2, #255	@ 0xff
 800a068:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d114      	bne.n	800a09c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d01a      	beq.n	800a0b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	3310      	adds	r3, #16
 800a07e:	4618      	mov	r0, r3
 800a080:	f001 fa9c 	bl	800b5bc <xTaskRemoveFromEventList>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d012      	beq.n	800a0b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a08a:	4b0d      	ldr	r3, [pc, #52]	@ (800a0c0 <xQueueGenericReset+0xd0>)
 800a08c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a090:	601a      	str	r2, [r3, #0]
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	f3bf 8f6f 	isb	sy
 800a09a:	e009      	b.n	800a0b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	3310      	adds	r3, #16
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7ff fef0 	bl	8009e86 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	3324      	adds	r3, #36	@ 0x24
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7ff feeb 	bl	8009e86 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a0b0:	f001 ffcc 	bl	800c04c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a0b4:	2301      	movs	r3, #1
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	3710      	adds	r7, #16
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	e000ed04 	.word	0xe000ed04

0800a0c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b08e      	sub	sp, #56	@ 0x38
 800a0c8:	af02      	add	r7, sp, #8
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	60b9      	str	r1, [r7, #8]
 800a0ce:	607a      	str	r2, [r7, #4]
 800a0d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d10b      	bne.n	800a0f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a0d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0dc:	f383 8811 	msr	BASEPRI, r3
 800a0e0:	f3bf 8f6f 	isb	sy
 800a0e4:	f3bf 8f4f 	dsb	sy
 800a0e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a0ea:	bf00      	nop
 800a0ec:	bf00      	nop
 800a0ee:	e7fd      	b.n	800a0ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d10b      	bne.n	800a10e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0fa:	f383 8811 	msr	BASEPRI, r3
 800a0fe:	f3bf 8f6f 	isb	sy
 800a102:	f3bf 8f4f 	dsb	sy
 800a106:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a108:	bf00      	nop
 800a10a:	bf00      	nop
 800a10c:	e7fd      	b.n	800a10a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d002      	beq.n	800a11a <xQueueGenericCreateStatic+0x56>
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d001      	beq.n	800a11e <xQueueGenericCreateStatic+0x5a>
 800a11a:	2301      	movs	r3, #1
 800a11c:	e000      	b.n	800a120 <xQueueGenericCreateStatic+0x5c>
 800a11e:	2300      	movs	r3, #0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d10b      	bne.n	800a13c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a128:	f383 8811 	msr	BASEPRI, r3
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	623b      	str	r3, [r7, #32]
}
 800a136:	bf00      	nop
 800a138:	bf00      	nop
 800a13a:	e7fd      	b.n	800a138 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d102      	bne.n	800a148 <xQueueGenericCreateStatic+0x84>
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d101      	bne.n	800a14c <xQueueGenericCreateStatic+0x88>
 800a148:	2301      	movs	r3, #1
 800a14a:	e000      	b.n	800a14e <xQueueGenericCreateStatic+0x8a>
 800a14c:	2300      	movs	r3, #0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d10b      	bne.n	800a16a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a156:	f383 8811 	msr	BASEPRI, r3
 800a15a:	f3bf 8f6f 	isb	sy
 800a15e:	f3bf 8f4f 	dsb	sy
 800a162:	61fb      	str	r3, [r7, #28]
}
 800a164:	bf00      	nop
 800a166:	bf00      	nop
 800a168:	e7fd      	b.n	800a166 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a16a:	2348      	movs	r3, #72	@ 0x48
 800a16c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	2b48      	cmp	r3, #72	@ 0x48
 800a172:	d00b      	beq.n	800a18c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a178:	f383 8811 	msr	BASEPRI, r3
 800a17c:	f3bf 8f6f 	isb	sy
 800a180:	f3bf 8f4f 	dsb	sy
 800a184:	61bb      	str	r3, [r7, #24]
}
 800a186:	bf00      	nop
 800a188:	bf00      	nop
 800a18a:	e7fd      	b.n	800a188 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a18c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a194:	2b00      	cmp	r3, #0
 800a196:	d00d      	beq.n	800a1b4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a19a:	2201      	movs	r2, #1
 800a19c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a1a0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a1a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	68b9      	ldr	r1, [r7, #8]
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	f000 f840 	bl	800a234 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3730      	adds	r7, #48	@ 0x30
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}

0800a1be <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a1be:	b580      	push	{r7, lr}
 800a1c0:	b08a      	sub	sp, #40	@ 0x28
 800a1c2:	af02      	add	r7, sp, #8
 800a1c4:	60f8      	str	r0, [r7, #12]
 800a1c6:	60b9      	str	r1, [r7, #8]
 800a1c8:	4613      	mov	r3, r2
 800a1ca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d10b      	bne.n	800a1ea <xQueueGenericCreate+0x2c>
	__asm volatile
 800a1d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d6:	f383 8811 	msr	BASEPRI, r3
 800a1da:	f3bf 8f6f 	isb	sy
 800a1de:	f3bf 8f4f 	dsb	sy
 800a1e2:	613b      	str	r3, [r7, #16]
}
 800a1e4:	bf00      	nop
 800a1e6:	bf00      	nop
 800a1e8:	e7fd      	b.n	800a1e6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	68ba      	ldr	r2, [r7, #8]
 800a1ee:	fb02 f303 	mul.w	r3, r2, r3
 800a1f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	3348      	adds	r3, #72	@ 0x48
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f002 f817 	bl	800c22c <pvPortMalloc>
 800a1fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d011      	beq.n	800a22a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	3348      	adds	r3, #72	@ 0x48
 800a20e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	2200      	movs	r2, #0
 800a214:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a218:	79fa      	ldrb	r2, [r7, #7]
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	9300      	str	r3, [sp, #0]
 800a21e:	4613      	mov	r3, r2
 800a220:	697a      	ldr	r2, [r7, #20]
 800a222:	68b9      	ldr	r1, [r7, #8]
 800a224:	68f8      	ldr	r0, [r7, #12]
 800a226:	f000 f805 	bl	800a234 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a22a:	69bb      	ldr	r3, [r7, #24]
	}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3720      	adds	r7, #32
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}

0800a234 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a234:	b580      	push	{r7, lr}
 800a236:	b084      	sub	sp, #16
 800a238:	af00      	add	r7, sp, #0
 800a23a:	60f8      	str	r0, [r7, #12]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	607a      	str	r2, [r7, #4]
 800a240:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d103      	bne.n	800a250 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	69ba      	ldr	r2, [r7, #24]
 800a24c:	601a      	str	r2, [r3, #0]
 800a24e:	e002      	b.n	800a256 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a262:	2101      	movs	r1, #1
 800a264:	69b8      	ldr	r0, [r7, #24]
 800a266:	f7ff fec3 	bl	8009ff0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a26a:	bf00      	nop
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
	...

0800a274 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b08e      	sub	sp, #56	@ 0x38
 800a278:	af00      	add	r7, sp, #0
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	607a      	str	r2, [r7, #4]
 800a280:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a282:	2300      	movs	r3, #0
 800a284:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a28a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d10b      	bne.n	800a2a8 <xQueueGenericSend+0x34>
	__asm volatile
 800a290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a294:	f383 8811 	msr	BASEPRI, r3
 800a298:	f3bf 8f6f 	isb	sy
 800a29c:	f3bf 8f4f 	dsb	sy
 800a2a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a2a2:	bf00      	nop
 800a2a4:	bf00      	nop
 800a2a6:	e7fd      	b.n	800a2a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d103      	bne.n	800a2b6 <xQueueGenericSend+0x42>
 800a2ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d101      	bne.n	800a2ba <xQueueGenericSend+0x46>
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e000      	b.n	800a2bc <xQueueGenericSend+0x48>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d10b      	bne.n	800a2d8 <xQueueGenericSend+0x64>
	__asm volatile
 800a2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c4:	f383 8811 	msr	BASEPRI, r3
 800a2c8:	f3bf 8f6f 	isb	sy
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a2d2:	bf00      	nop
 800a2d4:	bf00      	nop
 800a2d6:	e7fd      	b.n	800a2d4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	2b02      	cmp	r3, #2
 800a2dc:	d103      	bne.n	800a2e6 <xQueueGenericSend+0x72>
 800a2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d101      	bne.n	800a2ea <xQueueGenericSend+0x76>
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e000      	b.n	800a2ec <xQueueGenericSend+0x78>
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d10b      	bne.n	800a308 <xQueueGenericSend+0x94>
	__asm volatile
 800a2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f4:	f383 8811 	msr	BASEPRI, r3
 800a2f8:	f3bf 8f6f 	isb	sy
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	623b      	str	r3, [r7, #32]
}
 800a302:	bf00      	nop
 800a304:	bf00      	nop
 800a306:	e7fd      	b.n	800a304 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a308:	f001 fb18 	bl	800b93c <xTaskGetSchedulerState>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d102      	bne.n	800a318 <xQueueGenericSend+0xa4>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d101      	bne.n	800a31c <xQueueGenericSend+0xa8>
 800a318:	2301      	movs	r3, #1
 800a31a:	e000      	b.n	800a31e <xQueueGenericSend+0xaa>
 800a31c:	2300      	movs	r3, #0
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d10b      	bne.n	800a33a <xQueueGenericSend+0xc6>
	__asm volatile
 800a322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a326:	f383 8811 	msr	BASEPRI, r3
 800a32a:	f3bf 8f6f 	isb	sy
 800a32e:	f3bf 8f4f 	dsb	sy
 800a332:	61fb      	str	r3, [r7, #28]
}
 800a334:	bf00      	nop
 800a336:	bf00      	nop
 800a338:	e7fd      	b.n	800a336 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a33a:	f001 fe55 	bl	800bfe8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a340:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a346:	429a      	cmp	r2, r3
 800a348:	d302      	bcc.n	800a350 <xQueueGenericSend+0xdc>
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	2b02      	cmp	r3, #2
 800a34e:	d129      	bne.n	800a3a4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a350:	683a      	ldr	r2, [r7, #0]
 800a352:	68b9      	ldr	r1, [r7, #8]
 800a354:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a356:	f000 fbcf 	bl	800aaf8 <prvCopyDataToQueue>
 800a35a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a35e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a360:	2b00      	cmp	r3, #0
 800a362:	d010      	beq.n	800a386 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a366:	3324      	adds	r3, #36	@ 0x24
 800a368:	4618      	mov	r0, r3
 800a36a:	f001 f927 	bl	800b5bc <xTaskRemoveFromEventList>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d013      	beq.n	800a39c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a374:	4b3f      	ldr	r3, [pc, #252]	@ (800a474 <xQueueGenericSend+0x200>)
 800a376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a37a:	601a      	str	r2, [r3, #0]
 800a37c:	f3bf 8f4f 	dsb	sy
 800a380:	f3bf 8f6f 	isb	sy
 800a384:	e00a      	b.n	800a39c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d007      	beq.n	800a39c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a38c:	4b39      	ldr	r3, [pc, #228]	@ (800a474 <xQueueGenericSend+0x200>)
 800a38e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a392:	601a      	str	r2, [r3, #0]
 800a394:	f3bf 8f4f 	dsb	sy
 800a398:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a39c:	f001 fe56 	bl	800c04c <vPortExitCritical>
				return pdPASS;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e063      	b.n	800a46c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d103      	bne.n	800a3b2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a3aa:	f001 fe4f 	bl	800c04c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	e05c      	b.n	800a46c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d106      	bne.n	800a3c6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3b8:	f107 0314 	add.w	r3, r7, #20
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f001 f961 	bl	800b684 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3c6:	f001 fe41 	bl	800c04c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3ca:	f000 feff 	bl	800b1cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3ce:	f001 fe0b 	bl	800bfe8 <vPortEnterCritical>
 800a3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a3d8:	b25b      	sxtb	r3, r3
 800a3da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3de:	d103      	bne.n	800a3e8 <xQueueGenericSend+0x174>
 800a3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3ee:	b25b      	sxtb	r3, r3
 800a3f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3f4:	d103      	bne.n	800a3fe <xQueueGenericSend+0x18a>
 800a3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3fe:	f001 fe25 	bl	800c04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a402:	1d3a      	adds	r2, r7, #4
 800a404:	f107 0314 	add.w	r3, r7, #20
 800a408:	4611      	mov	r1, r2
 800a40a:	4618      	mov	r0, r3
 800a40c:	f001 f950 	bl	800b6b0 <xTaskCheckForTimeOut>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d124      	bne.n	800a460 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a416:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a418:	f000 fc66 	bl	800ace8 <prvIsQueueFull>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d018      	beq.n	800a454 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a424:	3310      	adds	r3, #16
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	4611      	mov	r1, r2
 800a42a:	4618      	mov	r0, r3
 800a42c:	f001 f8a0 	bl	800b570 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a430:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a432:	f000 fbf1 	bl	800ac18 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a436:	f000 fed7 	bl	800b1e8 <xTaskResumeAll>
 800a43a:	4603      	mov	r3, r0
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f47f af7c 	bne.w	800a33a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a442:	4b0c      	ldr	r3, [pc, #48]	@ (800a474 <xQueueGenericSend+0x200>)
 800a444:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a448:	601a      	str	r2, [r3, #0]
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	e772      	b.n	800a33a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a454:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a456:	f000 fbdf 	bl	800ac18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a45a:	f000 fec5 	bl	800b1e8 <xTaskResumeAll>
 800a45e:	e76c      	b.n	800a33a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a460:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a462:	f000 fbd9 	bl	800ac18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a466:	f000 febf 	bl	800b1e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a46a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3738      	adds	r7, #56	@ 0x38
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}
 800a474:	e000ed04 	.word	0xe000ed04

0800a478 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b08e      	sub	sp, #56	@ 0x38
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d10b      	bne.n	800a4a4 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a48c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a490:	f383 8811 	msr	BASEPRI, r3
 800a494:	f3bf 8f6f 	isb	sy
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	623b      	str	r3, [r7, #32]
}
 800a49e:	bf00      	nop
 800a4a0:	bf00      	nop
 800a4a2:	e7fd      	b.n	800a4a0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00b      	beq.n	800a4c4 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a4ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b0:	f383 8811 	msr	BASEPRI, r3
 800a4b4:	f3bf 8f6f 	isb	sy
 800a4b8:	f3bf 8f4f 	dsb	sy
 800a4bc:	61fb      	str	r3, [r7, #28]
}
 800a4be:	bf00      	nop
 800a4c0:	bf00      	nop
 800a4c2:	e7fd      	b.n	800a4c0 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a4c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d103      	bne.n	800a4d4 <xQueueGiveFromISR+0x5c>
 800a4cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d101      	bne.n	800a4d8 <xQueueGiveFromISR+0x60>
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e000      	b.n	800a4da <xQueueGiveFromISR+0x62>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d10b      	bne.n	800a4f6 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a4de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e2:	f383 8811 	msr	BASEPRI, r3
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	f3bf 8f4f 	dsb	sy
 800a4ee:	61bb      	str	r3, [r7, #24]
}
 800a4f0:	bf00      	nop
 800a4f2:	bf00      	nop
 800a4f4:	e7fd      	b.n	800a4f2 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4f6:	f001 fe57 	bl	800c1a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a4fa:	f3ef 8211 	mrs	r2, BASEPRI
 800a4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a502:	f383 8811 	msr	BASEPRI, r3
 800a506:	f3bf 8f6f 	isb	sy
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	617a      	str	r2, [r7, #20]
 800a510:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a512:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a514:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a51a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a520:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a522:	429a      	cmp	r2, r3
 800a524:	d22b      	bcs.n	800a57e <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a528:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a52c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a532:	1c5a      	adds	r2, r3, #1
 800a534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a536:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a538:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a540:	d112      	bne.n	800a568 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a546:	2b00      	cmp	r3, #0
 800a548:	d016      	beq.n	800a578 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a54c:	3324      	adds	r3, #36	@ 0x24
 800a54e:	4618      	mov	r0, r3
 800a550:	f001 f834 	bl	800b5bc <xTaskRemoveFromEventList>
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d00e      	beq.n	800a578 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d00b      	beq.n	800a578 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	2201      	movs	r2, #1
 800a564:	601a      	str	r2, [r3, #0]
 800a566:	e007      	b.n	800a578 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a568:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a56c:	3301      	adds	r3, #1
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	b25a      	sxtb	r2, r3
 800a572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a578:	2301      	movs	r3, #1
 800a57a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a57c:	e001      	b.n	800a582 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a57e:	2300      	movs	r3, #0
 800a580:	637b      	str	r3, [r7, #52]	@ 0x34
 800a582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a584:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a58c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a58e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a590:	4618      	mov	r0, r3
 800a592:	3738      	adds	r7, #56	@ 0x38
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b08c      	sub	sp, #48	@ 0x30
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a5ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d10b      	bne.n	800a5ca <xQueueReceive+0x32>
	__asm volatile
 800a5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b6:	f383 8811 	msr	BASEPRI, r3
 800a5ba:	f3bf 8f6f 	isb	sy
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	623b      	str	r3, [r7, #32]
}
 800a5c4:	bf00      	nop
 800a5c6:	bf00      	nop
 800a5c8:	e7fd      	b.n	800a5c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d103      	bne.n	800a5d8 <xQueueReceive+0x40>
 800a5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d101      	bne.n	800a5dc <xQueueReceive+0x44>
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e000      	b.n	800a5de <xQueueReceive+0x46>
 800a5dc:	2300      	movs	r3, #0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d10b      	bne.n	800a5fa <xQueueReceive+0x62>
	__asm volatile
 800a5e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5e6:	f383 8811 	msr	BASEPRI, r3
 800a5ea:	f3bf 8f6f 	isb	sy
 800a5ee:	f3bf 8f4f 	dsb	sy
 800a5f2:	61fb      	str	r3, [r7, #28]
}
 800a5f4:	bf00      	nop
 800a5f6:	bf00      	nop
 800a5f8:	e7fd      	b.n	800a5f6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5fa:	f001 f99f 	bl	800b93c <xTaskGetSchedulerState>
 800a5fe:	4603      	mov	r3, r0
 800a600:	2b00      	cmp	r3, #0
 800a602:	d102      	bne.n	800a60a <xQueueReceive+0x72>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d101      	bne.n	800a60e <xQueueReceive+0x76>
 800a60a:	2301      	movs	r3, #1
 800a60c:	e000      	b.n	800a610 <xQueueReceive+0x78>
 800a60e:	2300      	movs	r3, #0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10b      	bne.n	800a62c <xQueueReceive+0x94>
	__asm volatile
 800a614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a618:	f383 8811 	msr	BASEPRI, r3
 800a61c:	f3bf 8f6f 	isb	sy
 800a620:	f3bf 8f4f 	dsb	sy
 800a624:	61bb      	str	r3, [r7, #24]
}
 800a626:	bf00      	nop
 800a628:	bf00      	nop
 800a62a:	e7fd      	b.n	800a628 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a62c:	f001 fcdc 	bl	800bfe8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a634:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d01f      	beq.n	800a67c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a63c:	68b9      	ldr	r1, [r7, #8]
 800a63e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a640:	f000 fac4 	bl	800abcc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a646:	1e5a      	subs	r2, r3, #1
 800a648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a64a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a64c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d00f      	beq.n	800a674 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a656:	3310      	adds	r3, #16
 800a658:	4618      	mov	r0, r3
 800a65a:	f000 ffaf 	bl	800b5bc <xTaskRemoveFromEventList>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d007      	beq.n	800a674 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a664:	4b3c      	ldr	r3, [pc, #240]	@ (800a758 <xQueueReceive+0x1c0>)
 800a666:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a66a:	601a      	str	r2, [r3, #0]
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a674:	f001 fcea 	bl	800c04c <vPortExitCritical>
				return pdPASS;
 800a678:	2301      	movs	r3, #1
 800a67a:	e069      	b.n	800a750 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d103      	bne.n	800a68a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a682:	f001 fce3 	bl	800c04c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a686:	2300      	movs	r3, #0
 800a688:	e062      	b.n	800a750 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a68a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d106      	bne.n	800a69e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a690:	f107 0310 	add.w	r3, r7, #16
 800a694:	4618      	mov	r0, r3
 800a696:	f000 fff5 	bl	800b684 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a69a:	2301      	movs	r3, #1
 800a69c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a69e:	f001 fcd5 	bl	800c04c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6a2:	f000 fd93 	bl	800b1cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6a6:	f001 fc9f 	bl	800bfe8 <vPortEnterCritical>
 800a6aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a6b0:	b25b      	sxtb	r3, r3
 800a6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6b6:	d103      	bne.n	800a6c0 <xQueueReceive+0x128>
 800a6b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a6c6:	b25b      	sxtb	r3, r3
 800a6c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6cc:	d103      	bne.n	800a6d6 <xQueueReceive+0x13e>
 800a6ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a6d6:	f001 fcb9 	bl	800c04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6da:	1d3a      	adds	r2, r7, #4
 800a6dc:	f107 0310 	add.w	r3, r7, #16
 800a6e0:	4611      	mov	r1, r2
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f000 ffe4 	bl	800b6b0 <xTaskCheckForTimeOut>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d123      	bne.n	800a736 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6f0:	f000 fae4 	bl	800acbc <prvIsQueueEmpty>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d017      	beq.n	800a72a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6fc:	3324      	adds	r3, #36	@ 0x24
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	4611      	mov	r1, r2
 800a702:	4618      	mov	r0, r3
 800a704:	f000 ff34 	bl	800b570 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a708:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a70a:	f000 fa85 	bl	800ac18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a70e:	f000 fd6b 	bl	800b1e8 <xTaskResumeAll>
 800a712:	4603      	mov	r3, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	d189      	bne.n	800a62c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a718:	4b0f      	ldr	r3, [pc, #60]	@ (800a758 <xQueueReceive+0x1c0>)
 800a71a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a71e:	601a      	str	r2, [r3, #0]
 800a720:	f3bf 8f4f 	dsb	sy
 800a724:	f3bf 8f6f 	isb	sy
 800a728:	e780      	b.n	800a62c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a72a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a72c:	f000 fa74 	bl	800ac18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a730:	f000 fd5a 	bl	800b1e8 <xTaskResumeAll>
 800a734:	e77a      	b.n	800a62c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a736:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a738:	f000 fa6e 	bl	800ac18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a73c:	f000 fd54 	bl	800b1e8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a740:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a742:	f000 fabb 	bl	800acbc <prvIsQueueEmpty>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f43f af6f 	beq.w	800a62c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a74e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a750:	4618      	mov	r0, r3
 800a752:	3730      	adds	r7, #48	@ 0x30
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	e000ed04 	.word	0xe000ed04

0800a75c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b08e      	sub	sp, #56	@ 0x38
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a766:	2300      	movs	r3, #0
 800a768:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a76e:	2300      	movs	r3, #0
 800a770:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a774:	2b00      	cmp	r3, #0
 800a776:	d10b      	bne.n	800a790 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a77c:	f383 8811 	msr	BASEPRI, r3
 800a780:	f3bf 8f6f 	isb	sy
 800a784:	f3bf 8f4f 	dsb	sy
 800a788:	623b      	str	r3, [r7, #32]
}
 800a78a:	bf00      	nop
 800a78c:	bf00      	nop
 800a78e:	e7fd      	b.n	800a78c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00b      	beq.n	800a7b0 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a79c:	f383 8811 	msr	BASEPRI, r3
 800a7a0:	f3bf 8f6f 	isb	sy
 800a7a4:	f3bf 8f4f 	dsb	sy
 800a7a8:	61fb      	str	r3, [r7, #28]
}
 800a7aa:	bf00      	nop
 800a7ac:	bf00      	nop
 800a7ae:	e7fd      	b.n	800a7ac <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7b0:	f001 f8c4 	bl	800b93c <xTaskGetSchedulerState>
 800a7b4:	4603      	mov	r3, r0
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d102      	bne.n	800a7c0 <xQueueSemaphoreTake+0x64>
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d101      	bne.n	800a7c4 <xQueueSemaphoreTake+0x68>
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e000      	b.n	800a7c6 <xQueueSemaphoreTake+0x6a>
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10b      	bne.n	800a7e2 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ce:	f383 8811 	msr	BASEPRI, r3
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	f3bf 8f4f 	dsb	sy
 800a7da:	61bb      	str	r3, [r7, #24]
}
 800a7dc:	bf00      	nop
 800a7de:	bf00      	nop
 800a7e0:	e7fd      	b.n	800a7de <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7e2:	f001 fc01 	bl	800bfe8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a7e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7ea:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d024      	beq.n	800a83c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f4:	1e5a      	subs	r2, r3, #1
 800a7f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7f8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d104      	bne.n	800a80c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a802:	f001 fa47 	bl	800bc94 <pvTaskIncrementMutexHeldCount>
 800a806:	4602      	mov	r2, r0
 800a808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a80a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a80c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a80e:	691b      	ldr	r3, [r3, #16]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00f      	beq.n	800a834 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a816:	3310      	adds	r3, #16
 800a818:	4618      	mov	r0, r3
 800a81a:	f000 fecf 	bl	800b5bc <xTaskRemoveFromEventList>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d007      	beq.n	800a834 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a824:	4b54      	ldr	r3, [pc, #336]	@ (800a978 <xQueueSemaphoreTake+0x21c>)
 800a826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a82a:	601a      	str	r2, [r3, #0]
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a834:	f001 fc0a 	bl	800c04c <vPortExitCritical>
				return pdPASS;
 800a838:	2301      	movs	r3, #1
 800a83a:	e098      	b.n	800a96e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d112      	bne.n	800a868 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a844:	2b00      	cmp	r3, #0
 800a846:	d00b      	beq.n	800a860 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a84c:	f383 8811 	msr	BASEPRI, r3
 800a850:	f3bf 8f6f 	isb	sy
 800a854:	f3bf 8f4f 	dsb	sy
 800a858:	617b      	str	r3, [r7, #20]
}
 800a85a:	bf00      	nop
 800a85c:	bf00      	nop
 800a85e:	e7fd      	b.n	800a85c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a860:	f001 fbf4 	bl	800c04c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a864:	2300      	movs	r3, #0
 800a866:	e082      	b.n	800a96e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d106      	bne.n	800a87c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a86e:	f107 030c 	add.w	r3, r7, #12
 800a872:	4618      	mov	r0, r3
 800a874:	f000 ff06 	bl	800b684 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a878:	2301      	movs	r3, #1
 800a87a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a87c:	f001 fbe6 	bl	800c04c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a880:	f000 fca4 	bl	800b1cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a884:	f001 fbb0 	bl	800bfe8 <vPortEnterCritical>
 800a888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a88a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a88e:	b25b      	sxtb	r3, r3
 800a890:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a894:	d103      	bne.n	800a89e <xQueueSemaphoreTake+0x142>
 800a896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a898:	2200      	movs	r2, #0
 800a89a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a89e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8a4:	b25b      	sxtb	r3, r3
 800a8a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8aa:	d103      	bne.n	800a8b4 <xQueueSemaphoreTake+0x158>
 800a8ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a8b4:	f001 fbca 	bl	800c04c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8b8:	463a      	mov	r2, r7
 800a8ba:	f107 030c 	add.w	r3, r7, #12
 800a8be:	4611      	mov	r1, r2
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f000 fef5 	bl	800b6b0 <xTaskCheckForTimeOut>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d132      	bne.n	800a932 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8cc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a8ce:	f000 f9f5 	bl	800acbc <prvIsQueueEmpty>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d026      	beq.n	800a926 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d109      	bne.n	800a8f4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a8e0:	f001 fb82 	bl	800bfe8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f001 f845 	bl	800b978 <xTaskPriorityInherit>
 800a8ee:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a8f0:	f001 fbac 	bl	800c04c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8f6:	3324      	adds	r3, #36	@ 0x24
 800a8f8:	683a      	ldr	r2, [r7, #0]
 800a8fa:	4611      	mov	r1, r2
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f000 fe37 	bl	800b570 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a902:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a904:	f000 f988 	bl	800ac18 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a908:	f000 fc6e 	bl	800b1e8 <xTaskResumeAll>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f47f af67 	bne.w	800a7e2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a914:	4b18      	ldr	r3, [pc, #96]	@ (800a978 <xQueueSemaphoreTake+0x21c>)
 800a916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a91a:	601a      	str	r2, [r3, #0]
 800a91c:	f3bf 8f4f 	dsb	sy
 800a920:	f3bf 8f6f 	isb	sy
 800a924:	e75d      	b.n	800a7e2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a926:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a928:	f000 f976 	bl	800ac18 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a92c:	f000 fc5c 	bl	800b1e8 <xTaskResumeAll>
 800a930:	e757      	b.n	800a7e2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a932:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a934:	f000 f970 	bl	800ac18 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a938:	f000 fc56 	bl	800b1e8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a93c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a93e:	f000 f9bd 	bl	800acbc <prvIsQueueEmpty>
 800a942:	4603      	mov	r3, r0
 800a944:	2b00      	cmp	r3, #0
 800a946:	f43f af4c 	beq.w	800a7e2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a94a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d00d      	beq.n	800a96c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a950:	f001 fb4a 	bl	800bfe8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a954:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a956:	f000 f8b7 	bl	800aac8 <prvGetDisinheritPriorityAfterTimeout>
 800a95a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a95c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a962:	4618      	mov	r0, r3
 800a964:	f001 f906 	bl	800bb74 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a968:	f001 fb70 	bl	800c04c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a96c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3738      	adds	r7, #56	@ 0x38
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	e000ed04 	.word	0xe000ed04

0800a97c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b08e      	sub	sp, #56	@ 0x38
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d10b      	bne.n	800a9aa <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a992:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a996:	f383 8811 	msr	BASEPRI, r3
 800a99a:	f3bf 8f6f 	isb	sy
 800a99e:	f3bf 8f4f 	dsb	sy
 800a9a2:	623b      	str	r3, [r7, #32]
}
 800a9a4:	bf00      	nop
 800a9a6:	bf00      	nop
 800a9a8:	e7fd      	b.n	800a9a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d103      	bne.n	800a9b8 <xQueueReceiveFromISR+0x3c>
 800a9b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d101      	bne.n	800a9bc <xQueueReceiveFromISR+0x40>
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e000      	b.n	800a9be <xQueueReceiveFromISR+0x42>
 800a9bc:	2300      	movs	r3, #0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d10b      	bne.n	800a9da <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c6:	f383 8811 	msr	BASEPRI, r3
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	f3bf 8f4f 	dsb	sy
 800a9d2:	61fb      	str	r3, [r7, #28]
}
 800a9d4:	bf00      	nop
 800a9d6:	bf00      	nop
 800a9d8:	e7fd      	b.n	800a9d6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9da:	f001 fbe5 	bl	800c1a8 <vPortValidateInterruptPriority>
	__asm volatile
 800a9de:	f3ef 8211 	mrs	r2, BASEPRI
 800a9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e6:	f383 8811 	msr	BASEPRI, r3
 800a9ea:	f3bf 8f6f 	isb	sy
 800a9ee:	f3bf 8f4f 	dsb	sy
 800a9f2:	61ba      	str	r2, [r7, #24]
 800a9f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a9f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9fe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d02f      	beq.n	800aa66 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aa06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa10:	68b9      	ldr	r1, [r7, #8]
 800aa12:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa14:	f000 f8da 	bl	800abcc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa1a:	1e5a      	subs	r2, r3, #1
 800aa1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa1e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aa20:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800aa24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa28:	d112      	bne.n	800aa50 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa2c:	691b      	ldr	r3, [r3, #16]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d016      	beq.n	800aa60 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa34:	3310      	adds	r3, #16
 800aa36:	4618      	mov	r0, r3
 800aa38:	f000 fdc0 	bl	800b5bc <xTaskRemoveFromEventList>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d00e      	beq.n	800aa60 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d00b      	beq.n	800aa60 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	601a      	str	r2, [r3, #0]
 800aa4e:	e007      	b.n	800aa60 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aa50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa54:	3301      	adds	r3, #1
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	b25a      	sxtb	r2, r3
 800aa5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800aa60:	2301      	movs	r3, #1
 800aa62:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa64:	e001      	b.n	800aa6a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800aa66:	2300      	movs	r3, #0
 800aa68:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	f383 8811 	msr	BASEPRI, r3
}
 800aa74:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3738      	adds	r7, #56	@ 0x38
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b084      	sub	sp, #16
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d10b      	bne.n	800aaaa <vQueueDelete+0x2a>
	__asm volatile
 800aa92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa96:	f383 8811 	msr	BASEPRI, r3
 800aa9a:	f3bf 8f6f 	isb	sy
 800aa9e:	f3bf 8f4f 	dsb	sy
 800aaa2:	60bb      	str	r3, [r7, #8]
}
 800aaa4:	bf00      	nop
 800aaa6:	bf00      	nop
 800aaa8:	e7fd      	b.n	800aaa6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800aaaa:	68f8      	ldr	r0, [r7, #12]
 800aaac:	f000 f934 	bl	800ad18 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d102      	bne.n	800aac0 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800aaba:	68f8      	ldr	r0, [r7, #12]
 800aabc:	f001 fc84 	bl	800c3c8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800aac0:	bf00      	nop
 800aac2:	3710      	adds	r7, #16
 800aac4:	46bd      	mov	sp, r7
 800aac6:	bd80      	pop	{r7, pc}

0800aac8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d006      	beq.n	800aae6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f1c3 0307 	rsb	r3, r3, #7
 800aae2:	60fb      	str	r3, [r7, #12]
 800aae4:	e001      	b.n	800aaea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aae6:	2300      	movs	r3, #0
 800aae8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aaea:	68fb      	ldr	r3, [r7, #12]
	}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3714      	adds	r7, #20
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b086      	sub	sp, #24
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab04:	2300      	movs	r3, #0
 800ab06:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab0c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d10d      	bne.n	800ab32 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d14d      	bne.n	800abba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	4618      	mov	r0, r3
 800ab24:	f000 ff9e 	bl	800ba64 <xTaskPriorityDisinherit>
 800ab28:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	609a      	str	r2, [r3, #8]
 800ab30:	e043      	b.n	800abba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d119      	bne.n	800ab6c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	6858      	ldr	r0, [r3, #4]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab40:	461a      	mov	r2, r3
 800ab42:	68b9      	ldr	r1, [r7, #8]
 800ab44:	f001 ffb9 	bl	800caba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	685a      	ldr	r2, [r3, #4]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab50:	441a      	add	r2, r3
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	685a      	ldr	r2, [r3, #4]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d32b      	bcc.n	800abba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	605a      	str	r2, [r3, #4]
 800ab6a:	e026      	b.n	800abba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	68d8      	ldr	r0, [r3, #12]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab74:	461a      	mov	r2, r3
 800ab76:	68b9      	ldr	r1, [r7, #8]
 800ab78:	f001 ff9f 	bl	800caba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	68da      	ldr	r2, [r3, #12]
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab84:	425b      	negs	r3, r3
 800ab86:	441a      	add	r2, r3
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	68da      	ldr	r2, [r3, #12]
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d207      	bcs.n	800aba8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	689a      	ldr	r2, [r3, #8]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aba0:	425b      	negs	r3, r3
 800aba2:	441a      	add	r2, r3
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2b02      	cmp	r3, #2
 800abac:	d105      	bne.n	800abba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	3b01      	subs	r3, #1
 800abb8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	1c5a      	adds	r2, r3, #1
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800abc2:	697b      	ldr	r3, [r7, #20]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3718      	adds	r7, #24
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b082      	sub	sp, #8
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d018      	beq.n	800ac10 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	68da      	ldr	r2, [r3, #12]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abe6:	441a      	add	r2, r3
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	68da      	ldr	r2, [r3, #12]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	689b      	ldr	r3, [r3, #8]
 800abf4:	429a      	cmp	r2, r3
 800abf6:	d303      	bcc.n	800ac00 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	68d9      	ldr	r1, [r3, #12]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac08:	461a      	mov	r2, r3
 800ac0a:	6838      	ldr	r0, [r7, #0]
 800ac0c:	f001 ff55 	bl	800caba <memcpy>
	}
}
 800ac10:	bf00      	nop
 800ac12:	3708      	adds	r7, #8
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac20:	f001 f9e2 	bl	800bfe8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac2a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac2c:	e011      	b.n	800ac52 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d012      	beq.n	800ac5c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	3324      	adds	r3, #36	@ 0x24
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f000 fcbe 	bl	800b5bc <xTaskRemoveFromEventList>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d001      	beq.n	800ac4a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac46:	f000 fd97 	bl	800b778 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac4a:	7bfb      	ldrb	r3, [r7, #15]
 800ac4c:	3b01      	subs	r3, #1
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	dce9      	bgt.n	800ac2e <prvUnlockQueue+0x16>
 800ac5a:	e000      	b.n	800ac5e <prvUnlockQueue+0x46>
					break;
 800ac5c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	22ff      	movs	r2, #255	@ 0xff
 800ac62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ac66:	f001 f9f1 	bl	800c04c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac6a:	f001 f9bd 	bl	800bfe8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac74:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac76:	e011      	b.n	800ac9c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	691b      	ldr	r3, [r3, #16]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d012      	beq.n	800aca6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	3310      	adds	r3, #16
 800ac84:	4618      	mov	r0, r3
 800ac86:	f000 fc99 	bl	800b5bc <xTaskRemoveFromEventList>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d001      	beq.n	800ac94 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac90:	f000 fd72 	bl	800b778 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac94:	7bbb      	ldrb	r3, [r7, #14]
 800ac96:	3b01      	subs	r3, #1
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	dce9      	bgt.n	800ac78 <prvUnlockQueue+0x60>
 800aca4:	e000      	b.n	800aca8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aca6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	22ff      	movs	r2, #255	@ 0xff
 800acac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800acb0:	f001 f9cc 	bl	800c04c <vPortExitCritical>
}
 800acb4:	bf00      	nop
 800acb6:	3710      	adds	r7, #16
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}

0800acbc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b084      	sub	sp, #16
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800acc4:	f001 f990 	bl	800bfe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800accc:	2b00      	cmp	r3, #0
 800acce:	d102      	bne.n	800acd6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800acd0:	2301      	movs	r3, #1
 800acd2:	60fb      	str	r3, [r7, #12]
 800acd4:	e001      	b.n	800acda <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800acd6:	2300      	movs	r3, #0
 800acd8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800acda:	f001 f9b7 	bl	800c04c <vPortExitCritical>

	return xReturn;
 800acde:	68fb      	ldr	r3, [r7, #12]
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	3710      	adds	r7, #16
 800ace4:	46bd      	mov	sp, r7
 800ace6:	bd80      	pop	{r7, pc}

0800ace8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800acf0:	f001 f97a 	bl	800bfe8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d102      	bne.n	800ad06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad00:	2301      	movs	r3, #1
 800ad02:	60fb      	str	r3, [r7, #12]
 800ad04:	e001      	b.n	800ad0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad06:	2300      	movs	r3, #0
 800ad08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad0a:	f001 f99f 	bl	800c04c <vPortExitCritical>

	return xReturn;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3710      	adds	r7, #16
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}

0800ad18 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800ad18:	b480      	push	{r7}
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad20:	2300      	movs	r3, #0
 800ad22:	60fb      	str	r3, [r7, #12]
 800ad24:	e016      	b.n	800ad54 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ad26:	4a10      	ldr	r2, [pc, #64]	@ (800ad68 <vQueueUnregisterQueue+0x50>)
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	00db      	lsls	r3, r3, #3
 800ad2c:	4413      	add	r3, r2
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d10b      	bne.n	800ad4e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ad36:	4a0c      	ldr	r2, [pc, #48]	@ (800ad68 <vQueueUnregisterQueue+0x50>)
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2100      	movs	r1, #0
 800ad3c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ad40:	4a09      	ldr	r2, [pc, #36]	@ (800ad68 <vQueueUnregisterQueue+0x50>)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	00db      	lsls	r3, r3, #3
 800ad46:	4413      	add	r3, r2
 800ad48:	2200      	movs	r2, #0
 800ad4a:	605a      	str	r2, [r3, #4]
				break;
 800ad4c:	e006      	b.n	800ad5c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	3301      	adds	r3, #1
 800ad52:	60fb      	str	r3, [r7, #12]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2b07      	cmp	r3, #7
 800ad58:	d9e5      	bls.n	800ad26 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ad5a:	bf00      	nop
 800ad5c:	bf00      	nop
 800ad5e:	3714      	adds	r7, #20
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr
 800ad68:	20002a48 	.word	0x20002a48

0800ad6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b08e      	sub	sp, #56	@ 0x38
 800ad70:	af04      	add	r7, sp, #16
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
 800ad78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ad7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d10b      	bne.n	800ad98 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ad80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad84:	f383 8811 	msr	BASEPRI, r3
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	f3bf 8f4f 	dsb	sy
 800ad90:	623b      	str	r3, [r7, #32]
}
 800ad92:	bf00      	nop
 800ad94:	bf00      	nop
 800ad96:	e7fd      	b.n	800ad94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ad98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d10b      	bne.n	800adb6 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	61fb      	str	r3, [r7, #28]
}
 800adb0:	bf00      	nop
 800adb2:	bf00      	nop
 800adb4:	e7fd      	b.n	800adb2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800adb6:	2354      	movs	r3, #84	@ 0x54
 800adb8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	2b54      	cmp	r3, #84	@ 0x54
 800adbe:	d00b      	beq.n	800add8 <xTaskCreateStatic+0x6c>
	__asm volatile
 800adc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc4:	f383 8811 	msr	BASEPRI, r3
 800adc8:	f3bf 8f6f 	isb	sy
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	61bb      	str	r3, [r7, #24]
}
 800add2:	bf00      	nop
 800add4:	bf00      	nop
 800add6:	e7fd      	b.n	800add4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800add8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800adda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800addc:	2b00      	cmp	r3, #0
 800adde:	d01e      	beq.n	800ae1e <xTaskCreateStatic+0xb2>
 800ade0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d01b      	beq.n	800ae1e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ade6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800adea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800adee:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800adf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf2:	2202      	movs	r2, #2
 800adf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800adf8:	2300      	movs	r3, #0
 800adfa:	9303      	str	r3, [sp, #12]
 800adfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adfe:	9302      	str	r3, [sp, #8]
 800ae00:	f107 0314 	add.w	r3, r7, #20
 800ae04:	9301      	str	r3, [sp, #4]
 800ae06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae08:	9300      	str	r3, [sp, #0]
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	687a      	ldr	r2, [r7, #4]
 800ae0e:	68b9      	ldr	r1, [r7, #8]
 800ae10:	68f8      	ldr	r0, [r7, #12]
 800ae12:	f000 f850 	bl	800aeb6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ae18:	f000 f8d6 	bl	800afc8 <prvAddNewTaskToReadyList>
 800ae1c:	e001      	b.n	800ae22 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae22:	697b      	ldr	r3, [r7, #20]
	}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3728      	adds	r7, #40	@ 0x28
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b08c      	sub	sp, #48	@ 0x30
 800ae30:	af04      	add	r7, sp, #16
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	603b      	str	r3, [r7, #0]
 800ae38:	4613      	mov	r3, r2
 800ae3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ae3c:	88fb      	ldrh	r3, [r7, #6]
 800ae3e:	009b      	lsls	r3, r3, #2
 800ae40:	4618      	mov	r0, r3
 800ae42:	f001 f9f3 	bl	800c22c <pvPortMalloc>
 800ae46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00e      	beq.n	800ae6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae4e:	2054      	movs	r0, #84	@ 0x54
 800ae50:	f001 f9ec 	bl	800c22c <pvPortMalloc>
 800ae54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae56:	69fb      	ldr	r3, [r7, #28]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d003      	beq.n	800ae64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ae5c:	69fb      	ldr	r3, [r7, #28]
 800ae5e:	697a      	ldr	r2, [r7, #20]
 800ae60:	631a      	str	r2, [r3, #48]	@ 0x30
 800ae62:	e005      	b.n	800ae70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ae64:	6978      	ldr	r0, [r7, #20]
 800ae66:	f001 faaf 	bl	800c3c8 <vPortFree>
 800ae6a:	e001      	b.n	800ae70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d017      	beq.n	800aea6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ae7e:	88fa      	ldrh	r2, [r7, #6]
 800ae80:	2300      	movs	r3, #0
 800ae82:	9303      	str	r3, [sp, #12]
 800ae84:	69fb      	ldr	r3, [r7, #28]
 800ae86:	9302      	str	r3, [sp, #8]
 800ae88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae8a:	9301      	str	r3, [sp, #4]
 800ae8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae8e:	9300      	str	r3, [sp, #0]
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	68b9      	ldr	r1, [r7, #8]
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f000 f80e 	bl	800aeb6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae9a:	69f8      	ldr	r0, [r7, #28]
 800ae9c:	f000 f894 	bl	800afc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aea0:	2301      	movs	r3, #1
 800aea2:	61bb      	str	r3, [r7, #24]
 800aea4:	e002      	b.n	800aeac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aea6:	f04f 33ff 	mov.w	r3, #4294967295
 800aeaa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aeac:	69bb      	ldr	r3, [r7, #24]
	}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3720      	adds	r7, #32
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b088      	sub	sp, #32
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	60f8      	str	r0, [r7, #12]
 800aebe:	60b9      	str	r1, [r7, #8]
 800aec0:	607a      	str	r2, [r7, #4]
 800aec2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aece:	3b01      	subs	r3, #1
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	4413      	add	r3, r2
 800aed4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aed6:	69bb      	ldr	r3, [r7, #24]
 800aed8:	f023 0307 	bic.w	r3, r3, #7
 800aedc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	f003 0307 	and.w	r3, r3, #7
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d00b      	beq.n	800af00 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800aee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeec:	f383 8811 	msr	BASEPRI, r3
 800aef0:	f3bf 8f6f 	isb	sy
 800aef4:	f3bf 8f4f 	dsb	sy
 800aef8:	617b      	str	r3, [r7, #20]
}
 800aefa:	bf00      	nop
 800aefc:	bf00      	nop
 800aefe:	e7fd      	b.n	800aefc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d01f      	beq.n	800af46 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af06:	2300      	movs	r3, #0
 800af08:	61fb      	str	r3, [r7, #28]
 800af0a:	e012      	b.n	800af32 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af0c:	68ba      	ldr	r2, [r7, #8]
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	4413      	add	r3, r2
 800af12:	7819      	ldrb	r1, [r3, #0]
 800af14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	4413      	add	r3, r2
 800af1a:	3334      	adds	r3, #52	@ 0x34
 800af1c:	460a      	mov	r2, r1
 800af1e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800af20:	68ba      	ldr	r2, [r7, #8]
 800af22:	69fb      	ldr	r3, [r7, #28]
 800af24:	4413      	add	r3, r2
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d006      	beq.n	800af3a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	3301      	adds	r3, #1
 800af30:	61fb      	str	r3, [r7, #28]
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	2b0f      	cmp	r3, #15
 800af36:	d9e9      	bls.n	800af0c <prvInitialiseNewTask+0x56>
 800af38:	e000      	b.n	800af3c <prvInitialiseNewTask+0x86>
			{
				break;
 800af3a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af3e:	2200      	movs	r2, #0
 800af40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800af44:	e003      	b.n	800af4e <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800af46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af48:	2200      	movs	r2, #0
 800af4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800af4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af50:	2b06      	cmp	r3, #6
 800af52:	d901      	bls.n	800af58 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800af54:	2306      	movs	r3, #6
 800af56:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800af58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af5c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800af5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af62:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800af64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af66:	2200      	movs	r2, #0
 800af68:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800af6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6c:	3304      	adds	r3, #4
 800af6e:	4618      	mov	r0, r3
 800af70:	f7fe ffa9 	bl	8009ec6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800af74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af76:	3318      	adds	r3, #24
 800af78:	4618      	mov	r0, r3
 800af7a:	f7fe ffa4 	bl	8009ec6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800af7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af86:	f1c3 0207 	rsb	r2, r3, #7
 800af8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800af8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af92:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800af94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af96:	2200      	movs	r2, #0
 800af98:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800af9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af9c:	2200      	movs	r2, #0
 800af9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800afa2:	683a      	ldr	r2, [r7, #0]
 800afa4:	68f9      	ldr	r1, [r7, #12]
 800afa6:	69b8      	ldr	r0, [r7, #24]
 800afa8:	f000 feee 	bl	800bd88 <pxPortInitialiseStack>
 800afac:	4602      	mov	r2, r0
 800afae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800afb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d002      	beq.n	800afbe <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800afb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afbc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afbe:	bf00      	nop
 800afc0:	3720      	adds	r7, #32
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
	...

0800afc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800afd0:	f001 f80a 	bl	800bfe8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800afd4:	4b2a      	ldr	r3, [pc, #168]	@ (800b080 <prvAddNewTaskToReadyList+0xb8>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	3301      	adds	r3, #1
 800afda:	4a29      	ldr	r2, [pc, #164]	@ (800b080 <prvAddNewTaskToReadyList+0xb8>)
 800afdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800afde:	4b29      	ldr	r3, [pc, #164]	@ (800b084 <prvAddNewTaskToReadyList+0xbc>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d109      	bne.n	800affa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800afe6:	4a27      	ldr	r2, [pc, #156]	@ (800b084 <prvAddNewTaskToReadyList+0xbc>)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800afec:	4b24      	ldr	r3, [pc, #144]	@ (800b080 <prvAddNewTaskToReadyList+0xb8>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	2b01      	cmp	r3, #1
 800aff2:	d110      	bne.n	800b016 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aff4:	f000 fbe4 	bl	800b7c0 <prvInitialiseTaskLists>
 800aff8:	e00d      	b.n	800b016 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800affa:	4b23      	ldr	r3, [pc, #140]	@ (800b088 <prvAddNewTaskToReadyList+0xc0>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d109      	bne.n	800b016 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b002:	4b20      	ldr	r3, [pc, #128]	@ (800b084 <prvAddNewTaskToReadyList+0xbc>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d802      	bhi.n	800b016 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b010:	4a1c      	ldr	r2, [pc, #112]	@ (800b084 <prvAddNewTaskToReadyList+0xbc>)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b016:	4b1d      	ldr	r3, [pc, #116]	@ (800b08c <prvAddNewTaskToReadyList+0xc4>)
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	3301      	adds	r3, #1
 800b01c:	4a1b      	ldr	r2, [pc, #108]	@ (800b08c <prvAddNewTaskToReadyList+0xc4>)
 800b01e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b024:	2201      	movs	r2, #1
 800b026:	409a      	lsls	r2, r3
 800b028:	4b19      	ldr	r3, [pc, #100]	@ (800b090 <prvAddNewTaskToReadyList+0xc8>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	4313      	orrs	r3, r2
 800b02e:	4a18      	ldr	r2, [pc, #96]	@ (800b090 <prvAddNewTaskToReadyList+0xc8>)
 800b030:	6013      	str	r3, [r2, #0]
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b036:	4613      	mov	r3, r2
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	4413      	add	r3, r2
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	4a15      	ldr	r2, [pc, #84]	@ (800b094 <prvAddNewTaskToReadyList+0xcc>)
 800b040:	441a      	add	r2, r3
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	3304      	adds	r3, #4
 800b046:	4619      	mov	r1, r3
 800b048:	4610      	mov	r0, r2
 800b04a:	f7fe ff49 	bl	8009ee0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b04e:	f000 fffd 	bl	800c04c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b052:	4b0d      	ldr	r3, [pc, #52]	@ (800b088 <prvAddNewTaskToReadyList+0xc0>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d00e      	beq.n	800b078 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b05a:	4b0a      	ldr	r3, [pc, #40]	@ (800b084 <prvAddNewTaskToReadyList+0xbc>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b064:	429a      	cmp	r2, r3
 800b066:	d207      	bcs.n	800b078 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b068:	4b0b      	ldr	r3, [pc, #44]	@ (800b098 <prvAddNewTaskToReadyList+0xd0>)
 800b06a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b06e:	601a      	str	r2, [r3, #0]
 800b070:	f3bf 8f4f 	dsb	sy
 800b074:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b078:	bf00      	nop
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	20002b88 	.word	0x20002b88
 800b084:	20002a88 	.word	0x20002a88
 800b088:	20002b94 	.word	0x20002b94
 800b08c:	20002ba4 	.word	0x20002ba4
 800b090:	20002b90 	.word	0x20002b90
 800b094:	20002a8c 	.word	0x20002a8c
 800b098:	e000ed04 	.word	0xe000ed04

0800b09c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d018      	beq.n	800b0e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b0ae:	4b14      	ldr	r3, [pc, #80]	@ (800b100 <vTaskDelay+0x64>)
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d00b      	beq.n	800b0ce <vTaskDelay+0x32>
	__asm volatile
 800b0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0ba:	f383 8811 	msr	BASEPRI, r3
 800b0be:	f3bf 8f6f 	isb	sy
 800b0c2:	f3bf 8f4f 	dsb	sy
 800b0c6:	60bb      	str	r3, [r7, #8]
}
 800b0c8:	bf00      	nop
 800b0ca:	bf00      	nop
 800b0cc:	e7fd      	b.n	800b0ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b0ce:	f000 f87d 	bl	800b1cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fdf1 	bl	800bcbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b0da:	f000 f885 	bl	800b1e8 <xTaskResumeAll>
 800b0de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d107      	bne.n	800b0f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b0e6:	4b07      	ldr	r3, [pc, #28]	@ (800b104 <vTaskDelay+0x68>)
 800b0e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0ec:	601a      	str	r2, [r3, #0]
 800b0ee:	f3bf 8f4f 	dsb	sy
 800b0f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b0f6:	bf00      	nop
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	20002bb0 	.word	0x20002bb0
 800b104:	e000ed04 	.word	0xe000ed04

0800b108 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b08a      	sub	sp, #40	@ 0x28
 800b10c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b10e:	2300      	movs	r3, #0
 800b110:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b112:	2300      	movs	r3, #0
 800b114:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b116:	463a      	mov	r2, r7
 800b118:	1d39      	adds	r1, r7, #4
 800b11a:	f107 0308 	add.w	r3, r7, #8
 800b11e:	4618      	mov	r0, r3
 800b120:	f7f6 feca 	bl	8001eb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b124:	6839      	ldr	r1, [r7, #0]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	9202      	str	r2, [sp, #8]
 800b12c:	9301      	str	r3, [sp, #4]
 800b12e:	2300      	movs	r3, #0
 800b130:	9300      	str	r3, [sp, #0]
 800b132:	2300      	movs	r3, #0
 800b134:	460a      	mov	r2, r1
 800b136:	491f      	ldr	r1, [pc, #124]	@ (800b1b4 <vTaskStartScheduler+0xac>)
 800b138:	481f      	ldr	r0, [pc, #124]	@ (800b1b8 <vTaskStartScheduler+0xb0>)
 800b13a:	f7ff fe17 	bl	800ad6c <xTaskCreateStatic>
 800b13e:	4603      	mov	r3, r0
 800b140:	4a1e      	ldr	r2, [pc, #120]	@ (800b1bc <vTaskStartScheduler+0xb4>)
 800b142:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b144:	4b1d      	ldr	r3, [pc, #116]	@ (800b1bc <vTaskStartScheduler+0xb4>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d002      	beq.n	800b152 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b14c:	2301      	movs	r3, #1
 800b14e:	617b      	str	r3, [r7, #20]
 800b150:	e001      	b.n	800b156 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b152:	2300      	movs	r3, #0
 800b154:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	2b01      	cmp	r3, #1
 800b15a:	d116      	bne.n	800b18a <vTaskStartScheduler+0x82>
	__asm volatile
 800b15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b160:	f383 8811 	msr	BASEPRI, r3
 800b164:	f3bf 8f6f 	isb	sy
 800b168:	f3bf 8f4f 	dsb	sy
 800b16c:	613b      	str	r3, [r7, #16]
}
 800b16e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b170:	4b13      	ldr	r3, [pc, #76]	@ (800b1c0 <vTaskStartScheduler+0xb8>)
 800b172:	f04f 32ff 	mov.w	r2, #4294967295
 800b176:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b178:	4b12      	ldr	r3, [pc, #72]	@ (800b1c4 <vTaskStartScheduler+0xbc>)
 800b17a:	2201      	movs	r2, #1
 800b17c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b17e:	4b12      	ldr	r3, [pc, #72]	@ (800b1c8 <vTaskStartScheduler+0xc0>)
 800b180:	2200      	movs	r2, #0
 800b182:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b184:	f000 fe8c 	bl	800bea0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b188:	e00f      	b.n	800b1aa <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b190:	d10b      	bne.n	800b1aa <vTaskStartScheduler+0xa2>
	__asm volatile
 800b192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b196:	f383 8811 	msr	BASEPRI, r3
 800b19a:	f3bf 8f6f 	isb	sy
 800b19e:	f3bf 8f4f 	dsb	sy
 800b1a2:	60fb      	str	r3, [r7, #12]
}
 800b1a4:	bf00      	nop
 800b1a6:	bf00      	nop
 800b1a8:	e7fd      	b.n	800b1a6 <vTaskStartScheduler+0x9e>
}
 800b1aa:	bf00      	nop
 800b1ac:	3718      	adds	r7, #24
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}
 800b1b2:	bf00      	nop
 800b1b4:	0800e0b0 	.word	0x0800e0b0
 800b1b8:	0800b791 	.word	0x0800b791
 800b1bc:	20002bac 	.word	0x20002bac
 800b1c0:	20002ba8 	.word	0x20002ba8
 800b1c4:	20002b94 	.word	0x20002b94
 800b1c8:	20002b8c 	.word	0x20002b8c

0800b1cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b1d0:	4b04      	ldr	r3, [pc, #16]	@ (800b1e4 <vTaskSuspendAll+0x18>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	4a03      	ldr	r2, [pc, #12]	@ (800b1e4 <vTaskSuspendAll+0x18>)
 800b1d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b1da:	bf00      	nop
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr
 800b1e4:	20002bb0 	.word	0x20002bb0

0800b1e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b1f6:	4b42      	ldr	r3, [pc, #264]	@ (800b300 <xTaskResumeAll+0x118>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d10b      	bne.n	800b216 <xTaskResumeAll+0x2e>
	__asm volatile
 800b1fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b202:	f383 8811 	msr	BASEPRI, r3
 800b206:	f3bf 8f6f 	isb	sy
 800b20a:	f3bf 8f4f 	dsb	sy
 800b20e:	603b      	str	r3, [r7, #0]
}
 800b210:	bf00      	nop
 800b212:	bf00      	nop
 800b214:	e7fd      	b.n	800b212 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b216:	f000 fee7 	bl	800bfe8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b21a:	4b39      	ldr	r3, [pc, #228]	@ (800b300 <xTaskResumeAll+0x118>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	3b01      	subs	r3, #1
 800b220:	4a37      	ldr	r2, [pc, #220]	@ (800b300 <xTaskResumeAll+0x118>)
 800b222:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b224:	4b36      	ldr	r3, [pc, #216]	@ (800b300 <xTaskResumeAll+0x118>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d161      	bne.n	800b2f0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b22c:	4b35      	ldr	r3, [pc, #212]	@ (800b304 <xTaskResumeAll+0x11c>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d05d      	beq.n	800b2f0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b234:	e02e      	b.n	800b294 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b236:	4b34      	ldr	r3, [pc, #208]	@ (800b308 <xTaskResumeAll+0x120>)
 800b238:	68db      	ldr	r3, [r3, #12]
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	3318      	adds	r3, #24
 800b242:	4618      	mov	r0, r3
 800b244:	f7fe fea9 	bl	8009f9a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	3304      	adds	r3, #4
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7fe fea4 	bl	8009f9a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b256:	2201      	movs	r2, #1
 800b258:	409a      	lsls	r2, r3
 800b25a:	4b2c      	ldr	r3, [pc, #176]	@ (800b30c <xTaskResumeAll+0x124>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4313      	orrs	r3, r2
 800b260:	4a2a      	ldr	r2, [pc, #168]	@ (800b30c <xTaskResumeAll+0x124>)
 800b262:	6013      	str	r3, [r2, #0]
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b268:	4613      	mov	r3, r2
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	4413      	add	r3, r2
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	4a27      	ldr	r2, [pc, #156]	@ (800b310 <xTaskResumeAll+0x128>)
 800b272:	441a      	add	r2, r3
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	3304      	adds	r3, #4
 800b278:	4619      	mov	r1, r3
 800b27a:	4610      	mov	r0, r2
 800b27c:	f7fe fe30 	bl	8009ee0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b284:	4b23      	ldr	r3, [pc, #140]	@ (800b314 <xTaskResumeAll+0x12c>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d302      	bcc.n	800b294 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b28e:	4b22      	ldr	r3, [pc, #136]	@ (800b318 <xTaskResumeAll+0x130>)
 800b290:	2201      	movs	r2, #1
 800b292:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b294:	4b1c      	ldr	r3, [pc, #112]	@ (800b308 <xTaskResumeAll+0x120>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d1cc      	bne.n	800b236 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d001      	beq.n	800b2a6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b2a2:	f000 fb2b 	bl	800b8fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b2a6:	4b1d      	ldr	r3, [pc, #116]	@ (800b31c <xTaskResumeAll+0x134>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d010      	beq.n	800b2d4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b2b2:	f000 f847 	bl	800b344 <xTaskIncrementTick>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d002      	beq.n	800b2c2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b2bc:	4b16      	ldr	r3, [pc, #88]	@ (800b318 <xTaskResumeAll+0x130>)
 800b2be:	2201      	movs	r2, #1
 800b2c0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d1f1      	bne.n	800b2b2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b2ce:	4b13      	ldr	r3, [pc, #76]	@ (800b31c <xTaskResumeAll+0x134>)
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b2d4:	4b10      	ldr	r3, [pc, #64]	@ (800b318 <xTaskResumeAll+0x130>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d009      	beq.n	800b2f0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b2e0:	4b0f      	ldr	r3, [pc, #60]	@ (800b320 <xTaskResumeAll+0x138>)
 800b2e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2e6:	601a      	str	r2, [r3, #0]
 800b2e8:	f3bf 8f4f 	dsb	sy
 800b2ec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b2f0:	f000 feac 	bl	800c04c <vPortExitCritical>

	return xAlreadyYielded;
 800b2f4:	68bb      	ldr	r3, [r7, #8]
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3710      	adds	r7, #16
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	20002bb0 	.word	0x20002bb0
 800b304:	20002b88 	.word	0x20002b88
 800b308:	20002b48 	.word	0x20002b48
 800b30c:	20002b90 	.word	0x20002b90
 800b310:	20002a8c 	.word	0x20002a8c
 800b314:	20002a88 	.word	0x20002a88
 800b318:	20002b9c 	.word	0x20002b9c
 800b31c:	20002b98 	.word	0x20002b98
 800b320:	e000ed04 	.word	0xe000ed04

0800b324 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b324:	b480      	push	{r7}
 800b326:	b083      	sub	sp, #12
 800b328:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b32a:	4b05      	ldr	r3, [pc, #20]	@ (800b340 <xTaskGetTickCount+0x1c>)
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b330:	687b      	ldr	r3, [r7, #4]
}
 800b332:	4618      	mov	r0, r3
 800b334:	370c      	adds	r7, #12
 800b336:	46bd      	mov	sp, r7
 800b338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	20002b8c 	.word	0x20002b8c

0800b344 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b086      	sub	sp, #24
 800b348:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b34a:	2300      	movs	r3, #0
 800b34c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b34e:	4b4f      	ldr	r3, [pc, #316]	@ (800b48c <xTaskIncrementTick+0x148>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	f040 808f 	bne.w	800b476 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b358:	4b4d      	ldr	r3, [pc, #308]	@ (800b490 <xTaskIncrementTick+0x14c>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	3301      	adds	r3, #1
 800b35e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b360:	4a4b      	ldr	r2, [pc, #300]	@ (800b490 <xTaskIncrementTick+0x14c>)
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d121      	bne.n	800b3b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b36c:	4b49      	ldr	r3, [pc, #292]	@ (800b494 <xTaskIncrementTick+0x150>)
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d00b      	beq.n	800b38e <xTaskIncrementTick+0x4a>
	__asm volatile
 800b376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b37a:	f383 8811 	msr	BASEPRI, r3
 800b37e:	f3bf 8f6f 	isb	sy
 800b382:	f3bf 8f4f 	dsb	sy
 800b386:	603b      	str	r3, [r7, #0]
}
 800b388:	bf00      	nop
 800b38a:	bf00      	nop
 800b38c:	e7fd      	b.n	800b38a <xTaskIncrementTick+0x46>
 800b38e:	4b41      	ldr	r3, [pc, #260]	@ (800b494 <xTaskIncrementTick+0x150>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	60fb      	str	r3, [r7, #12]
 800b394:	4b40      	ldr	r3, [pc, #256]	@ (800b498 <xTaskIncrementTick+0x154>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4a3e      	ldr	r2, [pc, #248]	@ (800b494 <xTaskIncrementTick+0x150>)
 800b39a:	6013      	str	r3, [r2, #0]
 800b39c:	4a3e      	ldr	r2, [pc, #248]	@ (800b498 <xTaskIncrementTick+0x154>)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	6013      	str	r3, [r2, #0]
 800b3a2:	4b3e      	ldr	r3, [pc, #248]	@ (800b49c <xTaskIncrementTick+0x158>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	4a3c      	ldr	r2, [pc, #240]	@ (800b49c <xTaskIncrementTick+0x158>)
 800b3aa:	6013      	str	r3, [r2, #0]
 800b3ac:	f000 faa6 	bl	800b8fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b3b0:	4b3b      	ldr	r3, [pc, #236]	@ (800b4a0 <xTaskIncrementTick+0x15c>)
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	693a      	ldr	r2, [r7, #16]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d348      	bcc.n	800b44c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3ba:	4b36      	ldr	r3, [pc, #216]	@ (800b494 <xTaskIncrementTick+0x150>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d104      	bne.n	800b3ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3c4:	4b36      	ldr	r3, [pc, #216]	@ (800b4a0 <xTaskIncrementTick+0x15c>)
 800b3c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ca:	601a      	str	r2, [r3, #0]
					break;
 800b3cc:	e03e      	b.n	800b44c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3ce:	4b31      	ldr	r3, [pc, #196]	@ (800b494 <xTaskIncrementTick+0x150>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	68db      	ldr	r3, [r3, #12]
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	685b      	ldr	r3, [r3, #4]
 800b3dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b3de:	693a      	ldr	r2, [r7, #16]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d203      	bcs.n	800b3ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b3e6:	4a2e      	ldr	r2, [pc, #184]	@ (800b4a0 <xTaskIncrementTick+0x15c>)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b3ec:	e02e      	b.n	800b44c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	3304      	adds	r3, #4
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f7fe fdd1 	bl	8009f9a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d004      	beq.n	800b40a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	3318      	adds	r3, #24
 800b404:	4618      	mov	r0, r3
 800b406:	f7fe fdc8 	bl	8009f9a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b40a:	68bb      	ldr	r3, [r7, #8]
 800b40c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b40e:	2201      	movs	r2, #1
 800b410:	409a      	lsls	r2, r3
 800b412:	4b24      	ldr	r3, [pc, #144]	@ (800b4a4 <xTaskIncrementTick+0x160>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4313      	orrs	r3, r2
 800b418:	4a22      	ldr	r2, [pc, #136]	@ (800b4a4 <xTaskIncrementTick+0x160>)
 800b41a:	6013      	str	r3, [r2, #0]
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b420:	4613      	mov	r3, r2
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	4413      	add	r3, r2
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	4a1f      	ldr	r2, [pc, #124]	@ (800b4a8 <xTaskIncrementTick+0x164>)
 800b42a:	441a      	add	r2, r3
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	3304      	adds	r3, #4
 800b430:	4619      	mov	r1, r3
 800b432:	4610      	mov	r0, r2
 800b434:	f7fe fd54 	bl	8009ee0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b43c:	4b1b      	ldr	r3, [pc, #108]	@ (800b4ac <xTaskIncrementTick+0x168>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b442:	429a      	cmp	r2, r3
 800b444:	d3b9      	bcc.n	800b3ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b446:	2301      	movs	r3, #1
 800b448:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b44a:	e7b6      	b.n	800b3ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b44c:	4b17      	ldr	r3, [pc, #92]	@ (800b4ac <xTaskIncrementTick+0x168>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b452:	4915      	ldr	r1, [pc, #84]	@ (800b4a8 <xTaskIncrementTick+0x164>)
 800b454:	4613      	mov	r3, r2
 800b456:	009b      	lsls	r3, r3, #2
 800b458:	4413      	add	r3, r2
 800b45a:	009b      	lsls	r3, r3, #2
 800b45c:	440b      	add	r3, r1
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2b01      	cmp	r3, #1
 800b462:	d901      	bls.n	800b468 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b464:	2301      	movs	r3, #1
 800b466:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b468:	4b11      	ldr	r3, [pc, #68]	@ (800b4b0 <xTaskIncrementTick+0x16c>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d007      	beq.n	800b480 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b470:	2301      	movs	r3, #1
 800b472:	617b      	str	r3, [r7, #20]
 800b474:	e004      	b.n	800b480 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b476:	4b0f      	ldr	r3, [pc, #60]	@ (800b4b4 <xTaskIncrementTick+0x170>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	3301      	adds	r3, #1
 800b47c:	4a0d      	ldr	r2, [pc, #52]	@ (800b4b4 <xTaskIncrementTick+0x170>)
 800b47e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b480:	697b      	ldr	r3, [r7, #20]
}
 800b482:	4618      	mov	r0, r3
 800b484:	3718      	adds	r7, #24
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	20002bb0 	.word	0x20002bb0
 800b490:	20002b8c 	.word	0x20002b8c
 800b494:	20002b40 	.word	0x20002b40
 800b498:	20002b44 	.word	0x20002b44
 800b49c:	20002ba0 	.word	0x20002ba0
 800b4a0:	20002ba8 	.word	0x20002ba8
 800b4a4:	20002b90 	.word	0x20002b90
 800b4a8:	20002a8c 	.word	0x20002a8c
 800b4ac:	20002a88 	.word	0x20002a88
 800b4b0:	20002b9c 	.word	0x20002b9c
 800b4b4:	20002b98 	.word	0x20002b98

0800b4b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b087      	sub	sp, #28
 800b4bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b4be:	4b27      	ldr	r3, [pc, #156]	@ (800b55c <vTaskSwitchContext+0xa4>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d003      	beq.n	800b4ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b4c6:	4b26      	ldr	r3, [pc, #152]	@ (800b560 <vTaskSwitchContext+0xa8>)
 800b4c8:	2201      	movs	r2, #1
 800b4ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b4cc:	e040      	b.n	800b550 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b4ce:	4b24      	ldr	r3, [pc, #144]	@ (800b560 <vTaskSwitchContext+0xa8>)
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4d4:	4b23      	ldr	r3, [pc, #140]	@ (800b564 <vTaskSwitchContext+0xac>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	fab3 f383 	clz	r3, r3
 800b4e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b4e2:	7afb      	ldrb	r3, [r7, #11]
 800b4e4:	f1c3 031f 	rsb	r3, r3, #31
 800b4e8:	617b      	str	r3, [r7, #20]
 800b4ea:	491f      	ldr	r1, [pc, #124]	@ (800b568 <vTaskSwitchContext+0xb0>)
 800b4ec:	697a      	ldr	r2, [r7, #20]
 800b4ee:	4613      	mov	r3, r2
 800b4f0:	009b      	lsls	r3, r3, #2
 800b4f2:	4413      	add	r3, r2
 800b4f4:	009b      	lsls	r3, r3, #2
 800b4f6:	440b      	add	r3, r1
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d10b      	bne.n	800b516 <vTaskSwitchContext+0x5e>
	__asm volatile
 800b4fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b502:	f383 8811 	msr	BASEPRI, r3
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	f3bf 8f4f 	dsb	sy
 800b50e:	607b      	str	r3, [r7, #4]
}
 800b510:	bf00      	nop
 800b512:	bf00      	nop
 800b514:	e7fd      	b.n	800b512 <vTaskSwitchContext+0x5a>
 800b516:	697a      	ldr	r2, [r7, #20]
 800b518:	4613      	mov	r3, r2
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	4413      	add	r3, r2
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	4a11      	ldr	r2, [pc, #68]	@ (800b568 <vTaskSwitchContext+0xb0>)
 800b522:	4413      	add	r3, r2
 800b524:	613b      	str	r3, [r7, #16]
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	685a      	ldr	r2, [r3, #4]
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	605a      	str	r2, [r3, #4]
 800b530:	693b      	ldr	r3, [r7, #16]
 800b532:	685a      	ldr	r2, [r3, #4]
 800b534:	693b      	ldr	r3, [r7, #16]
 800b536:	3308      	adds	r3, #8
 800b538:	429a      	cmp	r2, r3
 800b53a:	d104      	bne.n	800b546 <vTaskSwitchContext+0x8e>
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	685a      	ldr	r2, [r3, #4]
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	605a      	str	r2, [r3, #4]
 800b546:	693b      	ldr	r3, [r7, #16]
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	68db      	ldr	r3, [r3, #12]
 800b54c:	4a07      	ldr	r2, [pc, #28]	@ (800b56c <vTaskSwitchContext+0xb4>)
 800b54e:	6013      	str	r3, [r2, #0]
}
 800b550:	bf00      	nop
 800b552:	371c      	adds	r7, #28
 800b554:	46bd      	mov	sp, r7
 800b556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55a:	4770      	bx	lr
 800b55c:	20002bb0 	.word	0x20002bb0
 800b560:	20002b9c 	.word	0x20002b9c
 800b564:	20002b90 	.word	0x20002b90
 800b568:	20002a8c 	.word	0x20002a8c
 800b56c:	20002a88 	.word	0x20002a88

0800b570 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d10b      	bne.n	800b598 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b584:	f383 8811 	msr	BASEPRI, r3
 800b588:	f3bf 8f6f 	isb	sy
 800b58c:	f3bf 8f4f 	dsb	sy
 800b590:	60fb      	str	r3, [r7, #12]
}
 800b592:	bf00      	nop
 800b594:	bf00      	nop
 800b596:	e7fd      	b.n	800b594 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b598:	4b07      	ldr	r3, [pc, #28]	@ (800b5b8 <vTaskPlaceOnEventList+0x48>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	3318      	adds	r3, #24
 800b59e:	4619      	mov	r1, r3
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f7fe fcc1 	bl	8009f28 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b5a6:	2101      	movs	r1, #1
 800b5a8:	6838      	ldr	r0, [r7, #0]
 800b5aa:	f000 fb87 	bl	800bcbc <prvAddCurrentTaskToDelayedList>
}
 800b5ae:	bf00      	nop
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	20002a88 	.word	0x20002a88

0800b5bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b086      	sub	sp, #24
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	68db      	ldr	r3, [r3, #12]
 800b5c8:	68db      	ldr	r3, [r3, #12]
 800b5ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d10b      	bne.n	800b5ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d6:	f383 8811 	msr	BASEPRI, r3
 800b5da:	f3bf 8f6f 	isb	sy
 800b5de:	f3bf 8f4f 	dsb	sy
 800b5e2:	60fb      	str	r3, [r7, #12]
}
 800b5e4:	bf00      	nop
 800b5e6:	bf00      	nop
 800b5e8:	e7fd      	b.n	800b5e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	3318      	adds	r3, #24
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f7fe fcd3 	bl	8009f9a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5f4:	4b1d      	ldr	r3, [pc, #116]	@ (800b66c <xTaskRemoveFromEventList+0xb0>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d11c      	bne.n	800b636 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b5fc:	693b      	ldr	r3, [r7, #16]
 800b5fe:	3304      	adds	r3, #4
 800b600:	4618      	mov	r0, r3
 800b602:	f7fe fcca 	bl	8009f9a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b60a:	2201      	movs	r2, #1
 800b60c:	409a      	lsls	r2, r3
 800b60e:	4b18      	ldr	r3, [pc, #96]	@ (800b670 <xTaskRemoveFromEventList+0xb4>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	4313      	orrs	r3, r2
 800b614:	4a16      	ldr	r2, [pc, #88]	@ (800b670 <xTaskRemoveFromEventList+0xb4>)
 800b616:	6013      	str	r3, [r2, #0]
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b61c:	4613      	mov	r3, r2
 800b61e:	009b      	lsls	r3, r3, #2
 800b620:	4413      	add	r3, r2
 800b622:	009b      	lsls	r3, r3, #2
 800b624:	4a13      	ldr	r2, [pc, #76]	@ (800b674 <xTaskRemoveFromEventList+0xb8>)
 800b626:	441a      	add	r2, r3
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	3304      	adds	r3, #4
 800b62c:	4619      	mov	r1, r3
 800b62e:	4610      	mov	r0, r2
 800b630:	f7fe fc56 	bl	8009ee0 <vListInsertEnd>
 800b634:	e005      	b.n	800b642 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	3318      	adds	r3, #24
 800b63a:	4619      	mov	r1, r3
 800b63c:	480e      	ldr	r0, [pc, #56]	@ (800b678 <xTaskRemoveFromEventList+0xbc>)
 800b63e:	f7fe fc4f 	bl	8009ee0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b646:	4b0d      	ldr	r3, [pc, #52]	@ (800b67c <xTaskRemoveFromEventList+0xc0>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d905      	bls.n	800b65c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b650:	2301      	movs	r3, #1
 800b652:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b654:	4b0a      	ldr	r3, [pc, #40]	@ (800b680 <xTaskRemoveFromEventList+0xc4>)
 800b656:	2201      	movs	r2, #1
 800b658:	601a      	str	r2, [r3, #0]
 800b65a:	e001      	b.n	800b660 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b65c:	2300      	movs	r3, #0
 800b65e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b660:	697b      	ldr	r3, [r7, #20]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3718      	adds	r7, #24
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	20002bb0 	.word	0x20002bb0
 800b670:	20002b90 	.word	0x20002b90
 800b674:	20002a8c 	.word	0x20002a8c
 800b678:	20002b48 	.word	0x20002b48
 800b67c:	20002a88 	.word	0x20002a88
 800b680:	20002b9c 	.word	0x20002b9c

0800b684 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b684:	b480      	push	{r7}
 800b686:	b083      	sub	sp, #12
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b68c:	4b06      	ldr	r3, [pc, #24]	@ (800b6a8 <vTaskInternalSetTimeOutState+0x24>)
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b694:	4b05      	ldr	r3, [pc, #20]	@ (800b6ac <vTaskInternalSetTimeOutState+0x28>)
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	605a      	str	r2, [r3, #4]
}
 800b69c:	bf00      	nop
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr
 800b6a8:	20002ba0 	.word	0x20002ba0
 800b6ac:	20002b8c 	.word	0x20002b8c

0800b6b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b088      	sub	sp, #32
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d10b      	bne.n	800b6d8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b6c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c4:	f383 8811 	msr	BASEPRI, r3
 800b6c8:	f3bf 8f6f 	isb	sy
 800b6cc:	f3bf 8f4f 	dsb	sy
 800b6d0:	613b      	str	r3, [r7, #16]
}
 800b6d2:	bf00      	nop
 800b6d4:	bf00      	nop
 800b6d6:	e7fd      	b.n	800b6d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d10b      	bne.n	800b6f6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	60fb      	str	r3, [r7, #12]
}
 800b6f0:	bf00      	nop
 800b6f2:	bf00      	nop
 800b6f4:	e7fd      	b.n	800b6f2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b6f6:	f000 fc77 	bl	800bfe8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b6fa:	4b1d      	ldr	r3, [pc, #116]	@ (800b770 <xTaskCheckForTimeOut+0xc0>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	69ba      	ldr	r2, [r7, #24]
 800b706:	1ad3      	subs	r3, r2, r3
 800b708:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b712:	d102      	bne.n	800b71a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b714:	2300      	movs	r3, #0
 800b716:	61fb      	str	r3, [r7, #28]
 800b718:	e023      	b.n	800b762 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	4b15      	ldr	r3, [pc, #84]	@ (800b774 <xTaskCheckForTimeOut+0xc4>)
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	429a      	cmp	r2, r3
 800b724:	d007      	beq.n	800b736 <xTaskCheckForTimeOut+0x86>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	69ba      	ldr	r2, [r7, #24]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d302      	bcc.n	800b736 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b730:	2301      	movs	r3, #1
 800b732:	61fb      	str	r3, [r7, #28]
 800b734:	e015      	b.n	800b762 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	697a      	ldr	r2, [r7, #20]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d20b      	bcs.n	800b758 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	1ad2      	subs	r2, r2, r3
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f7ff ff99 	bl	800b684 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b752:	2300      	movs	r3, #0
 800b754:	61fb      	str	r3, [r7, #28]
 800b756:	e004      	b.n	800b762 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	2200      	movs	r2, #0
 800b75c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b75e:	2301      	movs	r3, #1
 800b760:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b762:	f000 fc73 	bl	800c04c <vPortExitCritical>

	return xReturn;
 800b766:	69fb      	ldr	r3, [r7, #28]
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3720      	adds	r7, #32
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	20002b8c 	.word	0x20002b8c
 800b774:	20002ba0 	.word	0x20002ba0

0800b778 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b778:	b480      	push	{r7}
 800b77a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b77c:	4b03      	ldr	r3, [pc, #12]	@ (800b78c <vTaskMissedYield+0x14>)
 800b77e:	2201      	movs	r2, #1
 800b780:	601a      	str	r2, [r3, #0]
}
 800b782:	bf00      	nop
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr
 800b78c:	20002b9c 	.word	0x20002b9c

0800b790 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b798:	f000 f852 	bl	800b840 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b79c:	4b06      	ldr	r3, [pc, #24]	@ (800b7b8 <prvIdleTask+0x28>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d9f9      	bls.n	800b798 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b7a4:	4b05      	ldr	r3, [pc, #20]	@ (800b7bc <prvIdleTask+0x2c>)
 800b7a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7aa:	601a      	str	r2, [r3, #0]
 800b7ac:	f3bf 8f4f 	dsb	sy
 800b7b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b7b4:	e7f0      	b.n	800b798 <prvIdleTask+0x8>
 800b7b6:	bf00      	nop
 800b7b8:	20002a8c 	.word	0x20002a8c
 800b7bc:	e000ed04 	.word	0xe000ed04

0800b7c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	607b      	str	r3, [r7, #4]
 800b7ca:	e00c      	b.n	800b7e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b7cc:	687a      	ldr	r2, [r7, #4]
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	4413      	add	r3, r2
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	4a12      	ldr	r2, [pc, #72]	@ (800b820 <prvInitialiseTaskLists+0x60>)
 800b7d8:	4413      	add	r3, r2
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7fe fb53 	bl	8009e86 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	607b      	str	r3, [r7, #4]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2b06      	cmp	r3, #6
 800b7ea:	d9ef      	bls.n	800b7cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b7ec:	480d      	ldr	r0, [pc, #52]	@ (800b824 <prvInitialiseTaskLists+0x64>)
 800b7ee:	f7fe fb4a 	bl	8009e86 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b7f2:	480d      	ldr	r0, [pc, #52]	@ (800b828 <prvInitialiseTaskLists+0x68>)
 800b7f4:	f7fe fb47 	bl	8009e86 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b7f8:	480c      	ldr	r0, [pc, #48]	@ (800b82c <prvInitialiseTaskLists+0x6c>)
 800b7fa:	f7fe fb44 	bl	8009e86 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b7fe:	480c      	ldr	r0, [pc, #48]	@ (800b830 <prvInitialiseTaskLists+0x70>)
 800b800:	f7fe fb41 	bl	8009e86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b804:	480b      	ldr	r0, [pc, #44]	@ (800b834 <prvInitialiseTaskLists+0x74>)
 800b806:	f7fe fb3e 	bl	8009e86 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b80a:	4b0b      	ldr	r3, [pc, #44]	@ (800b838 <prvInitialiseTaskLists+0x78>)
 800b80c:	4a05      	ldr	r2, [pc, #20]	@ (800b824 <prvInitialiseTaskLists+0x64>)
 800b80e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b810:	4b0a      	ldr	r3, [pc, #40]	@ (800b83c <prvInitialiseTaskLists+0x7c>)
 800b812:	4a05      	ldr	r2, [pc, #20]	@ (800b828 <prvInitialiseTaskLists+0x68>)
 800b814:	601a      	str	r2, [r3, #0]
}
 800b816:	bf00      	nop
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	20002a8c 	.word	0x20002a8c
 800b824:	20002b18 	.word	0x20002b18
 800b828:	20002b2c 	.word	0x20002b2c
 800b82c:	20002b48 	.word	0x20002b48
 800b830:	20002b5c 	.word	0x20002b5c
 800b834:	20002b74 	.word	0x20002b74
 800b838:	20002b40 	.word	0x20002b40
 800b83c:	20002b44 	.word	0x20002b44

0800b840 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b846:	e019      	b.n	800b87c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b848:	f000 fbce 	bl	800bfe8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b84c:	4b10      	ldr	r3, [pc, #64]	@ (800b890 <prvCheckTasksWaitingTermination+0x50>)
 800b84e:	68db      	ldr	r3, [r3, #12]
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	3304      	adds	r3, #4
 800b858:	4618      	mov	r0, r3
 800b85a:	f7fe fb9e 	bl	8009f9a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b85e:	4b0d      	ldr	r3, [pc, #52]	@ (800b894 <prvCheckTasksWaitingTermination+0x54>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	3b01      	subs	r3, #1
 800b864:	4a0b      	ldr	r2, [pc, #44]	@ (800b894 <prvCheckTasksWaitingTermination+0x54>)
 800b866:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b868:	4b0b      	ldr	r3, [pc, #44]	@ (800b898 <prvCheckTasksWaitingTermination+0x58>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	3b01      	subs	r3, #1
 800b86e:	4a0a      	ldr	r2, [pc, #40]	@ (800b898 <prvCheckTasksWaitingTermination+0x58>)
 800b870:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b872:	f000 fbeb 	bl	800c04c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 f810 	bl	800b89c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b87c:	4b06      	ldr	r3, [pc, #24]	@ (800b898 <prvCheckTasksWaitingTermination+0x58>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d1e1      	bne.n	800b848 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b884:	bf00      	nop
 800b886:	bf00      	nop
 800b888:	3708      	adds	r7, #8
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}
 800b88e:	bf00      	nop
 800b890:	20002b5c 	.word	0x20002b5c
 800b894:	20002b88 	.word	0x20002b88
 800b898:	20002b70 	.word	0x20002b70

0800b89c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b89c:	b580      	push	{r7, lr}
 800b89e:	b084      	sub	sp, #16
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d108      	bne.n	800b8c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f000 fd88 	bl	800c3c8 <vPortFree>
				vPortFree( pxTCB );
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f000 fd85 	bl	800c3c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b8be:	e019      	b.n	800b8f4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b8c6:	2b01      	cmp	r3, #1
 800b8c8:	d103      	bne.n	800b8d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 fd7c 	bl	800c3c8 <vPortFree>
	}
 800b8d0:	e010      	b.n	800b8f4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d00b      	beq.n	800b8f4 <prvDeleteTCB+0x58>
	__asm volatile
 800b8dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8e0:	f383 8811 	msr	BASEPRI, r3
 800b8e4:	f3bf 8f6f 	isb	sy
 800b8e8:	f3bf 8f4f 	dsb	sy
 800b8ec:	60fb      	str	r3, [r7, #12]
}
 800b8ee:	bf00      	nop
 800b8f0:	bf00      	nop
 800b8f2:	e7fd      	b.n	800b8f0 <prvDeleteTCB+0x54>
	}
 800b8f4:	bf00      	nop
 800b8f6:	3710      	adds	r7, #16
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b902:	4b0c      	ldr	r3, [pc, #48]	@ (800b934 <prvResetNextTaskUnblockTime+0x38>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d104      	bne.n	800b916 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b90c:	4b0a      	ldr	r3, [pc, #40]	@ (800b938 <prvResetNextTaskUnblockTime+0x3c>)
 800b90e:	f04f 32ff 	mov.w	r2, #4294967295
 800b912:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b914:	e008      	b.n	800b928 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b916:	4b07      	ldr	r3, [pc, #28]	@ (800b934 <prvResetNextTaskUnblockTime+0x38>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	68db      	ldr	r3, [r3, #12]
 800b91c:	68db      	ldr	r3, [r3, #12]
 800b91e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	685b      	ldr	r3, [r3, #4]
 800b924:	4a04      	ldr	r2, [pc, #16]	@ (800b938 <prvResetNextTaskUnblockTime+0x3c>)
 800b926:	6013      	str	r3, [r2, #0]
}
 800b928:	bf00      	nop
 800b92a:	370c      	adds	r7, #12
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr
 800b934:	20002b40 	.word	0x20002b40
 800b938:	20002ba8 	.word	0x20002ba8

0800b93c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b93c:	b480      	push	{r7}
 800b93e:	b083      	sub	sp, #12
 800b940:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b942:	4b0b      	ldr	r3, [pc, #44]	@ (800b970 <xTaskGetSchedulerState+0x34>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d102      	bne.n	800b950 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b94a:	2301      	movs	r3, #1
 800b94c:	607b      	str	r3, [r7, #4]
 800b94e:	e008      	b.n	800b962 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b950:	4b08      	ldr	r3, [pc, #32]	@ (800b974 <xTaskGetSchedulerState+0x38>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d102      	bne.n	800b95e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b958:	2302      	movs	r3, #2
 800b95a:	607b      	str	r3, [r7, #4]
 800b95c:	e001      	b.n	800b962 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b95e:	2300      	movs	r3, #0
 800b960:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b962:	687b      	ldr	r3, [r7, #4]
	}
 800b964:	4618      	mov	r0, r3
 800b966:	370c      	adds	r7, #12
 800b968:	46bd      	mov	sp, r7
 800b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b96e:	4770      	bx	lr
 800b970:	20002b94 	.word	0x20002b94
 800b974:	20002bb0 	.word	0x20002bb0

0800b978 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b984:	2300      	movs	r3, #0
 800b986:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d05e      	beq.n	800ba4c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b992:	4b31      	ldr	r3, [pc, #196]	@ (800ba58 <xTaskPriorityInherit+0xe0>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b998:	429a      	cmp	r2, r3
 800b99a:	d24e      	bcs.n	800ba3a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	699b      	ldr	r3, [r3, #24]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	db06      	blt.n	800b9b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9a4:	4b2c      	ldr	r3, [pc, #176]	@ (800ba58 <xTaskPriorityInherit+0xe0>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9aa:	f1c3 0207 	rsb	r2, r3, #7
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	6959      	ldr	r1, [r3, #20]
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	009b      	lsls	r3, r3, #2
 800b9be:	4413      	add	r3, r2
 800b9c0:	009b      	lsls	r3, r3, #2
 800b9c2:	4a26      	ldr	r2, [pc, #152]	@ (800ba5c <xTaskPriorityInherit+0xe4>)
 800b9c4:	4413      	add	r3, r2
 800b9c6:	4299      	cmp	r1, r3
 800b9c8:	d12f      	bne.n	800ba2a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	3304      	adds	r3, #4
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7fe fae3 	bl	8009f9a <uxListRemove>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10a      	bne.n	800b9f0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9de:	2201      	movs	r2, #1
 800b9e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9e4:	43da      	mvns	r2, r3
 800b9e6:	4b1e      	ldr	r3, [pc, #120]	@ (800ba60 <xTaskPriorityInherit+0xe8>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4013      	ands	r3, r2
 800b9ec:	4a1c      	ldr	r2, [pc, #112]	@ (800ba60 <xTaskPriorityInherit+0xe8>)
 800b9ee:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b9f0:	4b19      	ldr	r3, [pc, #100]	@ (800ba58 <xTaskPriorityInherit+0xe0>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9fe:	2201      	movs	r2, #1
 800ba00:	409a      	lsls	r2, r3
 800ba02:	4b17      	ldr	r3, [pc, #92]	@ (800ba60 <xTaskPriorityInherit+0xe8>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	4313      	orrs	r3, r2
 800ba08:	4a15      	ldr	r2, [pc, #84]	@ (800ba60 <xTaskPriorityInherit+0xe8>)
 800ba0a:	6013      	str	r3, [r2, #0]
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba10:	4613      	mov	r3, r2
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	4413      	add	r3, r2
 800ba16:	009b      	lsls	r3, r3, #2
 800ba18:	4a10      	ldr	r2, [pc, #64]	@ (800ba5c <xTaskPriorityInherit+0xe4>)
 800ba1a:	441a      	add	r2, r3
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	3304      	adds	r3, #4
 800ba20:	4619      	mov	r1, r3
 800ba22:	4610      	mov	r0, r2
 800ba24:	f7fe fa5c 	bl	8009ee0 <vListInsertEnd>
 800ba28:	e004      	b.n	800ba34 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ba2a:	4b0b      	ldr	r3, [pc, #44]	@ (800ba58 <xTaskPriorityInherit+0xe0>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ba34:	2301      	movs	r3, #1
 800ba36:	60fb      	str	r3, [r7, #12]
 800ba38:	e008      	b.n	800ba4c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba3e:	4b06      	ldr	r3, [pc, #24]	@ (800ba58 <xTaskPriorityInherit+0xe0>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba44:	429a      	cmp	r2, r3
 800ba46:	d201      	bcs.n	800ba4c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
	}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3710      	adds	r7, #16
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}
 800ba56:	bf00      	nop
 800ba58:	20002a88 	.word	0x20002a88
 800ba5c:	20002a8c 	.word	0x20002a8c
 800ba60:	20002b90 	.word	0x20002b90

0800ba64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b086      	sub	sp, #24
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ba70:	2300      	movs	r3, #0
 800ba72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d070      	beq.n	800bb5c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ba7a:	4b3b      	ldr	r3, [pc, #236]	@ (800bb68 <xTaskPriorityDisinherit+0x104>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	693a      	ldr	r2, [r7, #16]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d00b      	beq.n	800ba9c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ba84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba88:	f383 8811 	msr	BASEPRI, r3
 800ba8c:	f3bf 8f6f 	isb	sy
 800ba90:	f3bf 8f4f 	dsb	sy
 800ba94:	60fb      	str	r3, [r7, #12]
}
 800ba96:	bf00      	nop
 800ba98:	bf00      	nop
 800ba9a:	e7fd      	b.n	800ba98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10b      	bne.n	800babc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800baa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baa8:	f383 8811 	msr	BASEPRI, r3
 800baac:	f3bf 8f6f 	isb	sy
 800bab0:	f3bf 8f4f 	dsb	sy
 800bab4:	60bb      	str	r3, [r7, #8]
}
 800bab6:	bf00      	nop
 800bab8:	bf00      	nop
 800baba:	e7fd      	b.n	800bab8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bac0:	1e5a      	subs	r2, r3, #1
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bace:	429a      	cmp	r2, r3
 800bad0:	d044      	beq.n	800bb5c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d140      	bne.n	800bb5c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	3304      	adds	r3, #4
 800bade:	4618      	mov	r0, r3
 800bae0:	f7fe fa5b 	bl	8009f9a <uxListRemove>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d115      	bne.n	800bb16 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baee:	491f      	ldr	r1, [pc, #124]	@ (800bb6c <xTaskPriorityDisinherit+0x108>)
 800baf0:	4613      	mov	r3, r2
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	4413      	add	r3, r2
 800baf6:	009b      	lsls	r3, r3, #2
 800baf8:	440b      	add	r3, r1
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d10a      	bne.n	800bb16 <xTaskPriorityDisinherit+0xb2>
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb04:	2201      	movs	r2, #1
 800bb06:	fa02 f303 	lsl.w	r3, r2, r3
 800bb0a:	43da      	mvns	r2, r3
 800bb0c:	4b18      	ldr	r3, [pc, #96]	@ (800bb70 <xTaskPriorityDisinherit+0x10c>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	4013      	ands	r3, r2
 800bb12:	4a17      	ldr	r2, [pc, #92]	@ (800bb70 <xTaskPriorityDisinherit+0x10c>)
 800bb14:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bb16:	693b      	ldr	r3, [r7, #16]
 800bb18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb22:	f1c3 0207 	rsb	r2, r3, #7
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb2e:	2201      	movs	r2, #1
 800bb30:	409a      	lsls	r2, r3
 800bb32:	4b0f      	ldr	r3, [pc, #60]	@ (800bb70 <xTaskPriorityDisinherit+0x10c>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4313      	orrs	r3, r2
 800bb38:	4a0d      	ldr	r2, [pc, #52]	@ (800bb70 <xTaskPriorityDisinherit+0x10c>)
 800bb3a:	6013      	str	r3, [r2, #0]
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb40:	4613      	mov	r3, r2
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	4413      	add	r3, r2
 800bb46:	009b      	lsls	r3, r3, #2
 800bb48:	4a08      	ldr	r2, [pc, #32]	@ (800bb6c <xTaskPriorityDisinherit+0x108>)
 800bb4a:	441a      	add	r2, r3
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	3304      	adds	r3, #4
 800bb50:	4619      	mov	r1, r3
 800bb52:	4610      	mov	r0, r2
 800bb54:	f7fe f9c4 	bl	8009ee0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb5c:	697b      	ldr	r3, [r7, #20]
	}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3718      	adds	r7, #24
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	20002a88 	.word	0x20002a88
 800bb6c:	20002a8c 	.word	0x20002a8c
 800bb70:	20002b90 	.word	0x20002b90

0800bb74 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b088      	sub	sp, #32
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bb82:	2301      	movs	r3, #1
 800bb84:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d079      	beq.n	800bc80 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bb8c:	69bb      	ldr	r3, [r7, #24]
 800bb8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d10b      	bne.n	800bbac <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800bb94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb98:	f383 8811 	msr	BASEPRI, r3
 800bb9c:	f3bf 8f6f 	isb	sy
 800bba0:	f3bf 8f4f 	dsb	sy
 800bba4:	60fb      	str	r3, [r7, #12]
}
 800bba6:	bf00      	nop
 800bba8:	bf00      	nop
 800bbaa:	e7fd      	b.n	800bba8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bbac:	69bb      	ldr	r3, [r7, #24]
 800bbae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbb0:	683a      	ldr	r2, [r7, #0]
 800bbb2:	429a      	cmp	r2, r3
 800bbb4:	d902      	bls.n	800bbbc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	61fb      	str	r3, [r7, #28]
 800bbba:	e002      	b.n	800bbc2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bbbc:	69bb      	ldr	r3, [r7, #24]
 800bbbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbc0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bbc2:	69bb      	ldr	r3, [r7, #24]
 800bbc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbc6:	69fa      	ldr	r2, [r7, #28]
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d059      	beq.n	800bc80 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bbcc:	69bb      	ldr	r3, [r7, #24]
 800bbce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bbd0:	697a      	ldr	r2, [r7, #20]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	d154      	bne.n	800bc80 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bbd6:	4b2c      	ldr	r3, [pc, #176]	@ (800bc88 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	69ba      	ldr	r2, [r7, #24]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d10b      	bne.n	800bbf8 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800bbe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbe4:	f383 8811 	msr	BASEPRI, r3
 800bbe8:	f3bf 8f6f 	isb	sy
 800bbec:	f3bf 8f4f 	dsb	sy
 800bbf0:	60bb      	str	r3, [r7, #8]
}
 800bbf2:	bf00      	nop
 800bbf4:	bf00      	nop
 800bbf6:	e7fd      	b.n	800bbf4 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bbf8:	69bb      	ldr	r3, [r7, #24]
 800bbfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbfc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	69fa      	ldr	r2, [r7, #28]
 800bc02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc04:	69bb      	ldr	r3, [r7, #24]
 800bc06:	699b      	ldr	r3, [r3, #24]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	db04      	blt.n	800bc16 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc0c:	69fb      	ldr	r3, [r7, #28]
 800bc0e:	f1c3 0207 	rsb	r2, r3, #7
 800bc12:	69bb      	ldr	r3, [r7, #24]
 800bc14:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bc16:	69bb      	ldr	r3, [r7, #24]
 800bc18:	6959      	ldr	r1, [r3, #20]
 800bc1a:	693a      	ldr	r2, [r7, #16]
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	4413      	add	r3, r2
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	4a19      	ldr	r2, [pc, #100]	@ (800bc8c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bc26:	4413      	add	r3, r2
 800bc28:	4299      	cmp	r1, r3
 800bc2a:	d129      	bne.n	800bc80 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	3304      	adds	r3, #4
 800bc30:	4618      	mov	r0, r3
 800bc32:	f7fe f9b2 	bl	8009f9a <uxListRemove>
 800bc36:	4603      	mov	r3, r0
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d10a      	bne.n	800bc52 <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800bc3c:	69bb      	ldr	r3, [r7, #24]
 800bc3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc40:	2201      	movs	r2, #1
 800bc42:	fa02 f303 	lsl.w	r3, r2, r3
 800bc46:	43da      	mvns	r2, r3
 800bc48:	4b11      	ldr	r3, [pc, #68]	@ (800bc90 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4013      	ands	r3, r2
 800bc4e:	4a10      	ldr	r2, [pc, #64]	@ (800bc90 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800bc50:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc56:	2201      	movs	r2, #1
 800bc58:	409a      	lsls	r2, r3
 800bc5a:	4b0d      	ldr	r3, [pc, #52]	@ (800bc90 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	4a0b      	ldr	r2, [pc, #44]	@ (800bc90 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800bc62:	6013      	str	r3, [r2, #0]
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc68:	4613      	mov	r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	4413      	add	r3, r2
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	4a06      	ldr	r2, [pc, #24]	@ (800bc8c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800bc72:	441a      	add	r2, r3
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	3304      	adds	r3, #4
 800bc78:	4619      	mov	r1, r3
 800bc7a:	4610      	mov	r0, r2
 800bc7c:	f7fe f930 	bl	8009ee0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bc80:	bf00      	nop
 800bc82:	3720      	adds	r7, #32
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	20002a88 	.word	0x20002a88
 800bc8c:	20002a8c 	.word	0x20002a8c
 800bc90:	20002b90 	.word	0x20002b90

0800bc94 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bc94:	b480      	push	{r7}
 800bc96:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bc98:	4b07      	ldr	r3, [pc, #28]	@ (800bcb8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d004      	beq.n	800bcaa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bca0:	4b05      	ldr	r3, [pc, #20]	@ (800bcb8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bca6:	3201      	adds	r2, #1
 800bca8:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 800bcaa:	4b03      	ldr	r3, [pc, #12]	@ (800bcb8 <pvTaskIncrementMutexHeldCount+0x24>)
 800bcac:	681b      	ldr	r3, [r3, #0]
	}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr
 800bcb8:	20002a88 	.word	0x20002a88

0800bcbc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b084      	sub	sp, #16
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bcc6:	4b29      	ldr	r3, [pc, #164]	@ (800bd6c <prvAddCurrentTaskToDelayedList+0xb0>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bccc:	4b28      	ldr	r3, [pc, #160]	@ (800bd70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	3304      	adds	r3, #4
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f7fe f961 	bl	8009f9a <uxListRemove>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d10b      	bne.n	800bcf6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800bcde:	4b24      	ldr	r3, [pc, #144]	@ (800bd70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bce4:	2201      	movs	r2, #1
 800bce6:	fa02 f303 	lsl.w	r3, r2, r3
 800bcea:	43da      	mvns	r2, r3
 800bcec:	4b21      	ldr	r3, [pc, #132]	@ (800bd74 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4013      	ands	r3, r2
 800bcf2:	4a20      	ldr	r2, [pc, #128]	@ (800bd74 <prvAddCurrentTaskToDelayedList+0xb8>)
 800bcf4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcfc:	d10a      	bne.n	800bd14 <prvAddCurrentTaskToDelayedList+0x58>
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d007      	beq.n	800bd14 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd04:	4b1a      	ldr	r3, [pc, #104]	@ (800bd70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	3304      	adds	r3, #4
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	481a      	ldr	r0, [pc, #104]	@ (800bd78 <prvAddCurrentTaskToDelayedList+0xbc>)
 800bd0e:	f7fe f8e7 	bl	8009ee0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bd12:	e026      	b.n	800bd62 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bd14:	68fa      	ldr	r2, [r7, #12]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	4413      	add	r3, r2
 800bd1a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bd1c:	4b14      	ldr	r3, [pc, #80]	@ (800bd70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	68ba      	ldr	r2, [r7, #8]
 800bd22:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bd24:	68ba      	ldr	r2, [r7, #8]
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d209      	bcs.n	800bd40 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd2c:	4b13      	ldr	r3, [pc, #76]	@ (800bd7c <prvAddCurrentTaskToDelayedList+0xc0>)
 800bd2e:	681a      	ldr	r2, [r3, #0]
 800bd30:	4b0f      	ldr	r3, [pc, #60]	@ (800bd70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	3304      	adds	r3, #4
 800bd36:	4619      	mov	r1, r3
 800bd38:	4610      	mov	r0, r2
 800bd3a:	f7fe f8f5 	bl	8009f28 <vListInsert>
}
 800bd3e:	e010      	b.n	800bd62 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd40:	4b0f      	ldr	r3, [pc, #60]	@ (800bd80 <prvAddCurrentTaskToDelayedList+0xc4>)
 800bd42:	681a      	ldr	r2, [r3, #0]
 800bd44:	4b0a      	ldr	r3, [pc, #40]	@ (800bd70 <prvAddCurrentTaskToDelayedList+0xb4>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	3304      	adds	r3, #4
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	4610      	mov	r0, r2
 800bd4e:	f7fe f8eb 	bl	8009f28 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bd52:	4b0c      	ldr	r3, [pc, #48]	@ (800bd84 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	68ba      	ldr	r2, [r7, #8]
 800bd58:	429a      	cmp	r2, r3
 800bd5a:	d202      	bcs.n	800bd62 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800bd5c:	4a09      	ldr	r2, [pc, #36]	@ (800bd84 <prvAddCurrentTaskToDelayedList+0xc8>)
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	6013      	str	r3, [r2, #0]
}
 800bd62:	bf00      	nop
 800bd64:	3710      	adds	r7, #16
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}
 800bd6a:	bf00      	nop
 800bd6c:	20002b8c 	.word	0x20002b8c
 800bd70:	20002a88 	.word	0x20002a88
 800bd74:	20002b90 	.word	0x20002b90
 800bd78:	20002b74 	.word	0x20002b74
 800bd7c:	20002b44 	.word	0x20002b44
 800bd80:	20002b40 	.word	0x20002b40
 800bd84:	20002ba8 	.word	0x20002ba8

0800bd88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	60f8      	str	r0, [r7, #12]
 800bd90:	60b9      	str	r1, [r7, #8]
 800bd92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	3b04      	subs	r3, #4
 800bd98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bda0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	3b04      	subs	r3, #4
 800bda6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	f023 0201 	bic.w	r2, r3, #1
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	3b04      	subs	r3, #4
 800bdb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bdb8:	4a0c      	ldr	r2, [pc, #48]	@ (800bdec <pxPortInitialiseStack+0x64>)
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	3b14      	subs	r3, #20
 800bdc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bdc4:	687a      	ldr	r2, [r7, #4]
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	3b04      	subs	r3, #4
 800bdce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	f06f 0202 	mvn.w	r2, #2
 800bdd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	3b20      	subs	r3, #32
 800bddc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bdde:	68fb      	ldr	r3, [r7, #12]
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3714      	adds	r7, #20
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr
 800bdec:	0800bdf1 	.word	0x0800bdf1

0800bdf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b085      	sub	sp, #20
 800bdf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bdfa:	4b13      	ldr	r3, [pc, #76]	@ (800be48 <prvTaskExitError+0x58>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be02:	d00b      	beq.n	800be1c <prvTaskExitError+0x2c>
	__asm volatile
 800be04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be08:	f383 8811 	msr	BASEPRI, r3
 800be0c:	f3bf 8f6f 	isb	sy
 800be10:	f3bf 8f4f 	dsb	sy
 800be14:	60fb      	str	r3, [r7, #12]
}
 800be16:	bf00      	nop
 800be18:	bf00      	nop
 800be1a:	e7fd      	b.n	800be18 <prvTaskExitError+0x28>
	__asm volatile
 800be1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be20:	f383 8811 	msr	BASEPRI, r3
 800be24:	f3bf 8f6f 	isb	sy
 800be28:	f3bf 8f4f 	dsb	sy
 800be2c:	60bb      	str	r3, [r7, #8]
}
 800be2e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800be30:	bf00      	nop
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d0fc      	beq.n	800be32 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800be38:	bf00      	nop
 800be3a:	bf00      	nop
 800be3c:	3714      	adds	r7, #20
 800be3e:	46bd      	mov	sp, r7
 800be40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop
 800be48:	20000024 	.word	0x20000024
 800be4c:	00000000 	.word	0x00000000

0800be50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800be50:	4b07      	ldr	r3, [pc, #28]	@ (800be70 <pxCurrentTCBConst2>)
 800be52:	6819      	ldr	r1, [r3, #0]
 800be54:	6808      	ldr	r0, [r1, #0]
 800be56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be5a:	f380 8809 	msr	PSP, r0
 800be5e:	f3bf 8f6f 	isb	sy
 800be62:	f04f 0000 	mov.w	r0, #0
 800be66:	f380 8811 	msr	BASEPRI, r0
 800be6a:	4770      	bx	lr
 800be6c:	f3af 8000 	nop.w

0800be70 <pxCurrentTCBConst2>:
 800be70:	20002a88 	.word	0x20002a88
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800be74:	bf00      	nop
 800be76:	bf00      	nop

0800be78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800be78:	4808      	ldr	r0, [pc, #32]	@ (800be9c <prvPortStartFirstTask+0x24>)
 800be7a:	6800      	ldr	r0, [r0, #0]
 800be7c:	6800      	ldr	r0, [r0, #0]
 800be7e:	f380 8808 	msr	MSP, r0
 800be82:	f04f 0000 	mov.w	r0, #0
 800be86:	f380 8814 	msr	CONTROL, r0
 800be8a:	b662      	cpsie	i
 800be8c:	b661      	cpsie	f
 800be8e:	f3bf 8f4f 	dsb	sy
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	df00      	svc	0
 800be98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800be9a:	bf00      	nop
 800be9c:	e000ed08 	.word	0xe000ed08

0800bea0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b086      	sub	sp, #24
 800bea4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bea6:	4b47      	ldr	r3, [pc, #284]	@ (800bfc4 <xPortStartScheduler+0x124>)
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a47      	ldr	r2, [pc, #284]	@ (800bfc8 <xPortStartScheduler+0x128>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d10b      	bne.n	800bec8 <xPortStartScheduler+0x28>
	__asm volatile
 800beb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb4:	f383 8811 	msr	BASEPRI, r3
 800beb8:	f3bf 8f6f 	isb	sy
 800bebc:	f3bf 8f4f 	dsb	sy
 800bec0:	613b      	str	r3, [r7, #16]
}
 800bec2:	bf00      	nop
 800bec4:	bf00      	nop
 800bec6:	e7fd      	b.n	800bec4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bec8:	4b3e      	ldr	r3, [pc, #248]	@ (800bfc4 <xPortStartScheduler+0x124>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	4a3f      	ldr	r2, [pc, #252]	@ (800bfcc <xPortStartScheduler+0x12c>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d10b      	bne.n	800beea <xPortStartScheduler+0x4a>
	__asm volatile
 800bed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bed6:	f383 8811 	msr	BASEPRI, r3
 800beda:	f3bf 8f6f 	isb	sy
 800bede:	f3bf 8f4f 	dsb	sy
 800bee2:	60fb      	str	r3, [r7, #12]
}
 800bee4:	bf00      	nop
 800bee6:	bf00      	nop
 800bee8:	e7fd      	b.n	800bee6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800beea:	4b39      	ldr	r3, [pc, #228]	@ (800bfd0 <xPortStartScheduler+0x130>)
 800beec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800beee:	697b      	ldr	r3, [r7, #20]
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	22ff      	movs	r2, #255	@ 0xff
 800befa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	781b      	ldrb	r3, [r3, #0]
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bf04:	78fb      	ldrb	r3, [r7, #3]
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bf0c:	b2da      	uxtb	r2, r3
 800bf0e:	4b31      	ldr	r3, [pc, #196]	@ (800bfd4 <xPortStartScheduler+0x134>)
 800bf10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bf12:	4b31      	ldr	r3, [pc, #196]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf14:	2207      	movs	r2, #7
 800bf16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf18:	e009      	b.n	800bf2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800bf1a:	4b2f      	ldr	r3, [pc, #188]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	3b01      	subs	r3, #1
 800bf20:	4a2d      	ldr	r2, [pc, #180]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bf24:	78fb      	ldrb	r3, [r7, #3]
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	005b      	lsls	r3, r3, #1
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bf2e:	78fb      	ldrb	r3, [r7, #3]
 800bf30:	b2db      	uxtb	r3, r3
 800bf32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf36:	2b80      	cmp	r3, #128	@ 0x80
 800bf38:	d0ef      	beq.n	800bf1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bf3a:	4b27      	ldr	r3, [pc, #156]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f1c3 0307 	rsb	r3, r3, #7
 800bf42:	2b04      	cmp	r3, #4
 800bf44:	d00b      	beq.n	800bf5e <xPortStartScheduler+0xbe>
	__asm volatile
 800bf46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf4a:	f383 8811 	msr	BASEPRI, r3
 800bf4e:	f3bf 8f6f 	isb	sy
 800bf52:	f3bf 8f4f 	dsb	sy
 800bf56:	60bb      	str	r3, [r7, #8]
}
 800bf58:	bf00      	nop
 800bf5a:	bf00      	nop
 800bf5c:	e7fd      	b.n	800bf5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bf5e:	4b1e      	ldr	r3, [pc, #120]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	021b      	lsls	r3, r3, #8
 800bf64:	4a1c      	ldr	r2, [pc, #112]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bf68:	4b1b      	ldr	r3, [pc, #108]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bf70:	4a19      	ldr	r2, [pc, #100]	@ (800bfd8 <xPortStartScheduler+0x138>)
 800bf72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	b2da      	uxtb	r2, r3
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bf7c:	4b17      	ldr	r3, [pc, #92]	@ (800bfdc <xPortStartScheduler+0x13c>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a16      	ldr	r2, [pc, #88]	@ (800bfdc <xPortStartScheduler+0x13c>)
 800bf82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bf86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bf88:	4b14      	ldr	r3, [pc, #80]	@ (800bfdc <xPortStartScheduler+0x13c>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4a13      	ldr	r2, [pc, #76]	@ (800bfdc <xPortStartScheduler+0x13c>)
 800bf8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800bf92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bf94:	f000 f8da 	bl	800c14c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bf98:	4b11      	ldr	r3, [pc, #68]	@ (800bfe0 <xPortStartScheduler+0x140>)
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bf9e:	f000 f8f9 	bl	800c194 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bfa2:	4b10      	ldr	r3, [pc, #64]	@ (800bfe4 <xPortStartScheduler+0x144>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4a0f      	ldr	r2, [pc, #60]	@ (800bfe4 <xPortStartScheduler+0x144>)
 800bfa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800bfac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bfae:	f7ff ff63 	bl	800be78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bfb2:	f7ff fa81 	bl	800b4b8 <vTaskSwitchContext>
	prvTaskExitError();
 800bfb6:	f7ff ff1b 	bl	800bdf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bfba:	2300      	movs	r3, #0
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3718      	adds	r7, #24
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	e000ed00 	.word	0xe000ed00
 800bfc8:	410fc271 	.word	0x410fc271
 800bfcc:	410fc270 	.word	0x410fc270
 800bfd0:	e000e400 	.word	0xe000e400
 800bfd4:	20002bb4 	.word	0x20002bb4
 800bfd8:	20002bb8 	.word	0x20002bb8
 800bfdc:	e000ed20 	.word	0xe000ed20
 800bfe0:	20000024 	.word	0x20000024
 800bfe4:	e000ef34 	.word	0xe000ef34

0800bfe8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b083      	sub	sp, #12
 800bfec:	af00      	add	r7, sp, #0
	__asm volatile
 800bfee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff2:	f383 8811 	msr	BASEPRI, r3
 800bff6:	f3bf 8f6f 	isb	sy
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	607b      	str	r3, [r7, #4]
}
 800c000:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c002:	4b10      	ldr	r3, [pc, #64]	@ (800c044 <vPortEnterCritical+0x5c>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	3301      	adds	r3, #1
 800c008:	4a0e      	ldr	r2, [pc, #56]	@ (800c044 <vPortEnterCritical+0x5c>)
 800c00a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c00c:	4b0d      	ldr	r3, [pc, #52]	@ (800c044 <vPortEnterCritical+0x5c>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2b01      	cmp	r3, #1
 800c012:	d110      	bne.n	800c036 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c014:	4b0c      	ldr	r3, [pc, #48]	@ (800c048 <vPortEnterCritical+0x60>)
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00b      	beq.n	800c036 <vPortEnterCritical+0x4e>
	__asm volatile
 800c01e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c022:	f383 8811 	msr	BASEPRI, r3
 800c026:	f3bf 8f6f 	isb	sy
 800c02a:	f3bf 8f4f 	dsb	sy
 800c02e:	603b      	str	r3, [r7, #0]
}
 800c030:	bf00      	nop
 800c032:	bf00      	nop
 800c034:	e7fd      	b.n	800c032 <vPortEnterCritical+0x4a>
	}
}
 800c036:	bf00      	nop
 800c038:	370c      	adds	r7, #12
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr
 800c042:	bf00      	nop
 800c044:	20000024 	.word	0x20000024
 800c048:	e000ed04 	.word	0xe000ed04

0800c04c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c052:	4b12      	ldr	r3, [pc, #72]	@ (800c09c <vPortExitCritical+0x50>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d10b      	bne.n	800c072 <vPortExitCritical+0x26>
	__asm volatile
 800c05a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c05e:	f383 8811 	msr	BASEPRI, r3
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	607b      	str	r3, [r7, #4]
}
 800c06c:	bf00      	nop
 800c06e:	bf00      	nop
 800c070:	e7fd      	b.n	800c06e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c072:	4b0a      	ldr	r3, [pc, #40]	@ (800c09c <vPortExitCritical+0x50>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	3b01      	subs	r3, #1
 800c078:	4a08      	ldr	r2, [pc, #32]	@ (800c09c <vPortExitCritical+0x50>)
 800c07a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c07c:	4b07      	ldr	r3, [pc, #28]	@ (800c09c <vPortExitCritical+0x50>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d105      	bne.n	800c090 <vPortExitCritical+0x44>
 800c084:	2300      	movs	r3, #0
 800c086:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	f383 8811 	msr	BASEPRI, r3
}
 800c08e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c090:	bf00      	nop
 800c092:	370c      	adds	r7, #12
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr
 800c09c:	20000024 	.word	0x20000024

0800c0a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c0a0:	f3ef 8009 	mrs	r0, PSP
 800c0a4:	f3bf 8f6f 	isb	sy
 800c0a8:	4b15      	ldr	r3, [pc, #84]	@ (800c100 <pxCurrentTCBConst>)
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	f01e 0f10 	tst.w	lr, #16
 800c0b0:	bf08      	it	eq
 800c0b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c0b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ba:	6010      	str	r0, [r2, #0]
 800c0bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c0c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c0c4:	f380 8811 	msr	BASEPRI, r0
 800c0c8:	f3bf 8f4f 	dsb	sy
 800c0cc:	f3bf 8f6f 	isb	sy
 800c0d0:	f7ff f9f2 	bl	800b4b8 <vTaskSwitchContext>
 800c0d4:	f04f 0000 	mov.w	r0, #0
 800c0d8:	f380 8811 	msr	BASEPRI, r0
 800c0dc:	bc09      	pop	{r0, r3}
 800c0de:	6819      	ldr	r1, [r3, #0]
 800c0e0:	6808      	ldr	r0, [r1, #0]
 800c0e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e6:	f01e 0f10 	tst.w	lr, #16
 800c0ea:	bf08      	it	eq
 800c0ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c0f0:	f380 8809 	msr	PSP, r0
 800c0f4:	f3bf 8f6f 	isb	sy
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	f3af 8000 	nop.w

0800c100 <pxCurrentTCBConst>:
 800c100:	20002a88 	.word	0x20002a88
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c104:	bf00      	nop
 800c106:	bf00      	nop

0800c108 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
	__asm volatile
 800c10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c112:	f383 8811 	msr	BASEPRI, r3
 800c116:	f3bf 8f6f 	isb	sy
 800c11a:	f3bf 8f4f 	dsb	sy
 800c11e:	607b      	str	r3, [r7, #4]
}
 800c120:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c122:	f7ff f90f 	bl	800b344 <xTaskIncrementTick>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d003      	beq.n	800c134 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c12c:	4b06      	ldr	r3, [pc, #24]	@ (800c148 <SysTick_Handler+0x40>)
 800c12e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c132:	601a      	str	r2, [r3, #0]
 800c134:	2300      	movs	r3, #0
 800c136:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c138:	683b      	ldr	r3, [r7, #0]
 800c13a:	f383 8811 	msr	BASEPRI, r3
}
 800c13e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c140:	bf00      	nop
 800c142:	3708      	adds	r7, #8
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	e000ed04 	.word	0xe000ed04

0800c14c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c14c:	b480      	push	{r7}
 800c14e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c150:	4b0b      	ldr	r3, [pc, #44]	@ (800c180 <vPortSetupTimerInterrupt+0x34>)
 800c152:	2200      	movs	r2, #0
 800c154:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c156:	4b0b      	ldr	r3, [pc, #44]	@ (800c184 <vPortSetupTimerInterrupt+0x38>)
 800c158:	2200      	movs	r2, #0
 800c15a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c15c:	4b0a      	ldr	r3, [pc, #40]	@ (800c188 <vPortSetupTimerInterrupt+0x3c>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	4a0a      	ldr	r2, [pc, #40]	@ (800c18c <vPortSetupTimerInterrupt+0x40>)
 800c162:	fba2 2303 	umull	r2, r3, r2, r3
 800c166:	099b      	lsrs	r3, r3, #6
 800c168:	4a09      	ldr	r2, [pc, #36]	@ (800c190 <vPortSetupTimerInterrupt+0x44>)
 800c16a:	3b01      	subs	r3, #1
 800c16c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c16e:	4b04      	ldr	r3, [pc, #16]	@ (800c180 <vPortSetupTimerInterrupt+0x34>)
 800c170:	2207      	movs	r2, #7
 800c172:	601a      	str	r2, [r3, #0]
}
 800c174:	bf00      	nop
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr
 800c17e:	bf00      	nop
 800c180:	e000e010 	.word	0xe000e010
 800c184:	e000e018 	.word	0xe000e018
 800c188:	20000004 	.word	0x20000004
 800c18c:	10624dd3 	.word	0x10624dd3
 800c190:	e000e014 	.word	0xe000e014

0800c194 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c194:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c1a4 <vPortEnableVFP+0x10>
 800c198:	6801      	ldr	r1, [r0, #0]
 800c19a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c19e:	6001      	str	r1, [r0, #0]
 800c1a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c1a2:	bf00      	nop
 800c1a4:	e000ed88 	.word	0xe000ed88

0800c1a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c1a8:	b480      	push	{r7}
 800c1aa:	b085      	sub	sp, #20
 800c1ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c1ae:	f3ef 8305 	mrs	r3, IPSR
 800c1b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2b0f      	cmp	r3, #15
 800c1b8:	d915      	bls.n	800c1e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c1ba:	4a18      	ldr	r2, [pc, #96]	@ (800c21c <vPortValidateInterruptPriority+0x74>)
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	4413      	add	r3, r2
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c1c4:	4b16      	ldr	r3, [pc, #88]	@ (800c220 <vPortValidateInterruptPriority+0x78>)
 800c1c6:	781b      	ldrb	r3, [r3, #0]
 800c1c8:	7afa      	ldrb	r2, [r7, #11]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d20b      	bcs.n	800c1e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1d2:	f383 8811 	msr	BASEPRI, r3
 800c1d6:	f3bf 8f6f 	isb	sy
 800c1da:	f3bf 8f4f 	dsb	sy
 800c1de:	607b      	str	r3, [r7, #4]
}
 800c1e0:	bf00      	nop
 800c1e2:	bf00      	nop
 800c1e4:	e7fd      	b.n	800c1e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c1e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c224 <vPortValidateInterruptPriority+0x7c>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c1ee:	4b0e      	ldr	r3, [pc, #56]	@ (800c228 <vPortValidateInterruptPriority+0x80>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d90b      	bls.n	800c20e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1fa:	f383 8811 	msr	BASEPRI, r3
 800c1fe:	f3bf 8f6f 	isb	sy
 800c202:	f3bf 8f4f 	dsb	sy
 800c206:	603b      	str	r3, [r7, #0]
}
 800c208:	bf00      	nop
 800c20a:	bf00      	nop
 800c20c:	e7fd      	b.n	800c20a <vPortValidateInterruptPriority+0x62>
	}
 800c20e:	bf00      	nop
 800c210:	3714      	adds	r7, #20
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	e000e3f0 	.word	0xe000e3f0
 800c220:	20002bb4 	.word	0x20002bb4
 800c224:	e000ed0c 	.word	0xe000ed0c
 800c228:	20002bb8 	.word	0x20002bb8

0800c22c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b08a      	sub	sp, #40	@ 0x28
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c234:	2300      	movs	r3, #0
 800c236:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c238:	f7fe ffc8 	bl	800b1cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c23c:	4b5c      	ldr	r3, [pc, #368]	@ (800c3b0 <pvPortMalloc+0x184>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d101      	bne.n	800c248 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c244:	f000 f924 	bl	800c490 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c248:	4b5a      	ldr	r3, [pc, #360]	@ (800c3b4 <pvPortMalloc+0x188>)
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4013      	ands	r3, r2
 800c250:	2b00      	cmp	r3, #0
 800c252:	f040 8095 	bne.w	800c380 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d01e      	beq.n	800c29a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c25c:	2208      	movs	r2, #8
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	4413      	add	r3, r2
 800c262:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f003 0307 	and.w	r3, r3, #7
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d015      	beq.n	800c29a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f023 0307 	bic.w	r3, r3, #7
 800c274:	3308      	adds	r3, #8
 800c276:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f003 0307 	and.w	r3, r3, #7
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00b      	beq.n	800c29a <pvPortMalloc+0x6e>
	__asm volatile
 800c282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	617b      	str	r3, [r7, #20]
}
 800c294:	bf00      	nop
 800c296:	bf00      	nop
 800c298:	e7fd      	b.n	800c296 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d06f      	beq.n	800c380 <pvPortMalloc+0x154>
 800c2a0:	4b45      	ldr	r3, [pc, #276]	@ (800c3b8 <pvPortMalloc+0x18c>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d86a      	bhi.n	800c380 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c2aa:	4b44      	ldr	r3, [pc, #272]	@ (800c3bc <pvPortMalloc+0x190>)
 800c2ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c2ae:	4b43      	ldr	r3, [pc, #268]	@ (800c3bc <pvPortMalloc+0x190>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2b4:	e004      	b.n	800c2c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c2:	685b      	ldr	r3, [r3, #4]
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	429a      	cmp	r2, r3
 800c2c8:	d903      	bls.n	800c2d2 <pvPortMalloc+0xa6>
 800c2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d1f1      	bne.n	800c2b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c2d2:	4b37      	ldr	r3, [pc, #220]	@ (800c3b0 <pvPortMalloc+0x184>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d051      	beq.n	800c380 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c2dc:	6a3b      	ldr	r3, [r7, #32]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	2208      	movs	r2, #8
 800c2e2:	4413      	add	r3, r2
 800c2e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e8:	681a      	ldr	r2, [r3, #0]
 800c2ea:	6a3b      	ldr	r3, [r7, #32]
 800c2ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2f0:	685a      	ldr	r2, [r3, #4]
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	1ad2      	subs	r2, r2, r3
 800c2f6:	2308      	movs	r3, #8
 800c2f8:	005b      	lsls	r3, r3, #1
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d920      	bls.n	800c340 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c2fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	4413      	add	r3, r2
 800c304:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c306:	69bb      	ldr	r3, [r7, #24]
 800c308:	f003 0307 	and.w	r3, r3, #7
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d00b      	beq.n	800c328 <pvPortMalloc+0xfc>
	__asm volatile
 800c310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c314:	f383 8811 	msr	BASEPRI, r3
 800c318:	f3bf 8f6f 	isb	sy
 800c31c:	f3bf 8f4f 	dsb	sy
 800c320:	613b      	str	r3, [r7, #16]
}
 800c322:	bf00      	nop
 800c324:	bf00      	nop
 800c326:	e7fd      	b.n	800c324 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c32a:	685a      	ldr	r2, [r3, #4]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	1ad2      	subs	r2, r2, r3
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c33a:	69b8      	ldr	r0, [r7, #24]
 800c33c:	f000 f90a 	bl	800c554 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c340:	4b1d      	ldr	r3, [pc, #116]	@ (800c3b8 <pvPortMalloc+0x18c>)
 800c342:	681a      	ldr	r2, [r3, #0]
 800c344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	1ad3      	subs	r3, r2, r3
 800c34a:	4a1b      	ldr	r2, [pc, #108]	@ (800c3b8 <pvPortMalloc+0x18c>)
 800c34c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c34e:	4b1a      	ldr	r3, [pc, #104]	@ (800c3b8 <pvPortMalloc+0x18c>)
 800c350:	681a      	ldr	r2, [r3, #0]
 800c352:	4b1b      	ldr	r3, [pc, #108]	@ (800c3c0 <pvPortMalloc+0x194>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	429a      	cmp	r2, r3
 800c358:	d203      	bcs.n	800c362 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c35a:	4b17      	ldr	r3, [pc, #92]	@ (800c3b8 <pvPortMalloc+0x18c>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	4a18      	ldr	r2, [pc, #96]	@ (800c3c0 <pvPortMalloc+0x194>)
 800c360:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c364:	685a      	ldr	r2, [r3, #4]
 800c366:	4b13      	ldr	r3, [pc, #76]	@ (800c3b4 <pvPortMalloc+0x188>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	431a      	orrs	r2, r3
 800c36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c36e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c372:	2200      	movs	r2, #0
 800c374:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c376:	4b13      	ldr	r3, [pc, #76]	@ (800c3c4 <pvPortMalloc+0x198>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	3301      	adds	r3, #1
 800c37c:	4a11      	ldr	r2, [pc, #68]	@ (800c3c4 <pvPortMalloc+0x198>)
 800c37e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c380:	f7fe ff32 	bl	800b1e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	f003 0307 	and.w	r3, r3, #7
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00b      	beq.n	800c3a6 <pvPortMalloc+0x17a>
	__asm volatile
 800c38e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c392:	f383 8811 	msr	BASEPRI, r3
 800c396:	f3bf 8f6f 	isb	sy
 800c39a:	f3bf 8f4f 	dsb	sy
 800c39e:	60fb      	str	r3, [r7, #12]
}
 800c3a0:	bf00      	nop
 800c3a2:	bf00      	nop
 800c3a4:	e7fd      	b.n	800c3a2 <pvPortMalloc+0x176>
	return pvReturn;
 800c3a6:	69fb      	ldr	r3, [r7, #28]
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3728      	adds	r7, #40	@ 0x28
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	200067c4 	.word	0x200067c4
 800c3b4:	200067d8 	.word	0x200067d8
 800c3b8:	200067c8 	.word	0x200067c8
 800c3bc:	200067bc 	.word	0x200067bc
 800c3c0:	200067cc 	.word	0x200067cc
 800c3c4:	200067d0 	.word	0x200067d0

0800c3c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b086      	sub	sp, #24
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d04f      	beq.n	800c47a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c3da:	2308      	movs	r3, #8
 800c3dc:	425b      	negs	r3, r3
 800c3de:	697a      	ldr	r2, [r7, #20]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c3e4:	697b      	ldr	r3, [r7, #20]
 800c3e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	685a      	ldr	r2, [r3, #4]
 800c3ec:	4b25      	ldr	r3, [pc, #148]	@ (800c484 <vPortFree+0xbc>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4013      	ands	r3, r2
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d10b      	bne.n	800c40e <vPortFree+0x46>
	__asm volatile
 800c3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3fa:	f383 8811 	msr	BASEPRI, r3
 800c3fe:	f3bf 8f6f 	isb	sy
 800c402:	f3bf 8f4f 	dsb	sy
 800c406:	60fb      	str	r3, [r7, #12]
}
 800c408:	bf00      	nop
 800c40a:	bf00      	nop
 800c40c:	e7fd      	b.n	800c40a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00b      	beq.n	800c42e <vPortFree+0x66>
	__asm volatile
 800c416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c41a:	f383 8811 	msr	BASEPRI, r3
 800c41e:	f3bf 8f6f 	isb	sy
 800c422:	f3bf 8f4f 	dsb	sy
 800c426:	60bb      	str	r3, [r7, #8]
}
 800c428:	bf00      	nop
 800c42a:	bf00      	nop
 800c42c:	e7fd      	b.n	800c42a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	685a      	ldr	r2, [r3, #4]
 800c432:	4b14      	ldr	r3, [pc, #80]	@ (800c484 <vPortFree+0xbc>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4013      	ands	r3, r2
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d01e      	beq.n	800c47a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d11a      	bne.n	800c47a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	685a      	ldr	r2, [r3, #4]
 800c448:	4b0e      	ldr	r3, [pc, #56]	@ (800c484 <vPortFree+0xbc>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	43db      	mvns	r3, r3
 800c44e:	401a      	ands	r2, r3
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c454:	f7fe feba 	bl	800b1cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	685a      	ldr	r2, [r3, #4]
 800c45c:	4b0a      	ldr	r3, [pc, #40]	@ (800c488 <vPortFree+0xc0>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4413      	add	r3, r2
 800c462:	4a09      	ldr	r2, [pc, #36]	@ (800c488 <vPortFree+0xc0>)
 800c464:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c466:	6938      	ldr	r0, [r7, #16]
 800c468:	f000 f874 	bl	800c554 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c46c:	4b07      	ldr	r3, [pc, #28]	@ (800c48c <vPortFree+0xc4>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	3301      	adds	r3, #1
 800c472:	4a06      	ldr	r2, [pc, #24]	@ (800c48c <vPortFree+0xc4>)
 800c474:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c476:	f7fe feb7 	bl	800b1e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c47a:	bf00      	nop
 800c47c:	3718      	adds	r7, #24
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	200067d8 	.word	0x200067d8
 800c488:	200067c8 	.word	0x200067c8
 800c48c:	200067d4 	.word	0x200067d4

0800c490 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c490:	b480      	push	{r7}
 800c492:	b085      	sub	sp, #20
 800c494:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c496:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c49a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c49c:	4b27      	ldr	r3, [pc, #156]	@ (800c53c <prvHeapInit+0xac>)
 800c49e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	f003 0307 	and.w	r3, r3, #7
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d00c      	beq.n	800c4c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	3307      	adds	r3, #7
 800c4ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	f023 0307 	bic.w	r3, r3, #7
 800c4b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c4b8:	68ba      	ldr	r2, [r7, #8]
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	1ad3      	subs	r3, r2, r3
 800c4be:	4a1f      	ldr	r2, [pc, #124]	@ (800c53c <prvHeapInit+0xac>)
 800c4c0:	4413      	add	r3, r2
 800c4c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c4c8:	4a1d      	ldr	r2, [pc, #116]	@ (800c540 <prvHeapInit+0xb0>)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c4ce:	4b1c      	ldr	r3, [pc, #112]	@ (800c540 <prvHeapInit+0xb0>)
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	68ba      	ldr	r2, [r7, #8]
 800c4d8:	4413      	add	r3, r2
 800c4da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c4dc:	2208      	movs	r2, #8
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	1a9b      	subs	r3, r3, r2
 800c4e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f023 0307 	bic.w	r3, r3, #7
 800c4ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	4a15      	ldr	r2, [pc, #84]	@ (800c544 <prvHeapInit+0xb4>)
 800c4f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c4f2:	4b14      	ldr	r3, [pc, #80]	@ (800c544 <prvHeapInit+0xb4>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c4fa:	4b12      	ldr	r3, [pc, #72]	@ (800c544 <prvHeapInit+0xb4>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	2200      	movs	r2, #0
 800c500:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	1ad2      	subs	r2, r2, r3
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c510:	4b0c      	ldr	r3, [pc, #48]	@ (800c544 <prvHeapInit+0xb4>)
 800c512:	681a      	ldr	r2, [r3, #0]
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	4a0a      	ldr	r2, [pc, #40]	@ (800c548 <prvHeapInit+0xb8>)
 800c51e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c520:	683b      	ldr	r3, [r7, #0]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	4a09      	ldr	r2, [pc, #36]	@ (800c54c <prvHeapInit+0xbc>)
 800c526:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c528:	4b09      	ldr	r3, [pc, #36]	@ (800c550 <prvHeapInit+0xc0>)
 800c52a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c52e:	601a      	str	r2, [r3, #0]
}
 800c530:	bf00      	nop
 800c532:	3714      	adds	r7, #20
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr
 800c53c:	20002bbc 	.word	0x20002bbc
 800c540:	200067bc 	.word	0x200067bc
 800c544:	200067c4 	.word	0x200067c4
 800c548:	200067cc 	.word	0x200067cc
 800c54c:	200067c8 	.word	0x200067c8
 800c550:	200067d8 	.word	0x200067d8

0800c554 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c554:	b480      	push	{r7}
 800c556:	b085      	sub	sp, #20
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c55c:	4b28      	ldr	r3, [pc, #160]	@ (800c600 <prvInsertBlockIntoFreeList+0xac>)
 800c55e:	60fb      	str	r3, [r7, #12]
 800c560:	e002      	b.n	800c568 <prvInsertBlockIntoFreeList+0x14>
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	60fb      	str	r3, [r7, #12]
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	687a      	ldr	r2, [r7, #4]
 800c56e:	429a      	cmp	r2, r3
 800c570:	d8f7      	bhi.n	800c562 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	68ba      	ldr	r2, [r7, #8]
 800c57c:	4413      	add	r3, r2
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	429a      	cmp	r2, r3
 800c582:	d108      	bne.n	800c596 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	685a      	ldr	r2, [r3, #4]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	441a      	add	r2, r3
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	68ba      	ldr	r2, [r7, #8]
 800c5a0:	441a      	add	r2, r3
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d118      	bne.n	800c5dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	4b15      	ldr	r3, [pc, #84]	@ (800c604 <prvInsertBlockIntoFreeList+0xb0>)
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d00d      	beq.n	800c5d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	685a      	ldr	r2, [r3, #4]
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	441a      	add	r2, r3
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	681a      	ldr	r2, [r3, #0]
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	601a      	str	r2, [r3, #0]
 800c5d0:	e008      	b.n	800c5e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c5d2:	4b0c      	ldr	r3, [pc, #48]	@ (800c604 <prvInsertBlockIntoFreeList+0xb0>)
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	601a      	str	r2, [r3, #0]
 800c5da:	e003      	b.n	800c5e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681a      	ldr	r2, [r3, #0]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c5e4:	68fa      	ldr	r2, [r7, #12]
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d002      	beq.n	800c5f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	687a      	ldr	r2, [r7, #4]
 800c5f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c5f2:	bf00      	nop
 800c5f4:	3714      	adds	r7, #20
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fc:	4770      	bx	lr
 800c5fe:	bf00      	nop
 800c600:	200067bc 	.word	0x200067bc
 800c604:	200067c4 	.word	0x200067c4

0800c608 <std>:
 800c608:	2300      	movs	r3, #0
 800c60a:	b510      	push	{r4, lr}
 800c60c:	4604      	mov	r4, r0
 800c60e:	e9c0 3300 	strd	r3, r3, [r0]
 800c612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c616:	6083      	str	r3, [r0, #8]
 800c618:	8181      	strh	r1, [r0, #12]
 800c61a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c61c:	81c2      	strh	r2, [r0, #14]
 800c61e:	6183      	str	r3, [r0, #24]
 800c620:	4619      	mov	r1, r3
 800c622:	2208      	movs	r2, #8
 800c624:	305c      	adds	r0, #92	@ 0x5c
 800c626:	f000 f962 	bl	800c8ee <memset>
 800c62a:	4b0d      	ldr	r3, [pc, #52]	@ (800c660 <std+0x58>)
 800c62c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c62e:	4b0d      	ldr	r3, [pc, #52]	@ (800c664 <std+0x5c>)
 800c630:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c632:	4b0d      	ldr	r3, [pc, #52]	@ (800c668 <std+0x60>)
 800c634:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c636:	4b0d      	ldr	r3, [pc, #52]	@ (800c66c <std+0x64>)
 800c638:	6323      	str	r3, [r4, #48]	@ 0x30
 800c63a:	4b0d      	ldr	r3, [pc, #52]	@ (800c670 <std+0x68>)
 800c63c:	6224      	str	r4, [r4, #32]
 800c63e:	429c      	cmp	r4, r3
 800c640:	d006      	beq.n	800c650 <std+0x48>
 800c642:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c646:	4294      	cmp	r4, r2
 800c648:	d002      	beq.n	800c650 <std+0x48>
 800c64a:	33d0      	adds	r3, #208	@ 0xd0
 800c64c:	429c      	cmp	r4, r3
 800c64e:	d105      	bne.n	800c65c <std+0x54>
 800c650:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c658:	f000 ba2c 	b.w	800cab4 <__retarget_lock_init_recursive>
 800c65c:	bd10      	pop	{r4, pc}
 800c65e:	bf00      	nop
 800c660:	0800c835 	.word	0x0800c835
 800c664:	0800c857 	.word	0x0800c857
 800c668:	0800c88f 	.word	0x0800c88f
 800c66c:	0800c8b3 	.word	0x0800c8b3
 800c670:	200067dc 	.word	0x200067dc

0800c674 <stdio_exit_handler>:
 800c674:	4a02      	ldr	r2, [pc, #8]	@ (800c680 <stdio_exit_handler+0xc>)
 800c676:	4903      	ldr	r1, [pc, #12]	@ (800c684 <stdio_exit_handler+0x10>)
 800c678:	4803      	ldr	r0, [pc, #12]	@ (800c688 <stdio_exit_handler+0x14>)
 800c67a:	f000 b869 	b.w	800c750 <_fwalk_sglue>
 800c67e:	bf00      	nop
 800c680:	20000028 	.word	0x20000028
 800c684:	0800d3e9 	.word	0x0800d3e9
 800c688:	20000038 	.word	0x20000038

0800c68c <cleanup_stdio>:
 800c68c:	6841      	ldr	r1, [r0, #4]
 800c68e:	4b0c      	ldr	r3, [pc, #48]	@ (800c6c0 <cleanup_stdio+0x34>)
 800c690:	4299      	cmp	r1, r3
 800c692:	b510      	push	{r4, lr}
 800c694:	4604      	mov	r4, r0
 800c696:	d001      	beq.n	800c69c <cleanup_stdio+0x10>
 800c698:	f000 fea6 	bl	800d3e8 <_fflush_r>
 800c69c:	68a1      	ldr	r1, [r4, #8]
 800c69e:	4b09      	ldr	r3, [pc, #36]	@ (800c6c4 <cleanup_stdio+0x38>)
 800c6a0:	4299      	cmp	r1, r3
 800c6a2:	d002      	beq.n	800c6aa <cleanup_stdio+0x1e>
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	f000 fe9f 	bl	800d3e8 <_fflush_r>
 800c6aa:	68e1      	ldr	r1, [r4, #12]
 800c6ac:	4b06      	ldr	r3, [pc, #24]	@ (800c6c8 <cleanup_stdio+0x3c>)
 800c6ae:	4299      	cmp	r1, r3
 800c6b0:	d004      	beq.n	800c6bc <cleanup_stdio+0x30>
 800c6b2:	4620      	mov	r0, r4
 800c6b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6b8:	f000 be96 	b.w	800d3e8 <_fflush_r>
 800c6bc:	bd10      	pop	{r4, pc}
 800c6be:	bf00      	nop
 800c6c0:	200067dc 	.word	0x200067dc
 800c6c4:	20006844 	.word	0x20006844
 800c6c8:	200068ac 	.word	0x200068ac

0800c6cc <global_stdio_init.part.0>:
 800c6cc:	b510      	push	{r4, lr}
 800c6ce:	4b0b      	ldr	r3, [pc, #44]	@ (800c6fc <global_stdio_init.part.0+0x30>)
 800c6d0:	4c0b      	ldr	r4, [pc, #44]	@ (800c700 <global_stdio_init.part.0+0x34>)
 800c6d2:	4a0c      	ldr	r2, [pc, #48]	@ (800c704 <global_stdio_init.part.0+0x38>)
 800c6d4:	601a      	str	r2, [r3, #0]
 800c6d6:	4620      	mov	r0, r4
 800c6d8:	2200      	movs	r2, #0
 800c6da:	2104      	movs	r1, #4
 800c6dc:	f7ff ff94 	bl	800c608 <std>
 800c6e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c6e4:	2201      	movs	r2, #1
 800c6e6:	2109      	movs	r1, #9
 800c6e8:	f7ff ff8e 	bl	800c608 <std>
 800c6ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c6f0:	2202      	movs	r2, #2
 800c6f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c6f6:	2112      	movs	r1, #18
 800c6f8:	f7ff bf86 	b.w	800c608 <std>
 800c6fc:	20006914 	.word	0x20006914
 800c700:	200067dc 	.word	0x200067dc
 800c704:	0800c675 	.word	0x0800c675

0800c708 <__sfp_lock_acquire>:
 800c708:	4801      	ldr	r0, [pc, #4]	@ (800c710 <__sfp_lock_acquire+0x8>)
 800c70a:	f000 b9d4 	b.w	800cab6 <__retarget_lock_acquire_recursive>
 800c70e:	bf00      	nop
 800c710:	2000691d 	.word	0x2000691d

0800c714 <__sfp_lock_release>:
 800c714:	4801      	ldr	r0, [pc, #4]	@ (800c71c <__sfp_lock_release+0x8>)
 800c716:	f000 b9cf 	b.w	800cab8 <__retarget_lock_release_recursive>
 800c71a:	bf00      	nop
 800c71c:	2000691d 	.word	0x2000691d

0800c720 <__sinit>:
 800c720:	b510      	push	{r4, lr}
 800c722:	4604      	mov	r4, r0
 800c724:	f7ff fff0 	bl	800c708 <__sfp_lock_acquire>
 800c728:	6a23      	ldr	r3, [r4, #32]
 800c72a:	b11b      	cbz	r3, 800c734 <__sinit+0x14>
 800c72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c730:	f7ff bff0 	b.w	800c714 <__sfp_lock_release>
 800c734:	4b04      	ldr	r3, [pc, #16]	@ (800c748 <__sinit+0x28>)
 800c736:	6223      	str	r3, [r4, #32]
 800c738:	4b04      	ldr	r3, [pc, #16]	@ (800c74c <__sinit+0x2c>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1f5      	bne.n	800c72c <__sinit+0xc>
 800c740:	f7ff ffc4 	bl	800c6cc <global_stdio_init.part.0>
 800c744:	e7f2      	b.n	800c72c <__sinit+0xc>
 800c746:	bf00      	nop
 800c748:	0800c68d 	.word	0x0800c68d
 800c74c:	20006914 	.word	0x20006914

0800c750 <_fwalk_sglue>:
 800c750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c754:	4607      	mov	r7, r0
 800c756:	4688      	mov	r8, r1
 800c758:	4614      	mov	r4, r2
 800c75a:	2600      	movs	r6, #0
 800c75c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c760:	f1b9 0901 	subs.w	r9, r9, #1
 800c764:	d505      	bpl.n	800c772 <_fwalk_sglue+0x22>
 800c766:	6824      	ldr	r4, [r4, #0]
 800c768:	2c00      	cmp	r4, #0
 800c76a:	d1f7      	bne.n	800c75c <_fwalk_sglue+0xc>
 800c76c:	4630      	mov	r0, r6
 800c76e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c772:	89ab      	ldrh	r3, [r5, #12]
 800c774:	2b01      	cmp	r3, #1
 800c776:	d907      	bls.n	800c788 <_fwalk_sglue+0x38>
 800c778:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c77c:	3301      	adds	r3, #1
 800c77e:	d003      	beq.n	800c788 <_fwalk_sglue+0x38>
 800c780:	4629      	mov	r1, r5
 800c782:	4638      	mov	r0, r7
 800c784:	47c0      	blx	r8
 800c786:	4306      	orrs	r6, r0
 800c788:	3568      	adds	r5, #104	@ 0x68
 800c78a:	e7e9      	b.n	800c760 <_fwalk_sglue+0x10>

0800c78c <sniprintf>:
 800c78c:	b40c      	push	{r2, r3}
 800c78e:	b530      	push	{r4, r5, lr}
 800c790:	4b17      	ldr	r3, [pc, #92]	@ (800c7f0 <sniprintf+0x64>)
 800c792:	1e0c      	subs	r4, r1, #0
 800c794:	681d      	ldr	r5, [r3, #0]
 800c796:	b09d      	sub	sp, #116	@ 0x74
 800c798:	da08      	bge.n	800c7ac <sniprintf+0x20>
 800c79a:	238b      	movs	r3, #139	@ 0x8b
 800c79c:	602b      	str	r3, [r5, #0]
 800c79e:	f04f 30ff 	mov.w	r0, #4294967295
 800c7a2:	b01d      	add	sp, #116	@ 0x74
 800c7a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c7a8:	b002      	add	sp, #8
 800c7aa:	4770      	bx	lr
 800c7ac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c7b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c7b4:	bf14      	ite	ne
 800c7b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c7ba:	4623      	moveq	r3, r4
 800c7bc:	9304      	str	r3, [sp, #16]
 800c7be:	9307      	str	r3, [sp, #28]
 800c7c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c7c4:	9002      	str	r0, [sp, #8]
 800c7c6:	9006      	str	r0, [sp, #24]
 800c7c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c7cc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c7ce:	ab21      	add	r3, sp, #132	@ 0x84
 800c7d0:	a902      	add	r1, sp, #8
 800c7d2:	4628      	mov	r0, r5
 800c7d4:	9301      	str	r3, [sp, #4]
 800c7d6:	f000 faf9 	bl	800cdcc <_svfiprintf_r>
 800c7da:	1c43      	adds	r3, r0, #1
 800c7dc:	bfbc      	itt	lt
 800c7de:	238b      	movlt	r3, #139	@ 0x8b
 800c7e0:	602b      	strlt	r3, [r5, #0]
 800c7e2:	2c00      	cmp	r4, #0
 800c7e4:	d0dd      	beq.n	800c7a2 <sniprintf+0x16>
 800c7e6:	9b02      	ldr	r3, [sp, #8]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	701a      	strb	r2, [r3, #0]
 800c7ec:	e7d9      	b.n	800c7a2 <sniprintf+0x16>
 800c7ee:	bf00      	nop
 800c7f0:	20000034 	.word	0x20000034

0800c7f4 <siprintf>:
 800c7f4:	b40e      	push	{r1, r2, r3}
 800c7f6:	b500      	push	{lr}
 800c7f8:	b09c      	sub	sp, #112	@ 0x70
 800c7fa:	ab1d      	add	r3, sp, #116	@ 0x74
 800c7fc:	9002      	str	r0, [sp, #8]
 800c7fe:	9006      	str	r0, [sp, #24]
 800c800:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c804:	4809      	ldr	r0, [pc, #36]	@ (800c82c <siprintf+0x38>)
 800c806:	9107      	str	r1, [sp, #28]
 800c808:	9104      	str	r1, [sp, #16]
 800c80a:	4909      	ldr	r1, [pc, #36]	@ (800c830 <siprintf+0x3c>)
 800c80c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c810:	9105      	str	r1, [sp, #20]
 800c812:	6800      	ldr	r0, [r0, #0]
 800c814:	9301      	str	r3, [sp, #4]
 800c816:	a902      	add	r1, sp, #8
 800c818:	f000 fad8 	bl	800cdcc <_svfiprintf_r>
 800c81c:	9b02      	ldr	r3, [sp, #8]
 800c81e:	2200      	movs	r2, #0
 800c820:	701a      	strb	r2, [r3, #0]
 800c822:	b01c      	add	sp, #112	@ 0x70
 800c824:	f85d eb04 	ldr.w	lr, [sp], #4
 800c828:	b003      	add	sp, #12
 800c82a:	4770      	bx	lr
 800c82c:	20000034 	.word	0x20000034
 800c830:	ffff0208 	.word	0xffff0208

0800c834 <__sread>:
 800c834:	b510      	push	{r4, lr}
 800c836:	460c      	mov	r4, r1
 800c838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c83c:	f000 f8ec 	bl	800ca18 <_read_r>
 800c840:	2800      	cmp	r0, #0
 800c842:	bfab      	itete	ge
 800c844:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c846:	89a3      	ldrhlt	r3, [r4, #12]
 800c848:	181b      	addge	r3, r3, r0
 800c84a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c84e:	bfac      	ite	ge
 800c850:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c852:	81a3      	strhlt	r3, [r4, #12]
 800c854:	bd10      	pop	{r4, pc}

0800c856 <__swrite>:
 800c856:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c85a:	461f      	mov	r7, r3
 800c85c:	898b      	ldrh	r3, [r1, #12]
 800c85e:	05db      	lsls	r3, r3, #23
 800c860:	4605      	mov	r5, r0
 800c862:	460c      	mov	r4, r1
 800c864:	4616      	mov	r6, r2
 800c866:	d505      	bpl.n	800c874 <__swrite+0x1e>
 800c868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c86c:	2302      	movs	r3, #2
 800c86e:	2200      	movs	r2, #0
 800c870:	f000 f8c0 	bl	800c9f4 <_lseek_r>
 800c874:	89a3      	ldrh	r3, [r4, #12]
 800c876:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c87a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c87e:	81a3      	strh	r3, [r4, #12]
 800c880:	4632      	mov	r2, r6
 800c882:	463b      	mov	r3, r7
 800c884:	4628      	mov	r0, r5
 800c886:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c88a:	f000 b8d7 	b.w	800ca3c <_write_r>

0800c88e <__sseek>:
 800c88e:	b510      	push	{r4, lr}
 800c890:	460c      	mov	r4, r1
 800c892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c896:	f000 f8ad 	bl	800c9f4 <_lseek_r>
 800c89a:	1c43      	adds	r3, r0, #1
 800c89c:	89a3      	ldrh	r3, [r4, #12]
 800c89e:	bf15      	itete	ne
 800c8a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c8a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c8a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c8aa:	81a3      	strheq	r3, [r4, #12]
 800c8ac:	bf18      	it	ne
 800c8ae:	81a3      	strhne	r3, [r4, #12]
 800c8b0:	bd10      	pop	{r4, pc}

0800c8b2 <__sclose>:
 800c8b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8b6:	f000 b88d 	b.w	800c9d4 <_close_r>

0800c8ba <memmove>:
 800c8ba:	4288      	cmp	r0, r1
 800c8bc:	b510      	push	{r4, lr}
 800c8be:	eb01 0402 	add.w	r4, r1, r2
 800c8c2:	d902      	bls.n	800c8ca <memmove+0x10>
 800c8c4:	4284      	cmp	r4, r0
 800c8c6:	4623      	mov	r3, r4
 800c8c8:	d807      	bhi.n	800c8da <memmove+0x20>
 800c8ca:	1e43      	subs	r3, r0, #1
 800c8cc:	42a1      	cmp	r1, r4
 800c8ce:	d008      	beq.n	800c8e2 <memmove+0x28>
 800c8d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8d4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8d8:	e7f8      	b.n	800c8cc <memmove+0x12>
 800c8da:	4402      	add	r2, r0
 800c8dc:	4601      	mov	r1, r0
 800c8de:	428a      	cmp	r2, r1
 800c8e0:	d100      	bne.n	800c8e4 <memmove+0x2a>
 800c8e2:	bd10      	pop	{r4, pc}
 800c8e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c8ec:	e7f7      	b.n	800c8de <memmove+0x24>

0800c8ee <memset>:
 800c8ee:	4402      	add	r2, r0
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	4293      	cmp	r3, r2
 800c8f4:	d100      	bne.n	800c8f8 <memset+0xa>
 800c8f6:	4770      	bx	lr
 800c8f8:	f803 1b01 	strb.w	r1, [r3], #1
 800c8fc:	e7f9      	b.n	800c8f2 <memset+0x4>

0800c8fe <strcat>:
 800c8fe:	b510      	push	{r4, lr}
 800c900:	4602      	mov	r2, r0
 800c902:	7814      	ldrb	r4, [r2, #0]
 800c904:	4613      	mov	r3, r2
 800c906:	3201      	adds	r2, #1
 800c908:	2c00      	cmp	r4, #0
 800c90a:	d1fa      	bne.n	800c902 <strcat+0x4>
 800c90c:	3b01      	subs	r3, #1
 800c90e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c912:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c916:	2a00      	cmp	r2, #0
 800c918:	d1f9      	bne.n	800c90e <strcat+0x10>
 800c91a:	bd10      	pop	{r4, pc}

0800c91c <strtok>:
 800c91c:	4b16      	ldr	r3, [pc, #88]	@ (800c978 <strtok+0x5c>)
 800c91e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c922:	681f      	ldr	r7, [r3, #0]
 800c924:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800c926:	4605      	mov	r5, r0
 800c928:	460e      	mov	r6, r1
 800c92a:	b9ec      	cbnz	r4, 800c968 <strtok+0x4c>
 800c92c:	2050      	movs	r0, #80	@ 0x50
 800c92e:	f000 f93b 	bl	800cba8 <malloc>
 800c932:	4602      	mov	r2, r0
 800c934:	6478      	str	r0, [r7, #68]	@ 0x44
 800c936:	b920      	cbnz	r0, 800c942 <strtok+0x26>
 800c938:	4b10      	ldr	r3, [pc, #64]	@ (800c97c <strtok+0x60>)
 800c93a:	4811      	ldr	r0, [pc, #68]	@ (800c980 <strtok+0x64>)
 800c93c:	215b      	movs	r1, #91	@ 0x5b
 800c93e:	f000 f8cb 	bl	800cad8 <__assert_func>
 800c942:	e9c0 4400 	strd	r4, r4, [r0]
 800c946:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c94a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c94e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800c952:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800c956:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800c95a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800c95e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800c962:	6184      	str	r4, [r0, #24]
 800c964:	7704      	strb	r4, [r0, #28]
 800c966:	6244      	str	r4, [r0, #36]	@ 0x24
 800c968:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c96a:	4631      	mov	r1, r6
 800c96c:	4628      	mov	r0, r5
 800c96e:	2301      	movs	r3, #1
 800c970:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c974:	f000 b806 	b.w	800c984 <__strtok_r>
 800c978:	20000034 	.word	0x20000034
 800c97c:	080105d0 	.word	0x080105d0
 800c980:	080105e7 	.word	0x080105e7

0800c984 <__strtok_r>:
 800c984:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c986:	4604      	mov	r4, r0
 800c988:	b908      	cbnz	r0, 800c98e <__strtok_r+0xa>
 800c98a:	6814      	ldr	r4, [r2, #0]
 800c98c:	b144      	cbz	r4, 800c9a0 <__strtok_r+0x1c>
 800c98e:	4620      	mov	r0, r4
 800c990:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c994:	460f      	mov	r7, r1
 800c996:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c99a:	b91e      	cbnz	r6, 800c9a4 <__strtok_r+0x20>
 800c99c:	b965      	cbnz	r5, 800c9b8 <__strtok_r+0x34>
 800c99e:	6015      	str	r5, [r2, #0]
 800c9a0:	2000      	movs	r0, #0
 800c9a2:	e005      	b.n	800c9b0 <__strtok_r+0x2c>
 800c9a4:	42b5      	cmp	r5, r6
 800c9a6:	d1f6      	bne.n	800c996 <__strtok_r+0x12>
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d1f0      	bne.n	800c98e <__strtok_r+0xa>
 800c9ac:	6014      	str	r4, [r2, #0]
 800c9ae:	7003      	strb	r3, [r0, #0]
 800c9b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9b2:	461c      	mov	r4, r3
 800c9b4:	e00c      	b.n	800c9d0 <__strtok_r+0x4c>
 800c9b6:	b915      	cbnz	r5, 800c9be <__strtok_r+0x3a>
 800c9b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c9bc:	460e      	mov	r6, r1
 800c9be:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c9c2:	42ab      	cmp	r3, r5
 800c9c4:	d1f7      	bne.n	800c9b6 <__strtok_r+0x32>
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d0f3      	beq.n	800c9b2 <__strtok_r+0x2e>
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c9d0:	6014      	str	r4, [r2, #0]
 800c9d2:	e7ed      	b.n	800c9b0 <__strtok_r+0x2c>

0800c9d4 <_close_r>:
 800c9d4:	b538      	push	{r3, r4, r5, lr}
 800c9d6:	4d06      	ldr	r5, [pc, #24]	@ (800c9f0 <_close_r+0x1c>)
 800c9d8:	2300      	movs	r3, #0
 800c9da:	4604      	mov	r4, r0
 800c9dc:	4608      	mov	r0, r1
 800c9de:	602b      	str	r3, [r5, #0]
 800c9e0:	f7f5 ff82 	bl	80028e8 <_close>
 800c9e4:	1c43      	adds	r3, r0, #1
 800c9e6:	d102      	bne.n	800c9ee <_close_r+0x1a>
 800c9e8:	682b      	ldr	r3, [r5, #0]
 800c9ea:	b103      	cbz	r3, 800c9ee <_close_r+0x1a>
 800c9ec:	6023      	str	r3, [r4, #0]
 800c9ee:	bd38      	pop	{r3, r4, r5, pc}
 800c9f0:	20006918 	.word	0x20006918

0800c9f4 <_lseek_r>:
 800c9f4:	b538      	push	{r3, r4, r5, lr}
 800c9f6:	4d07      	ldr	r5, [pc, #28]	@ (800ca14 <_lseek_r+0x20>)
 800c9f8:	4604      	mov	r4, r0
 800c9fa:	4608      	mov	r0, r1
 800c9fc:	4611      	mov	r1, r2
 800c9fe:	2200      	movs	r2, #0
 800ca00:	602a      	str	r2, [r5, #0]
 800ca02:	461a      	mov	r2, r3
 800ca04:	f7f5 ff97 	bl	8002936 <_lseek>
 800ca08:	1c43      	adds	r3, r0, #1
 800ca0a:	d102      	bne.n	800ca12 <_lseek_r+0x1e>
 800ca0c:	682b      	ldr	r3, [r5, #0]
 800ca0e:	b103      	cbz	r3, 800ca12 <_lseek_r+0x1e>
 800ca10:	6023      	str	r3, [r4, #0]
 800ca12:	bd38      	pop	{r3, r4, r5, pc}
 800ca14:	20006918 	.word	0x20006918

0800ca18 <_read_r>:
 800ca18:	b538      	push	{r3, r4, r5, lr}
 800ca1a:	4d07      	ldr	r5, [pc, #28]	@ (800ca38 <_read_r+0x20>)
 800ca1c:	4604      	mov	r4, r0
 800ca1e:	4608      	mov	r0, r1
 800ca20:	4611      	mov	r1, r2
 800ca22:	2200      	movs	r2, #0
 800ca24:	602a      	str	r2, [r5, #0]
 800ca26:	461a      	mov	r2, r3
 800ca28:	f7f5 ff25 	bl	8002876 <_read>
 800ca2c:	1c43      	adds	r3, r0, #1
 800ca2e:	d102      	bne.n	800ca36 <_read_r+0x1e>
 800ca30:	682b      	ldr	r3, [r5, #0]
 800ca32:	b103      	cbz	r3, 800ca36 <_read_r+0x1e>
 800ca34:	6023      	str	r3, [r4, #0]
 800ca36:	bd38      	pop	{r3, r4, r5, pc}
 800ca38:	20006918 	.word	0x20006918

0800ca3c <_write_r>:
 800ca3c:	b538      	push	{r3, r4, r5, lr}
 800ca3e:	4d07      	ldr	r5, [pc, #28]	@ (800ca5c <_write_r+0x20>)
 800ca40:	4604      	mov	r4, r0
 800ca42:	4608      	mov	r0, r1
 800ca44:	4611      	mov	r1, r2
 800ca46:	2200      	movs	r2, #0
 800ca48:	602a      	str	r2, [r5, #0]
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	f7f5 ff30 	bl	80028b0 <_write>
 800ca50:	1c43      	adds	r3, r0, #1
 800ca52:	d102      	bne.n	800ca5a <_write_r+0x1e>
 800ca54:	682b      	ldr	r3, [r5, #0]
 800ca56:	b103      	cbz	r3, 800ca5a <_write_r+0x1e>
 800ca58:	6023      	str	r3, [r4, #0]
 800ca5a:	bd38      	pop	{r3, r4, r5, pc}
 800ca5c:	20006918 	.word	0x20006918

0800ca60 <__errno>:
 800ca60:	4b01      	ldr	r3, [pc, #4]	@ (800ca68 <__errno+0x8>)
 800ca62:	6818      	ldr	r0, [r3, #0]
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	20000034 	.word	0x20000034

0800ca6c <__libc_init_array>:
 800ca6c:	b570      	push	{r4, r5, r6, lr}
 800ca6e:	4d0d      	ldr	r5, [pc, #52]	@ (800caa4 <__libc_init_array+0x38>)
 800ca70:	4c0d      	ldr	r4, [pc, #52]	@ (800caa8 <__libc_init_array+0x3c>)
 800ca72:	1b64      	subs	r4, r4, r5
 800ca74:	10a4      	asrs	r4, r4, #2
 800ca76:	2600      	movs	r6, #0
 800ca78:	42a6      	cmp	r6, r4
 800ca7a:	d109      	bne.n	800ca90 <__libc_init_array+0x24>
 800ca7c:	4d0b      	ldr	r5, [pc, #44]	@ (800caac <__libc_init_array+0x40>)
 800ca7e:	4c0c      	ldr	r4, [pc, #48]	@ (800cab0 <__libc_init_array+0x44>)
 800ca80:	f000 ffd6 	bl	800da30 <_init>
 800ca84:	1b64      	subs	r4, r4, r5
 800ca86:	10a4      	asrs	r4, r4, #2
 800ca88:	2600      	movs	r6, #0
 800ca8a:	42a6      	cmp	r6, r4
 800ca8c:	d105      	bne.n	800ca9a <__libc_init_array+0x2e>
 800ca8e:	bd70      	pop	{r4, r5, r6, pc}
 800ca90:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca94:	4798      	blx	r3
 800ca96:	3601      	adds	r6, #1
 800ca98:	e7ee      	b.n	800ca78 <__libc_init_array+0xc>
 800ca9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca9e:	4798      	blx	r3
 800caa0:	3601      	adds	r6, #1
 800caa2:	e7f2      	b.n	800ca8a <__libc_init_array+0x1e>
 800caa4:	080106b8 	.word	0x080106b8
 800caa8:	080106b8 	.word	0x080106b8
 800caac:	080106b8 	.word	0x080106b8
 800cab0:	080106bc 	.word	0x080106bc

0800cab4 <__retarget_lock_init_recursive>:
 800cab4:	4770      	bx	lr

0800cab6 <__retarget_lock_acquire_recursive>:
 800cab6:	4770      	bx	lr

0800cab8 <__retarget_lock_release_recursive>:
 800cab8:	4770      	bx	lr

0800caba <memcpy>:
 800caba:	440a      	add	r2, r1
 800cabc:	4291      	cmp	r1, r2
 800cabe:	f100 33ff 	add.w	r3, r0, #4294967295
 800cac2:	d100      	bne.n	800cac6 <memcpy+0xc>
 800cac4:	4770      	bx	lr
 800cac6:	b510      	push	{r4, lr}
 800cac8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cacc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cad0:	4291      	cmp	r1, r2
 800cad2:	d1f9      	bne.n	800cac8 <memcpy+0xe>
 800cad4:	bd10      	pop	{r4, pc}
	...

0800cad8 <__assert_func>:
 800cad8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cada:	4614      	mov	r4, r2
 800cadc:	461a      	mov	r2, r3
 800cade:	4b09      	ldr	r3, [pc, #36]	@ (800cb04 <__assert_func+0x2c>)
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	4605      	mov	r5, r0
 800cae4:	68d8      	ldr	r0, [r3, #12]
 800cae6:	b954      	cbnz	r4, 800cafe <__assert_func+0x26>
 800cae8:	4b07      	ldr	r3, [pc, #28]	@ (800cb08 <__assert_func+0x30>)
 800caea:	461c      	mov	r4, r3
 800caec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800caf0:	9100      	str	r1, [sp, #0]
 800caf2:	462b      	mov	r3, r5
 800caf4:	4905      	ldr	r1, [pc, #20]	@ (800cb0c <__assert_func+0x34>)
 800caf6:	f000 fc9f 	bl	800d438 <fiprintf>
 800cafa:	f000 fcbf 	bl	800d47c <abort>
 800cafe:	4b04      	ldr	r3, [pc, #16]	@ (800cb10 <__assert_func+0x38>)
 800cb00:	e7f4      	b.n	800caec <__assert_func+0x14>
 800cb02:	bf00      	nop
 800cb04:	20000034 	.word	0x20000034
 800cb08:	0801067c 	.word	0x0801067c
 800cb0c:	0801064e 	.word	0x0801064e
 800cb10:	08010641 	.word	0x08010641

0800cb14 <_free_r>:
 800cb14:	b538      	push	{r3, r4, r5, lr}
 800cb16:	4605      	mov	r5, r0
 800cb18:	2900      	cmp	r1, #0
 800cb1a:	d041      	beq.n	800cba0 <_free_r+0x8c>
 800cb1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb20:	1f0c      	subs	r4, r1, #4
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	bfb8      	it	lt
 800cb26:	18e4      	addlt	r4, r4, r3
 800cb28:	f000 f8e8 	bl	800ccfc <__malloc_lock>
 800cb2c:	4a1d      	ldr	r2, [pc, #116]	@ (800cba4 <_free_r+0x90>)
 800cb2e:	6813      	ldr	r3, [r2, #0]
 800cb30:	b933      	cbnz	r3, 800cb40 <_free_r+0x2c>
 800cb32:	6063      	str	r3, [r4, #4]
 800cb34:	6014      	str	r4, [r2, #0]
 800cb36:	4628      	mov	r0, r5
 800cb38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb3c:	f000 b8e4 	b.w	800cd08 <__malloc_unlock>
 800cb40:	42a3      	cmp	r3, r4
 800cb42:	d908      	bls.n	800cb56 <_free_r+0x42>
 800cb44:	6820      	ldr	r0, [r4, #0]
 800cb46:	1821      	adds	r1, r4, r0
 800cb48:	428b      	cmp	r3, r1
 800cb4a:	bf01      	itttt	eq
 800cb4c:	6819      	ldreq	r1, [r3, #0]
 800cb4e:	685b      	ldreq	r3, [r3, #4]
 800cb50:	1809      	addeq	r1, r1, r0
 800cb52:	6021      	streq	r1, [r4, #0]
 800cb54:	e7ed      	b.n	800cb32 <_free_r+0x1e>
 800cb56:	461a      	mov	r2, r3
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	b10b      	cbz	r3, 800cb60 <_free_r+0x4c>
 800cb5c:	42a3      	cmp	r3, r4
 800cb5e:	d9fa      	bls.n	800cb56 <_free_r+0x42>
 800cb60:	6811      	ldr	r1, [r2, #0]
 800cb62:	1850      	adds	r0, r2, r1
 800cb64:	42a0      	cmp	r0, r4
 800cb66:	d10b      	bne.n	800cb80 <_free_r+0x6c>
 800cb68:	6820      	ldr	r0, [r4, #0]
 800cb6a:	4401      	add	r1, r0
 800cb6c:	1850      	adds	r0, r2, r1
 800cb6e:	4283      	cmp	r3, r0
 800cb70:	6011      	str	r1, [r2, #0]
 800cb72:	d1e0      	bne.n	800cb36 <_free_r+0x22>
 800cb74:	6818      	ldr	r0, [r3, #0]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	6053      	str	r3, [r2, #4]
 800cb7a:	4408      	add	r0, r1
 800cb7c:	6010      	str	r0, [r2, #0]
 800cb7e:	e7da      	b.n	800cb36 <_free_r+0x22>
 800cb80:	d902      	bls.n	800cb88 <_free_r+0x74>
 800cb82:	230c      	movs	r3, #12
 800cb84:	602b      	str	r3, [r5, #0]
 800cb86:	e7d6      	b.n	800cb36 <_free_r+0x22>
 800cb88:	6820      	ldr	r0, [r4, #0]
 800cb8a:	1821      	adds	r1, r4, r0
 800cb8c:	428b      	cmp	r3, r1
 800cb8e:	bf04      	itt	eq
 800cb90:	6819      	ldreq	r1, [r3, #0]
 800cb92:	685b      	ldreq	r3, [r3, #4]
 800cb94:	6063      	str	r3, [r4, #4]
 800cb96:	bf04      	itt	eq
 800cb98:	1809      	addeq	r1, r1, r0
 800cb9a:	6021      	streq	r1, [r4, #0]
 800cb9c:	6054      	str	r4, [r2, #4]
 800cb9e:	e7ca      	b.n	800cb36 <_free_r+0x22>
 800cba0:	bd38      	pop	{r3, r4, r5, pc}
 800cba2:	bf00      	nop
 800cba4:	20006924 	.word	0x20006924

0800cba8 <malloc>:
 800cba8:	4b02      	ldr	r3, [pc, #8]	@ (800cbb4 <malloc+0xc>)
 800cbaa:	4601      	mov	r1, r0
 800cbac:	6818      	ldr	r0, [r3, #0]
 800cbae:	f000 b825 	b.w	800cbfc <_malloc_r>
 800cbb2:	bf00      	nop
 800cbb4:	20000034 	.word	0x20000034

0800cbb8 <sbrk_aligned>:
 800cbb8:	b570      	push	{r4, r5, r6, lr}
 800cbba:	4e0f      	ldr	r6, [pc, #60]	@ (800cbf8 <sbrk_aligned+0x40>)
 800cbbc:	460c      	mov	r4, r1
 800cbbe:	6831      	ldr	r1, [r6, #0]
 800cbc0:	4605      	mov	r5, r0
 800cbc2:	b911      	cbnz	r1, 800cbca <sbrk_aligned+0x12>
 800cbc4:	f000 fc4a 	bl	800d45c <_sbrk_r>
 800cbc8:	6030      	str	r0, [r6, #0]
 800cbca:	4621      	mov	r1, r4
 800cbcc:	4628      	mov	r0, r5
 800cbce:	f000 fc45 	bl	800d45c <_sbrk_r>
 800cbd2:	1c43      	adds	r3, r0, #1
 800cbd4:	d103      	bne.n	800cbde <sbrk_aligned+0x26>
 800cbd6:	f04f 34ff 	mov.w	r4, #4294967295
 800cbda:	4620      	mov	r0, r4
 800cbdc:	bd70      	pop	{r4, r5, r6, pc}
 800cbde:	1cc4      	adds	r4, r0, #3
 800cbe0:	f024 0403 	bic.w	r4, r4, #3
 800cbe4:	42a0      	cmp	r0, r4
 800cbe6:	d0f8      	beq.n	800cbda <sbrk_aligned+0x22>
 800cbe8:	1a21      	subs	r1, r4, r0
 800cbea:	4628      	mov	r0, r5
 800cbec:	f000 fc36 	bl	800d45c <_sbrk_r>
 800cbf0:	3001      	adds	r0, #1
 800cbf2:	d1f2      	bne.n	800cbda <sbrk_aligned+0x22>
 800cbf4:	e7ef      	b.n	800cbd6 <sbrk_aligned+0x1e>
 800cbf6:	bf00      	nop
 800cbf8:	20006920 	.word	0x20006920

0800cbfc <_malloc_r>:
 800cbfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc00:	1ccd      	adds	r5, r1, #3
 800cc02:	f025 0503 	bic.w	r5, r5, #3
 800cc06:	3508      	adds	r5, #8
 800cc08:	2d0c      	cmp	r5, #12
 800cc0a:	bf38      	it	cc
 800cc0c:	250c      	movcc	r5, #12
 800cc0e:	2d00      	cmp	r5, #0
 800cc10:	4606      	mov	r6, r0
 800cc12:	db01      	blt.n	800cc18 <_malloc_r+0x1c>
 800cc14:	42a9      	cmp	r1, r5
 800cc16:	d904      	bls.n	800cc22 <_malloc_r+0x26>
 800cc18:	230c      	movs	r3, #12
 800cc1a:	6033      	str	r3, [r6, #0]
 800cc1c:	2000      	movs	r0, #0
 800cc1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ccf8 <_malloc_r+0xfc>
 800cc26:	f000 f869 	bl	800ccfc <__malloc_lock>
 800cc2a:	f8d8 3000 	ldr.w	r3, [r8]
 800cc2e:	461c      	mov	r4, r3
 800cc30:	bb44      	cbnz	r4, 800cc84 <_malloc_r+0x88>
 800cc32:	4629      	mov	r1, r5
 800cc34:	4630      	mov	r0, r6
 800cc36:	f7ff ffbf 	bl	800cbb8 <sbrk_aligned>
 800cc3a:	1c43      	adds	r3, r0, #1
 800cc3c:	4604      	mov	r4, r0
 800cc3e:	d158      	bne.n	800ccf2 <_malloc_r+0xf6>
 800cc40:	f8d8 4000 	ldr.w	r4, [r8]
 800cc44:	4627      	mov	r7, r4
 800cc46:	2f00      	cmp	r7, #0
 800cc48:	d143      	bne.n	800ccd2 <_malloc_r+0xd6>
 800cc4a:	2c00      	cmp	r4, #0
 800cc4c:	d04b      	beq.n	800cce6 <_malloc_r+0xea>
 800cc4e:	6823      	ldr	r3, [r4, #0]
 800cc50:	4639      	mov	r1, r7
 800cc52:	4630      	mov	r0, r6
 800cc54:	eb04 0903 	add.w	r9, r4, r3
 800cc58:	f000 fc00 	bl	800d45c <_sbrk_r>
 800cc5c:	4581      	cmp	r9, r0
 800cc5e:	d142      	bne.n	800cce6 <_malloc_r+0xea>
 800cc60:	6821      	ldr	r1, [r4, #0]
 800cc62:	1a6d      	subs	r5, r5, r1
 800cc64:	4629      	mov	r1, r5
 800cc66:	4630      	mov	r0, r6
 800cc68:	f7ff ffa6 	bl	800cbb8 <sbrk_aligned>
 800cc6c:	3001      	adds	r0, #1
 800cc6e:	d03a      	beq.n	800cce6 <_malloc_r+0xea>
 800cc70:	6823      	ldr	r3, [r4, #0]
 800cc72:	442b      	add	r3, r5
 800cc74:	6023      	str	r3, [r4, #0]
 800cc76:	f8d8 3000 	ldr.w	r3, [r8]
 800cc7a:	685a      	ldr	r2, [r3, #4]
 800cc7c:	bb62      	cbnz	r2, 800ccd8 <_malloc_r+0xdc>
 800cc7e:	f8c8 7000 	str.w	r7, [r8]
 800cc82:	e00f      	b.n	800cca4 <_malloc_r+0xa8>
 800cc84:	6822      	ldr	r2, [r4, #0]
 800cc86:	1b52      	subs	r2, r2, r5
 800cc88:	d420      	bmi.n	800cccc <_malloc_r+0xd0>
 800cc8a:	2a0b      	cmp	r2, #11
 800cc8c:	d917      	bls.n	800ccbe <_malloc_r+0xc2>
 800cc8e:	1961      	adds	r1, r4, r5
 800cc90:	42a3      	cmp	r3, r4
 800cc92:	6025      	str	r5, [r4, #0]
 800cc94:	bf18      	it	ne
 800cc96:	6059      	strne	r1, [r3, #4]
 800cc98:	6863      	ldr	r3, [r4, #4]
 800cc9a:	bf08      	it	eq
 800cc9c:	f8c8 1000 	streq.w	r1, [r8]
 800cca0:	5162      	str	r2, [r4, r5]
 800cca2:	604b      	str	r3, [r1, #4]
 800cca4:	4630      	mov	r0, r6
 800cca6:	f000 f82f 	bl	800cd08 <__malloc_unlock>
 800ccaa:	f104 000b 	add.w	r0, r4, #11
 800ccae:	1d23      	adds	r3, r4, #4
 800ccb0:	f020 0007 	bic.w	r0, r0, #7
 800ccb4:	1ac2      	subs	r2, r0, r3
 800ccb6:	bf1c      	itt	ne
 800ccb8:	1a1b      	subne	r3, r3, r0
 800ccba:	50a3      	strne	r3, [r4, r2]
 800ccbc:	e7af      	b.n	800cc1e <_malloc_r+0x22>
 800ccbe:	6862      	ldr	r2, [r4, #4]
 800ccc0:	42a3      	cmp	r3, r4
 800ccc2:	bf0c      	ite	eq
 800ccc4:	f8c8 2000 	streq.w	r2, [r8]
 800ccc8:	605a      	strne	r2, [r3, #4]
 800ccca:	e7eb      	b.n	800cca4 <_malloc_r+0xa8>
 800cccc:	4623      	mov	r3, r4
 800ccce:	6864      	ldr	r4, [r4, #4]
 800ccd0:	e7ae      	b.n	800cc30 <_malloc_r+0x34>
 800ccd2:	463c      	mov	r4, r7
 800ccd4:	687f      	ldr	r7, [r7, #4]
 800ccd6:	e7b6      	b.n	800cc46 <_malloc_r+0x4a>
 800ccd8:	461a      	mov	r2, r3
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	42a3      	cmp	r3, r4
 800ccde:	d1fb      	bne.n	800ccd8 <_malloc_r+0xdc>
 800cce0:	2300      	movs	r3, #0
 800cce2:	6053      	str	r3, [r2, #4]
 800cce4:	e7de      	b.n	800cca4 <_malloc_r+0xa8>
 800cce6:	230c      	movs	r3, #12
 800cce8:	6033      	str	r3, [r6, #0]
 800ccea:	4630      	mov	r0, r6
 800ccec:	f000 f80c 	bl	800cd08 <__malloc_unlock>
 800ccf0:	e794      	b.n	800cc1c <_malloc_r+0x20>
 800ccf2:	6005      	str	r5, [r0, #0]
 800ccf4:	e7d6      	b.n	800cca4 <_malloc_r+0xa8>
 800ccf6:	bf00      	nop
 800ccf8:	20006924 	.word	0x20006924

0800ccfc <__malloc_lock>:
 800ccfc:	4801      	ldr	r0, [pc, #4]	@ (800cd04 <__malloc_lock+0x8>)
 800ccfe:	f7ff beda 	b.w	800cab6 <__retarget_lock_acquire_recursive>
 800cd02:	bf00      	nop
 800cd04:	2000691c 	.word	0x2000691c

0800cd08 <__malloc_unlock>:
 800cd08:	4801      	ldr	r0, [pc, #4]	@ (800cd10 <__malloc_unlock+0x8>)
 800cd0a:	f7ff bed5 	b.w	800cab8 <__retarget_lock_release_recursive>
 800cd0e:	bf00      	nop
 800cd10:	2000691c 	.word	0x2000691c

0800cd14 <__ssputs_r>:
 800cd14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd18:	688e      	ldr	r6, [r1, #8]
 800cd1a:	461f      	mov	r7, r3
 800cd1c:	42be      	cmp	r6, r7
 800cd1e:	680b      	ldr	r3, [r1, #0]
 800cd20:	4682      	mov	sl, r0
 800cd22:	460c      	mov	r4, r1
 800cd24:	4690      	mov	r8, r2
 800cd26:	d82d      	bhi.n	800cd84 <__ssputs_r+0x70>
 800cd28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cd2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cd30:	d026      	beq.n	800cd80 <__ssputs_r+0x6c>
 800cd32:	6965      	ldr	r5, [r4, #20]
 800cd34:	6909      	ldr	r1, [r1, #16]
 800cd36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cd3a:	eba3 0901 	sub.w	r9, r3, r1
 800cd3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cd42:	1c7b      	adds	r3, r7, #1
 800cd44:	444b      	add	r3, r9
 800cd46:	106d      	asrs	r5, r5, #1
 800cd48:	429d      	cmp	r5, r3
 800cd4a:	bf38      	it	cc
 800cd4c:	461d      	movcc	r5, r3
 800cd4e:	0553      	lsls	r3, r2, #21
 800cd50:	d527      	bpl.n	800cda2 <__ssputs_r+0x8e>
 800cd52:	4629      	mov	r1, r5
 800cd54:	f7ff ff52 	bl	800cbfc <_malloc_r>
 800cd58:	4606      	mov	r6, r0
 800cd5a:	b360      	cbz	r0, 800cdb6 <__ssputs_r+0xa2>
 800cd5c:	6921      	ldr	r1, [r4, #16]
 800cd5e:	464a      	mov	r2, r9
 800cd60:	f7ff feab 	bl	800caba <memcpy>
 800cd64:	89a3      	ldrh	r3, [r4, #12]
 800cd66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cd6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cd6e:	81a3      	strh	r3, [r4, #12]
 800cd70:	6126      	str	r6, [r4, #16]
 800cd72:	6165      	str	r5, [r4, #20]
 800cd74:	444e      	add	r6, r9
 800cd76:	eba5 0509 	sub.w	r5, r5, r9
 800cd7a:	6026      	str	r6, [r4, #0]
 800cd7c:	60a5      	str	r5, [r4, #8]
 800cd7e:	463e      	mov	r6, r7
 800cd80:	42be      	cmp	r6, r7
 800cd82:	d900      	bls.n	800cd86 <__ssputs_r+0x72>
 800cd84:	463e      	mov	r6, r7
 800cd86:	6820      	ldr	r0, [r4, #0]
 800cd88:	4632      	mov	r2, r6
 800cd8a:	4641      	mov	r1, r8
 800cd8c:	f7ff fd95 	bl	800c8ba <memmove>
 800cd90:	68a3      	ldr	r3, [r4, #8]
 800cd92:	1b9b      	subs	r3, r3, r6
 800cd94:	60a3      	str	r3, [r4, #8]
 800cd96:	6823      	ldr	r3, [r4, #0]
 800cd98:	4433      	add	r3, r6
 800cd9a:	6023      	str	r3, [r4, #0]
 800cd9c:	2000      	movs	r0, #0
 800cd9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cda2:	462a      	mov	r2, r5
 800cda4:	f000 fb71 	bl	800d48a <_realloc_r>
 800cda8:	4606      	mov	r6, r0
 800cdaa:	2800      	cmp	r0, #0
 800cdac:	d1e0      	bne.n	800cd70 <__ssputs_r+0x5c>
 800cdae:	6921      	ldr	r1, [r4, #16]
 800cdb0:	4650      	mov	r0, sl
 800cdb2:	f7ff feaf 	bl	800cb14 <_free_r>
 800cdb6:	230c      	movs	r3, #12
 800cdb8:	f8ca 3000 	str.w	r3, [sl]
 800cdbc:	89a3      	ldrh	r3, [r4, #12]
 800cdbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdc2:	81a3      	strh	r3, [r4, #12]
 800cdc4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc8:	e7e9      	b.n	800cd9e <__ssputs_r+0x8a>
	...

0800cdcc <_svfiprintf_r>:
 800cdcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdd0:	4698      	mov	r8, r3
 800cdd2:	898b      	ldrh	r3, [r1, #12]
 800cdd4:	061b      	lsls	r3, r3, #24
 800cdd6:	b09d      	sub	sp, #116	@ 0x74
 800cdd8:	4607      	mov	r7, r0
 800cdda:	460d      	mov	r5, r1
 800cddc:	4614      	mov	r4, r2
 800cdde:	d510      	bpl.n	800ce02 <_svfiprintf_r+0x36>
 800cde0:	690b      	ldr	r3, [r1, #16]
 800cde2:	b973      	cbnz	r3, 800ce02 <_svfiprintf_r+0x36>
 800cde4:	2140      	movs	r1, #64	@ 0x40
 800cde6:	f7ff ff09 	bl	800cbfc <_malloc_r>
 800cdea:	6028      	str	r0, [r5, #0]
 800cdec:	6128      	str	r0, [r5, #16]
 800cdee:	b930      	cbnz	r0, 800cdfe <_svfiprintf_r+0x32>
 800cdf0:	230c      	movs	r3, #12
 800cdf2:	603b      	str	r3, [r7, #0]
 800cdf4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf8:	b01d      	add	sp, #116	@ 0x74
 800cdfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdfe:	2340      	movs	r3, #64	@ 0x40
 800ce00:	616b      	str	r3, [r5, #20]
 800ce02:	2300      	movs	r3, #0
 800ce04:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce06:	2320      	movs	r3, #32
 800ce08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce10:	2330      	movs	r3, #48	@ 0x30
 800ce12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cfb0 <_svfiprintf_r+0x1e4>
 800ce16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce1a:	f04f 0901 	mov.w	r9, #1
 800ce1e:	4623      	mov	r3, r4
 800ce20:	469a      	mov	sl, r3
 800ce22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce26:	b10a      	cbz	r2, 800ce2c <_svfiprintf_r+0x60>
 800ce28:	2a25      	cmp	r2, #37	@ 0x25
 800ce2a:	d1f9      	bne.n	800ce20 <_svfiprintf_r+0x54>
 800ce2c:	ebba 0b04 	subs.w	fp, sl, r4
 800ce30:	d00b      	beq.n	800ce4a <_svfiprintf_r+0x7e>
 800ce32:	465b      	mov	r3, fp
 800ce34:	4622      	mov	r2, r4
 800ce36:	4629      	mov	r1, r5
 800ce38:	4638      	mov	r0, r7
 800ce3a:	f7ff ff6b 	bl	800cd14 <__ssputs_r>
 800ce3e:	3001      	adds	r0, #1
 800ce40:	f000 80a7 	beq.w	800cf92 <_svfiprintf_r+0x1c6>
 800ce44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce46:	445a      	add	r2, fp
 800ce48:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	f000 809f 	beq.w	800cf92 <_svfiprintf_r+0x1c6>
 800ce54:	2300      	movs	r3, #0
 800ce56:	f04f 32ff 	mov.w	r2, #4294967295
 800ce5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce5e:	f10a 0a01 	add.w	sl, sl, #1
 800ce62:	9304      	str	r3, [sp, #16]
 800ce64:	9307      	str	r3, [sp, #28]
 800ce66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce6a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce6c:	4654      	mov	r4, sl
 800ce6e:	2205      	movs	r2, #5
 800ce70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce74:	484e      	ldr	r0, [pc, #312]	@ (800cfb0 <_svfiprintf_r+0x1e4>)
 800ce76:	f7f3 f9cb 	bl	8000210 <memchr>
 800ce7a:	9a04      	ldr	r2, [sp, #16]
 800ce7c:	b9d8      	cbnz	r0, 800ceb6 <_svfiprintf_r+0xea>
 800ce7e:	06d0      	lsls	r0, r2, #27
 800ce80:	bf44      	itt	mi
 800ce82:	2320      	movmi	r3, #32
 800ce84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce88:	0711      	lsls	r1, r2, #28
 800ce8a:	bf44      	itt	mi
 800ce8c:	232b      	movmi	r3, #43	@ 0x2b
 800ce8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce92:	f89a 3000 	ldrb.w	r3, [sl]
 800ce96:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce98:	d015      	beq.n	800cec6 <_svfiprintf_r+0xfa>
 800ce9a:	9a07      	ldr	r2, [sp, #28]
 800ce9c:	4654      	mov	r4, sl
 800ce9e:	2000      	movs	r0, #0
 800cea0:	f04f 0c0a 	mov.w	ip, #10
 800cea4:	4621      	mov	r1, r4
 800cea6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ceaa:	3b30      	subs	r3, #48	@ 0x30
 800ceac:	2b09      	cmp	r3, #9
 800ceae:	d94b      	bls.n	800cf48 <_svfiprintf_r+0x17c>
 800ceb0:	b1b0      	cbz	r0, 800cee0 <_svfiprintf_r+0x114>
 800ceb2:	9207      	str	r2, [sp, #28]
 800ceb4:	e014      	b.n	800cee0 <_svfiprintf_r+0x114>
 800ceb6:	eba0 0308 	sub.w	r3, r0, r8
 800ceba:	fa09 f303 	lsl.w	r3, r9, r3
 800cebe:	4313      	orrs	r3, r2
 800cec0:	9304      	str	r3, [sp, #16]
 800cec2:	46a2      	mov	sl, r4
 800cec4:	e7d2      	b.n	800ce6c <_svfiprintf_r+0xa0>
 800cec6:	9b03      	ldr	r3, [sp, #12]
 800cec8:	1d19      	adds	r1, r3, #4
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	9103      	str	r1, [sp, #12]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	bfbb      	ittet	lt
 800ced2:	425b      	neglt	r3, r3
 800ced4:	f042 0202 	orrlt.w	r2, r2, #2
 800ced8:	9307      	strge	r3, [sp, #28]
 800ceda:	9307      	strlt	r3, [sp, #28]
 800cedc:	bfb8      	it	lt
 800cede:	9204      	strlt	r2, [sp, #16]
 800cee0:	7823      	ldrb	r3, [r4, #0]
 800cee2:	2b2e      	cmp	r3, #46	@ 0x2e
 800cee4:	d10a      	bne.n	800cefc <_svfiprintf_r+0x130>
 800cee6:	7863      	ldrb	r3, [r4, #1]
 800cee8:	2b2a      	cmp	r3, #42	@ 0x2a
 800ceea:	d132      	bne.n	800cf52 <_svfiprintf_r+0x186>
 800ceec:	9b03      	ldr	r3, [sp, #12]
 800ceee:	1d1a      	adds	r2, r3, #4
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	9203      	str	r2, [sp, #12]
 800cef4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cef8:	3402      	adds	r4, #2
 800cefa:	9305      	str	r3, [sp, #20]
 800cefc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cfc0 <_svfiprintf_r+0x1f4>
 800cf00:	7821      	ldrb	r1, [r4, #0]
 800cf02:	2203      	movs	r2, #3
 800cf04:	4650      	mov	r0, sl
 800cf06:	f7f3 f983 	bl	8000210 <memchr>
 800cf0a:	b138      	cbz	r0, 800cf1c <_svfiprintf_r+0x150>
 800cf0c:	9b04      	ldr	r3, [sp, #16]
 800cf0e:	eba0 000a 	sub.w	r0, r0, sl
 800cf12:	2240      	movs	r2, #64	@ 0x40
 800cf14:	4082      	lsls	r2, r0
 800cf16:	4313      	orrs	r3, r2
 800cf18:	3401      	adds	r4, #1
 800cf1a:	9304      	str	r3, [sp, #16]
 800cf1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf20:	4824      	ldr	r0, [pc, #144]	@ (800cfb4 <_svfiprintf_r+0x1e8>)
 800cf22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf26:	2206      	movs	r2, #6
 800cf28:	f7f3 f972 	bl	8000210 <memchr>
 800cf2c:	2800      	cmp	r0, #0
 800cf2e:	d036      	beq.n	800cf9e <_svfiprintf_r+0x1d2>
 800cf30:	4b21      	ldr	r3, [pc, #132]	@ (800cfb8 <_svfiprintf_r+0x1ec>)
 800cf32:	bb1b      	cbnz	r3, 800cf7c <_svfiprintf_r+0x1b0>
 800cf34:	9b03      	ldr	r3, [sp, #12]
 800cf36:	3307      	adds	r3, #7
 800cf38:	f023 0307 	bic.w	r3, r3, #7
 800cf3c:	3308      	adds	r3, #8
 800cf3e:	9303      	str	r3, [sp, #12]
 800cf40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf42:	4433      	add	r3, r6
 800cf44:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf46:	e76a      	b.n	800ce1e <_svfiprintf_r+0x52>
 800cf48:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf4c:	460c      	mov	r4, r1
 800cf4e:	2001      	movs	r0, #1
 800cf50:	e7a8      	b.n	800cea4 <_svfiprintf_r+0xd8>
 800cf52:	2300      	movs	r3, #0
 800cf54:	3401      	adds	r4, #1
 800cf56:	9305      	str	r3, [sp, #20]
 800cf58:	4619      	mov	r1, r3
 800cf5a:	f04f 0c0a 	mov.w	ip, #10
 800cf5e:	4620      	mov	r0, r4
 800cf60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf64:	3a30      	subs	r2, #48	@ 0x30
 800cf66:	2a09      	cmp	r2, #9
 800cf68:	d903      	bls.n	800cf72 <_svfiprintf_r+0x1a6>
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d0c6      	beq.n	800cefc <_svfiprintf_r+0x130>
 800cf6e:	9105      	str	r1, [sp, #20]
 800cf70:	e7c4      	b.n	800cefc <_svfiprintf_r+0x130>
 800cf72:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf76:	4604      	mov	r4, r0
 800cf78:	2301      	movs	r3, #1
 800cf7a:	e7f0      	b.n	800cf5e <_svfiprintf_r+0x192>
 800cf7c:	ab03      	add	r3, sp, #12
 800cf7e:	9300      	str	r3, [sp, #0]
 800cf80:	462a      	mov	r2, r5
 800cf82:	4b0e      	ldr	r3, [pc, #56]	@ (800cfbc <_svfiprintf_r+0x1f0>)
 800cf84:	a904      	add	r1, sp, #16
 800cf86:	4638      	mov	r0, r7
 800cf88:	f3af 8000 	nop.w
 800cf8c:	1c42      	adds	r2, r0, #1
 800cf8e:	4606      	mov	r6, r0
 800cf90:	d1d6      	bne.n	800cf40 <_svfiprintf_r+0x174>
 800cf92:	89ab      	ldrh	r3, [r5, #12]
 800cf94:	065b      	lsls	r3, r3, #25
 800cf96:	f53f af2d 	bmi.w	800cdf4 <_svfiprintf_r+0x28>
 800cf9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf9c:	e72c      	b.n	800cdf8 <_svfiprintf_r+0x2c>
 800cf9e:	ab03      	add	r3, sp, #12
 800cfa0:	9300      	str	r3, [sp, #0]
 800cfa2:	462a      	mov	r2, r5
 800cfa4:	4b05      	ldr	r3, [pc, #20]	@ (800cfbc <_svfiprintf_r+0x1f0>)
 800cfa6:	a904      	add	r1, sp, #16
 800cfa8:	4638      	mov	r0, r7
 800cfaa:	f000 f879 	bl	800d0a0 <_printf_i>
 800cfae:	e7ed      	b.n	800cf8c <_svfiprintf_r+0x1c0>
 800cfb0:	0801067d 	.word	0x0801067d
 800cfb4:	08010687 	.word	0x08010687
 800cfb8:	00000000 	.word	0x00000000
 800cfbc:	0800cd15 	.word	0x0800cd15
 800cfc0:	08010683 	.word	0x08010683

0800cfc4 <_printf_common>:
 800cfc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfc8:	4616      	mov	r6, r2
 800cfca:	4698      	mov	r8, r3
 800cfcc:	688a      	ldr	r2, [r1, #8]
 800cfce:	690b      	ldr	r3, [r1, #16]
 800cfd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800cfd4:	4293      	cmp	r3, r2
 800cfd6:	bfb8      	it	lt
 800cfd8:	4613      	movlt	r3, r2
 800cfda:	6033      	str	r3, [r6, #0]
 800cfdc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800cfe0:	4607      	mov	r7, r0
 800cfe2:	460c      	mov	r4, r1
 800cfe4:	b10a      	cbz	r2, 800cfea <_printf_common+0x26>
 800cfe6:	3301      	adds	r3, #1
 800cfe8:	6033      	str	r3, [r6, #0]
 800cfea:	6823      	ldr	r3, [r4, #0]
 800cfec:	0699      	lsls	r1, r3, #26
 800cfee:	bf42      	ittt	mi
 800cff0:	6833      	ldrmi	r3, [r6, #0]
 800cff2:	3302      	addmi	r3, #2
 800cff4:	6033      	strmi	r3, [r6, #0]
 800cff6:	6825      	ldr	r5, [r4, #0]
 800cff8:	f015 0506 	ands.w	r5, r5, #6
 800cffc:	d106      	bne.n	800d00c <_printf_common+0x48>
 800cffe:	f104 0a19 	add.w	sl, r4, #25
 800d002:	68e3      	ldr	r3, [r4, #12]
 800d004:	6832      	ldr	r2, [r6, #0]
 800d006:	1a9b      	subs	r3, r3, r2
 800d008:	42ab      	cmp	r3, r5
 800d00a:	dc26      	bgt.n	800d05a <_printf_common+0x96>
 800d00c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d010:	6822      	ldr	r2, [r4, #0]
 800d012:	3b00      	subs	r3, #0
 800d014:	bf18      	it	ne
 800d016:	2301      	movne	r3, #1
 800d018:	0692      	lsls	r2, r2, #26
 800d01a:	d42b      	bmi.n	800d074 <_printf_common+0xb0>
 800d01c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d020:	4641      	mov	r1, r8
 800d022:	4638      	mov	r0, r7
 800d024:	47c8      	blx	r9
 800d026:	3001      	adds	r0, #1
 800d028:	d01e      	beq.n	800d068 <_printf_common+0xa4>
 800d02a:	6823      	ldr	r3, [r4, #0]
 800d02c:	6922      	ldr	r2, [r4, #16]
 800d02e:	f003 0306 	and.w	r3, r3, #6
 800d032:	2b04      	cmp	r3, #4
 800d034:	bf02      	ittt	eq
 800d036:	68e5      	ldreq	r5, [r4, #12]
 800d038:	6833      	ldreq	r3, [r6, #0]
 800d03a:	1aed      	subeq	r5, r5, r3
 800d03c:	68a3      	ldr	r3, [r4, #8]
 800d03e:	bf0c      	ite	eq
 800d040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d044:	2500      	movne	r5, #0
 800d046:	4293      	cmp	r3, r2
 800d048:	bfc4      	itt	gt
 800d04a:	1a9b      	subgt	r3, r3, r2
 800d04c:	18ed      	addgt	r5, r5, r3
 800d04e:	2600      	movs	r6, #0
 800d050:	341a      	adds	r4, #26
 800d052:	42b5      	cmp	r5, r6
 800d054:	d11a      	bne.n	800d08c <_printf_common+0xc8>
 800d056:	2000      	movs	r0, #0
 800d058:	e008      	b.n	800d06c <_printf_common+0xa8>
 800d05a:	2301      	movs	r3, #1
 800d05c:	4652      	mov	r2, sl
 800d05e:	4641      	mov	r1, r8
 800d060:	4638      	mov	r0, r7
 800d062:	47c8      	blx	r9
 800d064:	3001      	adds	r0, #1
 800d066:	d103      	bne.n	800d070 <_printf_common+0xac>
 800d068:	f04f 30ff 	mov.w	r0, #4294967295
 800d06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d070:	3501      	adds	r5, #1
 800d072:	e7c6      	b.n	800d002 <_printf_common+0x3e>
 800d074:	18e1      	adds	r1, r4, r3
 800d076:	1c5a      	adds	r2, r3, #1
 800d078:	2030      	movs	r0, #48	@ 0x30
 800d07a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d07e:	4422      	add	r2, r4
 800d080:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d084:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d088:	3302      	adds	r3, #2
 800d08a:	e7c7      	b.n	800d01c <_printf_common+0x58>
 800d08c:	2301      	movs	r3, #1
 800d08e:	4622      	mov	r2, r4
 800d090:	4641      	mov	r1, r8
 800d092:	4638      	mov	r0, r7
 800d094:	47c8      	blx	r9
 800d096:	3001      	adds	r0, #1
 800d098:	d0e6      	beq.n	800d068 <_printf_common+0xa4>
 800d09a:	3601      	adds	r6, #1
 800d09c:	e7d9      	b.n	800d052 <_printf_common+0x8e>
	...

0800d0a0 <_printf_i>:
 800d0a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0a4:	7e0f      	ldrb	r7, [r1, #24]
 800d0a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d0a8:	2f78      	cmp	r7, #120	@ 0x78
 800d0aa:	4691      	mov	r9, r2
 800d0ac:	4680      	mov	r8, r0
 800d0ae:	460c      	mov	r4, r1
 800d0b0:	469a      	mov	sl, r3
 800d0b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d0b6:	d807      	bhi.n	800d0c8 <_printf_i+0x28>
 800d0b8:	2f62      	cmp	r7, #98	@ 0x62
 800d0ba:	d80a      	bhi.n	800d0d2 <_printf_i+0x32>
 800d0bc:	2f00      	cmp	r7, #0
 800d0be:	f000 80d2 	beq.w	800d266 <_printf_i+0x1c6>
 800d0c2:	2f58      	cmp	r7, #88	@ 0x58
 800d0c4:	f000 80b9 	beq.w	800d23a <_printf_i+0x19a>
 800d0c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d0cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d0d0:	e03a      	b.n	800d148 <_printf_i+0xa8>
 800d0d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d0d6:	2b15      	cmp	r3, #21
 800d0d8:	d8f6      	bhi.n	800d0c8 <_printf_i+0x28>
 800d0da:	a101      	add	r1, pc, #4	@ (adr r1, 800d0e0 <_printf_i+0x40>)
 800d0dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d0e0:	0800d139 	.word	0x0800d139
 800d0e4:	0800d14d 	.word	0x0800d14d
 800d0e8:	0800d0c9 	.word	0x0800d0c9
 800d0ec:	0800d0c9 	.word	0x0800d0c9
 800d0f0:	0800d0c9 	.word	0x0800d0c9
 800d0f4:	0800d0c9 	.word	0x0800d0c9
 800d0f8:	0800d14d 	.word	0x0800d14d
 800d0fc:	0800d0c9 	.word	0x0800d0c9
 800d100:	0800d0c9 	.word	0x0800d0c9
 800d104:	0800d0c9 	.word	0x0800d0c9
 800d108:	0800d0c9 	.word	0x0800d0c9
 800d10c:	0800d24d 	.word	0x0800d24d
 800d110:	0800d177 	.word	0x0800d177
 800d114:	0800d207 	.word	0x0800d207
 800d118:	0800d0c9 	.word	0x0800d0c9
 800d11c:	0800d0c9 	.word	0x0800d0c9
 800d120:	0800d26f 	.word	0x0800d26f
 800d124:	0800d0c9 	.word	0x0800d0c9
 800d128:	0800d177 	.word	0x0800d177
 800d12c:	0800d0c9 	.word	0x0800d0c9
 800d130:	0800d0c9 	.word	0x0800d0c9
 800d134:	0800d20f 	.word	0x0800d20f
 800d138:	6833      	ldr	r3, [r6, #0]
 800d13a:	1d1a      	adds	r2, r3, #4
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	6032      	str	r2, [r6, #0]
 800d140:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d144:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d148:	2301      	movs	r3, #1
 800d14a:	e09d      	b.n	800d288 <_printf_i+0x1e8>
 800d14c:	6833      	ldr	r3, [r6, #0]
 800d14e:	6820      	ldr	r0, [r4, #0]
 800d150:	1d19      	adds	r1, r3, #4
 800d152:	6031      	str	r1, [r6, #0]
 800d154:	0606      	lsls	r6, r0, #24
 800d156:	d501      	bpl.n	800d15c <_printf_i+0xbc>
 800d158:	681d      	ldr	r5, [r3, #0]
 800d15a:	e003      	b.n	800d164 <_printf_i+0xc4>
 800d15c:	0645      	lsls	r5, r0, #25
 800d15e:	d5fb      	bpl.n	800d158 <_printf_i+0xb8>
 800d160:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d164:	2d00      	cmp	r5, #0
 800d166:	da03      	bge.n	800d170 <_printf_i+0xd0>
 800d168:	232d      	movs	r3, #45	@ 0x2d
 800d16a:	426d      	negs	r5, r5
 800d16c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d170:	4859      	ldr	r0, [pc, #356]	@ (800d2d8 <_printf_i+0x238>)
 800d172:	230a      	movs	r3, #10
 800d174:	e011      	b.n	800d19a <_printf_i+0xfa>
 800d176:	6821      	ldr	r1, [r4, #0]
 800d178:	6833      	ldr	r3, [r6, #0]
 800d17a:	0608      	lsls	r0, r1, #24
 800d17c:	f853 5b04 	ldr.w	r5, [r3], #4
 800d180:	d402      	bmi.n	800d188 <_printf_i+0xe8>
 800d182:	0649      	lsls	r1, r1, #25
 800d184:	bf48      	it	mi
 800d186:	b2ad      	uxthmi	r5, r5
 800d188:	2f6f      	cmp	r7, #111	@ 0x6f
 800d18a:	4853      	ldr	r0, [pc, #332]	@ (800d2d8 <_printf_i+0x238>)
 800d18c:	6033      	str	r3, [r6, #0]
 800d18e:	bf14      	ite	ne
 800d190:	230a      	movne	r3, #10
 800d192:	2308      	moveq	r3, #8
 800d194:	2100      	movs	r1, #0
 800d196:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d19a:	6866      	ldr	r6, [r4, #4]
 800d19c:	60a6      	str	r6, [r4, #8]
 800d19e:	2e00      	cmp	r6, #0
 800d1a0:	bfa2      	ittt	ge
 800d1a2:	6821      	ldrge	r1, [r4, #0]
 800d1a4:	f021 0104 	bicge.w	r1, r1, #4
 800d1a8:	6021      	strge	r1, [r4, #0]
 800d1aa:	b90d      	cbnz	r5, 800d1b0 <_printf_i+0x110>
 800d1ac:	2e00      	cmp	r6, #0
 800d1ae:	d04b      	beq.n	800d248 <_printf_i+0x1a8>
 800d1b0:	4616      	mov	r6, r2
 800d1b2:	fbb5 f1f3 	udiv	r1, r5, r3
 800d1b6:	fb03 5711 	mls	r7, r3, r1, r5
 800d1ba:	5dc7      	ldrb	r7, [r0, r7]
 800d1bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d1c0:	462f      	mov	r7, r5
 800d1c2:	42bb      	cmp	r3, r7
 800d1c4:	460d      	mov	r5, r1
 800d1c6:	d9f4      	bls.n	800d1b2 <_printf_i+0x112>
 800d1c8:	2b08      	cmp	r3, #8
 800d1ca:	d10b      	bne.n	800d1e4 <_printf_i+0x144>
 800d1cc:	6823      	ldr	r3, [r4, #0]
 800d1ce:	07df      	lsls	r7, r3, #31
 800d1d0:	d508      	bpl.n	800d1e4 <_printf_i+0x144>
 800d1d2:	6923      	ldr	r3, [r4, #16]
 800d1d4:	6861      	ldr	r1, [r4, #4]
 800d1d6:	4299      	cmp	r1, r3
 800d1d8:	bfde      	ittt	le
 800d1da:	2330      	movle	r3, #48	@ 0x30
 800d1dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d1e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d1e4:	1b92      	subs	r2, r2, r6
 800d1e6:	6122      	str	r2, [r4, #16]
 800d1e8:	f8cd a000 	str.w	sl, [sp]
 800d1ec:	464b      	mov	r3, r9
 800d1ee:	aa03      	add	r2, sp, #12
 800d1f0:	4621      	mov	r1, r4
 800d1f2:	4640      	mov	r0, r8
 800d1f4:	f7ff fee6 	bl	800cfc4 <_printf_common>
 800d1f8:	3001      	adds	r0, #1
 800d1fa:	d14a      	bne.n	800d292 <_printf_i+0x1f2>
 800d1fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d200:	b004      	add	sp, #16
 800d202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d206:	6823      	ldr	r3, [r4, #0]
 800d208:	f043 0320 	orr.w	r3, r3, #32
 800d20c:	6023      	str	r3, [r4, #0]
 800d20e:	4833      	ldr	r0, [pc, #204]	@ (800d2dc <_printf_i+0x23c>)
 800d210:	2778      	movs	r7, #120	@ 0x78
 800d212:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d216:	6823      	ldr	r3, [r4, #0]
 800d218:	6831      	ldr	r1, [r6, #0]
 800d21a:	061f      	lsls	r7, r3, #24
 800d21c:	f851 5b04 	ldr.w	r5, [r1], #4
 800d220:	d402      	bmi.n	800d228 <_printf_i+0x188>
 800d222:	065f      	lsls	r7, r3, #25
 800d224:	bf48      	it	mi
 800d226:	b2ad      	uxthmi	r5, r5
 800d228:	6031      	str	r1, [r6, #0]
 800d22a:	07d9      	lsls	r1, r3, #31
 800d22c:	bf44      	itt	mi
 800d22e:	f043 0320 	orrmi.w	r3, r3, #32
 800d232:	6023      	strmi	r3, [r4, #0]
 800d234:	b11d      	cbz	r5, 800d23e <_printf_i+0x19e>
 800d236:	2310      	movs	r3, #16
 800d238:	e7ac      	b.n	800d194 <_printf_i+0xf4>
 800d23a:	4827      	ldr	r0, [pc, #156]	@ (800d2d8 <_printf_i+0x238>)
 800d23c:	e7e9      	b.n	800d212 <_printf_i+0x172>
 800d23e:	6823      	ldr	r3, [r4, #0]
 800d240:	f023 0320 	bic.w	r3, r3, #32
 800d244:	6023      	str	r3, [r4, #0]
 800d246:	e7f6      	b.n	800d236 <_printf_i+0x196>
 800d248:	4616      	mov	r6, r2
 800d24a:	e7bd      	b.n	800d1c8 <_printf_i+0x128>
 800d24c:	6833      	ldr	r3, [r6, #0]
 800d24e:	6825      	ldr	r5, [r4, #0]
 800d250:	6961      	ldr	r1, [r4, #20]
 800d252:	1d18      	adds	r0, r3, #4
 800d254:	6030      	str	r0, [r6, #0]
 800d256:	062e      	lsls	r6, r5, #24
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	d501      	bpl.n	800d260 <_printf_i+0x1c0>
 800d25c:	6019      	str	r1, [r3, #0]
 800d25e:	e002      	b.n	800d266 <_printf_i+0x1c6>
 800d260:	0668      	lsls	r0, r5, #25
 800d262:	d5fb      	bpl.n	800d25c <_printf_i+0x1bc>
 800d264:	8019      	strh	r1, [r3, #0]
 800d266:	2300      	movs	r3, #0
 800d268:	6123      	str	r3, [r4, #16]
 800d26a:	4616      	mov	r6, r2
 800d26c:	e7bc      	b.n	800d1e8 <_printf_i+0x148>
 800d26e:	6833      	ldr	r3, [r6, #0]
 800d270:	1d1a      	adds	r2, r3, #4
 800d272:	6032      	str	r2, [r6, #0]
 800d274:	681e      	ldr	r6, [r3, #0]
 800d276:	6862      	ldr	r2, [r4, #4]
 800d278:	2100      	movs	r1, #0
 800d27a:	4630      	mov	r0, r6
 800d27c:	f7f2 ffc8 	bl	8000210 <memchr>
 800d280:	b108      	cbz	r0, 800d286 <_printf_i+0x1e6>
 800d282:	1b80      	subs	r0, r0, r6
 800d284:	6060      	str	r0, [r4, #4]
 800d286:	6863      	ldr	r3, [r4, #4]
 800d288:	6123      	str	r3, [r4, #16]
 800d28a:	2300      	movs	r3, #0
 800d28c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d290:	e7aa      	b.n	800d1e8 <_printf_i+0x148>
 800d292:	6923      	ldr	r3, [r4, #16]
 800d294:	4632      	mov	r2, r6
 800d296:	4649      	mov	r1, r9
 800d298:	4640      	mov	r0, r8
 800d29a:	47d0      	blx	sl
 800d29c:	3001      	adds	r0, #1
 800d29e:	d0ad      	beq.n	800d1fc <_printf_i+0x15c>
 800d2a0:	6823      	ldr	r3, [r4, #0]
 800d2a2:	079b      	lsls	r3, r3, #30
 800d2a4:	d413      	bmi.n	800d2ce <_printf_i+0x22e>
 800d2a6:	68e0      	ldr	r0, [r4, #12]
 800d2a8:	9b03      	ldr	r3, [sp, #12]
 800d2aa:	4298      	cmp	r0, r3
 800d2ac:	bfb8      	it	lt
 800d2ae:	4618      	movlt	r0, r3
 800d2b0:	e7a6      	b.n	800d200 <_printf_i+0x160>
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	4632      	mov	r2, r6
 800d2b6:	4649      	mov	r1, r9
 800d2b8:	4640      	mov	r0, r8
 800d2ba:	47d0      	blx	sl
 800d2bc:	3001      	adds	r0, #1
 800d2be:	d09d      	beq.n	800d1fc <_printf_i+0x15c>
 800d2c0:	3501      	adds	r5, #1
 800d2c2:	68e3      	ldr	r3, [r4, #12]
 800d2c4:	9903      	ldr	r1, [sp, #12]
 800d2c6:	1a5b      	subs	r3, r3, r1
 800d2c8:	42ab      	cmp	r3, r5
 800d2ca:	dcf2      	bgt.n	800d2b2 <_printf_i+0x212>
 800d2cc:	e7eb      	b.n	800d2a6 <_printf_i+0x206>
 800d2ce:	2500      	movs	r5, #0
 800d2d0:	f104 0619 	add.w	r6, r4, #25
 800d2d4:	e7f5      	b.n	800d2c2 <_printf_i+0x222>
 800d2d6:	bf00      	nop
 800d2d8:	0801068e 	.word	0x0801068e
 800d2dc:	0801069f 	.word	0x0801069f

0800d2e0 <__sflush_r>:
 800d2e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2e8:	0716      	lsls	r6, r2, #28
 800d2ea:	4605      	mov	r5, r0
 800d2ec:	460c      	mov	r4, r1
 800d2ee:	d454      	bmi.n	800d39a <__sflush_r+0xba>
 800d2f0:	684b      	ldr	r3, [r1, #4]
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	dc02      	bgt.n	800d2fc <__sflush_r+0x1c>
 800d2f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	dd48      	ble.n	800d38e <__sflush_r+0xae>
 800d2fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d2fe:	2e00      	cmp	r6, #0
 800d300:	d045      	beq.n	800d38e <__sflush_r+0xae>
 800d302:	2300      	movs	r3, #0
 800d304:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d308:	682f      	ldr	r7, [r5, #0]
 800d30a:	6a21      	ldr	r1, [r4, #32]
 800d30c:	602b      	str	r3, [r5, #0]
 800d30e:	d030      	beq.n	800d372 <__sflush_r+0x92>
 800d310:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d312:	89a3      	ldrh	r3, [r4, #12]
 800d314:	0759      	lsls	r1, r3, #29
 800d316:	d505      	bpl.n	800d324 <__sflush_r+0x44>
 800d318:	6863      	ldr	r3, [r4, #4]
 800d31a:	1ad2      	subs	r2, r2, r3
 800d31c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d31e:	b10b      	cbz	r3, 800d324 <__sflush_r+0x44>
 800d320:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d322:	1ad2      	subs	r2, r2, r3
 800d324:	2300      	movs	r3, #0
 800d326:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d328:	6a21      	ldr	r1, [r4, #32]
 800d32a:	4628      	mov	r0, r5
 800d32c:	47b0      	blx	r6
 800d32e:	1c43      	adds	r3, r0, #1
 800d330:	89a3      	ldrh	r3, [r4, #12]
 800d332:	d106      	bne.n	800d342 <__sflush_r+0x62>
 800d334:	6829      	ldr	r1, [r5, #0]
 800d336:	291d      	cmp	r1, #29
 800d338:	d82b      	bhi.n	800d392 <__sflush_r+0xb2>
 800d33a:	4a2a      	ldr	r2, [pc, #168]	@ (800d3e4 <__sflush_r+0x104>)
 800d33c:	410a      	asrs	r2, r1
 800d33e:	07d6      	lsls	r6, r2, #31
 800d340:	d427      	bmi.n	800d392 <__sflush_r+0xb2>
 800d342:	2200      	movs	r2, #0
 800d344:	6062      	str	r2, [r4, #4]
 800d346:	04d9      	lsls	r1, r3, #19
 800d348:	6922      	ldr	r2, [r4, #16]
 800d34a:	6022      	str	r2, [r4, #0]
 800d34c:	d504      	bpl.n	800d358 <__sflush_r+0x78>
 800d34e:	1c42      	adds	r2, r0, #1
 800d350:	d101      	bne.n	800d356 <__sflush_r+0x76>
 800d352:	682b      	ldr	r3, [r5, #0]
 800d354:	b903      	cbnz	r3, 800d358 <__sflush_r+0x78>
 800d356:	6560      	str	r0, [r4, #84]	@ 0x54
 800d358:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d35a:	602f      	str	r7, [r5, #0]
 800d35c:	b1b9      	cbz	r1, 800d38e <__sflush_r+0xae>
 800d35e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d362:	4299      	cmp	r1, r3
 800d364:	d002      	beq.n	800d36c <__sflush_r+0x8c>
 800d366:	4628      	mov	r0, r5
 800d368:	f7ff fbd4 	bl	800cb14 <_free_r>
 800d36c:	2300      	movs	r3, #0
 800d36e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d370:	e00d      	b.n	800d38e <__sflush_r+0xae>
 800d372:	2301      	movs	r3, #1
 800d374:	4628      	mov	r0, r5
 800d376:	47b0      	blx	r6
 800d378:	4602      	mov	r2, r0
 800d37a:	1c50      	adds	r0, r2, #1
 800d37c:	d1c9      	bne.n	800d312 <__sflush_r+0x32>
 800d37e:	682b      	ldr	r3, [r5, #0]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d0c6      	beq.n	800d312 <__sflush_r+0x32>
 800d384:	2b1d      	cmp	r3, #29
 800d386:	d001      	beq.n	800d38c <__sflush_r+0xac>
 800d388:	2b16      	cmp	r3, #22
 800d38a:	d11e      	bne.n	800d3ca <__sflush_r+0xea>
 800d38c:	602f      	str	r7, [r5, #0]
 800d38e:	2000      	movs	r0, #0
 800d390:	e022      	b.n	800d3d8 <__sflush_r+0xf8>
 800d392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d396:	b21b      	sxth	r3, r3
 800d398:	e01b      	b.n	800d3d2 <__sflush_r+0xf2>
 800d39a:	690f      	ldr	r7, [r1, #16]
 800d39c:	2f00      	cmp	r7, #0
 800d39e:	d0f6      	beq.n	800d38e <__sflush_r+0xae>
 800d3a0:	0793      	lsls	r3, r2, #30
 800d3a2:	680e      	ldr	r6, [r1, #0]
 800d3a4:	bf08      	it	eq
 800d3a6:	694b      	ldreq	r3, [r1, #20]
 800d3a8:	600f      	str	r7, [r1, #0]
 800d3aa:	bf18      	it	ne
 800d3ac:	2300      	movne	r3, #0
 800d3ae:	eba6 0807 	sub.w	r8, r6, r7
 800d3b2:	608b      	str	r3, [r1, #8]
 800d3b4:	f1b8 0f00 	cmp.w	r8, #0
 800d3b8:	dde9      	ble.n	800d38e <__sflush_r+0xae>
 800d3ba:	6a21      	ldr	r1, [r4, #32]
 800d3bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d3be:	4643      	mov	r3, r8
 800d3c0:	463a      	mov	r2, r7
 800d3c2:	4628      	mov	r0, r5
 800d3c4:	47b0      	blx	r6
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	dc08      	bgt.n	800d3dc <__sflush_r+0xfc>
 800d3ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d3d2:	81a3      	strh	r3, [r4, #12]
 800d3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3dc:	4407      	add	r7, r0
 800d3de:	eba8 0800 	sub.w	r8, r8, r0
 800d3e2:	e7e7      	b.n	800d3b4 <__sflush_r+0xd4>
 800d3e4:	dfbffffe 	.word	0xdfbffffe

0800d3e8 <_fflush_r>:
 800d3e8:	b538      	push	{r3, r4, r5, lr}
 800d3ea:	690b      	ldr	r3, [r1, #16]
 800d3ec:	4605      	mov	r5, r0
 800d3ee:	460c      	mov	r4, r1
 800d3f0:	b913      	cbnz	r3, 800d3f8 <_fflush_r+0x10>
 800d3f2:	2500      	movs	r5, #0
 800d3f4:	4628      	mov	r0, r5
 800d3f6:	bd38      	pop	{r3, r4, r5, pc}
 800d3f8:	b118      	cbz	r0, 800d402 <_fflush_r+0x1a>
 800d3fa:	6a03      	ldr	r3, [r0, #32]
 800d3fc:	b90b      	cbnz	r3, 800d402 <_fflush_r+0x1a>
 800d3fe:	f7ff f98f 	bl	800c720 <__sinit>
 800d402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d0f3      	beq.n	800d3f2 <_fflush_r+0xa>
 800d40a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d40c:	07d0      	lsls	r0, r2, #31
 800d40e:	d404      	bmi.n	800d41a <_fflush_r+0x32>
 800d410:	0599      	lsls	r1, r3, #22
 800d412:	d402      	bmi.n	800d41a <_fflush_r+0x32>
 800d414:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d416:	f7ff fb4e 	bl	800cab6 <__retarget_lock_acquire_recursive>
 800d41a:	4628      	mov	r0, r5
 800d41c:	4621      	mov	r1, r4
 800d41e:	f7ff ff5f 	bl	800d2e0 <__sflush_r>
 800d422:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d424:	07da      	lsls	r2, r3, #31
 800d426:	4605      	mov	r5, r0
 800d428:	d4e4      	bmi.n	800d3f4 <_fflush_r+0xc>
 800d42a:	89a3      	ldrh	r3, [r4, #12]
 800d42c:	059b      	lsls	r3, r3, #22
 800d42e:	d4e1      	bmi.n	800d3f4 <_fflush_r+0xc>
 800d430:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d432:	f7ff fb41 	bl	800cab8 <__retarget_lock_release_recursive>
 800d436:	e7dd      	b.n	800d3f4 <_fflush_r+0xc>

0800d438 <fiprintf>:
 800d438:	b40e      	push	{r1, r2, r3}
 800d43a:	b503      	push	{r0, r1, lr}
 800d43c:	4601      	mov	r1, r0
 800d43e:	ab03      	add	r3, sp, #12
 800d440:	4805      	ldr	r0, [pc, #20]	@ (800d458 <fiprintf+0x20>)
 800d442:	f853 2b04 	ldr.w	r2, [r3], #4
 800d446:	6800      	ldr	r0, [r0, #0]
 800d448:	9301      	str	r3, [sp, #4]
 800d44a:	f000 f875 	bl	800d538 <_vfiprintf_r>
 800d44e:	b002      	add	sp, #8
 800d450:	f85d eb04 	ldr.w	lr, [sp], #4
 800d454:	b003      	add	sp, #12
 800d456:	4770      	bx	lr
 800d458:	20000034 	.word	0x20000034

0800d45c <_sbrk_r>:
 800d45c:	b538      	push	{r3, r4, r5, lr}
 800d45e:	4d06      	ldr	r5, [pc, #24]	@ (800d478 <_sbrk_r+0x1c>)
 800d460:	2300      	movs	r3, #0
 800d462:	4604      	mov	r4, r0
 800d464:	4608      	mov	r0, r1
 800d466:	602b      	str	r3, [r5, #0]
 800d468:	f7f5 fa72 	bl	8002950 <_sbrk>
 800d46c:	1c43      	adds	r3, r0, #1
 800d46e:	d102      	bne.n	800d476 <_sbrk_r+0x1a>
 800d470:	682b      	ldr	r3, [r5, #0]
 800d472:	b103      	cbz	r3, 800d476 <_sbrk_r+0x1a>
 800d474:	6023      	str	r3, [r4, #0]
 800d476:	bd38      	pop	{r3, r4, r5, pc}
 800d478:	20006918 	.word	0x20006918

0800d47c <abort>:
 800d47c:	b508      	push	{r3, lr}
 800d47e:	2006      	movs	r0, #6
 800d480:	f000 fa2e 	bl	800d8e0 <raise>
 800d484:	2001      	movs	r0, #1
 800d486:	f7f5 f9eb 	bl	8002860 <_exit>

0800d48a <_realloc_r>:
 800d48a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d48e:	4680      	mov	r8, r0
 800d490:	4615      	mov	r5, r2
 800d492:	460c      	mov	r4, r1
 800d494:	b921      	cbnz	r1, 800d4a0 <_realloc_r+0x16>
 800d496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d49a:	4611      	mov	r1, r2
 800d49c:	f7ff bbae 	b.w	800cbfc <_malloc_r>
 800d4a0:	b92a      	cbnz	r2, 800d4ae <_realloc_r+0x24>
 800d4a2:	f7ff fb37 	bl	800cb14 <_free_r>
 800d4a6:	2400      	movs	r4, #0
 800d4a8:	4620      	mov	r0, r4
 800d4aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ae:	f000 fa33 	bl	800d918 <_malloc_usable_size_r>
 800d4b2:	4285      	cmp	r5, r0
 800d4b4:	4606      	mov	r6, r0
 800d4b6:	d802      	bhi.n	800d4be <_realloc_r+0x34>
 800d4b8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d4bc:	d8f4      	bhi.n	800d4a8 <_realloc_r+0x1e>
 800d4be:	4629      	mov	r1, r5
 800d4c0:	4640      	mov	r0, r8
 800d4c2:	f7ff fb9b 	bl	800cbfc <_malloc_r>
 800d4c6:	4607      	mov	r7, r0
 800d4c8:	2800      	cmp	r0, #0
 800d4ca:	d0ec      	beq.n	800d4a6 <_realloc_r+0x1c>
 800d4cc:	42b5      	cmp	r5, r6
 800d4ce:	462a      	mov	r2, r5
 800d4d0:	4621      	mov	r1, r4
 800d4d2:	bf28      	it	cs
 800d4d4:	4632      	movcs	r2, r6
 800d4d6:	f7ff faf0 	bl	800caba <memcpy>
 800d4da:	4621      	mov	r1, r4
 800d4dc:	4640      	mov	r0, r8
 800d4de:	f7ff fb19 	bl	800cb14 <_free_r>
 800d4e2:	463c      	mov	r4, r7
 800d4e4:	e7e0      	b.n	800d4a8 <_realloc_r+0x1e>

0800d4e6 <__sfputc_r>:
 800d4e6:	6893      	ldr	r3, [r2, #8]
 800d4e8:	3b01      	subs	r3, #1
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	b410      	push	{r4}
 800d4ee:	6093      	str	r3, [r2, #8]
 800d4f0:	da08      	bge.n	800d504 <__sfputc_r+0x1e>
 800d4f2:	6994      	ldr	r4, [r2, #24]
 800d4f4:	42a3      	cmp	r3, r4
 800d4f6:	db01      	blt.n	800d4fc <__sfputc_r+0x16>
 800d4f8:	290a      	cmp	r1, #10
 800d4fa:	d103      	bne.n	800d504 <__sfputc_r+0x1e>
 800d4fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d500:	f000 b932 	b.w	800d768 <__swbuf_r>
 800d504:	6813      	ldr	r3, [r2, #0]
 800d506:	1c58      	adds	r0, r3, #1
 800d508:	6010      	str	r0, [r2, #0]
 800d50a:	7019      	strb	r1, [r3, #0]
 800d50c:	4608      	mov	r0, r1
 800d50e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d512:	4770      	bx	lr

0800d514 <__sfputs_r>:
 800d514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d516:	4606      	mov	r6, r0
 800d518:	460f      	mov	r7, r1
 800d51a:	4614      	mov	r4, r2
 800d51c:	18d5      	adds	r5, r2, r3
 800d51e:	42ac      	cmp	r4, r5
 800d520:	d101      	bne.n	800d526 <__sfputs_r+0x12>
 800d522:	2000      	movs	r0, #0
 800d524:	e007      	b.n	800d536 <__sfputs_r+0x22>
 800d526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d52a:	463a      	mov	r2, r7
 800d52c:	4630      	mov	r0, r6
 800d52e:	f7ff ffda 	bl	800d4e6 <__sfputc_r>
 800d532:	1c43      	adds	r3, r0, #1
 800d534:	d1f3      	bne.n	800d51e <__sfputs_r+0xa>
 800d536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d538 <_vfiprintf_r>:
 800d538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d53c:	460d      	mov	r5, r1
 800d53e:	b09d      	sub	sp, #116	@ 0x74
 800d540:	4614      	mov	r4, r2
 800d542:	4698      	mov	r8, r3
 800d544:	4606      	mov	r6, r0
 800d546:	b118      	cbz	r0, 800d550 <_vfiprintf_r+0x18>
 800d548:	6a03      	ldr	r3, [r0, #32]
 800d54a:	b90b      	cbnz	r3, 800d550 <_vfiprintf_r+0x18>
 800d54c:	f7ff f8e8 	bl	800c720 <__sinit>
 800d550:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d552:	07d9      	lsls	r1, r3, #31
 800d554:	d405      	bmi.n	800d562 <_vfiprintf_r+0x2a>
 800d556:	89ab      	ldrh	r3, [r5, #12]
 800d558:	059a      	lsls	r2, r3, #22
 800d55a:	d402      	bmi.n	800d562 <_vfiprintf_r+0x2a>
 800d55c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d55e:	f7ff faaa 	bl	800cab6 <__retarget_lock_acquire_recursive>
 800d562:	89ab      	ldrh	r3, [r5, #12]
 800d564:	071b      	lsls	r3, r3, #28
 800d566:	d501      	bpl.n	800d56c <_vfiprintf_r+0x34>
 800d568:	692b      	ldr	r3, [r5, #16]
 800d56a:	b99b      	cbnz	r3, 800d594 <_vfiprintf_r+0x5c>
 800d56c:	4629      	mov	r1, r5
 800d56e:	4630      	mov	r0, r6
 800d570:	f000 f938 	bl	800d7e4 <__swsetup_r>
 800d574:	b170      	cbz	r0, 800d594 <_vfiprintf_r+0x5c>
 800d576:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d578:	07dc      	lsls	r4, r3, #31
 800d57a:	d504      	bpl.n	800d586 <_vfiprintf_r+0x4e>
 800d57c:	f04f 30ff 	mov.w	r0, #4294967295
 800d580:	b01d      	add	sp, #116	@ 0x74
 800d582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d586:	89ab      	ldrh	r3, [r5, #12]
 800d588:	0598      	lsls	r0, r3, #22
 800d58a:	d4f7      	bmi.n	800d57c <_vfiprintf_r+0x44>
 800d58c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d58e:	f7ff fa93 	bl	800cab8 <__retarget_lock_release_recursive>
 800d592:	e7f3      	b.n	800d57c <_vfiprintf_r+0x44>
 800d594:	2300      	movs	r3, #0
 800d596:	9309      	str	r3, [sp, #36]	@ 0x24
 800d598:	2320      	movs	r3, #32
 800d59a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d59e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5a2:	2330      	movs	r3, #48	@ 0x30
 800d5a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d754 <_vfiprintf_r+0x21c>
 800d5a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d5ac:	f04f 0901 	mov.w	r9, #1
 800d5b0:	4623      	mov	r3, r4
 800d5b2:	469a      	mov	sl, r3
 800d5b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5b8:	b10a      	cbz	r2, 800d5be <_vfiprintf_r+0x86>
 800d5ba:	2a25      	cmp	r2, #37	@ 0x25
 800d5bc:	d1f9      	bne.n	800d5b2 <_vfiprintf_r+0x7a>
 800d5be:	ebba 0b04 	subs.w	fp, sl, r4
 800d5c2:	d00b      	beq.n	800d5dc <_vfiprintf_r+0xa4>
 800d5c4:	465b      	mov	r3, fp
 800d5c6:	4622      	mov	r2, r4
 800d5c8:	4629      	mov	r1, r5
 800d5ca:	4630      	mov	r0, r6
 800d5cc:	f7ff ffa2 	bl	800d514 <__sfputs_r>
 800d5d0:	3001      	adds	r0, #1
 800d5d2:	f000 80a7 	beq.w	800d724 <_vfiprintf_r+0x1ec>
 800d5d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5d8:	445a      	add	r2, fp
 800d5da:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5dc:	f89a 3000 	ldrb.w	r3, [sl]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	f000 809f 	beq.w	800d724 <_vfiprintf_r+0x1ec>
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d5ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5f0:	f10a 0a01 	add.w	sl, sl, #1
 800d5f4:	9304      	str	r3, [sp, #16]
 800d5f6:	9307      	str	r3, [sp, #28]
 800d5f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d5fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800d5fe:	4654      	mov	r4, sl
 800d600:	2205      	movs	r2, #5
 800d602:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d606:	4853      	ldr	r0, [pc, #332]	@ (800d754 <_vfiprintf_r+0x21c>)
 800d608:	f7f2 fe02 	bl	8000210 <memchr>
 800d60c:	9a04      	ldr	r2, [sp, #16]
 800d60e:	b9d8      	cbnz	r0, 800d648 <_vfiprintf_r+0x110>
 800d610:	06d1      	lsls	r1, r2, #27
 800d612:	bf44      	itt	mi
 800d614:	2320      	movmi	r3, #32
 800d616:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d61a:	0713      	lsls	r3, r2, #28
 800d61c:	bf44      	itt	mi
 800d61e:	232b      	movmi	r3, #43	@ 0x2b
 800d620:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d624:	f89a 3000 	ldrb.w	r3, [sl]
 800d628:	2b2a      	cmp	r3, #42	@ 0x2a
 800d62a:	d015      	beq.n	800d658 <_vfiprintf_r+0x120>
 800d62c:	9a07      	ldr	r2, [sp, #28]
 800d62e:	4654      	mov	r4, sl
 800d630:	2000      	movs	r0, #0
 800d632:	f04f 0c0a 	mov.w	ip, #10
 800d636:	4621      	mov	r1, r4
 800d638:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d63c:	3b30      	subs	r3, #48	@ 0x30
 800d63e:	2b09      	cmp	r3, #9
 800d640:	d94b      	bls.n	800d6da <_vfiprintf_r+0x1a2>
 800d642:	b1b0      	cbz	r0, 800d672 <_vfiprintf_r+0x13a>
 800d644:	9207      	str	r2, [sp, #28]
 800d646:	e014      	b.n	800d672 <_vfiprintf_r+0x13a>
 800d648:	eba0 0308 	sub.w	r3, r0, r8
 800d64c:	fa09 f303 	lsl.w	r3, r9, r3
 800d650:	4313      	orrs	r3, r2
 800d652:	9304      	str	r3, [sp, #16]
 800d654:	46a2      	mov	sl, r4
 800d656:	e7d2      	b.n	800d5fe <_vfiprintf_r+0xc6>
 800d658:	9b03      	ldr	r3, [sp, #12]
 800d65a:	1d19      	adds	r1, r3, #4
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	9103      	str	r1, [sp, #12]
 800d660:	2b00      	cmp	r3, #0
 800d662:	bfbb      	ittet	lt
 800d664:	425b      	neglt	r3, r3
 800d666:	f042 0202 	orrlt.w	r2, r2, #2
 800d66a:	9307      	strge	r3, [sp, #28]
 800d66c:	9307      	strlt	r3, [sp, #28]
 800d66e:	bfb8      	it	lt
 800d670:	9204      	strlt	r2, [sp, #16]
 800d672:	7823      	ldrb	r3, [r4, #0]
 800d674:	2b2e      	cmp	r3, #46	@ 0x2e
 800d676:	d10a      	bne.n	800d68e <_vfiprintf_r+0x156>
 800d678:	7863      	ldrb	r3, [r4, #1]
 800d67a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d67c:	d132      	bne.n	800d6e4 <_vfiprintf_r+0x1ac>
 800d67e:	9b03      	ldr	r3, [sp, #12]
 800d680:	1d1a      	adds	r2, r3, #4
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	9203      	str	r2, [sp, #12]
 800d686:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d68a:	3402      	adds	r4, #2
 800d68c:	9305      	str	r3, [sp, #20]
 800d68e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d764 <_vfiprintf_r+0x22c>
 800d692:	7821      	ldrb	r1, [r4, #0]
 800d694:	2203      	movs	r2, #3
 800d696:	4650      	mov	r0, sl
 800d698:	f7f2 fdba 	bl	8000210 <memchr>
 800d69c:	b138      	cbz	r0, 800d6ae <_vfiprintf_r+0x176>
 800d69e:	9b04      	ldr	r3, [sp, #16]
 800d6a0:	eba0 000a 	sub.w	r0, r0, sl
 800d6a4:	2240      	movs	r2, #64	@ 0x40
 800d6a6:	4082      	lsls	r2, r0
 800d6a8:	4313      	orrs	r3, r2
 800d6aa:	3401      	adds	r4, #1
 800d6ac:	9304      	str	r3, [sp, #16]
 800d6ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6b2:	4829      	ldr	r0, [pc, #164]	@ (800d758 <_vfiprintf_r+0x220>)
 800d6b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d6b8:	2206      	movs	r2, #6
 800d6ba:	f7f2 fda9 	bl	8000210 <memchr>
 800d6be:	2800      	cmp	r0, #0
 800d6c0:	d03f      	beq.n	800d742 <_vfiprintf_r+0x20a>
 800d6c2:	4b26      	ldr	r3, [pc, #152]	@ (800d75c <_vfiprintf_r+0x224>)
 800d6c4:	bb1b      	cbnz	r3, 800d70e <_vfiprintf_r+0x1d6>
 800d6c6:	9b03      	ldr	r3, [sp, #12]
 800d6c8:	3307      	adds	r3, #7
 800d6ca:	f023 0307 	bic.w	r3, r3, #7
 800d6ce:	3308      	adds	r3, #8
 800d6d0:	9303      	str	r3, [sp, #12]
 800d6d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6d4:	443b      	add	r3, r7
 800d6d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6d8:	e76a      	b.n	800d5b0 <_vfiprintf_r+0x78>
 800d6da:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6de:	460c      	mov	r4, r1
 800d6e0:	2001      	movs	r0, #1
 800d6e2:	e7a8      	b.n	800d636 <_vfiprintf_r+0xfe>
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	3401      	adds	r4, #1
 800d6e8:	9305      	str	r3, [sp, #20]
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	f04f 0c0a 	mov.w	ip, #10
 800d6f0:	4620      	mov	r0, r4
 800d6f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6f6:	3a30      	subs	r2, #48	@ 0x30
 800d6f8:	2a09      	cmp	r2, #9
 800d6fa:	d903      	bls.n	800d704 <_vfiprintf_r+0x1cc>
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d0c6      	beq.n	800d68e <_vfiprintf_r+0x156>
 800d700:	9105      	str	r1, [sp, #20]
 800d702:	e7c4      	b.n	800d68e <_vfiprintf_r+0x156>
 800d704:	fb0c 2101 	mla	r1, ip, r1, r2
 800d708:	4604      	mov	r4, r0
 800d70a:	2301      	movs	r3, #1
 800d70c:	e7f0      	b.n	800d6f0 <_vfiprintf_r+0x1b8>
 800d70e:	ab03      	add	r3, sp, #12
 800d710:	9300      	str	r3, [sp, #0]
 800d712:	462a      	mov	r2, r5
 800d714:	4b12      	ldr	r3, [pc, #72]	@ (800d760 <_vfiprintf_r+0x228>)
 800d716:	a904      	add	r1, sp, #16
 800d718:	4630      	mov	r0, r6
 800d71a:	f3af 8000 	nop.w
 800d71e:	4607      	mov	r7, r0
 800d720:	1c78      	adds	r0, r7, #1
 800d722:	d1d6      	bne.n	800d6d2 <_vfiprintf_r+0x19a>
 800d724:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d726:	07d9      	lsls	r1, r3, #31
 800d728:	d405      	bmi.n	800d736 <_vfiprintf_r+0x1fe>
 800d72a:	89ab      	ldrh	r3, [r5, #12]
 800d72c:	059a      	lsls	r2, r3, #22
 800d72e:	d402      	bmi.n	800d736 <_vfiprintf_r+0x1fe>
 800d730:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d732:	f7ff f9c1 	bl	800cab8 <__retarget_lock_release_recursive>
 800d736:	89ab      	ldrh	r3, [r5, #12]
 800d738:	065b      	lsls	r3, r3, #25
 800d73a:	f53f af1f 	bmi.w	800d57c <_vfiprintf_r+0x44>
 800d73e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d740:	e71e      	b.n	800d580 <_vfiprintf_r+0x48>
 800d742:	ab03      	add	r3, sp, #12
 800d744:	9300      	str	r3, [sp, #0]
 800d746:	462a      	mov	r2, r5
 800d748:	4b05      	ldr	r3, [pc, #20]	@ (800d760 <_vfiprintf_r+0x228>)
 800d74a:	a904      	add	r1, sp, #16
 800d74c:	4630      	mov	r0, r6
 800d74e:	f7ff fca7 	bl	800d0a0 <_printf_i>
 800d752:	e7e4      	b.n	800d71e <_vfiprintf_r+0x1e6>
 800d754:	0801067d 	.word	0x0801067d
 800d758:	08010687 	.word	0x08010687
 800d75c:	00000000 	.word	0x00000000
 800d760:	0800d515 	.word	0x0800d515
 800d764:	08010683 	.word	0x08010683

0800d768 <__swbuf_r>:
 800d768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d76a:	460e      	mov	r6, r1
 800d76c:	4614      	mov	r4, r2
 800d76e:	4605      	mov	r5, r0
 800d770:	b118      	cbz	r0, 800d77a <__swbuf_r+0x12>
 800d772:	6a03      	ldr	r3, [r0, #32]
 800d774:	b90b      	cbnz	r3, 800d77a <__swbuf_r+0x12>
 800d776:	f7fe ffd3 	bl	800c720 <__sinit>
 800d77a:	69a3      	ldr	r3, [r4, #24]
 800d77c:	60a3      	str	r3, [r4, #8]
 800d77e:	89a3      	ldrh	r3, [r4, #12]
 800d780:	071a      	lsls	r2, r3, #28
 800d782:	d501      	bpl.n	800d788 <__swbuf_r+0x20>
 800d784:	6923      	ldr	r3, [r4, #16]
 800d786:	b943      	cbnz	r3, 800d79a <__swbuf_r+0x32>
 800d788:	4621      	mov	r1, r4
 800d78a:	4628      	mov	r0, r5
 800d78c:	f000 f82a 	bl	800d7e4 <__swsetup_r>
 800d790:	b118      	cbz	r0, 800d79a <__swbuf_r+0x32>
 800d792:	f04f 37ff 	mov.w	r7, #4294967295
 800d796:	4638      	mov	r0, r7
 800d798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d79a:	6823      	ldr	r3, [r4, #0]
 800d79c:	6922      	ldr	r2, [r4, #16]
 800d79e:	1a98      	subs	r0, r3, r2
 800d7a0:	6963      	ldr	r3, [r4, #20]
 800d7a2:	b2f6      	uxtb	r6, r6
 800d7a4:	4283      	cmp	r3, r0
 800d7a6:	4637      	mov	r7, r6
 800d7a8:	dc05      	bgt.n	800d7b6 <__swbuf_r+0x4e>
 800d7aa:	4621      	mov	r1, r4
 800d7ac:	4628      	mov	r0, r5
 800d7ae:	f7ff fe1b 	bl	800d3e8 <_fflush_r>
 800d7b2:	2800      	cmp	r0, #0
 800d7b4:	d1ed      	bne.n	800d792 <__swbuf_r+0x2a>
 800d7b6:	68a3      	ldr	r3, [r4, #8]
 800d7b8:	3b01      	subs	r3, #1
 800d7ba:	60a3      	str	r3, [r4, #8]
 800d7bc:	6823      	ldr	r3, [r4, #0]
 800d7be:	1c5a      	adds	r2, r3, #1
 800d7c0:	6022      	str	r2, [r4, #0]
 800d7c2:	701e      	strb	r6, [r3, #0]
 800d7c4:	6962      	ldr	r2, [r4, #20]
 800d7c6:	1c43      	adds	r3, r0, #1
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d004      	beq.n	800d7d6 <__swbuf_r+0x6e>
 800d7cc:	89a3      	ldrh	r3, [r4, #12]
 800d7ce:	07db      	lsls	r3, r3, #31
 800d7d0:	d5e1      	bpl.n	800d796 <__swbuf_r+0x2e>
 800d7d2:	2e0a      	cmp	r6, #10
 800d7d4:	d1df      	bne.n	800d796 <__swbuf_r+0x2e>
 800d7d6:	4621      	mov	r1, r4
 800d7d8:	4628      	mov	r0, r5
 800d7da:	f7ff fe05 	bl	800d3e8 <_fflush_r>
 800d7de:	2800      	cmp	r0, #0
 800d7e0:	d0d9      	beq.n	800d796 <__swbuf_r+0x2e>
 800d7e2:	e7d6      	b.n	800d792 <__swbuf_r+0x2a>

0800d7e4 <__swsetup_r>:
 800d7e4:	b538      	push	{r3, r4, r5, lr}
 800d7e6:	4b29      	ldr	r3, [pc, #164]	@ (800d88c <__swsetup_r+0xa8>)
 800d7e8:	4605      	mov	r5, r0
 800d7ea:	6818      	ldr	r0, [r3, #0]
 800d7ec:	460c      	mov	r4, r1
 800d7ee:	b118      	cbz	r0, 800d7f8 <__swsetup_r+0x14>
 800d7f0:	6a03      	ldr	r3, [r0, #32]
 800d7f2:	b90b      	cbnz	r3, 800d7f8 <__swsetup_r+0x14>
 800d7f4:	f7fe ff94 	bl	800c720 <__sinit>
 800d7f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7fc:	0719      	lsls	r1, r3, #28
 800d7fe:	d422      	bmi.n	800d846 <__swsetup_r+0x62>
 800d800:	06da      	lsls	r2, r3, #27
 800d802:	d407      	bmi.n	800d814 <__swsetup_r+0x30>
 800d804:	2209      	movs	r2, #9
 800d806:	602a      	str	r2, [r5, #0]
 800d808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d80c:	81a3      	strh	r3, [r4, #12]
 800d80e:	f04f 30ff 	mov.w	r0, #4294967295
 800d812:	e033      	b.n	800d87c <__swsetup_r+0x98>
 800d814:	0758      	lsls	r0, r3, #29
 800d816:	d512      	bpl.n	800d83e <__swsetup_r+0x5a>
 800d818:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d81a:	b141      	cbz	r1, 800d82e <__swsetup_r+0x4a>
 800d81c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d820:	4299      	cmp	r1, r3
 800d822:	d002      	beq.n	800d82a <__swsetup_r+0x46>
 800d824:	4628      	mov	r0, r5
 800d826:	f7ff f975 	bl	800cb14 <_free_r>
 800d82a:	2300      	movs	r3, #0
 800d82c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d82e:	89a3      	ldrh	r3, [r4, #12]
 800d830:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d834:	81a3      	strh	r3, [r4, #12]
 800d836:	2300      	movs	r3, #0
 800d838:	6063      	str	r3, [r4, #4]
 800d83a:	6923      	ldr	r3, [r4, #16]
 800d83c:	6023      	str	r3, [r4, #0]
 800d83e:	89a3      	ldrh	r3, [r4, #12]
 800d840:	f043 0308 	orr.w	r3, r3, #8
 800d844:	81a3      	strh	r3, [r4, #12]
 800d846:	6923      	ldr	r3, [r4, #16]
 800d848:	b94b      	cbnz	r3, 800d85e <__swsetup_r+0x7a>
 800d84a:	89a3      	ldrh	r3, [r4, #12]
 800d84c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d854:	d003      	beq.n	800d85e <__swsetup_r+0x7a>
 800d856:	4621      	mov	r1, r4
 800d858:	4628      	mov	r0, r5
 800d85a:	f000 f88b 	bl	800d974 <__smakebuf_r>
 800d85e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d862:	f013 0201 	ands.w	r2, r3, #1
 800d866:	d00a      	beq.n	800d87e <__swsetup_r+0x9a>
 800d868:	2200      	movs	r2, #0
 800d86a:	60a2      	str	r2, [r4, #8]
 800d86c:	6962      	ldr	r2, [r4, #20]
 800d86e:	4252      	negs	r2, r2
 800d870:	61a2      	str	r2, [r4, #24]
 800d872:	6922      	ldr	r2, [r4, #16]
 800d874:	b942      	cbnz	r2, 800d888 <__swsetup_r+0xa4>
 800d876:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d87a:	d1c5      	bne.n	800d808 <__swsetup_r+0x24>
 800d87c:	bd38      	pop	{r3, r4, r5, pc}
 800d87e:	0799      	lsls	r1, r3, #30
 800d880:	bf58      	it	pl
 800d882:	6962      	ldrpl	r2, [r4, #20]
 800d884:	60a2      	str	r2, [r4, #8]
 800d886:	e7f4      	b.n	800d872 <__swsetup_r+0x8e>
 800d888:	2000      	movs	r0, #0
 800d88a:	e7f7      	b.n	800d87c <__swsetup_r+0x98>
 800d88c:	20000034 	.word	0x20000034

0800d890 <_raise_r>:
 800d890:	291f      	cmp	r1, #31
 800d892:	b538      	push	{r3, r4, r5, lr}
 800d894:	4605      	mov	r5, r0
 800d896:	460c      	mov	r4, r1
 800d898:	d904      	bls.n	800d8a4 <_raise_r+0x14>
 800d89a:	2316      	movs	r3, #22
 800d89c:	6003      	str	r3, [r0, #0]
 800d89e:	f04f 30ff 	mov.w	r0, #4294967295
 800d8a2:	bd38      	pop	{r3, r4, r5, pc}
 800d8a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d8a6:	b112      	cbz	r2, 800d8ae <_raise_r+0x1e>
 800d8a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d8ac:	b94b      	cbnz	r3, 800d8c2 <_raise_r+0x32>
 800d8ae:	4628      	mov	r0, r5
 800d8b0:	f000 f830 	bl	800d914 <_getpid_r>
 800d8b4:	4622      	mov	r2, r4
 800d8b6:	4601      	mov	r1, r0
 800d8b8:	4628      	mov	r0, r5
 800d8ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8be:	f000 b817 	b.w	800d8f0 <_kill_r>
 800d8c2:	2b01      	cmp	r3, #1
 800d8c4:	d00a      	beq.n	800d8dc <_raise_r+0x4c>
 800d8c6:	1c59      	adds	r1, r3, #1
 800d8c8:	d103      	bne.n	800d8d2 <_raise_r+0x42>
 800d8ca:	2316      	movs	r3, #22
 800d8cc:	6003      	str	r3, [r0, #0]
 800d8ce:	2001      	movs	r0, #1
 800d8d0:	e7e7      	b.n	800d8a2 <_raise_r+0x12>
 800d8d2:	2100      	movs	r1, #0
 800d8d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d8d8:	4620      	mov	r0, r4
 800d8da:	4798      	blx	r3
 800d8dc:	2000      	movs	r0, #0
 800d8de:	e7e0      	b.n	800d8a2 <_raise_r+0x12>

0800d8e0 <raise>:
 800d8e0:	4b02      	ldr	r3, [pc, #8]	@ (800d8ec <raise+0xc>)
 800d8e2:	4601      	mov	r1, r0
 800d8e4:	6818      	ldr	r0, [r3, #0]
 800d8e6:	f7ff bfd3 	b.w	800d890 <_raise_r>
 800d8ea:	bf00      	nop
 800d8ec:	20000034 	.word	0x20000034

0800d8f0 <_kill_r>:
 800d8f0:	b538      	push	{r3, r4, r5, lr}
 800d8f2:	4d07      	ldr	r5, [pc, #28]	@ (800d910 <_kill_r+0x20>)
 800d8f4:	2300      	movs	r3, #0
 800d8f6:	4604      	mov	r4, r0
 800d8f8:	4608      	mov	r0, r1
 800d8fa:	4611      	mov	r1, r2
 800d8fc:	602b      	str	r3, [r5, #0]
 800d8fe:	f7f4 ff9f 	bl	8002840 <_kill>
 800d902:	1c43      	adds	r3, r0, #1
 800d904:	d102      	bne.n	800d90c <_kill_r+0x1c>
 800d906:	682b      	ldr	r3, [r5, #0]
 800d908:	b103      	cbz	r3, 800d90c <_kill_r+0x1c>
 800d90a:	6023      	str	r3, [r4, #0]
 800d90c:	bd38      	pop	{r3, r4, r5, pc}
 800d90e:	bf00      	nop
 800d910:	20006918 	.word	0x20006918

0800d914 <_getpid_r>:
 800d914:	f7f4 bf8c 	b.w	8002830 <_getpid>

0800d918 <_malloc_usable_size_r>:
 800d918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d91c:	1f18      	subs	r0, r3, #4
 800d91e:	2b00      	cmp	r3, #0
 800d920:	bfbc      	itt	lt
 800d922:	580b      	ldrlt	r3, [r1, r0]
 800d924:	18c0      	addlt	r0, r0, r3
 800d926:	4770      	bx	lr

0800d928 <__swhatbuf_r>:
 800d928:	b570      	push	{r4, r5, r6, lr}
 800d92a:	460c      	mov	r4, r1
 800d92c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d930:	2900      	cmp	r1, #0
 800d932:	b096      	sub	sp, #88	@ 0x58
 800d934:	4615      	mov	r5, r2
 800d936:	461e      	mov	r6, r3
 800d938:	da0d      	bge.n	800d956 <__swhatbuf_r+0x2e>
 800d93a:	89a3      	ldrh	r3, [r4, #12]
 800d93c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d940:	f04f 0100 	mov.w	r1, #0
 800d944:	bf14      	ite	ne
 800d946:	2340      	movne	r3, #64	@ 0x40
 800d948:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d94c:	2000      	movs	r0, #0
 800d94e:	6031      	str	r1, [r6, #0]
 800d950:	602b      	str	r3, [r5, #0]
 800d952:	b016      	add	sp, #88	@ 0x58
 800d954:	bd70      	pop	{r4, r5, r6, pc}
 800d956:	466a      	mov	r2, sp
 800d958:	f000 f848 	bl	800d9ec <_fstat_r>
 800d95c:	2800      	cmp	r0, #0
 800d95e:	dbec      	blt.n	800d93a <__swhatbuf_r+0x12>
 800d960:	9901      	ldr	r1, [sp, #4]
 800d962:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d966:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d96a:	4259      	negs	r1, r3
 800d96c:	4159      	adcs	r1, r3
 800d96e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d972:	e7eb      	b.n	800d94c <__swhatbuf_r+0x24>

0800d974 <__smakebuf_r>:
 800d974:	898b      	ldrh	r3, [r1, #12]
 800d976:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d978:	079d      	lsls	r5, r3, #30
 800d97a:	4606      	mov	r6, r0
 800d97c:	460c      	mov	r4, r1
 800d97e:	d507      	bpl.n	800d990 <__smakebuf_r+0x1c>
 800d980:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d984:	6023      	str	r3, [r4, #0]
 800d986:	6123      	str	r3, [r4, #16]
 800d988:	2301      	movs	r3, #1
 800d98a:	6163      	str	r3, [r4, #20]
 800d98c:	b003      	add	sp, #12
 800d98e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d990:	ab01      	add	r3, sp, #4
 800d992:	466a      	mov	r2, sp
 800d994:	f7ff ffc8 	bl	800d928 <__swhatbuf_r>
 800d998:	9f00      	ldr	r7, [sp, #0]
 800d99a:	4605      	mov	r5, r0
 800d99c:	4639      	mov	r1, r7
 800d99e:	4630      	mov	r0, r6
 800d9a0:	f7ff f92c 	bl	800cbfc <_malloc_r>
 800d9a4:	b948      	cbnz	r0, 800d9ba <__smakebuf_r+0x46>
 800d9a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9aa:	059a      	lsls	r2, r3, #22
 800d9ac:	d4ee      	bmi.n	800d98c <__smakebuf_r+0x18>
 800d9ae:	f023 0303 	bic.w	r3, r3, #3
 800d9b2:	f043 0302 	orr.w	r3, r3, #2
 800d9b6:	81a3      	strh	r3, [r4, #12]
 800d9b8:	e7e2      	b.n	800d980 <__smakebuf_r+0xc>
 800d9ba:	89a3      	ldrh	r3, [r4, #12]
 800d9bc:	6020      	str	r0, [r4, #0]
 800d9be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9c2:	81a3      	strh	r3, [r4, #12]
 800d9c4:	9b01      	ldr	r3, [sp, #4]
 800d9c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d9ca:	b15b      	cbz	r3, 800d9e4 <__smakebuf_r+0x70>
 800d9cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9d0:	4630      	mov	r0, r6
 800d9d2:	f000 f81d 	bl	800da10 <_isatty_r>
 800d9d6:	b128      	cbz	r0, 800d9e4 <__smakebuf_r+0x70>
 800d9d8:	89a3      	ldrh	r3, [r4, #12]
 800d9da:	f023 0303 	bic.w	r3, r3, #3
 800d9de:	f043 0301 	orr.w	r3, r3, #1
 800d9e2:	81a3      	strh	r3, [r4, #12]
 800d9e4:	89a3      	ldrh	r3, [r4, #12]
 800d9e6:	431d      	orrs	r5, r3
 800d9e8:	81a5      	strh	r5, [r4, #12]
 800d9ea:	e7cf      	b.n	800d98c <__smakebuf_r+0x18>

0800d9ec <_fstat_r>:
 800d9ec:	b538      	push	{r3, r4, r5, lr}
 800d9ee:	4d07      	ldr	r5, [pc, #28]	@ (800da0c <_fstat_r+0x20>)
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	4608      	mov	r0, r1
 800d9f6:	4611      	mov	r1, r2
 800d9f8:	602b      	str	r3, [r5, #0]
 800d9fa:	f7f4 ff81 	bl	8002900 <_fstat>
 800d9fe:	1c43      	adds	r3, r0, #1
 800da00:	d102      	bne.n	800da08 <_fstat_r+0x1c>
 800da02:	682b      	ldr	r3, [r5, #0]
 800da04:	b103      	cbz	r3, 800da08 <_fstat_r+0x1c>
 800da06:	6023      	str	r3, [r4, #0]
 800da08:	bd38      	pop	{r3, r4, r5, pc}
 800da0a:	bf00      	nop
 800da0c:	20006918 	.word	0x20006918

0800da10 <_isatty_r>:
 800da10:	b538      	push	{r3, r4, r5, lr}
 800da12:	4d06      	ldr	r5, [pc, #24]	@ (800da2c <_isatty_r+0x1c>)
 800da14:	2300      	movs	r3, #0
 800da16:	4604      	mov	r4, r0
 800da18:	4608      	mov	r0, r1
 800da1a:	602b      	str	r3, [r5, #0]
 800da1c:	f7f4 ff80 	bl	8002920 <_isatty>
 800da20:	1c43      	adds	r3, r0, #1
 800da22:	d102      	bne.n	800da2a <_isatty_r+0x1a>
 800da24:	682b      	ldr	r3, [r5, #0]
 800da26:	b103      	cbz	r3, 800da2a <_isatty_r+0x1a>
 800da28:	6023      	str	r3, [r4, #0]
 800da2a:	bd38      	pop	{r3, r4, r5, pc}
 800da2c:	20006918 	.word	0x20006918

0800da30 <_init>:
 800da30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da32:	bf00      	nop
 800da34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da36:	bc08      	pop	{r3}
 800da38:	469e      	mov	lr, r3
 800da3a:	4770      	bx	lr

0800da3c <_fini>:
 800da3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da3e:	bf00      	nop
 800da40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da42:	bc08      	pop	{r3}
 800da44:	469e      	mov	lr, r3
 800da46:	4770      	bx	lr
